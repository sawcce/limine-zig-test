
kernel/zig-out/bin/kernel:     file format elf64-x86-64
kernel/zig-out/bin/kernel
architecture: i386:x86-64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xffffffff80003990

Program Header:
    LOAD off    0x0000000000001000 vaddr 0xffffffff80000000 paddr 0xffffffff80000000 align 2**12
         filesz 0x0000000000017f82 memsz 0x0000000000017f82 flags r-x
    LOAD off    0x0000000000018f88 vaddr 0xffffffff80018f88 paddr 0xffffffff80018f88 align 2**12
         filesz 0x0000000000003984 memsz 0x0000000000003984 flags r--
    LOAD off    0x000000000001c910 vaddr 0xffffffff8001d910 paddr 0xffffffff8001d910 align 2**12
         filesz 0x00000000000008f0 memsz 0x0000000000001928 flags rw-

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         00017f82  ffffffff80000000  ffffffff80000000  00001000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00003984  ffffffff80018f88  ffffffff80018f88  00018f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000008f0  ffffffff8001d910  ffffffff8001d910  0001c910  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001038  ffffffff8001e200  ffffffff8001e200  0001d200  2**3
                  ALLOC
  4 .debug_loc    00005af7  0000000000000000  0000000000000000  0001d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 000002a5  0000000000000000  0000000000000000  00022cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000dfe0  0000000000000000  0000000000000000  00022f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_ranges 00000250  0000000000000000  0000000000000000  00030f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    0000b9d4  0000000000000000  0000000000000000  000311cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_pubnames 0000439a  0000000000000000  0000000000000000  0003cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_pubtypes 00000e1b  0000000000000000  0000000000000000  00040f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_frame  00004608  0000000000000000  0000000000000000  00041d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00006823  0000000000000000  0000000000000000  00046360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .comment      00000013  0000000000000000  0000000000000000  0004cb83  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 kernel
ffffffff80000000 l     F .text	00000000000000cb target.Target.Cpu.Feature.feature_set_fns(target.x86.Feature).featureSet
ffffffff800000d0 l     F .text	00000000000000d6 target.Target.Cpu.Feature.Set.addFeature
ffffffff8001b171 l     O .rodata	000000000000001c builtin.panic_messages.cast_truncated_data__anon_1030
ffffffff800001b0 l     F .text	0000000000000017 builtin.default_panic
ffffffff800001d0 l     F .text	0000000000000037 builtin.panicOutOfBounds
ffffffff80004a10 l     F .text	00000000000001d0 debug.panicExtra__anon_1903
ffffffff80000210 l     F .text	0000000000000062 target.Target.Cpu.Arch.isWasm
ffffffff80000280 l     F .text	000000000000002d __zig_is_named_enum_value_target.Target.Cpu.Arch
ffffffff8001b19b l     O .rodata	0000000000000018 builtin.panic_messages.corrupt_switch__anon_1033
ffffffff800002b0 l     F .text	0000000000000054 fmt.format__anon_1314
ffffffff80000310 l     F .text	0000000000000037 builtin.panicStartGreaterThanEnd
ffffffff8001b1b3 l     O .rodata	0000000000000019 main._start__anon_1080
ffffffff80000350 l     F .text	0000000000000190 io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll
ffffffff80005a10 l     F .text	00000000000001d0 debug.panicExtra__anon_2462
ffffffff80005990 l     F .text	0000000000000071 io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).write
ffffffff8001b309 l     O .rodata	0000000000000011 builtin.panic_messages.integer_overflow__anon_1548
ffffffff800004e0 l     F .text	0000000000000051 main.debug_print__anon_1081
ffffffff8001b1cc l     O .rodata	000000000000000a main.debug_print__anon_1081__anon_1083
ffffffff80000540 l     F .text	00000000000000ab ports.SerialPort.write_message
ffffffff800005f0 l     F .text	0000000000000015 ports.SerialPort.writer
ffffffff80005960 l     F .text	000000000000002d ports.SerialPort.send
ffffffff80000610 l     F .text	0000000000000135 fmt.format__anon_1327
ffffffff8001b1d6 l     O .rodata	000000000000001c main._start__anon_1325
ffffffff80000750 l     F .text	0000000000000081 fmt.formatType__anon_1477
ffffffff800190d9 l     O .rodata	0000000000000001 fmt.cacheString__anon_1457
ffffffff80006740 l     F .text	00000000000000ae mem.span__anon_2771
ffffffff800067f0 l     F .text	00000000000000fa fmt.formatType__anon_2774
ffffffff80003410 l     F .text	00000000000000d1 builtin.returnError
ffffffff800007e0 l     F .text	0000000000000059 main.debug_print__anon_1326
ffffffff80000840 l     F .text	0000000000000054 fmt.format__anon_1489
ffffffff8001b1f2 l     O .rodata	0000000000000016 main._start__anon_1487
ffffffff800008a0 l     F .text	0000000000000051 main.debug_print__anon_1488
ffffffff80000900 l     F .text	00000000000000c8 fmt.format__anon_1512
ffffffff8001b208 l     O .rodata	000000000000001d main._start__anon_1510
ffffffff800009d0 l     F .text	0000000000000058 fmt.formatType__anon_1544
ffffffff80006910 l     F .text	000000000000003d fmt.formatValue__anon_2776
ffffffff80000a30 l     F .text	0000000000000059 main.debug_print__anon_1511
ffffffff80000a90 l     F .text	00000000000000f0 fmt.format__anon_1551
ffffffff80000b80 l     F .text	0000000000000058 fmt.formatType__anon_1563
ffffffff8001b225 l     O .rodata	0000000000000016 main._start__anon_1549
ffffffff80000be0 l     F .text	000000000000005c fmt.formatType__anon_1570
ffffffff80008370 l     F .text	000000000000003d fmt.formatValue__anon_2867
ffffffff80008bf0 l     F .text	0000000000000041 fmt.formatValue__anon_2874
ffffffff80000c40 l     F .text	0000000000000059 main.debug_print__anon_1550
ffffffff80000ca0 l     F .text	0000000000000085 fmt.format__anon_1576
ffffffff8001b23b l     O .rodata	000000000000000f main._start__anon_1574
ffffffff80000d30 l     F .text	00000000000000d6 fmt.formatType__anon_1609
ffffffff80019489 l     O .rodata	0000000000000001 fmt.cacheString__anon_1606
ffffffff800095e0 l     F .text	0000000000000065 fmt.formatType__anon_2887
ffffffff8001b3af l     O .rodata	0000000000000005 fmt.formatType__anon_1609__anon_2888
ffffffff80007460 l     F .text	000000000000047a fmt.formatBuf__anon_2788
ffffffff80000e10 l     F .text	0000000000000059 main.debug_print__anon_1575
ffffffff80000e70 l     F .text	0000000000000054 fmt.format__anon_1612
ffffffff8001b24a l     O .rodata	0000000000000010 main._start__anon_1610
ffffffff80000ed0 l     F .text	0000000000000051 main.debug_print__anon_1611
ffffffff80000f30 l     F .text	00000000000000c8 fmt.format__anon_1622
ffffffff8001b25a l     O .rodata	000000000000000b main._start__anon_1620
ffffffff80001000 l     F .text	0000000000000058 fmt.formatType__anon_1634
ffffffff80009650 l     F .text	000000000000039f fmt.formatType__anon_2894
ffffffff80001060 l     F .text	0000000000000059 main.debug_print__anon_1621
ffffffff800010c0 l     F .text	0000000000000137 fmt.format__anon_1649
ffffffff8001b265 l     O .rodata	000000000000000e main._start__anon_1647
ffffffff80001200 l     F .text	0000000000000058 fmt.formatType__anon_1662
ffffffff80001260 l     F .text	00000000000000ad fmt.formatType__anon_1669
ffffffff800099f0 l     F .text	000000000000074d fmt.formatType__anon_2904
ffffffff8001b3b4 l     O .rodata	0000000000000005 fmt.formatType__anon_1669__anon_2906
ffffffff8001b3b9 l     O .rodata	0000000000000006 fmt.formatType__anon_1669__anon_2907
ffffffff80001310 l     F .text	0000000000000059 main.debug_print__anon_1648
ffffffff80001370 l     F .text	0000000000000080 fmt.format__anon_1675
ffffffff800013f0 l     F .text	00000000000000db fmt.formatType__anon_1686
ffffffff8001b273 l     O .rodata	0000000000000005 main._start__anon_1673
ffffffff8001b3bf l     O .rodata	0000000000000008 fmt.formatType__anon_1686__anon_2909
ffffffff800014d0 l     F .text	0000000000000059 main.debug_print__anon_1674
ffffffff80001530 l     F .text	00000000000001a1 fmt.format__anon_1692
ffffffff8001b278 l     O .rodata	0000000000000014 main._start__anon_1690
ffffffff800016e0 l     F .text	0000000000000c37 fmt.formatType__anon_1706
ffffffff8001b3c7 l     O .rodata	000000000000001a fmt.formatType__anon_1706__anon_2935
ffffffff8001b3e1 l     O .rodata	0000000000000002 fmt.formatType__anon_1706__anon_2936
ffffffff8001b3ed l     O .rodata	0000000000000003 fmt.formatType__anon_1706__anon_2938
ffffffff8001b3e3 l     O .rodata	000000000000000a fmt.formatType__anon_1706__anon_2923
ffffffff8001b3f0 l     O .rodata	0000000000000004 fmt.formatType__anon_1706__anon_2939
ffffffff8000a140 l     F .text	000000000000020e fmt.formatType__anon_2940
ffffffff8001b3fb l     O .rodata	0000000000000004 fmt.formatType__anon_1706__anon_2941
ffffffff8001b3f4 l     O .rodata	0000000000000007 fmt.formatType__anon_1706__anon_2924
ffffffff8000a350 l     F .text	0000000000000051 fmt.formatType__anon_2942
ffffffff8001b3ff l     O .rodata	0000000000000009 fmt.formatType__anon_1706__anon_2925
ffffffff8000a3b0 l     F .text	0000000000000057 fmt.formatType__anon_2943
ffffffff8001b408 l     O .rodata	0000000000000009 fmt.formatType__anon_1706__anon_2926
ffffffff8000a410 l     F .text	0000000000000057 fmt.formatType__anon_2944
ffffffff8001b411 l     O .rodata	0000000000000006 fmt.formatType__anon_1706__anon_2927
ffffffff8000a470 l     F .text	000000000000020e fmt.formatType__anon_2945
ffffffff8001b417 l     O .rodata	000000000000000b fmt.formatType__anon_1706__anon_2928
ffffffff8000a680 l     F .text	000000000000020e fmt.formatType__anon_2946
ffffffff8001b422 l     O .rodata	000000000000000c fmt.formatType__anon_1706__anon_2929
ffffffff8000a890 l     F .text	0000000000000057 fmt.formatType__anon_2947
ffffffff8001b42e l     O .rodata	000000000000000a fmt.formatType__anon_1706__anon_2930
ffffffff8000a8f0 l     F .text	0000000000000051 fmt.formatType__anon_2948
ffffffff8001b438 l     O .rodata	0000000000000010 fmt.formatType__anon_1706__anon_2931
ffffffff8000a950 l     F .text	0000000000000051 fmt.formatType__anon_2949
ffffffff8001b448 l     O .rodata	0000000000000003 fmt.formatType__anon_1706__anon_2950
ffffffff80002320 l     F .text	0000000000000059 main.debug_print__anon_1691
ffffffff80002380 l     F .text	000000000000019f fmt.format__anon_1724
ffffffff8001b28c l     O .rodata	0000000000000014 main._start__anon_1722
ffffffff80002520 l     F .text	00000000000000d3 fmt.formatType__anon_1738
ffffffff80002600 l     F .text	00000000000000d5 fmt.formatType__anon_1751
ffffffff800026e0 l     F .text	0000000000000059 main.debug_print__anon_1723
ffffffff80002740 l     F .text	00000000000000c5 fmt.format__anon_1757
ffffffff8001b2a0 l     O .rodata	0000000000000011 main._start__anon_1755
ffffffff80002810 l     F .text	0000000000000059 main.debug_print__anon_1756
ffffffff80002870 l     F .text	00000000000000c5 fmt.format__anon_1788
ffffffff8001b2b1 l     O .rodata	000000000000000e main._start__anon_1786
ffffffff80002940 l     F .text	00000000000009cd fmt.formatType__anon_1800
ffffffff8001b44b l     O .rodata	0000000000000009 fmt.formatType__anon_1800__anon_2990
ffffffff8001b454 l     O .rodata	0000000000000007 fmt.formatType__anon_1800__anon_2973
ffffffff8000aa70 l     F .text	0000000000000057 fmt.formatType__anon_2992
ffffffff8001b45b l     O .rodata	0000000000000005 fmt.formatType__anon_1800__anon_2975
ffffffff8000aad0 l     F .text	0000000000000057 fmt.formatType__anon_2993
ffffffff8001b460 l     O .rodata	0000000000000007 fmt.formatType__anon_1800__anon_2977
ffffffff8000ab30 l     F .text	0000000000000057 fmt.formatType__anon_2994
ffffffff8001b467 l     O .rodata	0000000000000004 fmt.formatType__anon_1800__anon_2979
ffffffff8000ab90 l     F .text	0000000000000057 fmt.formatType__anon_2995
ffffffff8001b46b l     O .rodata	0000000000000006 fmt.formatType__anon_1800__anon_2981
ffffffff8000abf0 l     F .text	0000000000000057 fmt.formatType__anon_2996
ffffffff8001b471 l     O .rodata	0000000000000005 fmt.formatType__anon_1800__anon_2983
ffffffff8000ac50 l     F .text	0000000000000057 fmt.formatType__anon_2997
ffffffff8001b476 l     O .rodata	0000000000000008 fmt.formatType__anon_1800__anon_2985
ffffffff8000acb0 l     F .text	0000000000000057 fmt.formatType__anon_2998
ffffffff80003310 l     F .text	0000000000000059 main.debug_print__anon_1787
ffffffff80003370 l     F .text	0000000000000095 mem.allocate_new
ffffffff8001e230 l     O .bss	0000000000000008 mem.next_page
ffffffff800034f0 l     F .text	0000000000000085 fmt.format__anon_1807
ffffffff8001b2bf l     O .rodata	0000000000000015 main._start__anon_1805
ffffffff80003580 l     F .text	0000000000000059 main.debug_print__anon_1806
ffffffff800035e0 l     F .text	0000000000000224 fmt.format__anon_1821
ffffffff8001b2d4 l     O .rodata	0000000000000035 main._start__anon_1819
ffffffff80003810 l     F .text	0000000000000052 fmt.formatType__anon_1863
ffffffff80003870 l     F .text	0000000000000058 fmt.formatType__anon_1870
ffffffff800038d0 l     F .text	0000000000000052 fmt.formatType__anon_1898
ffffffff80019f19 l     O .rodata	0000000000000001 fmt.cacheString__anon_1860
ffffffff8000ad10 l     F .text	0000000000000063 fmt.formatAddress__anon_3000
ffffffff8000ad80 l     F .text	000000000000003d fmt.formatValue__anon_3002
ffffffff8001a039 l     O .rodata	0000000000000001 fmt.cacheString__anon_1895
ffffffff8000b7d0 l     F .text	000000000000003d fmt.formatValue__anon_3009
ffffffff80003930 l     F .text	0000000000000059 main.debug_print__anon_1820
ffffffff80004200 l     F .text	000000000000013e ports.SerialPort.init
ffffffff80004340 l     F .text	0000000000000162 idt.add_interrupt
ffffffff800044b0 l     F .text	0000000000000023 idt.load
ffffffff800044e0 l     F .text	0000000000000210 mem.init
ffffffff8001b31a l     O .rodata	000000000000001f builtin.panic_messages.cast_to_null__anon_1645
ffffffff8001b339 l     O .rodata	0000000000000014 builtin.panic_messages.incorrect_alignment__anon_1646
ffffffff800046f0 l     F .text	000000000000006d main._start.RSDPDescriptor20.doChecksum
ffffffff80004760 l     F .text	000000000000006d main._start.ACPISDTHeader.doChecksum
ffffffff800047d0 l     F .text	000000000000004e main._start.XSDT.getEntriesAmount
ffffffff80004820 l     F .text	0000000000000060 rtc.RTC.new
ffffffff80004880 l     F .text	0000000000000028 rtc.RTC.get_update_in_progress
ffffffff800048b0 l     F .text	00000000000000f6 rtc.RTC.get_date
ffffffff800049b0 l     F .text	000000000000005f mem.free
ffffffff80004e20 l     F .text	0000000000000018 ports.Port(u8).write
ffffffff8001da00 l     O .data	0000000000000800 idt.trampolines
ffffffff80004f30 l     F .text	0000000000000059 main.debug_print__anon_2426
ffffffff8001e238 l     O .bss	0000000000001000 idt.idt
ffffffff80005900 l     F .text	0000000000000059 main.debug_print__anon_2443
ffffffff800068f0 l     F .text	0000000000000014 __zig_is_named_enum_value_limine.MemoryMapEntryType
ffffffff80004e00 l     F .text	000000000000001b ports.Port(u8).new
ffffffff8000a9b0 l     F .text	00000000000000ba rtc.RTC.read_register
ffffffff8001b47e l     O .rodata	0000000000000010 debug.panicExtra__anon_1903__anon_3024
ffffffff8000b860 l     F .text	0000000000000134 fmt.bufPrint__anon_3026
ffffffff8000b9a0 l     F .text	000000000000012a mem.copy__anon_3027
ffffffff80004be0 l     F .text	000000000000021f ports.SerialPort.new
ffffffff80004e40 l     F .text	0000000000000087 fmt.format__anon_2427
ffffffff8001b34d l     O .rodata	000000000000000e idt.add_interrupt__anon_2425
ffffffff80004ed0 l     F .text	000000000000005d fmt.formatType__anon_2439
ffffffff8000e330 l     F .text	0000000000000042 fmt.formatValue__anon_3048
ffffffff80004f90 l     F .text	00000000000000c5 fmt.format__anon_2444
ffffffff8001b35b l     O .rodata	0000000000000010 idt.add_interrupt__anon_2442
ffffffff80005060 l     F .text	0000000000000895 fmt.formatType__anon_2456
ffffffff8001b49d l     O .rodata	0000000000000018 fmt.formatType__anon_2456__anon_3085
ffffffff8001b4b5 l     O .rodata	000000000000000b fmt.formatType__anon_2456__anon_3071
ffffffff8000eae0 l     F .text	0000000000000058 fmt.formatType__anon_3087
ffffffff8001b4c0 l     O .rodata	0000000000000009 fmt.formatType__anon_2456__anon_3073
ffffffff8000eb40 l     F .text	0000000000000058 fmt.formatType__anon_3088
ffffffff8001b4c9 l     O .rodata	0000000000000008 fmt.formatType__anon_2456__anon_3075
ffffffff8000eba0 l     F .text	00000000000008a9 fmt.formatType__anon_3089
ffffffff8001b4d1 l     O .rodata	000000000000000b fmt.formatType__anon_2456__anon_3077
ffffffff8000f450 l     F .text	0000000000000058 fmt.formatType__anon_3090
ffffffff8001b4dc l     O .rodata	000000000000000c fmt.formatType__anon_2456__anon_3079
ffffffff8000f4b0 l     F .text	0000000000000051 fmt.formatType__anon_3091
ffffffff8001b4e8 l     O .rodata	0000000000000009 fmt.formatType__anon_2456__anon_3081
ffffffff8000f510 l     F .text	0000000000000051 fmt.formatType__anon_3092
ffffffff8000f570 l     F .text	0000000000000134 fmt.bufPrint__anon_3093
ffffffff80005be0 l     F .text	000000000000004e fmt.ArgState.hasUnusedArgs
ffffffff80005c30 l     F .text	000000000000003f debug.assert
ffffffff8001b36b l     O .rodata	0000000000000019 builtin.panic_messages.unreach__anon_2463
ffffffff80005c70 l     F .text	00000000000001bb fmt.Parser.specifier
ffffffff80005e30 l     F .text	00000000000000e8 fmt.Parser.maybe
ffffffff80005f20 l     F .text	00000000000001b7 fmt.Parser.until
ffffffff800060e0 l     F .text	00000000000002cd fmt.Parser.number
ffffffff8001b384 l     O .rodata	000000000000001a builtin.panic_messages.unwrap_null__anon_2465
ffffffff800063b0 l     F .text	00000000000000f9 fmt.Parser.char
ffffffff800064b0 l     F .text	0000000000000109 fmt.Parser.peek
ffffffff800065c0 l     F .text	0000000000000175 fmt.ArgState.nextArg
ffffffff8000f6b0 l     F .text	000000000000002b mem.len__anon_3095
ffffffff8001a750 l     O .rodata	0000000000000001 mem.span__anon_2771__anon_3096
ffffffff8000f6e0 l     F .text	0000000000000039 builtin.panicSentinelMismatch__anon_3097
ffffffff80006950 l     F .text	0000000000000050 fmt.formatIntValue__anon_2779
ffffffff800069a0 l     F .text	00000000000007c1 fmt.formatInt__anon_2783
ffffffff80007170 l     F .text	0000000000000012 math.absCast__anon_2785
ffffffff80007190 l     F .text	0000000000000014 fmt.isComptime
ffffffff800071b0 l     F .text	0000000000000166 fmt.digits2
ffffffff8001b39e l     O .rodata	0000000000000011 builtin.panic_messages.divide_by_zero__anon_2787
ffffffff80007320 l     F .text	0000000000000133 fmt.digitToChar
ffffffff8001b4f5 l     O .rodata	00000000000000c9 fmt.digits2__anon_3112
ffffffff800079d0 l     F .text	0000000000000677 unicode.utf8CountCodepoints
ffffffff800081a0 l     F .text	00000000000001c6 io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes
ffffffff800078e0 l     F .text	00000000000000e1 unicode.utf8ByteSequenceLength
ffffffff80008050 l     F .text	0000000000000012 mem.readIntNative__anon_2862
ffffffff80008070 l     F .text	000000000000012f unicode.utf8Decode
ffffffff8000f720 l     F .text	00000000000001eb unicode.utf8Decode2
ffffffff8000f910 l     F .text	000000000000033c unicode.utf8Decode3
ffffffff8000fc50 l     F .text	00000000000003fb unicode.utf8Decode4
ffffffff80010050 l     F .text	000000000000006f mem.set__anon_3114
ffffffff800100c0 l     F .text	0000000000000031 math.min__anon_3115
ffffffff800083b0 l     F .text	0000000000000050 fmt.formatIntValue__anon_2868
ffffffff80008400 l     F .text	00000000000007c1 fmt.formatInt__anon_2871
ffffffff80008bd0 l     F .text	0000000000000012 math.absCast__anon_2872
ffffffff80008c40 l     F .text	000000000000005a fmt.formatIntValue__anon_2875
ffffffff80008ca0 l     F .text	0000000000000920 fmt.formatInt__anon_2878
ffffffff800095c0 l     F .text	000000000000001c math.absCast__anon_2880
ffffffff80010100 l     F .text	00000000000000ac fmt.format__anon_3120
ffffffff8001b5d0 l     O .rodata	000000000000001f fmt.formatType__anon_2894__anon_3150
ffffffff8001b5ef l     O .rodata	0000000000000009 fmt.formatType__anon_2894__anon_3146
ffffffff80010270 l     F .text	0000000000000052 fmt.formatType__anon_3152
ffffffff8001b5f8 l     O .rodata	0000000000000008 fmt.formatType__anon_2894__anon_3147
ffffffff800102d0 l     F .text	0000000000000065 fmt.formatType__anon_3153
ffffffff8001b600 l     O .rodata	000000000000001d fmt.formatType__anon_2904__anon_3171
ffffffff8001b61d l     O .rodata	000000000000000b fmt.formatType__anon_2904__anon_3163
ffffffff80010340 l     F .text	0000000000000747 fmt.formatType__anon_3173
ffffffff8001b628 l     O .rodata	0000000000000007 fmt.formatType__anon_2904__anon_3164
ffffffff80010a90 l     F .text	0000000000000051 fmt.formatType__anon_3174
ffffffff8001b62f l     O .rodata	000000000000000d fmt.formatType__anon_2904__anon_3165
ffffffff80010af0 l     F .text	0000000000000052 fmt.formatType__anon_3175
ffffffff8001b63c l     O .rodata	0000000000000012 fmt.formatType__anon_2904__anon_3166
ffffffff80010b50 l     F .text	0000000000000057 fmt.formatType__anon_3176
ffffffff8001b64e l     O .rodata	0000000000000009 fmt.formatType__anon_2904__anon_3167
ffffffff80010bb0 l     F .text	000000000000020e fmt.formatType__anon_3177
ffffffff8001b4f1 l     O .rodata	0000000000000004 fmt.ANY__anon_2705
ffffffff8001b657 l     O .rodata	0000000000000003 fmt.formatType__anon_2940__anon_3178
ffffffff8001b65a l     O .rodata	0000000000000003 fmt.formatType__anon_2940__anon_3179
ffffffff8001b65d l     O .rodata	0000000000000001 fmt.defaultSpec__anon_3180
ffffffff80010dc0 l     F .text	000000000000003c fmt.formatValue__anon_3182
ffffffff800115e0 l     F .text	0000000000000042 fmt.formatValue__anon_3190
ffffffff80011690 l     F .text	0000000000000018 ports.Port(u8).read
ffffffff8001b65e l     O .rodata	000000000000000b fmt.formatAddress__anon_3000__anon_3196
ffffffff8000adc0 l     F .text	0000000000000050 fmt.formatIntValue__anon_3003
ffffffff8000ae10 l     F .text	000000000000095e fmt.formatInt__anon_3006
ffffffff8000b770 l     F .text	000000000000005a math.absCast__anon_3007
ffffffff8001b669 l     O .rodata	0000000000000033 builtin.panic_messages.negative_to_unsigned__anon_3197
ffffffff8000b810 l     F .text	0000000000000050 fmt.formatIntValue__anon_3011
ffffffff80011a20 l     F .text	0000000000000028 io.fixed_buffer_stream.fixedBufferStream__anon_3211
ffffffff80011a50 l     F .text	0000000000000015 io.fixed_buffer_stream.FixedBufferStream([]u8).writer
ffffffff800116b0 l     F .text	000000000000015a fmt.format__anon_3248
ffffffff80011a70 l     F .text	0000000000000095 io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten
ffffffff8001b6c4 l     O .rodata	000000000000002d builtin.panic_messages.for_len_mismatch__anon_3289
ffffffff8000bb00 l     F .text	00000000000000c8 fmt.format__anon_3030
ffffffff8001b48e l     O .rodata	000000000000000f idt.handler_fn__anon_3028
ffffffff8000bbd0 l     F .text	0000000000000058 fmt.formatType__anon_3042
ffffffff80011b10 l     F .text	00000000000003a8 fmt.formatType__anon_3295
ffffffff8000bc30 l     F .text	0000000000000059 main.debug_print__anon_3029
ffffffff8000bd00 l     F .text	000000000000162d idt.generate_trampolines
ffffffff8000d330 l     F .text	0000000000000008 idt.make_trampoline__struct_1913.trampoline
ffffffff8000d340 l     F .text	0000000000000008 idt.make_trampoline__struct_1915.trampoline
ffffffff8000d350 l     F .text	0000000000000008 idt.make_trampoline__struct_1917.trampoline
ffffffff8000d360 l     F .text	0000000000000008 idt.make_trampoline__struct_1919.trampoline
ffffffff8000d370 l     F .text	0000000000000008 idt.make_trampoline__struct_1921.trampoline
ffffffff8000d380 l     F .text	0000000000000008 idt.make_trampoline__struct_1923.trampoline
ffffffff8000d390 l     F .text	0000000000000008 idt.make_trampoline__struct_1925.trampoline
ffffffff8000d3a0 l     F .text	0000000000000008 idt.make_trampoline__struct_1927.trampoline
ffffffff8000d3b0 l     F .text	0000000000000008 idt.make_trampoline__struct_1929.trampoline
ffffffff8000d3c0 l     F .text	0000000000000008 idt.make_trampoline__struct_1931.trampoline
ffffffff8000d3d0 l     F .text	0000000000000008 idt.make_trampoline__struct_1933.trampoline
ffffffff8000d3e0 l     F .text	0000000000000008 idt.make_trampoline__struct_1935.trampoline
ffffffff8000d3f0 l     F .text	0000000000000008 idt.make_trampoline__struct_1937.trampoline
ffffffff8000d400 l     F .text	0000000000000008 idt.make_trampoline__struct_1939.trampoline
ffffffff8000d410 l     F .text	0000000000000008 idt.make_trampoline__struct_1941.trampoline
ffffffff8000d420 l     F .text	0000000000000008 idt.make_trampoline__struct_1943.trampoline
ffffffff8000d430 l     F .text	0000000000000008 idt.make_trampoline__struct_1945.trampoline
ffffffff8000d440 l     F .text	0000000000000008 idt.make_trampoline__struct_1947.trampoline
ffffffff8000d450 l     F .text	0000000000000008 idt.make_trampoline__struct_1949.trampoline
ffffffff8000d460 l     F .text	0000000000000008 idt.make_trampoline__struct_1951.trampoline
ffffffff8000d470 l     F .text	0000000000000008 idt.make_trampoline__struct_1953.trampoline
ffffffff8000d480 l     F .text	0000000000000008 idt.make_trampoline__struct_1955.trampoline
ffffffff8000d490 l     F .text	0000000000000008 idt.make_trampoline__struct_1957.trampoline
ffffffff8000d4a0 l     F .text	0000000000000008 idt.make_trampoline__struct_1959.trampoline
ffffffff8000d4b0 l     F .text	0000000000000008 idt.make_trampoline__struct_1961.trampoline
ffffffff8000d4c0 l     F .text	0000000000000008 idt.make_trampoline__struct_1963.trampoline
ffffffff8000d4d0 l     F .text	0000000000000008 idt.make_trampoline__struct_1965.trampoline
ffffffff8000d4e0 l     F .text	0000000000000008 idt.make_trampoline__struct_1967.trampoline
ffffffff8000d4f0 l     F .text	0000000000000008 idt.make_trampoline__struct_1969.trampoline
ffffffff8000d500 l     F .text	0000000000000008 idt.make_trampoline__struct_1971.trampoline
ffffffff8000d510 l     F .text	0000000000000008 idt.make_trampoline__struct_1973.trampoline
ffffffff8000d520 l     F .text	0000000000000008 idt.make_trampoline__struct_1975.trampoline
ffffffff8000d530 l     F .text	0000000000000008 idt.make_trampoline__struct_1977.trampoline
ffffffff8000d540 l     F .text	0000000000000008 idt.make_trampoline__struct_1979.trampoline
ffffffff8000d550 l     F .text	0000000000000008 idt.make_trampoline__struct_1981.trampoline
ffffffff8000d560 l     F .text	0000000000000008 idt.make_trampoline__struct_1983.trampoline
ffffffff8000d570 l     F .text	0000000000000008 idt.make_trampoline__struct_1985.trampoline
ffffffff8000d580 l     F .text	0000000000000008 idt.make_trampoline__struct_1987.trampoline
ffffffff8000d590 l     F .text	0000000000000008 idt.make_trampoline__struct_1989.trampoline
ffffffff8000d5a0 l     F .text	0000000000000008 idt.make_trampoline__struct_1991.trampoline
ffffffff8000d5b0 l     F .text	0000000000000008 idt.make_trampoline__struct_1993.trampoline
ffffffff8000d5c0 l     F .text	0000000000000008 idt.make_trampoline__struct_1995.trampoline
ffffffff8000d5d0 l     F .text	0000000000000008 idt.make_trampoline__struct_1997.trampoline
ffffffff8000d5e0 l     F .text	0000000000000008 idt.make_trampoline__struct_1999.trampoline
ffffffff8000d5f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2001.trampoline
ffffffff8000d600 l     F .text	0000000000000008 idt.make_trampoline__struct_2003.trampoline
ffffffff8000d610 l     F .text	0000000000000008 idt.make_trampoline__struct_2005.trampoline
ffffffff8000d620 l     F .text	0000000000000008 idt.make_trampoline__struct_2007.trampoline
ffffffff8000d630 l     F .text	0000000000000008 idt.make_trampoline__struct_2009.trampoline
ffffffff8000d640 l     F .text	0000000000000008 idt.make_trampoline__struct_2011.trampoline
ffffffff8000d650 l     F .text	0000000000000008 idt.make_trampoline__struct_2013.trampoline
ffffffff8000d660 l     F .text	0000000000000008 idt.make_trampoline__struct_2015.trampoline
ffffffff8000d670 l     F .text	0000000000000008 idt.make_trampoline__struct_2017.trampoline
ffffffff8000d680 l     F .text	0000000000000008 idt.make_trampoline__struct_2019.trampoline
ffffffff8000d690 l     F .text	0000000000000008 idt.make_trampoline__struct_2021.trampoline
ffffffff8000d6a0 l     F .text	0000000000000008 idt.make_trampoline__struct_2023.trampoline
ffffffff8000d6b0 l     F .text	0000000000000008 idt.make_trampoline__struct_2025.trampoline
ffffffff8000d6c0 l     F .text	0000000000000008 idt.make_trampoline__struct_2027.trampoline
ffffffff8000d6d0 l     F .text	0000000000000008 idt.make_trampoline__struct_2029.trampoline
ffffffff8000d6e0 l     F .text	0000000000000008 idt.make_trampoline__struct_2031.trampoline
ffffffff8000d6f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2033.trampoline
ffffffff8000d700 l     F .text	0000000000000008 idt.make_trampoline__struct_2035.trampoline
ffffffff8000d710 l     F .text	0000000000000008 idt.make_trampoline__struct_2037.trampoline
ffffffff8000d720 l     F .text	0000000000000008 idt.make_trampoline__struct_2039.trampoline
ffffffff8000d730 l     F .text	0000000000000008 idt.make_trampoline__struct_2041.trampoline
ffffffff8000d740 l     F .text	0000000000000008 idt.make_trampoline__struct_2043.trampoline
ffffffff8000d750 l     F .text	0000000000000008 idt.make_trampoline__struct_2045.trampoline
ffffffff8000d760 l     F .text	0000000000000008 idt.make_trampoline__struct_2047.trampoline
ffffffff8000d770 l     F .text	0000000000000008 idt.make_trampoline__struct_2049.trampoline
ffffffff8000d780 l     F .text	0000000000000008 idt.make_trampoline__struct_2051.trampoline
ffffffff8000d790 l     F .text	0000000000000008 idt.make_trampoline__struct_2053.trampoline
ffffffff8000d7a0 l     F .text	0000000000000008 idt.make_trampoline__struct_2055.trampoline
ffffffff8000d7b0 l     F .text	0000000000000008 idt.make_trampoline__struct_2057.trampoline
ffffffff8000d7c0 l     F .text	0000000000000008 idt.make_trampoline__struct_2059.trampoline
ffffffff8000d7d0 l     F .text	0000000000000008 idt.make_trampoline__struct_2061.trampoline
ffffffff8000d7e0 l     F .text	0000000000000008 idt.make_trampoline__struct_2063.trampoline
ffffffff8000d7f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2065.trampoline
ffffffff8000d800 l     F .text	0000000000000008 idt.make_trampoline__struct_2067.trampoline
ffffffff8000d810 l     F .text	0000000000000008 idt.make_trampoline__struct_2069.trampoline
ffffffff8000d820 l     F .text	0000000000000008 idt.make_trampoline__struct_2071.trampoline
ffffffff8000d830 l     F .text	0000000000000008 idt.make_trampoline__struct_2073.trampoline
ffffffff8000d840 l     F .text	0000000000000008 idt.make_trampoline__struct_2075.trampoline
ffffffff8000d850 l     F .text	0000000000000008 idt.make_trampoline__struct_2077.trampoline
ffffffff8000d860 l     F .text	0000000000000008 idt.make_trampoline__struct_2079.trampoline
ffffffff8000d870 l     F .text	0000000000000008 idt.make_trampoline__struct_2081.trampoline
ffffffff8000d880 l     F .text	0000000000000008 idt.make_trampoline__struct_2083.trampoline
ffffffff8000d890 l     F .text	0000000000000008 idt.make_trampoline__struct_2085.trampoline
ffffffff8000d8a0 l     F .text	0000000000000008 idt.make_trampoline__struct_2087.trampoline
ffffffff8000d8b0 l     F .text	0000000000000008 idt.make_trampoline__struct_2089.trampoline
ffffffff8000d8c0 l     F .text	0000000000000008 idt.make_trampoline__struct_2091.trampoline
ffffffff8000d8d0 l     F .text	0000000000000008 idt.make_trampoline__struct_2093.trampoline
ffffffff8000d8e0 l     F .text	0000000000000008 idt.make_trampoline__struct_2095.trampoline
ffffffff8000d8f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2097.trampoline
ffffffff8000d900 l     F .text	0000000000000008 idt.make_trampoline__struct_2099.trampoline
ffffffff8000d910 l     F .text	0000000000000008 idt.make_trampoline__struct_2101.trampoline
ffffffff8000d920 l     F .text	0000000000000008 idt.make_trampoline__struct_2103.trampoline
ffffffff8000d930 l     F .text	0000000000000008 idt.make_trampoline__struct_2105.trampoline
ffffffff8000d940 l     F .text	0000000000000008 idt.make_trampoline__struct_2107.trampoline
ffffffff8000d950 l     F .text	0000000000000008 idt.make_trampoline__struct_2109.trampoline
ffffffff8000d960 l     F .text	0000000000000008 idt.make_trampoline__struct_2111.trampoline
ffffffff8000d970 l     F .text	0000000000000008 idt.make_trampoline__struct_2113.trampoline
ffffffff8000d980 l     F .text	0000000000000008 idt.make_trampoline__struct_2115.trampoline
ffffffff8000d990 l     F .text	0000000000000008 idt.make_trampoline__struct_2117.trampoline
ffffffff8000d9a0 l     F .text	0000000000000008 idt.make_trampoline__struct_2119.trampoline
ffffffff8000d9b0 l     F .text	0000000000000008 idt.make_trampoline__struct_2121.trampoline
ffffffff8000d9c0 l     F .text	0000000000000008 idt.make_trampoline__struct_2123.trampoline
ffffffff8000d9d0 l     F .text	0000000000000008 idt.make_trampoline__struct_2125.trampoline
ffffffff8000d9e0 l     F .text	0000000000000008 idt.make_trampoline__struct_2127.trampoline
ffffffff8000d9f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2129.trampoline
ffffffff8000da00 l     F .text	0000000000000008 idt.make_trampoline__struct_2131.trampoline
ffffffff8000da10 l     F .text	0000000000000008 idt.make_trampoline__struct_2133.trampoline
ffffffff8000da20 l     F .text	0000000000000008 idt.make_trampoline__struct_2135.trampoline
ffffffff8000da30 l     F .text	0000000000000008 idt.make_trampoline__struct_2137.trampoline
ffffffff8000da40 l     F .text	0000000000000008 idt.make_trampoline__struct_2139.trampoline
ffffffff8000da50 l     F .text	0000000000000008 idt.make_trampoline__struct_2141.trampoline
ffffffff8000da60 l     F .text	0000000000000008 idt.make_trampoline__struct_2143.trampoline
ffffffff8000da70 l     F .text	0000000000000008 idt.make_trampoline__struct_2145.trampoline
ffffffff8000da80 l     F .text	0000000000000008 idt.make_trampoline__struct_2147.trampoline
ffffffff8000da90 l     F .text	0000000000000008 idt.make_trampoline__struct_2149.trampoline
ffffffff8000daa0 l     F .text	0000000000000008 idt.make_trampoline__struct_2151.trampoline
ffffffff8000dab0 l     F .text	0000000000000008 idt.make_trampoline__struct_2153.trampoline
ffffffff8000dac0 l     F .text	0000000000000008 idt.make_trampoline__struct_2155.trampoline
ffffffff8000dad0 l     F .text	0000000000000008 idt.make_trampoline__struct_2157.trampoline
ffffffff8000dae0 l     F .text	0000000000000008 idt.make_trampoline__struct_2159.trampoline
ffffffff8000daf0 l     F .text	0000000000000008 idt.make_trampoline__struct_2161.trampoline
ffffffff8000db00 l     F .text	0000000000000008 idt.make_trampoline__struct_2163.trampoline
ffffffff8000db10 l     F .text	0000000000000008 idt.make_trampoline__struct_2165.trampoline
ffffffff8000db20 l     F .text	0000000000000008 idt.make_trampoline__struct_2167.trampoline
ffffffff8000db30 l     F .text	0000000000000008 idt.make_trampoline__struct_2169.trampoline
ffffffff8000db40 l     F .text	0000000000000008 idt.make_trampoline__struct_2171.trampoline
ffffffff8000db50 l     F .text	0000000000000008 idt.make_trampoline__struct_2173.trampoline
ffffffff8000db60 l     F .text	0000000000000008 idt.make_trampoline__struct_2175.trampoline
ffffffff8000db70 l     F .text	0000000000000008 idt.make_trampoline__struct_2177.trampoline
ffffffff8000db80 l     F .text	0000000000000008 idt.make_trampoline__struct_2179.trampoline
ffffffff8000db90 l     F .text	0000000000000008 idt.make_trampoline__struct_2181.trampoline
ffffffff8000dba0 l     F .text	0000000000000008 idt.make_trampoline__struct_2183.trampoline
ffffffff8000dbb0 l     F .text	0000000000000008 idt.make_trampoline__struct_2185.trampoline
ffffffff8000dbc0 l     F .text	0000000000000008 idt.make_trampoline__struct_2187.trampoline
ffffffff8000dbd0 l     F .text	0000000000000008 idt.make_trampoline__struct_2189.trampoline
ffffffff8000dbe0 l     F .text	0000000000000008 idt.make_trampoline__struct_2191.trampoline
ffffffff8000dbf0 l     F .text	0000000000000008 idt.make_trampoline__struct_2193.trampoline
ffffffff8000dc00 l     F .text	0000000000000008 idt.make_trampoline__struct_2195.trampoline
ffffffff8000dc10 l     F .text	0000000000000008 idt.make_trampoline__struct_2197.trampoline
ffffffff8000dc20 l     F .text	0000000000000008 idt.make_trampoline__struct_2199.trampoline
ffffffff8000dc30 l     F .text	0000000000000008 idt.make_trampoline__struct_2201.trampoline
ffffffff8000dc40 l     F .text	0000000000000008 idt.make_trampoline__struct_2203.trampoline
ffffffff8000dc50 l     F .text	0000000000000008 idt.make_trampoline__struct_2205.trampoline
ffffffff8000dc60 l     F .text	0000000000000008 idt.make_trampoline__struct_2207.trampoline
ffffffff8000dc70 l     F .text	0000000000000008 idt.make_trampoline__struct_2209.trampoline
ffffffff8000dc80 l     F .text	0000000000000008 idt.make_trampoline__struct_2211.trampoline
ffffffff8000dc90 l     F .text	0000000000000008 idt.make_trampoline__struct_2213.trampoline
ffffffff8000dca0 l     F .text	0000000000000008 idt.make_trampoline__struct_2215.trampoline
ffffffff8000dcb0 l     F .text	0000000000000008 idt.make_trampoline__struct_2217.trampoline
ffffffff8000dcc0 l     F .text	0000000000000008 idt.make_trampoline__struct_2219.trampoline
ffffffff8000dcd0 l     F .text	0000000000000008 idt.make_trampoline__struct_2221.trampoline
ffffffff8000dce0 l     F .text	0000000000000008 idt.make_trampoline__struct_2223.trampoline
ffffffff8000dcf0 l     F .text	0000000000000008 idt.make_trampoline__struct_2225.trampoline
ffffffff8000dd00 l     F .text	0000000000000008 idt.make_trampoline__struct_2227.trampoline
ffffffff8000dd10 l     F .text	0000000000000008 idt.make_trampoline__struct_2229.trampoline
ffffffff8000dd20 l     F .text	0000000000000008 idt.make_trampoline__struct_2231.trampoline
ffffffff8000dd30 l     F .text	0000000000000008 idt.make_trampoline__struct_2233.trampoline
ffffffff8000dd40 l     F .text	0000000000000008 idt.make_trampoline__struct_2235.trampoline
ffffffff8000dd50 l     F .text	0000000000000008 idt.make_trampoline__struct_2237.trampoline
ffffffff8000dd60 l     F .text	0000000000000008 idt.make_trampoline__struct_2239.trampoline
ffffffff8000dd70 l     F .text	0000000000000008 idt.make_trampoline__struct_2241.trampoline
ffffffff8000dd80 l     F .text	0000000000000008 idt.make_trampoline__struct_2243.trampoline
ffffffff8000dd90 l     F .text	0000000000000008 idt.make_trampoline__struct_2245.trampoline
ffffffff8000dda0 l     F .text	0000000000000008 idt.make_trampoline__struct_2247.trampoline
ffffffff8000ddb0 l     F .text	0000000000000008 idt.make_trampoline__struct_2249.trampoline
ffffffff8000ddc0 l     F .text	0000000000000008 idt.make_trampoline__struct_2251.trampoline
ffffffff8000ddd0 l     F .text	0000000000000008 idt.make_trampoline__struct_2253.trampoline
ffffffff8000dde0 l     F .text	0000000000000008 idt.make_trampoline__struct_2255.trampoline
ffffffff8000ddf0 l     F .text	0000000000000008 idt.make_trampoline__struct_2257.trampoline
ffffffff8000de00 l     F .text	0000000000000008 idt.make_trampoline__struct_2259.trampoline
ffffffff8000de10 l     F .text	0000000000000008 idt.make_trampoline__struct_2261.trampoline
ffffffff8000de20 l     F .text	0000000000000008 idt.make_trampoline__struct_2263.trampoline
ffffffff8000de30 l     F .text	0000000000000008 idt.make_trampoline__struct_2265.trampoline
ffffffff8000de40 l     F .text	0000000000000008 idt.make_trampoline__struct_2267.trampoline
ffffffff8000de50 l     F .text	0000000000000008 idt.make_trampoline__struct_2269.trampoline
ffffffff8000de60 l     F .text	0000000000000008 idt.make_trampoline__struct_2271.trampoline
ffffffff8000de70 l     F .text	0000000000000008 idt.make_trampoline__struct_2273.trampoline
ffffffff8000de80 l     F .text	0000000000000008 idt.make_trampoline__struct_2275.trampoline
ffffffff8000de90 l     F .text	0000000000000008 idt.make_trampoline__struct_2277.trampoline
ffffffff8000dea0 l     F .text	0000000000000008 idt.make_trampoline__struct_2279.trampoline
ffffffff8000deb0 l     F .text	0000000000000008 idt.make_trampoline__struct_2281.trampoline
ffffffff8000dec0 l     F .text	0000000000000008 idt.make_trampoline__struct_2283.trampoline
ffffffff8000ded0 l     F .text	0000000000000008 idt.make_trampoline__struct_2285.trampoline
ffffffff8000dee0 l     F .text	0000000000000008 idt.make_trampoline__struct_2287.trampoline
ffffffff8000def0 l     F .text	0000000000000008 idt.make_trampoline__struct_2289.trampoline
ffffffff8000df00 l     F .text	0000000000000008 idt.make_trampoline__struct_2291.trampoline
ffffffff8000df10 l     F .text	0000000000000008 idt.make_trampoline__struct_2293.trampoline
ffffffff8000df20 l     F .text	0000000000000008 idt.make_trampoline__struct_2295.trampoline
ffffffff8000df30 l     F .text	0000000000000008 idt.make_trampoline__struct_2297.trampoline
ffffffff8000df40 l     F .text	0000000000000008 idt.make_trampoline__struct_2299.trampoline
ffffffff8000df50 l     F .text	0000000000000008 idt.make_trampoline__struct_2301.trampoline
ffffffff8000df60 l     F .text	0000000000000008 idt.make_trampoline__struct_2303.trampoline
ffffffff8000df70 l     F .text	0000000000000008 idt.make_trampoline__struct_2305.trampoline
ffffffff8000df80 l     F .text	0000000000000008 idt.make_trampoline__struct_2307.trampoline
ffffffff8000df90 l     F .text	0000000000000008 idt.make_trampoline__struct_2309.trampoline
ffffffff8000dfa0 l     F .text	0000000000000008 idt.make_trampoline__struct_2311.trampoline
ffffffff8000dfb0 l     F .text	0000000000000008 idt.make_trampoline__struct_2313.trampoline
ffffffff8000dfc0 l     F .text	0000000000000008 idt.make_trampoline__struct_2315.trampoline
ffffffff8000dfd0 l     F .text	0000000000000008 idt.make_trampoline__struct_2317.trampoline
ffffffff8000dfe0 l     F .text	0000000000000008 idt.make_trampoline__struct_2319.trampoline
ffffffff8000dff0 l     F .text	0000000000000008 idt.make_trampoline__struct_2321.trampoline
ffffffff8000e000 l     F .text	0000000000000008 idt.make_trampoline__struct_2323.trampoline
ffffffff8000e010 l     F .text	0000000000000008 idt.make_trampoline__struct_2325.trampoline
ffffffff8000e020 l     F .text	0000000000000008 idt.make_trampoline__struct_2327.trampoline
ffffffff8000e030 l     F .text	0000000000000008 idt.make_trampoline__struct_2329.trampoline
ffffffff8000e040 l     F .text	0000000000000008 idt.make_trampoline__struct_2331.trampoline
ffffffff8000e050 l     F .text	0000000000000008 idt.make_trampoline__struct_2333.trampoline
ffffffff8000e060 l     F .text	0000000000000008 idt.make_trampoline__struct_2335.trampoline
ffffffff8000e070 l     F .text	0000000000000008 idt.make_trampoline__struct_2337.trampoline
ffffffff8000e080 l     F .text	0000000000000008 idt.make_trampoline__struct_2339.trampoline
ffffffff8000e090 l     F .text	0000000000000008 idt.make_trampoline__struct_2341.trampoline
ffffffff8000e0a0 l     F .text	0000000000000008 idt.make_trampoline__struct_2343.trampoline
ffffffff8000e0b0 l     F .text	0000000000000008 idt.make_trampoline__struct_2345.trampoline
ffffffff8000e0c0 l     F .text	0000000000000008 idt.make_trampoline__struct_2347.trampoline
ffffffff8000e0d0 l     F .text	0000000000000008 idt.make_trampoline__struct_2349.trampoline
ffffffff8000e0e0 l     F .text	0000000000000008 idt.make_trampoline__struct_2351.trampoline
ffffffff8000e0f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2353.trampoline
ffffffff8000e100 l     F .text	0000000000000008 idt.make_trampoline__struct_2355.trampoline
ffffffff8000e110 l     F .text	0000000000000008 idt.make_trampoline__struct_2357.trampoline
ffffffff8000e120 l     F .text	0000000000000008 idt.make_trampoline__struct_2359.trampoline
ffffffff8000e130 l     F .text	0000000000000008 idt.make_trampoline__struct_2361.trampoline
ffffffff8000e140 l     F .text	0000000000000008 idt.make_trampoline__struct_2363.trampoline
ffffffff8000e150 l     F .text	0000000000000008 idt.make_trampoline__struct_2365.trampoline
ffffffff8000e160 l     F .text	0000000000000008 idt.make_trampoline__struct_2367.trampoline
ffffffff8000e170 l     F .text	0000000000000008 idt.make_trampoline__struct_2369.trampoline
ffffffff8000e180 l     F .text	0000000000000008 idt.make_trampoline__struct_2371.trampoline
ffffffff8000e190 l     F .text	0000000000000008 idt.make_trampoline__struct_2373.trampoline
ffffffff8000e1a0 l     F .text	0000000000000008 idt.make_trampoline__struct_2375.trampoline
ffffffff8000e1b0 l     F .text	0000000000000008 idt.make_trampoline__struct_2377.trampoline
ffffffff8000e1c0 l     F .text	0000000000000008 idt.make_trampoline__struct_2379.trampoline
ffffffff8000e1d0 l     F .text	0000000000000008 idt.make_trampoline__struct_2381.trampoline
ffffffff8000e1e0 l     F .text	0000000000000008 idt.make_trampoline__struct_2383.trampoline
ffffffff8000e1f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2385.trampoline
ffffffff8000e200 l     F .text	0000000000000008 idt.make_trampoline__struct_2387.trampoline
ffffffff8000e210 l     F .text	0000000000000008 idt.make_trampoline__struct_2389.trampoline
ffffffff8000e220 l     F .text	0000000000000008 idt.make_trampoline__struct_2391.trampoline
ffffffff8000e230 l     F .text	0000000000000008 idt.make_trampoline__struct_2393.trampoline
ffffffff8000e240 l     F .text	0000000000000008 idt.make_trampoline__struct_2395.trampoline
ffffffff8000e250 l     F .text	0000000000000008 idt.make_trampoline__struct_2397.trampoline
ffffffff8000e260 l     F .text	0000000000000008 idt.make_trampoline__struct_2399.trampoline
ffffffff8000e270 l     F .text	0000000000000008 idt.make_trampoline__struct_2401.trampoline
ffffffff8000e280 l     F .text	0000000000000008 idt.make_trampoline__struct_2403.trampoline
ffffffff8000e290 l     F .text	0000000000000008 idt.make_trampoline__struct_2405.trampoline
ffffffff8000e2a0 l     F .text	0000000000000008 idt.make_trampoline__struct_2407.trampoline
ffffffff8000e2b0 l     F .text	0000000000000008 idt.make_trampoline__struct_2409.trampoline
ffffffff8000e2c0 l     F .text	0000000000000008 idt.make_trampoline__struct_2411.trampoline
ffffffff8000e2d0 l     F .text	0000000000000008 idt.make_trampoline__struct_2413.trampoline
ffffffff8000e2e0 l     F .text	0000000000000008 idt.make_trampoline__struct_2415.trampoline
ffffffff8000e2f0 l     F .text	0000000000000008 idt.make_trampoline__struct_2417.trampoline
ffffffff8000e300 l     F .text	0000000000000008 idt.make_trampoline__struct_2419.trampoline
ffffffff8000e310 l     F .text	0000000000000008 idt.make_trampoline__struct_2421.trampoline
ffffffff8000e320 l     F .text	0000000000000008 idt.make_trampoline__struct_2423.trampoline
ffffffff8000e380 l     F .text	0000000000000054 fmt.formatIntValue__anon_3049
ffffffff8000e3e0 l     F .text	00000000000006d3 fmt.formatInt__anon_3052
ffffffff8000eac0 l     F .text	0000000000000014 math.absCast__anon_3054
ffffffff80011ec0 l     F .text	0000000000000043 fmt.formatValue__anon_3297
ffffffff8001b6f1 l     O .rodata	0000000000000011 fmt.formatType__anon_3089__anon_3348
ffffffff8001b702 l     O .rodata	0000000000000004 fmt.formatType__anon_3089__anon_3334
ffffffff80012720 l     F .text	000000000000005f fmt.formatType__anon_3350
ffffffff8001b706 l     O .rodata	000000000000000a fmt.formatType__anon_3089__anon_3336
ffffffff80012780 l     F .text	000000000000005f fmt.formatType__anon_3351
ffffffff8001b710 l     O .rodata	000000000000000a fmt.formatType__anon_3089__anon_3338
ffffffff800127e0 l     F .text	000000000000005f fmt.formatType__anon_3352
ffffffff8001b71a l     O .rodata	000000000000000a fmt.formatType__anon_3089__anon_3340
ffffffff80012840 l     F .text	000000000000005f fmt.formatType__anon_3353
ffffffff8001b724 l     O .rodata	0000000000000010 fmt.formatType__anon_3089__anon_3342
ffffffff800128a0 l     F .text	000000000000005f fmt.formatType__anon_3354
ffffffff8001b734 l     O .rodata	0000000000000008 fmt.formatType__anon_3089__anon_3344
ffffffff80012900 l     F .text	00000000000000a7 fmt.formatType__anon_3355
ffffffff800129b0 l     F .text	000000000000015a fmt.format__anon_3356
ffffffff8001ad98 l     O .rodata	0000000000000001 mem.len__anon_3095__anon_3375
ffffffff80012b10 l     F .text	0000000000000072 mem.indexOfSentinel__anon_3376
ffffffff80012b90 l     F .text	00000000000001d0 debug.panicExtra__anon_3378
ffffffff8001b769 l     O .rodata	000000000000002b builtin.panic_messages.shift_rhs_too_big__anon_3379
ffffffff8001b5be l     O .rodata	000000000000000a fmt.formatType__anon_2887__anon_3119
ffffffff800101b0 l     F .text	0000000000000060 fmt.formatType__anon_3133
ffffffff8001b5c8 l     O .rodata	0000000000000008 fmt.formatType__anon_2887__anon_3118
ffffffff80010210 l     F .text	0000000000000052 fmt.formatType__anon_3140
ffffffff80012d60 l     F .text	000000000000003d fmt.formatValue__anon_3382
ffffffff80012df0 l     F .text	000000000000003d fmt.formatValue__anon_3386
ffffffff80012e80 l     F .text	00000000000000ac fmt.format__anon_3393
ffffffff8001b79e l     O .rodata	000000000000001b fmt.formatType__anon_3173__anon_3434
ffffffff8001b7b9 l     O .rodata	000000000000000a fmt.formatType__anon_3173__anon_3427
ffffffff80012f30 l     F .text	000000000000020e fmt.formatType__anon_3436
ffffffff8001b7c3 l     O .rodata	0000000000000009 fmt.formatType__anon_3173__anon_3428
ffffffff80013140 l     F .text	0000000000000057 fmt.formatType__anon_3437
ffffffff8001b7cc l     O .rodata	0000000000000006 fmt.formatType__anon_3173__anon_3429
ffffffff800131a0 l     F .text	000000000000020e fmt.formatType__anon_3438
ffffffff8001b7d2 l     O .rodata	0000000000000009 fmt.formatType__anon_3173__anon_3430
ffffffff800133b0 l     F .text	0000000000000057 fmt.formatType__anon_3439
ffffffff8001b7db l     O .rodata	000000000000000d fmt.formatType__anon_3173__anon_3431
ffffffff80013410 l     F .text	0000000000000051 fmt.formatType__anon_3440
ffffffff80010e00 l     F .text	000000000000004e fmt.formatIntValue__anon_3183
ffffffff80010e50 l     F .text	0000000000000770 fmt.formatInt__anon_3186
ffffffff800115c0 l     F .text	0000000000000013 math.absCast__anon_3188
ffffffff80011630 l     F .text	0000000000000054 fmt.formatIntValue__anon_3191
ffffffff8001b69c l     O .rodata	0000000000000028 builtin.panicOutOfBounds__anon_1902
ffffffff80011810 l     F .text	00000000000001a3 io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll
ffffffff800119c0 l     F .text	0000000000000051 fmt.formatType__anon_3282
ffffffff800138c0 l     F .text	0000000000000073 io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write
ffffffff8001aa31 l     O .rodata	0000000000000001 fmt.cacheString__anon_3279
ffffffff80013940 l     F .text	000000000000003d fmt.formatValue__anon_3443
ffffffff8001b7e8 l     O .rodata	000000000000000a fmt.formatType__anon_3295__anon_3460
ffffffff8001b7f2 l     O .rodata	0000000000000004 fmt.formatType__anon_3295__anon_3456
ffffffff80014900 l     F .text	0000000000000052 fmt.formatType__anon_3462
ffffffff8001b7f6 l     O .rodata	0000000000000003 fmt.formatType__anon_3295__anon_3457
ffffffff80014960 l     F .text	0000000000000052 fmt.formatType__anon_3463
ffffffff80011f10 l     F .text	0000000000000056 fmt.formatIntValue__anon_3298
ffffffff80011f70 l     F .text	000000000000078c fmt.formatInt__anon_3301
ffffffff80012700 l     F .text	0000000000000015 math.absCast__anon_3303
ffffffff800149c0 l     F .text	000000000000004a fmt.formatValue__anon_3465
ffffffff80015170 l     F .text	000000000000004a fmt.formatValue__anon_3474
ffffffff80015920 l     F .text	000000000000004a fmt.formatValue__anon_3483
ffffffff800160d0 l     F .text	000000000000004a fmt.formatValue__anon_3492
ffffffff80016880 l     F .text	000000000000004a fmt.formatValue__anon_3501
ffffffff8001b73c l     O .rodata	000000000000002d builtin.panicStartGreaterThanEnd__anon_2461
ffffffff80017030 l     F .text	0000000000000134 fmt.bufPrint__anon_3509
ffffffff80012da0 l     F .text	0000000000000050 fmt.formatIntValue__anon_3383
ffffffff80012e30 l     F .text	0000000000000050 fmt.formatIntValue__anon_3387
ffffffff8001b794 l     O .rodata	000000000000000a fmt.formatType__anon_3153__anon_3392
ffffffff80013470 l     F .text	0000000000000449 io.fixed_buffer_stream.FixedBufferStream([]u8).write
ffffffff80013980 l     F .text	0000000000000050 fmt.formatIntValue__anon_3445
ffffffff800139d0 l     F .text	00000000000007c1 fmt.formatInt__anon_3449
ffffffff800141a0 l     F .text	0000000000000567 fmt.formatBuf__anon_3450
ffffffff80014710 l     F .text	00000000000001e9 io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes
ffffffff80014a10 l     F .text	0000000000000057 fmt.formatIntValue__anon_3466
ffffffff80014a70 l     F .text	00000000000006d7 fmt.formatInt__anon_3469
ffffffff80015150 l     F .text	0000000000000019 math.absCast__anon_3471
ffffffff800151c0 l     F .text	0000000000000057 fmt.formatIntValue__anon_3475
ffffffff80015220 l     F .text	00000000000006e0 fmt.formatInt__anon_3478
ffffffff80015900 l     F .text	0000000000000019 math.absCast__anon_3480
ffffffff80015970 l     F .text	0000000000000057 fmt.formatIntValue__anon_3484
ffffffff800159d0 l     F .text	00000000000006de fmt.formatInt__anon_3487
ffffffff800160b0 l     F .text	0000000000000019 math.absCast__anon_3489
ffffffff80016120 l     F .text	000000000000005c fmt.formatIntValue__anon_3493
ffffffff80016180 l     F .text	00000000000006d4 fmt.formatInt__anon_3496
ffffffff80016860 l     F .text	0000000000000019 math.absCast__anon_3498
ffffffff800168d0 l     F .text	0000000000000057 fmt.formatIntValue__anon_3502
ffffffff80016930 l     F .text	00000000000006dd fmt.formatInt__anon_3505
ffffffff80017010 l     F .text	0000000000000019 math.absCast__anon_3507
ffffffff80017170 l     F .text	000000000000015e fmt.format__anon_3510
ffffffff8001b7f9 l     O .rodata	000000000000002f builtin.panicSentinelMismatch__anon_3097__anon_3377
ffffffff800172d0 l     F .text	0000000000000056 fmt.formatType__anon_3546
ffffffff80017330 l     F .text	0000000000000042 fmt.formatValue__anon_3554
ffffffff80017380 l     F .text	0000000000000054 fmt.formatIntValue__anon_3555
ffffffff800173e0 l     F .text	00000000000006d3 fmt.formatInt__anon_3558
ffffffff80018fa8 l     O .rodata	0000000000000001 start.simplified_logic
ffffffff80018fa9 l     O .rodata	0000000000000001 builtin.output_mode
ffffffff80018faa l     O .rodata	0000000000000001 builtin.link_libc
ffffffff8001e200 l     O .bss	000000000000002c builtin.os
ffffffff80018fab l     O .rodata	0000000000000001 start.native_os
ffffffff80018fd8 l     O .rodata	0000000000000028 target.Target.Cpu.Feature.Set.empty
ffffffff80019000 l     O .rodata	0000000000000048 target.x86.cpu.x86_64
ffffffff8001b18d l     O .rodata	0000000000000007 target.x86.cpu.x86_64__anon_559
ffffffff8001b194 l     O .rodata	0000000000000007 target.x86.cpu.x86_64__anon_560
ffffffff80019048 l     O .rodata	0000000000000038 builtin.cpu
ffffffff80019080 l     O .rodata	0000000000000001 start.native_arch
ffffffff80019088 l     O .rodata	0000000000000018 fmt.format__anon_1314__anon_1320
ffffffff800190a0 l     O .rodata	0000000000000001 fmt.format__anon_1314__anon_1323
ffffffff800190c0 l     O .rodata	0000000000000018 fmt.format__anon_1327__anon_1332
ffffffff800190d8 l     O .rodata	0000000000000001 fmt.format__anon_1327__anon_1335
ffffffff80019168 l     O .rodata	0000000000000001 fmt.format__anon_1327__anon_1479
ffffffff800191f8 l     O .rodata	0000000000000001 fmt.format__anon_1327__anon_1485
ffffffff80019218 l     O .rodata	0000000000000018 fmt.format__anon_1489__anon_1492
ffffffff80019230 l     O .rodata	0000000000000001 fmt.format__anon_1489__anon_1495
ffffffff80019250 l     O .rodata	0000000000000018 fmt.format__anon_1512__anon_1516
ffffffff80019268 l     O .rodata	0000000000000001 fmt.format__anon_1512__anon_1519
ffffffff800192f8 l     O .rodata	0000000000000001 fmt.format__anon_1512__anon_1546
ffffffff80019318 l     O .rodata	0000000000000018 fmt.format__anon_1551__anon_1556
ffffffff80019330 l     O .rodata	0000000000000001 fmt.format__anon_1551__anon_1559
ffffffff800193c0 l     O .rodata	0000000000000001 fmt.format__anon_1551__anon_1565
ffffffff80019450 l     O .rodata	0000000000000001 fmt.format__anon_1551__anon_1572
ffffffff80019470 l     O .rodata	0000000000000018 fmt.format__anon_1576__anon_1580
ffffffff80019488 l     O .rodata	0000000000000001 fmt.format__anon_1576__anon_1583
ffffffff80019530 l     O .rodata	0000000000000018 fmt.format__anon_1612__anon_1615
ffffffff80019548 l     O .rodata	0000000000000001 fmt.format__anon_1612__anon_1618
ffffffff80019568 l     O .rodata	0000000000000018 fmt.format__anon_1622__anon_1626
ffffffff80019580 l     O .rodata	0000000000000001 fmt.format__anon_1622__anon_1629
ffffffff80019610 l     O .rodata	0000000000000001 fmt.format__anon_1622__anon_1636
ffffffff80019630 l     O .rodata	0000000000000018 fmt.format__anon_1649__anon_1654
ffffffff80019648 l     O .rodata	0000000000000001 fmt.format__anon_1649__anon_1657
ffffffff800196d8 l     O .rodata	0000000000000001 fmt.format__anon_1649__anon_1664
ffffffff80019768 l     O .rodata	0000000000000001 fmt.format__anon_1649__anon_1671
ffffffff80019788 l     O .rodata	0000000000000018 fmt.format__anon_1675__anon_1679
ffffffff800197a0 l     O .rodata	0000000000000001 fmt.format__anon_1675__anon_1682
ffffffff80019830 l     O .rodata	0000000000000001 fmt.format__anon_1675__anon_1688
ffffffff80019850 l     O .rodata	0000000000000018 fmt.format__anon_1692__anon_1698
ffffffff80019868 l     O .rodata	0000000000000001 fmt.format__anon_1692__anon_1701
ffffffff800198f8 l     O .rodata	0000000000000001 fmt.format__anon_1692__anon_1708
ffffffff80019988 l     O .rodata	0000000000000001 fmt.format__anon_1692__anon_1714
ffffffff80019a18 l     O .rodata	0000000000000001 fmt.format__anon_1692__anon_1720
ffffffff80019a38 l     O .rodata	0000000000000018 fmt.format__anon_1724__anon_1730
ffffffff80019a50 l     O .rodata	0000000000000001 fmt.format__anon_1724__anon_1733
ffffffff80019ae0 l     O .rodata	0000000000000001 fmt.format__anon_1724__anon_1740
ffffffff80019b70 l     O .rodata	0000000000000001 fmt.format__anon_1724__anon_1746
ffffffff80019c00 l     O .rodata	0000000000000001 fmt.format__anon_1724__anon_1753
ffffffff80019c20 l     O .rodata	0000000000000018 fmt.format__anon_1757__anon_1761
ffffffff80019c38 l     O .rodata	0000000000000001 fmt.format__anon_1757__anon_1764
ffffffff80019cc8 l     O .rodata	0000000000000001 fmt.format__anon_1757__anon_1770
ffffffff80019ce8 l     O .rodata	0000000000000018 fmt.format__anon_1788__anon_1792
ffffffff80019d00 l     O .rodata	0000000000000001 fmt.format__anon_1788__anon_1795
ffffffff80019d90 l     O .rodata	0000000000000001 fmt.format__anon_1788__anon_1802
ffffffff80019db0 l     O .rodata	0000000000000018 fmt.format__anon_1807__anon_1811
ffffffff80019dc8 l     O .rodata	0000000000000001 fmt.format__anon_1807__anon_1814
ffffffff80019e70 l     O .rodata	0000000000000018 fmt.format__anon_1821__anon_1828
ffffffff80019e88 l     O .rodata	0000000000000001 fmt.format__anon_1821__anon_1831
ffffffff80019f18 l     O .rodata	0000000000000001 fmt.format__anon_1821__anon_1837
ffffffff80019fa8 l     O .rodata	0000000000000001 fmt.format__anon_1821__anon_1865
ffffffff8001a038 l     O .rodata	0000000000000001 fmt.format__anon_1821__anon_1872
ffffffff8001a0c8 l     O .rodata	0000000000000001 fmt.format__anon_1821__anon_1900
ffffffff8001a0f0 l     O .rodata	0000000000000008 builtin.panic_messages.cast_truncated_data
ffffffff8001a0f8 l     O .rodata	0000000000000008 builtin.panic_messages.corrupt_switch
ffffffff8001a100 l     O .rodata	000000000000000c main.serial_port
ffffffff8001a110 l     O .rodata	0000000000000018 fmt.format__anon_2427__anon_2431
ffffffff8001a128 l     O .rodata	0000000000000001 fmt.format__anon_2427__anon_2434
ffffffff8001a1d0 l     O .rodata	0000000000000018 fmt.format__anon_2444__anon_2448
ffffffff8001a1e8 l     O .rodata	0000000000000001 fmt.format__anon_2444__anon_2451
ffffffff8001a278 l     O .rodata	0000000000000001 fmt.format__anon_2444__anon_2458
ffffffff8001a292 l     O .rodata	0000000000000002 fmt.max_format_args
ffffffff8001a298 l     O .rodata	0000000000000001 fmt.formatType__anon_1477__anon_2770
ffffffff8001a2b0 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_2779__anon_2782
ffffffff8001a2b8 l     O .rodata	0000000000000008 builtin.panic_messages.integer_overflow
ffffffff8001a2c0 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_2868__anon_2870
ffffffff8001a2c1 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_2875__anon_2877
ffffffff8001a2c8 l     O .rodata	0000000000000008 builtin.panic_messages.cast_to_null
ffffffff8001a2d0 l     O .rodata	0000000000000008 builtin.panic_messages.incorrect_alignment
ffffffff8001a2d8 l     O .rodata	0000000000000018 fmt.formatType__anon_1706__anon_2934
ffffffff8001b828 l     O .rodata	000000000000000b fmt.formatType__anon_1706__anon_2933
ffffffff8001a428 l     O .rodata	0000000000000018 fmt.formatType__anon_1800__anon_2989
ffffffff8001b833 l     O .rodata	0000000000000005 fmt.formatType__anon_1800__anon_2988
ffffffff8001a458 l     O .rodata	0000000000000001 fmt.formatType__anon_1800__anon_2974
ffffffff8001a480 l     O .rodata	0000000000000001 fmt.formatType__anon_1800__anon_2976
ffffffff8001a4a8 l     O .rodata	0000000000000001 fmt.formatType__anon_1800__anon_2978
ffffffff8001a4d0 l     O .rodata	0000000000000001 fmt.formatType__anon_1800__anon_2980
ffffffff8001a4f8 l     O .rodata	0000000000000001 fmt.formatType__anon_1800__anon_2982
ffffffff8001a520 l     O .rodata	0000000000000001 fmt.formatType__anon_1800__anon_2984
ffffffff8001a548 l     O .rodata	0000000000000001 fmt.formatType__anon_1800__anon_2986
ffffffff8001a570 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3003__anon_3005
ffffffff8001a571 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3011__anon_3013
ffffffff8001a578 l     O .rodata	0000000000000018 fmt.format__anon_3030__anon_3034
ffffffff8001a590 l     O .rodata	0000000000000001 fmt.format__anon_3030__anon_3037
ffffffff8001a620 l     O .rodata	0000000000000001 fmt.format__anon_3030__anon_3044
ffffffff8001a63a l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3049__anon_3051
ffffffff8001a658 l     O .rodata	0000000000000002 fmt.formatType__anon_2456__anon_3072
ffffffff8001a680 l     O .rodata	0000000000000002 fmt.formatType__anon_2456__anon_3074
ffffffff8001a6a8 l     O .rodata	0000000000000002 fmt.formatType__anon_2456__anon_3076
ffffffff8001a6d0 l     O .rodata	0000000000000002 fmt.formatType__anon_2456__anon_3078
ffffffff8001c8b0 l     O .rodata	0000000000000004 fmt.formatType__anon_2456__anon_3080
ffffffff8001c8b4 l     O .rodata	0000000000000004 fmt.formatType__anon_2456__anon_3082
ffffffff8001a738 l     O .rodata	0000000000000008 builtin.panic_messages.unreach
ffffffff8001a740 l     O .rodata	0000000000000008 builtin.panic_messages.unwrap_null
ffffffff8001a748 l     O .rodata	0000000000000008 fmt.ANY
ffffffff8001a768 l     O .rodata	0000000000000001 fmt.formatType__anon_2774__anon_3100
ffffffff8001a780 l     O .rodata	0000000000000008 builtin.panic_messages.divide_by_zero
ffffffff8001a788 l     O .rodata	0000000000000018 fmt.format__anon_3120__anon_3126
ffffffff8001a7a0 l     O .rodata	0000000000000001 fmt.format__anon_3120__anon_3129
ffffffff8001a830 l     O .rodata	0000000000000001 fmt.format__anon_3120__anon_3135
ffffffff8001a918 l     O .rodata	0000000000000018 fmt.formatType__anon_2904__anon_3170
ffffffff8001b838 l     O .rodata	000000000000000b fmt.formatType__anon_2904__anon_3169
ffffffff8001a9e8 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3183__anon_3185
ffffffff8001a9e9 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3191__anon_3193
ffffffff8001aa18 l     O .rodata	0000000000000018 fmt.format__anon_3248__anon_3253
ffffffff8001aa30 l     O .rodata	0000000000000001 fmt.format__anon_3248__anon_3256
ffffffff8001aac0 l     O .rodata	0000000000000001 fmt.format__anon_3248__anon_3284
ffffffff8001ab50 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3298__anon_3300
ffffffff8001ab70 l     O .rodata	0000000000000001 fmt.formatType__anon_3089__anon_3335
ffffffff8001ab98 l     O .rodata	0000000000000001 fmt.formatType__anon_3089__anon_3337
ffffffff8001abc0 l     O .rodata	0000000000000001 fmt.formatType__anon_3089__anon_3339
ffffffff8001abe8 l     O .rodata	0000000000000001 fmt.formatType__anon_3089__anon_3341
ffffffff8001ac10 l     O .rodata	0000000000000001 fmt.formatType__anon_3089__anon_3343
ffffffff8001ac38 l     O .rodata	0000000000000001 fmt.formatType__anon_3089__anon_3345
ffffffff8001ac60 l     O .rodata	0000000000000018 fmt.format__anon_3356__anon_3361
ffffffff8001ac78 l     O .rodata	0000000000000001 fmt.format__anon_3356__anon_3364
ffffffff8001ad08 l     O .rodata	0000000000000001 fmt.format__anon_3356__anon_3370
ffffffff8001adb0 l     O .rodata	0000000000000001 fmt.formatType__anon_3133__anon_3381
ffffffff8001adc0 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3383__anon_3385
ffffffff8001adc1 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3387__anon_3389
ffffffff8001adc8 l     O .rodata	0000000000000018 fmt.format__anon_3393__anon_3399
ffffffff8001ade0 l     O .rodata	0000000000000001 fmt.format__anon_3393__anon_3402
ffffffff8001ae70 l     O .rodata	0000000000000001 fmt.format__anon_3393__anon_3407
ffffffff8001afb8 l     O .rodata	0000000000000008 builtin.panic_messages.negative_to_unsigned
ffffffff8001afc0 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3445__anon_3447
ffffffff8001afc8 l     O .rodata	0000000000000008 builtin.panic_messages.for_len_mismatch
ffffffff8001b028 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3466__anon_3468
ffffffff8001b029 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3475__anon_3477
ffffffff8001b02a l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3484__anon_3486
ffffffff8001b02b l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3493__anon_3495
ffffffff8001b02c l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3502__anon_3504
ffffffff8001b030 l     O .rodata	0000000000000008 builtin.panic_messages.shift_rhs_too_big
ffffffff8001b038 l     O .rodata	0000000000000018 fmt.format__anon_3510__anon_3515
ffffffff8001b050 l     O .rodata	0000000000000001 fmt.format__anon_3510__anon_3518
ffffffff8001b051 l     O .rodata	0000000000000003 fmt.cacheString__anon_3543
ffffffff8001b0e0 l     O .rodata	0000000000000001 fmt.format__anon_3510__anon_3548
ffffffff8001b170 l     O .rodata	0000000000000001 fmt.formatIntValue__anon_3555__anon_3557
0000000000000000 l    df *ABS*	0000000000000000 compiler_rt
ffffffff80017ac0 l     F .text	00000000000002f9 compiler_rt.udivmod.udivmod__anon_3414
ffffffff80003990 g     F .text	000000000000086a _start
ffffffff8001d910 g     O .data	0000000000000030 info_request
ffffffff8001d940 g     O .data	0000000000000030 memory_map_request
ffffffff8001d970 g     O .data	0000000000000030 device_tree_request
ffffffff8001d9a0 g     O .data	0000000000000030 sys_table_request
ffffffff8001d9d0 g     O .data	0000000000000030 rsdp_request
ffffffff80017df0  w    F .text	0000000000000036 __zig_probe_stack
ffffffff80017f00  w    F .text	0000000000000082 memset
ffffffff80017dd0  w    F .text	000000000000001f __umodti3
ffffffff80017dc0  w    F .text	000000000000000d __udivti3
ffffffff8000bad0 g     F .text	0000000000000027 catcher
ffffffff8000bc90 g     F .text	0000000000000062 handler_fn
ffffffff80017e30  w    F .text	00000000000000cb memcpy



Disassembly of section .text:

ffffffff80000000 <target.Target.Cpu.Feature.feature_set_fns(target.x86.Feature).featureSet>:
            };

            pub fn feature_set_fns(comptime F: type) type {
                return struct {
                    /// Populates only the feature bits specified.
                    pub fn featureSet(features: []const F) Set {
ffffffff80000000:	55                   	push   rbp
ffffffff80000001:	48 89 e5             	mov    rbp,rsp
ffffffff80000004:	48 83 ec 70          	sub    rsp,0x70
ffffffff80000008:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffffffff8000000c:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
ffffffff80000010:	48 89 d0             	mov    rax,rdx
ffffffff80000013:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80000017:	48 89 f0             	mov    rax,rsi
ffffffff8000001a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff8000001e:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80000022:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
                        var x = Set.empty;
ffffffff80000026:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff8000002d:	00 
ffffffff8000002e:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80000035:	00 
ffffffff80000036:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff8000003d:	00 
ffffffff8000003e:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80000045:	00 
ffffffff80000046:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff8000004d:	00 
ffffffff8000004e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80000055:	00 
ffffffff80000056:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
                        for (features) |feature| {
ffffffff8000005a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000005e:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80000062:	48 39 c8             	cmp    rax,rcx
ffffffff80000065:	73 1f                	jae    ffffffff80000086 <target.Target.Cpu.Feature.feature_set_fns(target.x86.Feature).featureSet+0x86>
ffffffff80000067:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8000006b:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffffffff8000006f:	0f b6 04 08          	movzx  eax,BYTE PTR [rax+rcx*1]
ffffffff80000073:	88 c1                	mov    cl,al
ffffffff80000075:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
                            x.addFeature(@enumToInt(feature));
ffffffff80000078:	66 89 c6             	mov    si,ax
ffffffff8000007b:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff8000007f:	e8 4c 00 00 00       	call   ffffffff800000d0 <target.Target.Cpu.Feature.Set.addFeature>
ffffffff80000084:	eb 02                	jmp    ffffffff80000088 <target.Target.Cpu.Feature.feature_set_fns(target.x86.Feature).featureSet+0x88>
ffffffff80000086:	eb 0e                	jmp    ffffffff80000096 <target.Target.Cpu.Feature.feature_set_fns(target.x86.Feature).featureSet+0x96>
ffffffff80000088:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff8000008c:	48 83 c0 01          	add    rax,0x1
ffffffff80000090:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000094:	eb c0                	jmp    ffffffff80000056 <target.Target.Cpu.Feature.feature_set_fns(target.x86.Feature).featureSet+0x56>
ffffffff80000096:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8000009a:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
                        }
                        return x;
ffffffff8000009e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800000a2:	48 89 51 20          	mov    QWORD PTR [rcx+0x20],rdx
ffffffff800000a6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff800000aa:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
ffffffff800000ae:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff800000b2:	48 89 51 10          	mov    QWORD PTR [rcx+0x10],rdx
ffffffff800000b6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffffffff800000ba:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffffffff800000be:	48 89 71 08          	mov    QWORD PTR [rcx+0x8],rsi
ffffffff800000c2:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff800000c5:	48 83 c4 70          	add    rsp,0x70
ffffffff800000c9:	5d                   	pop    rbp
ffffffff800000ca:	c3                   	ret
ffffffff800000cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800000d0 <target.Target.Cpu.Feature.Set.addFeature>:
                pub fn addFeature(set: *Set, arch_feature_index: Index) void {
ffffffff800000d0:	55                   	push   rbp
ffffffff800000d1:	48 89 e5             	mov    rbp,rsp
ffffffff800000d4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800000d8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800000dc:	66 89 f1             	mov    cx,si
ffffffff800000df:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800000e3:	66 89 c8             	mov    ax,cx
ffffffff800000e6:	89 c1                	mov    ecx,eax
ffffffff800000e8:	81 e1 ff 01 00 00    	and    ecx,0x1ff
ffffffff800000ee:	66 89 4d f2          	mov    WORD PTR [rbp-0xe],cx
                    const usize_index = arch_feature_index / @bitSizeOf(usize);
ffffffff800000f2:	89 c1                	mov    ecx,eax
ffffffff800000f4:	c1 e9 06             	shr    ecx,0x6
ffffffff800000f7:	83 e1 07             	and    ecx,0x7
ffffffff800000fa:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx
ffffffff800000fe:	66 89 4d f4          	mov    WORD PTR [rbp-0xc],cx
                    const bit_index = @intCast(ShiftInt, arch_feature_index % @bitSizeOf(usize));
ffffffff80000102:	83 e0 3f             	and    eax,0x3f
ffffffff80000105:	66 89 c1             	mov    cx,ax
ffffffff80000108:	66 89 4d e6          	mov    WORD PTR [rbp-0x1a],cx
ffffffff8000010c:	83 f0 3f             	xor    eax,0x3f
ffffffff8000010f:	66 83 e8 3f          	sub    ax,0x3f
ffffffff80000113:	77 04                	ja     ffffffff80000119 <target.Target.Cpu.Feature.Set.addFeature+0x49>
ffffffff80000115:	eb 00                	jmp    ffffffff80000117 <target.Target.Cpu.Feature.Set.addFeature+0x47>
ffffffff80000117:	eb 1c                	jmp    ffffffff80000135 <target.Target.Cpu.Feature.Set.addFeature+0x65>
ffffffff80000119:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80000120:	48 c7 c1 48 b8 01 80 	mov    rcx,0xffffffff8001b848
ffffffff80000127:	31 c0                	xor    eax,eax
ffffffff80000129:	89 c2                	mov    edx,eax
ffffffff8000012b:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80000130:	e8 7b 00 00 00       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80000135:	66 8b 45 e4          	mov    ax,WORD PTR [rbp-0x1c]
ffffffff80000139:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000013d:	66 8b 55 e6          	mov    dx,WORD PTR [rbp-0x1a]
ffffffff80000141:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
ffffffff80000144:	80 e2 3f             	and    dl,0x3f
ffffffff80000147:	88 55 f7             	mov    BYTE PTR [rbp-0x9],dl
                    set.ints[usize_index] |= @as(usize, 1) << bit_index;
ffffffff8000014a:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff8000014e:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffffffff80000152:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80000156:	0f b7 c0             	movzx  eax,ax
ffffffff80000159:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff8000015e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80000162:	48 83 f8 05          	cmp    rax,0x5
ffffffff80000166:	73 02                	jae    ffffffff8000016a <target.Target.Cpu.Feature.Set.addFeature+0x9a>
ffffffff80000168:	eb 0e                	jmp    ffffffff80000178 <target.Target.Cpu.Feature.Set.addFeature+0xa8>
ffffffff8000016a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000016e:	be 05 00 00 00       	mov    esi,0x5
ffffffff80000173:	e8 58 00 00 00       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80000178:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000017c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80000180:	8a 4d c7             	mov    cl,BYTE PTR [rbp-0x39]
ffffffff80000183:	48 8b 14 d0          	mov    rdx,QWORD PTR [rax+rdx*8]
ffffffff80000187:	0f b6 c9             	movzx  ecx,cl
ffffffff8000018a:	83 e1 3f             	and    ecx,0x3f
ffffffff8000018d:	be 01 00 00 00       	mov    esi,0x1
ffffffff80000192:	48 d3 e6             	shl    rsi,cl
ffffffff80000195:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff80000199:	48 09 f2             	or     rdx,rsi
ffffffff8000019c:	48 89 14 c8          	mov    QWORD PTR [rax+rcx*8],rdx
ffffffff800001a0:	48 83 c4 40          	add    rsp,0x40
ffffffff800001a4:	5d                   	pop    rbp
ffffffff800001a5:	c3                   	ret
ffffffff800001a6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800001ad:	00 00 00 

ffffffff800001b0 <builtin.default_panic>:
else
    default_panic;

/// This function is used by the Zig language code generation and
/// therefore must be kept in sync with the compiler implementation.
pub fn default_panic(msg: []const u8, error_return_trace: ?*StackTrace, ret_addr: ?usize) noreturn {
ffffffff800001b0:	55                   	push   rbp
ffffffff800001b1:	48 89 e5             	mov    rbp,rsp
ffffffff800001b4:	48 83 ec 18          	sub    rsp,0x18
ffffffff800001b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800001bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800001c0:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
        }
    }
    switch (builtin.os.tag) {
        .freestanding => {
            while (true) {
                @breakpoint();
ffffffff800001c4:	cc                   	int3
ffffffff800001c5:	eb fd                	jmp    ffffffff800001c4 <builtin.default_panic+0x14>
ffffffff800001c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800001ce:	00 00 

ffffffff800001d0 <builtin.panicOutOfBounds>:
pub fn panicUnwrapError(st: ?*StackTrace, err: anyerror) noreturn {
    @setCold(true);
    std.debug.panicExtra(st, @returnAddress(), "attempt to unwrap error: {s}", .{@errorName(err)});
}

pub fn panicOutOfBounds(index: usize, len: usize) noreturn {
ffffffff800001d0:	55                   	push   rbp
ffffffff800001d1:	48 89 e5             	mov    rbp,rsp
ffffffff800001d4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800001d8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800001dc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
    @setCold(true);
    std.debug.panicExtra(null, @returnAddress(), "index out of bounds: index {d}, len {d}", .{ index, len });
ffffffff800001e0:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
ffffffff800001e4:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff800001e8:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
ffffffff800001ec:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800001f0:	c6 45 f8 01          	mov    BYTE PTR [rbp-0x8],0x1
ffffffff800001f4:	31 c0                	xor    eax,eax
ffffffff800001f6:	31 c0                	xor    eax,eax
ffffffff800001f8:	89 c7                	mov    edi,eax
ffffffff800001fa:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800001fe:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
ffffffff80000202:	e8 09 48 00 00       	call   ffffffff80004a10 <debug.panicExtra__anon_1903>
ffffffff80000207:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000020e:	00 00 

ffffffff80000210 <target.Target.Cpu.Arch.isWasm>:
                    .thumb, .thumbeb => true,
                    else => false,
                };
            }

            pub fn isWasm(arch: Arch) bool {
ffffffff80000210:	55                   	push   rbp
ffffffff80000211:	48 89 e5             	mov    rbp,rsp
ffffffff80000214:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000218:	40 88 f8             	mov    al,dil
ffffffff8000021b:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
ffffffff8000021e:	88 c1                	mov    cl,al
ffffffff80000220:	80 e1 3f             	and    cl,0x3f
ffffffff80000223:	88 4d fe             	mov    BYTE PTR [rbp-0x2],cl
                return switch (arch) {
ffffffff80000226:	04 0a                	add    al,0xa
ffffffff80000228:	24 3f                	and    al,0x3f
ffffffff8000022a:	2c 02                	sub    al,0x2
ffffffff8000022c:	72 13                	jb     ffffffff80000241 <target.Target.Cpu.Arch.isWasm+0x31>
ffffffff8000022e:	eb 00                	jmp    ffffffff80000230 <target.Target.Cpu.Arch.isWasm+0x20>
ffffffff80000230:	8a 45 fd             	mov    al,BYTE PTR [rbp-0x3]
ffffffff80000233:	0f b6 f8             	movzx  edi,al
ffffffff80000236:	e8 45 00 00 00       	call   ffffffff80000280 <__zig_is_named_enum_value_target.Target.Cpu.Arch>
ffffffff8000023b:	a8 01                	test   al,0x1
ffffffff8000023d:	75 08                	jne    ffffffff80000247 <target.Target.Cpu.Arch.isWasm+0x37>
ffffffff8000023f:	eb 08                	jmp    ffffffff80000249 <target.Target.Cpu.Arch.isWasm+0x39>
ffffffff80000241:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
ffffffff80000245:	eb 22                	jmp    ffffffff80000269 <target.Target.Cpu.Arch.isWasm+0x59>
ffffffff80000247:	eb 1c                	jmp    ffffffff80000265 <target.Target.Cpu.Arch.isWasm+0x55>
ffffffff80000249:	48 c7 c7 9b b1 01 80 	mov    rdi,0xffffffff8001b19b
ffffffff80000250:	48 c7 c1 58 b8 01 80 	mov    rcx,0xffffffff8001b858
ffffffff80000257:	31 c0                	xor    eax,eax
ffffffff80000259:	89 c2                	mov    edx,eax
ffffffff8000025b:	be 17 00 00 00       	mov    esi,0x17
ffffffff80000260:	e8 4b ff ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80000265:	c6 45 ff 00          	mov    BYTE PTR [rbp-0x1],0x0
ffffffff80000269:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
ffffffff8000026c:	48 83 c4 10          	add    rsp,0x10
ffffffff80000270:	5d                   	pop    rbp
ffffffff80000271:	c3                   	ret
ffffffff80000272:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000279:	00 00 00 
ffffffff8000027c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80000280 <__zig_is_named_enum_value_target.Target.Cpu.Arch>:
ffffffff80000280:	55                   	push   rbp
ffffffff80000281:	48 89 e5             	mov    rbp,rsp
ffffffff80000284:	40 88 f8             	mov    al,dil
ffffffff80000287:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff8000028a:	c0 e0 02             	shl    al,0x2
ffffffff8000028d:	c0 f8 02             	sar    al,0x2
ffffffff80000290:	2c fc                	sub    al,0xfc
ffffffff80000292:	7c 11                	jl     ffffffff800002a5 <__zig_is_named_enum_value_target.Target.Cpu.Arch+0x25>
ffffffff80000294:	eb 00                	jmp    ffffffff80000296 <__zig_is_named_enum_value_target.Target.Cpu.Arch+0x16>
ffffffff80000296:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
ffffffff80000299:	c0 e0 02             	shl    al,0x2
ffffffff8000029c:	c0 f8 02             	sar    al,0x2
ffffffff8000029f:	84 c0                	test   al,al
ffffffff800002a1:	78 06                	js     ffffffff800002a9 <__zig_is_named_enum_value_target.Target.Cpu.Arch+0x29>
ffffffff800002a3:	eb 00                	jmp    ffffffff800002a5 <__zig_is_named_enum_value_target.Target.Cpu.Arch+0x25>
ffffffff800002a5:	b0 01                	mov    al,0x1
ffffffff800002a7:	5d                   	pop    rbp
ffffffff800002a8:	c3                   	ret
ffffffff800002a9:	31 c0                	xor    eax,eax
ffffffff800002ab:	5d                   	pop    rbp
ffffffff800002ac:	c3                   	ret
ffffffff800002ad:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800002b0 <fmt.format__anon_1314>:
/// To print literal curly braces, escape them by writing them twice, e.g. `{{` or `}}`.
pub fn format(
    writer: anytype,
    comptime fmt: []const u8,
    args: anytype,
) !void {
ffffffff800002b0:	55                   	push   rbp
ffffffff800002b1:	48 89 e5             	mov    rbp,rsp
ffffffff800002b4:	48 83 ec 20          	sub    rsp,0x20
ffffffff800002b8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
            i += 2;
        }

        // Write out the literal
        if (start_index != end_index) {
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800002bc:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff800002bf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800002c3:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff800002c6:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800002c9:	b0 01                	mov    al,0x1
ffffffff800002cb:	a8 01                	test   al,0x1
ffffffff800002cd:	75 02                	jne    ffffffff800002d1 <fmt.format__anon_1314+0x21>
ffffffff800002cf:	eb 02                	jmp    ffffffff800002d3 <fmt.format__anon_1314+0x23>
ffffffff800002d1:	eb 10                	jmp    ffffffff800002e3 <fmt.format__anon_1314+0x33>
ffffffff800002d3:	31 c0                	xor    eax,eax
ffffffff800002d5:	31 c0                	xor    eax,eax
ffffffff800002d7:	89 c7                	mov    edi,eax
ffffffff800002d9:	be 18 00 00 00       	mov    esi,0x18
ffffffff800002de:	e8 2d 00 00 00       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800002e3:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff800002e7:	48 c7 c2 b3 b1 01 80 	mov    rdx,0xffffffff8001b1b3
ffffffff800002ee:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800002f2:	b9 18 00 00 00       	mov    ecx,0x18
ffffffff800002f7:	e8 54 00 00 00       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
            writer,
            std.options.fmt_max_depth,
        );
    }

    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800002fc:	31 c0                	xor    eax,eax
ffffffff800002fe:	48 83 c4 20          	add    rsp,0x20
ffffffff80000302:	5d                   	pop    rbp
ffffffff80000303:	c3                   	ret
ffffffff80000304:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000030b:	00 00 00 
ffffffff8000030e:	66 90                	xchg   ax,ax

ffffffff80000310 <builtin.panicStartGreaterThanEnd>:
}

pub fn panicStartGreaterThanEnd(start: usize, end: usize) noreturn {
ffffffff80000310:	55                   	push   rbp
ffffffff80000311:	48 89 e5             	mov    rbp,rsp
ffffffff80000314:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000318:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000031c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
    @setCold(true);
    std.debug.panicExtra(null, @returnAddress(), "start index {d} is larger than end index {d}", .{ start, end });
ffffffff80000320:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
ffffffff80000324:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff80000328:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
ffffffff8000032c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000330:	c6 45 f8 01          	mov    BYTE PTR [rbp-0x8],0x1
ffffffff80000334:	31 c0                	xor    eax,eax
ffffffff80000336:	31 c0                	xor    eax,eax
ffffffff80000338:	89 c7                	mov    edi,eax
ffffffff8000033a:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000033e:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
ffffffff80000342:	e8 c9 56 00 00       	call   ffffffff80005a10 <debug.panicExtra__anon_2462>
ffffffff80000347:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000034e:	00 00 

ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>:

        pub fn write(self: Self, bytes: []const u8) Error!usize {
            return writeFn(self.context, bytes);
        }

        pub fn writeAll(self: Self, bytes: []const u8) Error!void {
ffffffff80000350:	55                   	push   rbp
ffffffff80000351:	48 89 e5             	mov    rbp,rsp
ffffffff80000354:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
ffffffff8000035b:	48 89 b5 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rsi
ffffffff80000362:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
ffffffff80000366:	48 89 c8             	mov    rax,rcx
ffffffff80000369:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000036d:	48 89 d0             	mov    rax,rdx
ffffffff80000370:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80000374:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
ffffffff80000378:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
            var index: usize = 0;
ffffffff8000037c:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffffffff80000383:	00 
ffffffff80000384:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
            while (index != bytes.len) {
ffffffff80000388:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8000038c:	48 39 c8             	cmp    rax,rcx
ffffffff8000038f:	74 68                	je     ffffffff800003f9 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0xa9>
ffffffff80000391:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80000395:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff80000399:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
                index += try self.write(bytes[index..]);
ffffffff800003a0:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
ffffffff800003a4:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
ffffffff800003ab:	8b 72 08             	mov    esi,DWORD PTR [rdx+0x8]
ffffffff800003ae:	89 75 b8             	mov    DWORD PTR [rbp-0x48],esi
ffffffff800003b1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff800003b4:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffffffff800003b8:	8b 55 b8             	mov    edx,DWORD PTR [rbp-0x48]
ffffffff800003bb:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
ffffffff800003be:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff800003c2:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff800003c6:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff800003ca:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800003ce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800003d2:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
ffffffff800003d9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800003dd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff800003e1:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffffffff800003e8:	48 01 c2             	add    rdx,rax
ffffffff800003eb:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
ffffffff800003f2:	48 39 c8             	cmp    rax,rcx
ffffffff800003f5:	76 07                	jbe    ffffffff800003fe <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0xae>
ffffffff800003f7:	eb 07                	jmp    ffffffff80000400 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0xb0>
ffffffff800003f9:	e9 d7 00 00 00       	jmp    ffffffff800004d5 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0x185>
ffffffff800003fe:	eb 13                	jmp    ffffffff80000413 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0xc3>
ffffffff80000400:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
ffffffff80000407:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
ffffffff8000040e:	e8 fd fe ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000413:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000041a:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffffffff80000421:	48 89 c1             	mov    rcx,rax
ffffffff80000424:	48 29 d1             	sub    rcx,rdx
ffffffff80000427:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
ffffffff8000042e:	48 39 c0             	cmp    rax,rax
ffffffff80000431:	77 02                	ja     ffffffff80000435 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0xe5>
ffffffff80000433:	eb 0f                	jmp    ffffffff80000444 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0xf4>
ffffffff80000435:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
ffffffff8000043c:	48 89 f7             	mov    rdi,rsi
ffffffff8000043f:	e8 8c fd ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80000444:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000044b:	48 8b 8d 68 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x98]
ffffffff80000452:	48 39 c8             	cmp    rax,rcx
ffffffff80000455:	77 02                	ja     ffffffff80000459 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0x109>
ffffffff80000457:	eb 13                	jmp    ffffffff8000046c <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0x11c>
ffffffff80000459:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
ffffffff80000460:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
ffffffff80000467:	e8 64 fd ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000046c:	4c 8b 85 50 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb0]
ffffffff80000473:	48 8b 8d 70 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x90]
ffffffff8000047a:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
ffffffff8000047e:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80000482:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
ffffffff80000486:	e8 05 55 00 00       	call   ffffffff80005990 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).write>
ffffffff8000048b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80000492:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff80000496:	48 01 c8             	add    rax,rcx
ffffffff80000499:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000049d:	0f 92 45 f8          	setb   BYTE PTR [rbp-0x8]
ffffffff800004a1:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff800004a4:	84 c0                	test   al,al
ffffffff800004a6:	75 04                	jne    ffffffff800004ac <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0x15c>
ffffffff800004a8:	eb 00                	jmp    ffffffff800004aa <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0x15a>
ffffffff800004aa:	eb 1c                	jmp    ffffffff800004c8 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0x178>
ffffffff800004ac:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800004b3:	48 c7 c1 48 b9 01 80 	mov    rcx,0xffffffff8001b948
ffffffff800004ba:	31 c0                	xor    eax,eax
ffffffff800004bc:	89 c2                	mov    edx,eax
ffffffff800004be:	be 10 00 00 00       	mov    esi,0x10
ffffffff800004c3:	e8 e8 fc ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800004c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004cc:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff800004d0:	e9 af fe ff ff       	jmp    ffffffff80000384 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll+0x34>
ffffffff800004d5:	31 c0                	xor    eax,eax
ffffffff800004d7:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
ffffffff800004de:	5d                   	pop    rbp
ffffffff800004df:	c3                   	ret

ffffffff800004e0 <main.debug_print__anon_1081>:
    }
}

const serial_port = SerialPort.new(0x3F8);

pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff800004e0:	55                   	push   rbp
ffffffff800004e1:	48 89 e5             	mov    rbp,rsp
ffffffff800004e4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800004e8:	48 89 fe             	mov    rsi,rdi
ffffffff800004eb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff800004ef:	48 c7 c2 a2 90 01 80 	mov    rdx,0xffffffff800190a2
ffffffff800004f6:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff800004fd:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80000501:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff80000507:	e8 34 00 00 00       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff8000050c:	48 c7 c6 ae 90 01 80 	mov    rsi,0xffffffff800190ae
ffffffff80000513:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80000517:	e8 d4 00 00 00       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff8000051c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80000520:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000524:	e8 87 fd ff ff       	call   ffffffff800002b0 <fmt.format__anon_1314>
ffffffff80000529:	31 c0                	xor    eax,eax
ffffffff8000052b:	48 83 c4 30          	add    rsp,0x30
ffffffff8000052f:	5d                   	pop    rbp
ffffffff80000530:	c3                   	ret
ffffffff80000531:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000538:	00 00 00 
ffffffff8000053b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80000540 <ports.SerialPort.write_message>:
    pub fn send(self: SerialPort, data: u8) void {
        // while (self.line_sts.read() & OUTPUT_EMPTY == OUTPUT_EMPTY) {}
        self.data.write(data);
    }

    pub fn write_message(self: @This(), message: []const u8) error{}!usize {
ffffffff80000540:	55                   	push   rbp
ffffffff80000541:	48 89 e5             	mov    rbp,rsp
ffffffff80000544:	48 83 ec 70          	sub    rsp,0x70
ffffffff80000548:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffffffff8000054c:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
ffffffff80000550:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80000554:	4c 89 c0             	mov    rax,r8
ffffffff80000557:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff8000055b:	48 89 c8             	mov    rax,rcx
ffffffff8000055e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80000562:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffffffff80000566:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff8000056a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80000571:	00 
ffffffff80000572:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
        for (message) |letter| {
ffffffff80000576:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000057a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff8000057e:	48 39 c8             	cmp    rax,rcx
ffffffff80000581:	73 2d                	jae    ffffffff800005b0 <ports.SerialPort.write_message+0x70>
ffffffff80000583:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
ffffffff80000587:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000058b:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffffffff8000058f:	8a 04 10             	mov    al,BYTE PTR [rax+rdx*1]
ffffffff80000592:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
            self.send(letter);
ffffffff80000595:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
ffffffff80000598:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff8000059c:	8b 49 08             	mov    ecx,DWORD PTR [rcx+0x8]
ffffffff8000059f:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
ffffffff800005a2:	0f b6 f0             	movzx  esi,al
ffffffff800005a5:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff800005a9:	e8 b2 53 00 00       	call   ffffffff80005960 <ports.SerialPort.send>
ffffffff800005ae:	eb 02                	jmp    ffffffff800005b2 <ports.SerialPort.write_message+0x72>
ffffffff800005b0:	eb 0e                	jmp    ffffffff800005c0 <ports.SerialPort.write_message+0x80>
ffffffff800005b2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff800005b6:	48 83 c0 01          	add    rax,0x1
ffffffff800005ba:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800005be:	eb b2                	jmp    ffffffff80000572 <ports.SerialPort.write_message+0x32>
ffffffff800005c0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800005c4:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff800005c8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
        }

        return message.len;
ffffffff800005cc:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
ffffffff800005d2:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff800005d6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800005da:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff800005dd:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800005e1:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff800005e5:	48 83 c4 70          	add    rsp,0x70
ffffffff800005e9:	5d                   	pop    rbp
ffffffff800005ea:	c3                   	ret
ffffffff800005eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800005f0 <ports.SerialPort.writer>:
    }

    pub const Writer = std.io.Writer(@This(), error{}, write_message);

    pub fn writer(self: @This()) Writer {
ffffffff800005f0:	55                   	push   rbp
ffffffff800005f1:	48 89 e5             	mov    rbp,rsp
ffffffff800005f4:	48 89 f8             	mov    rax,rdi
        return .{ .context = self };
ffffffff800005f7:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
ffffffff800005fa:	48 89 0f             	mov    QWORD PTR [rdi],rcx
ffffffff800005fd:	8b 4e 08             	mov    ecx,DWORD PTR [rsi+0x8]
ffffffff80000600:	89 4f 08             	mov    DWORD PTR [rdi+0x8],ecx
ffffffff80000603:	5d                   	pop    rbp
ffffffff80000604:	c3                   	ret
ffffffff80000605:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000060c:	00 00 00 
ffffffff8000060f:	90                   	nop

ffffffff80000610 <fmt.format__anon_1327>:
) !void {
ffffffff80000610:	55                   	push   rbp
ffffffff80000611:	48 89 e5             	mov    rbp,rsp
ffffffff80000614:	48 83 ec 60          	sub    rsp,0x60
ffffffff80000618:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff8000061c:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff80000620:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000624:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80000627:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff8000062b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000062e:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
ffffffff80000631:	b0 01                	mov    al,0x1
ffffffff80000633:	a8 01                	test   al,0x1
ffffffff80000635:	75 02                	jne    ffffffff80000639 <fmt.format__anon_1327+0x29>
ffffffff80000637:	eb 02                	jmp    ffffffff8000063b <fmt.format__anon_1327+0x2b>
ffffffff80000639:	eb 10                	jmp    ffffffff8000064b <fmt.format__anon_1327+0x3b>
ffffffff8000063b:	31 c0                	xor    eax,eax
ffffffff8000063d:	31 c0                	xor    eax,eax
ffffffff8000063f:	89 c7                	mov    edi,eax
ffffffff80000641:	be 08 00 00 00       	mov    esi,0x8
ffffffff80000646:	e8 c5 fc ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000064b:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000064f:	48 c7 c2 d6 b1 01 80 	mov    rdx,0xffffffff8001b1d6
ffffffff80000656:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff8000065a:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff8000065f:	e8 ec fc ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80000664:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80000668:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff8000066c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80000670:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80000677:	00 
        try formatType(
ffffffff80000678:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff8000067b:	48 c7 c2 40 91 01 80 	mov    rdx,0xffffffff80019140
ffffffff80000682:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80000688:	e8 c3 00 00 00       	call   ffffffff80000750 <fmt.formatType__anon_1477>
ffffffff8000068d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000691:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000694:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80000698:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000069b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff8000069e:	b0 01                	mov    al,0x1
ffffffff800006a0:	a8 01                	test   al,0x1
ffffffff800006a2:	75 02                	jne    ffffffff800006a6 <fmt.format__anon_1327+0x96>
ffffffff800006a4:	eb 02                	jmp    ffffffff800006a8 <fmt.format__anon_1327+0x98>
ffffffff800006a6:	eb 0f                	jmp    ffffffff800006b7 <fmt.format__anon_1327+0xa7>
ffffffff800006a8:	bf 0b 00 00 00       	mov    edi,0xb
ffffffff800006ad:	be 17 00 00 00       	mov    esi,0x17
ffffffff800006b2:	e8 59 fc ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800006b7:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff800006bb:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff800006bf:	48 c7 c2 e1 b1 01 80 	mov    rdx,0xffffffff8001b1e1
ffffffff800006c6:	b9 0c 00 00 00       	mov    ecx,0xc
ffffffff800006cb:	e8 80 fc ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800006d0:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff800006d4:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff800006d8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800006dc:	48 c7 45 e8 01 00 00 	mov    QWORD PTR [rbp-0x18],0x1
ffffffff800006e3:	00 
        try formatType(
ffffffff800006e4:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
            std.options.fmt_max_depth,
ffffffff800006e8:	48 c7 c2 d0 91 01 80 	mov    rdx,0xffffffff800191d0
ffffffff800006ef:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800006f5:	e8 56 00 00 00       	call   ffffffff80000750 <fmt.formatType__anon_1477>
ffffffff800006fa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800006fe:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000701:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80000705:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000708:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000070b:	b0 01                	mov    al,0x1
ffffffff8000070d:	a8 01                	test   al,0x1
ffffffff8000070f:	75 02                	jne    ffffffff80000713 <fmt.format__anon_1327+0x103>
ffffffff80000711:	eb 02                	jmp    ffffffff80000715 <fmt.format__anon_1327+0x105>
ffffffff80000713:	eb 0f                	jmp    ffffffff80000724 <fmt.format__anon_1327+0x114>
ffffffff80000715:	bf 1a 00 00 00       	mov    edi,0x1a
ffffffff8000071a:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff8000071f:	e8 ec fb ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000724:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80000728:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000072c:	48 c7 c2 f0 b1 01 80 	mov    rdx,0xffffffff8001b1f0
ffffffff80000733:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80000738:	e8 13 fc ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff8000073d:	31 c0                	xor    eax,eax
ffffffff8000073f:	48 83 c4 60          	add    rsp,0x60
ffffffff80000743:	5d                   	pop    rbp
ffffffff80000744:	c3                   	ret
ffffffff80000745:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000074c:	00 00 00 
ffffffff8000074f:	90                   	nop

ffffffff80000750 <fmt.formatType__anon_1477>:
    value: anytype,
    comptime fmt: []const u8,
    options: FormatOptions,
    writer: anytype,
    max_depth: usize,
) @TypeOf(writer).Error!void {
ffffffff80000750:	55                   	push   rbp
ffffffff80000751:	48 89 e5             	mov    rbp,rsp
ffffffff80000754:	48 83 ec 50          	sub    rsp,0x50
ffffffff80000758:	4c 89 45 d0          	mov    QWORD PTR [rbp-0x30],r8
ffffffff8000075c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80000760:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80000764:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff80000768:	48 89 f8             	mov    rax,rdi
ffffffff8000076b:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffffffff8000076f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80000773:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80000777:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
    const T = @TypeOf(value);
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000077b:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
ffffffff80000782:	00 
ffffffff80000783:	48 c7 45 e8 d9 90 01 	mov    QWORD PTR [rbp-0x18],0xffffffff800190d9
ffffffff8000078a:	80 
            },
            .Many, .C => {
                if (actual_fmt.len == 0)
                    @compileError("cannot format pointer without a specifier (i.e. {s} or {*})");
                if (ptr_info.sentinel) |_| {
                    return formatType(mem.span(value), actual_fmt, options, writer, max_depth);
ffffffff8000078b:	e8 b0 5f 00 00       	call   ffffffff80006740 <mem.span__anon_2771>
ffffffff80000790:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80000794:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff80000798:	4c 8b 45 c8          	mov    r8,QWORD PTR [rbp-0x38]
ffffffff8000079c:	4c 8b 4d d0          	mov    r9,QWORD PTR [rbp-0x30]
ffffffff800007a0:	48 89 c6             	mov    rsi,rax
ffffffff800007a3:	e8 48 60 00 00       	call   ffffffff800067f0 <fmt.formatType__anon_2774>
ffffffff800007a8:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800007ac:	b0 01                	mov    al,0x1
ffffffff800007ae:	a8 01                	test   al,0x1
ffffffff800007b0:	75 02                	jne    ffffffff800007b4 <fmt.formatType__anon_1477+0x64>
ffffffff800007b2:	eb 0a                	jmp    ffffffff800007be <fmt.formatType__anon_1477+0x6e>
ffffffff800007b4:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800007b8:	48 83 c4 50          	add    rsp,0x50
ffffffff800007bc:	5d                   	pop    rbp
ffffffff800007bd:	c3                   	ret
ffffffff800007be:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff800007c2:	e8 49 2c 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff800007c7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800007cb:	48 83 c4 50          	add    rsp,0x50
ffffffff800007cf:	5d                   	pop    rbp
ffffffff800007d0:	c3                   	ret
ffffffff800007d1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800007d8:	00 00 00 
ffffffff800007db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800007e0 <main.debug_print__anon_1326>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff800007e0:	55                   	push   rbp
ffffffff800007e1:	48 89 e5             	mov    rbp,rsp
ffffffff800007e4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800007e8:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800007ec:	48 89 fe             	mov    rsi,rdi
ffffffff800007ef:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff800007f3:	48 c7 c2 fa 91 01 80 	mov    rdx,0xffffffff800191fa
ffffffff800007fa:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80000801:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80000805:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000080b:	e8 30 fd ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80000810:	48 c7 c6 06 92 01 80 	mov    rsi,0xffffffff80019206
ffffffff80000817:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000081b:	e8 d0 fd ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80000820:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000824:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80000828:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000082c:	e8 df fd ff ff       	call   ffffffff80000610 <fmt.format__anon_1327>
ffffffff80000831:	31 c0                	xor    eax,eax
ffffffff80000833:	48 83 c4 30          	add    rsp,0x30
ffffffff80000837:	5d                   	pop    rbp
ffffffff80000838:	c3                   	ret
ffffffff80000839:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80000840 <fmt.format__anon_1489>:
) !void {
ffffffff80000840:	55                   	push   rbp
ffffffff80000841:	48 89 e5             	mov    rbp,rsp
ffffffff80000844:	48 83 ec 20          	sub    rsp,0x20
ffffffff80000848:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000084c:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff8000084f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000853:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80000856:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80000859:	b0 01                	mov    al,0x1
ffffffff8000085b:	a8 01                	test   al,0x1
ffffffff8000085d:	75 02                	jne    ffffffff80000861 <fmt.format__anon_1489+0x21>
ffffffff8000085f:	eb 02                	jmp    ffffffff80000863 <fmt.format__anon_1489+0x23>
ffffffff80000861:	eb 10                	jmp    ffffffff80000873 <fmt.format__anon_1489+0x33>
ffffffff80000863:	31 c0                	xor    eax,eax
ffffffff80000865:	31 c0                	xor    eax,eax
ffffffff80000867:	89 c7                	mov    edi,eax
ffffffff80000869:	be 15 00 00 00       	mov    esi,0x15
ffffffff8000086e:	e8 9d fa ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000873:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff80000877:	48 c7 c2 f2 b1 01 80 	mov    rdx,0xffffffff8001b1f2
ffffffff8000087e:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000882:	b9 15 00 00 00       	mov    ecx,0x15
ffffffff80000887:	e8 c4 fa ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff8000088c:	31 c0                	xor    eax,eax
ffffffff8000088e:	48 83 c4 20          	add    rsp,0x20
ffffffff80000892:	5d                   	pop    rbp
ffffffff80000893:	c3                   	ret
ffffffff80000894:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000089b:	00 00 00 
ffffffff8000089e:	66 90                	xchg   ax,ax

ffffffff800008a0 <main.debug_print__anon_1488>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff800008a0:	55                   	push   rbp
ffffffff800008a1:	48 89 e5             	mov    rbp,rsp
ffffffff800008a4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800008a8:	48 89 fe             	mov    rsi,rdi
ffffffff800008ab:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff800008af:	48 c7 c2 32 92 01 80 	mov    rdx,0xffffffff80019232
ffffffff800008b6:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff800008bd:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff800008c1:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff800008c7:	e8 74 fc ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff800008cc:	48 c7 c6 3e 92 01 80 	mov    rsi,0xffffffff8001923e
ffffffff800008d3:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff800008d7:	e8 14 fd ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff800008dc:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800008e0:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800008e4:	e8 57 ff ff ff       	call   ffffffff80000840 <fmt.format__anon_1489>
ffffffff800008e9:	31 c0                	xor    eax,eax
ffffffff800008eb:	48 83 c4 30          	add    rsp,0x30
ffffffff800008ef:	5d                   	pop    rbp
ffffffff800008f0:	c3                   	ret
ffffffff800008f1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800008f8:	00 00 00 
ffffffff800008fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80000900 <fmt.format__anon_1512>:
) !void {
ffffffff80000900:	55                   	push   rbp
ffffffff80000901:	48 89 e5             	mov    rbp,rsp
ffffffff80000904:	48 83 ec 40          	sub    rsp,0x40
ffffffff80000908:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff8000090c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff80000910:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000914:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80000917:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000091b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000091e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80000921:	b0 01                	mov    al,0x1
ffffffff80000923:	a8 01                	test   al,0x1
ffffffff80000925:	75 02                	jne    ffffffff80000929 <fmt.format__anon_1512+0x29>
ffffffff80000927:	eb 02                	jmp    ffffffff8000092b <fmt.format__anon_1512+0x2b>
ffffffff80000929:	eb 10                	jmp    ffffffff8000093b <fmt.format__anon_1512+0x3b>
ffffffff8000092b:	31 c0                	xor    eax,eax
ffffffff8000092d:	31 c0                	xor    eax,eax
ffffffff8000092f:	89 c7                	mov    edi,eax
ffffffff80000931:	be 06 00 00 00       	mov    esi,0x6
ffffffff80000936:	e8 d5 f9 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000093b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000093f:	48 c7 c2 08 b2 01 80 	mov    rdx,0xffffffff8001b208
ffffffff80000946:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff8000094a:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff8000094f:	e8 fc f9 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80000954:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000958:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8000095c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80000960:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80000967:	00 
        try formatType(
ffffffff80000968:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff8000096b:	48 c7 c2 d0 92 01 80 	mov    rdx,0xffffffff800192d0
ffffffff80000972:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80000978:	e8 53 00 00 00       	call   ffffffff800009d0 <fmt.formatType__anon_1544>
ffffffff8000097d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000981:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000984:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80000988:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000098b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000098e:	b0 01                	mov    al,0x1
ffffffff80000990:	a8 01                	test   al,0x1
ffffffff80000992:	75 02                	jne    ffffffff80000996 <fmt.format__anon_1512+0x96>
ffffffff80000994:	eb 02                	jmp    ffffffff80000998 <fmt.format__anon_1512+0x98>
ffffffff80000996:	eb 0f                	jmp    ffffffff800009a7 <fmt.format__anon_1512+0xa7>
ffffffff80000998:	bf 08 00 00 00       	mov    edi,0x8
ffffffff8000099d:	be 1c 00 00 00       	mov    esi,0x1c
ffffffff800009a2:	e8 69 f9 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800009a7:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800009ab:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800009af:	48 c7 c2 10 b2 01 80 	mov    rdx,0xffffffff8001b210
ffffffff800009b6:	b9 14 00 00 00       	mov    ecx,0x14
ffffffff800009bb:	e8 90 f9 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800009c0:	31 c0                	xor    eax,eax
ffffffff800009c2:	48 83 c4 40          	add    rsp,0x40
ffffffff800009c6:	5d                   	pop    rbp
ffffffff800009c7:	c3                   	ret
ffffffff800009c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800009cf:	00 

ffffffff800009d0 <fmt.formatType__anon_1544>:
) @TypeOf(writer).Error!void {
ffffffff800009d0:	55                   	push   rbp
ffffffff800009d1:	48 89 e5             	mov    rbp,rsp
ffffffff800009d4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800009d8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800009dc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800009e0:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff800009e4:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff800009eb:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff800009ee:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800009f2:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff800009f9:	00 
            return formatValue(value, actual_fmt, options, writer);
ffffffff800009fa:	e8 11 5f 00 00       	call   ffffffff80006910 <fmt.formatValue__anon_2776>
ffffffff800009ff:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80000a03:	b0 01                	mov    al,0x1
ffffffff80000a05:	a8 01                	test   al,0x1
ffffffff80000a07:	75 02                	jne    ffffffff80000a0b <fmt.formatType__anon_1544+0x3b>
ffffffff80000a09:	eb 0a                	jmp    ffffffff80000a15 <fmt.formatType__anon_1544+0x45>
ffffffff80000a0b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000a0f:	48 83 c4 30          	add    rsp,0x30
ffffffff80000a13:	5d                   	pop    rbp
ffffffff80000a14:	c3                   	ret
ffffffff80000a15:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000a19:	e8 f2 29 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff80000a1e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000a22:	48 83 c4 30          	add    rsp,0x30
ffffffff80000a26:	5d                   	pop    rbp
ffffffff80000a27:	c3                   	ret
ffffffff80000a28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80000a2f:	00 

ffffffff80000a30 <main.debug_print__anon_1511>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80000a30:	55                   	push   rbp
ffffffff80000a31:	48 89 e5             	mov    rbp,rsp
ffffffff80000a34:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000a38:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80000a3c:	48 89 fe             	mov    rsi,rdi
ffffffff80000a3f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80000a43:	48 c7 c2 fa 92 01 80 	mov    rdx,0xffffffff800192fa
ffffffff80000a4a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80000a51:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80000a55:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff80000a5b:	e8 e0 fa ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80000a60:	48 c7 c6 06 93 01 80 	mov    rsi,0xffffffff80019306
ffffffff80000a67:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80000a6b:	e8 80 fb ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80000a70:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000a74:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80000a78:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000a7c:	e8 7f fe ff ff       	call   ffffffff80000900 <fmt.format__anon_1512>
ffffffff80000a81:	31 c0                	xor    eax,eax
ffffffff80000a83:	48 83 c4 30          	add    rsp,0x30
ffffffff80000a87:	5d                   	pop    rbp
ffffffff80000a88:	c3                   	ret
ffffffff80000a89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80000a90 <fmt.format__anon_1551>:
) !void {
ffffffff80000a90:	55                   	push   rbp
ffffffff80000a91:	48 89 e5             	mov    rbp,rsp
ffffffff80000a94:	48 83 ec 50          	sub    rsp,0x50
ffffffff80000a98:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffffffff80000a9c:	48 89 f1             	mov    rcx,rsi
ffffffff80000a9f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80000aa3:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80000aa7:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80000aae:	00 
        try formatType(
ffffffff80000aaf:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
            std.options.fmt_max_depth,
ffffffff80000ab2:	48 c7 c2 98 93 01 80 	mov    rdx,0xffffffff80019398
ffffffff80000ab9:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80000abf:	e8 bc 00 00 00       	call   ffffffff80000b80 <fmt.formatType__anon_1563>
ffffffff80000ac4:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000ac8:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80000acb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80000acf:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80000ad2:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80000ad5:	b0 01                	mov    al,0x1
ffffffff80000ad7:	a8 01                	test   al,0x1
ffffffff80000ad9:	75 02                	jne    ffffffff80000add <fmt.format__anon_1551+0x4d>
ffffffff80000adb:	eb 02                	jmp    ffffffff80000adf <fmt.format__anon_1551+0x4f>
ffffffff80000add:	eb 0f                	jmp    ffffffff80000aee <fmt.format__anon_1551+0x5e>
ffffffff80000adf:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80000ae4:	be 0c 00 00 00       	mov    esi,0xc
ffffffff80000ae9:	e8 22 f8 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000aee:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80000af2:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff80000af6:	48 c7 c2 27 b2 01 80 	mov    rdx,0xffffffff8001b227
ffffffff80000afd:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff80000b02:	e8 49 f8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80000b07:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80000b0b:	4c 8b 45 c8          	mov    r8,QWORD PTR [rbp-0x38]
ffffffff80000b0f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80000b13:	48 c7 45 e8 01 00 00 	mov    QWORD PTR [rbp-0x18],0x1
ffffffff80000b1a:	00 
        try formatType(
ffffffff80000b1b:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
ffffffff80000b1f:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
            std.options.fmt_max_depth,
ffffffff80000b23:	48 c7 c1 28 94 01 80 	mov    rcx,0xffffffff80019428
ffffffff80000b2a:	41 b9 03 00 00 00    	mov    r9d,0x3
ffffffff80000b30:	e8 ab 00 00 00       	call   ffffffff80000be0 <fmt.formatType__anon_1570>
ffffffff80000b35:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000b39:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000b3c:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80000b40:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000b43:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80000b46:	b0 01                	mov    al,0x1
ffffffff80000b48:	a8 01                	test   al,0x1
ffffffff80000b4a:	75 02                	jne    ffffffff80000b4e <fmt.format__anon_1551+0xbe>
ffffffff80000b4c:	eb 02                	jmp    ffffffff80000b50 <fmt.format__anon_1551+0xc0>
ffffffff80000b4e:	eb 0f                	jmp    ffffffff80000b5f <fmt.format__anon_1551+0xcf>
ffffffff80000b50:	bf 0e 00 00 00       	mov    edi,0xe
ffffffff80000b55:	be 15 00 00 00       	mov    esi,0x15
ffffffff80000b5a:	e8 b1 f7 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000b5f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80000b63:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000b67:	48 c7 c2 33 b2 01 80 	mov    rdx,0xffffffff8001b233
ffffffff80000b6e:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80000b73:	e8 d8 f7 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80000b78:	31 c0                	xor    eax,eax
ffffffff80000b7a:	48 83 c4 50          	add    rsp,0x50
ffffffff80000b7e:	5d                   	pop    rbp
ffffffff80000b7f:	c3                   	ret

ffffffff80000b80 <fmt.formatType__anon_1563>:
) @TypeOf(writer).Error!void {
ffffffff80000b80:	55                   	push   rbp
ffffffff80000b81:	48 89 e5             	mov    rbp,rsp
ffffffff80000b84:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000b88:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80000b8c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80000b90:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff80000b94:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff80000b9b:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80000b9e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80000ba2:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80000ba9:	00 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80000baa:	e8 c1 77 00 00       	call   ffffffff80008370 <fmt.formatValue__anon_2867>
ffffffff80000baf:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80000bb3:	b0 01                	mov    al,0x1
ffffffff80000bb5:	a8 01                	test   al,0x1
ffffffff80000bb7:	75 02                	jne    ffffffff80000bbb <fmt.formatType__anon_1563+0x3b>
ffffffff80000bb9:	eb 0a                	jmp    ffffffff80000bc5 <fmt.formatType__anon_1563+0x45>
ffffffff80000bbb:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000bbf:	48 83 c4 30          	add    rsp,0x30
ffffffff80000bc3:	5d                   	pop    rbp
ffffffff80000bc4:	c3                   	ret
ffffffff80000bc5:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000bc9:	e8 42 28 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff80000bce:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000bd2:	48 83 c4 30          	add    rsp,0x30
ffffffff80000bd6:	5d                   	pop    rbp
ffffffff80000bd7:	c3                   	ret
ffffffff80000bd8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80000bdf:	00 

ffffffff80000be0 <fmt.formatType__anon_1570>:
) @TypeOf(writer).Error!void {
ffffffff80000be0:	55                   	push   rbp
ffffffff80000be1:	48 89 e5             	mov    rbp,rsp
ffffffff80000be4:	48 83 ec 40          	sub    rsp,0x40
ffffffff80000be8:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff80000bec:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80000bf0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80000bf4:	4c 89 4d e0          	mov    QWORD PTR [rbp-0x20],r9
ffffffff80000bf8:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff80000bff:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80000c02:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80000c06:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80000c0d:	00 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80000c0e:	e8 dd 7f 00 00       	call   ffffffff80008bf0 <fmt.formatValue__anon_2874>
ffffffff80000c13:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80000c17:	b0 01                	mov    al,0x1
ffffffff80000c19:	a8 01                	test   al,0x1
ffffffff80000c1b:	75 02                	jne    ffffffff80000c1f <fmt.formatType__anon_1570+0x3f>
ffffffff80000c1d:	eb 0a                	jmp    ffffffff80000c29 <fmt.formatType__anon_1570+0x49>
ffffffff80000c1f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000c23:	48 83 c4 40          	add    rsp,0x40
ffffffff80000c27:	5d                   	pop    rbp
ffffffff80000c28:	c3                   	ret
ffffffff80000c29:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffffffff80000c2d:	e8 de 27 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff80000c32:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000c36:	48 83 c4 40          	add    rsp,0x40
ffffffff80000c3a:	5d                   	pop    rbp
ffffffff80000c3b:	c3                   	ret
ffffffff80000c3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80000c40 <main.debug_print__anon_1550>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80000c40:	55                   	push   rbp
ffffffff80000c41:	48 89 e5             	mov    rbp,rsp
ffffffff80000c44:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000c48:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80000c4c:	48 89 fe             	mov    rsi,rdi
ffffffff80000c4f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80000c53:	48 c7 c2 52 94 01 80 	mov    rdx,0xffffffff80019452
ffffffff80000c5a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80000c61:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80000c65:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff80000c6b:	e8 d0 f8 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80000c70:	48 c7 c6 5e 94 01 80 	mov    rsi,0xffffffff8001945e
ffffffff80000c77:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80000c7b:	e8 70 f9 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80000c80:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000c84:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80000c88:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000c8c:	e8 ff fd ff ff       	call   ffffffff80000a90 <fmt.format__anon_1551>
ffffffff80000c91:	31 c0                	xor    eax,eax
ffffffff80000c93:	48 83 c4 30          	add    rsp,0x30
ffffffff80000c97:	5d                   	pop    rbp
ffffffff80000c98:	c3                   	ret
ffffffff80000c99:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80000ca0 <fmt.format__anon_1576>:
) !void {
ffffffff80000ca0:	55                   	push   rbp
ffffffff80000ca1:	48 89 e5             	mov    rbp,rsp
ffffffff80000ca4:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000ca8:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff80000cac:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80000cb0:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000cb4:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80000cb7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80000cbb:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80000cbe:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80000cc1:	b0 01                	mov    al,0x1
ffffffff80000cc3:	a8 01                	test   al,0x1
ffffffff80000cc5:	75 02                	jne    ffffffff80000cc9 <fmt.format__anon_1576+0x29>
ffffffff80000cc7:	eb 02                	jmp    ffffffff80000ccb <fmt.format__anon_1576+0x2b>
ffffffff80000cc9:	eb 10                	jmp    ffffffff80000cdb <fmt.format__anon_1576+0x3b>
ffffffff80000ccb:	31 c0                	xor    eax,eax
ffffffff80000ccd:	31 c0                	xor    eax,eax
ffffffff80000ccf:	89 c7                	mov    edi,eax
ffffffff80000cd1:	be 0b 00 00 00       	mov    esi,0xb
ffffffff80000cd6:	e8 35 f6 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000cdb:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80000cdf:	48 c7 c2 3b b2 01 80 	mov    rdx,0xffffffff8001b23b
ffffffff80000ce6:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff80000cea:	b9 0b 00 00 00       	mov    ecx,0xb
ffffffff80000cef:	e8 5c f6 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80000cf4:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80000cf8:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80000cfc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80000d00:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80000d07:	00 
        try formatType(
ffffffff80000d08:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff80000d0b:	48 c7 c2 f0 94 01 80 	mov    rdx,0xffffffff800194f0
ffffffff80000d12:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80000d18:	e8 13 00 00 00       	call   ffffffff80000d30 <fmt.formatType__anon_1609>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80000d1d:	31 c0                	xor    eax,eax
ffffffff80000d1f:	48 83 c4 30          	add    rsp,0x30
ffffffff80000d23:	5d                   	pop    rbp
ffffffff80000d24:	c3                   	ret
ffffffff80000d25:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000d2c:	00 00 00 
ffffffff80000d2f:	90                   	nop

ffffffff80000d30 <fmt.formatType__anon_1609>:
) @TypeOf(writer).Error!void {
ffffffff80000d30:	55                   	push   rbp
ffffffff80000d31:	48 89 e5             	mov    rbp,rsp
ffffffff80000d34:	48 83 ec 70          	sub    rsp,0x70
ffffffff80000d38:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
ffffffff80000d3c:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
ffffffff80000d40:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff80000d44:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff80000d48:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff80000d4c:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff80000d50:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80000d54:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffffffff80000d5b:	00 
ffffffff80000d5c:	48 c7 45 d0 89 94 01 	mov    QWORD PTR [rbp-0x30],0xffffffff80019489
ffffffff80000d63:	80 
            const remaining_fmt = comptime stripOptionalOrErrorUnionSpec(actual_fmt);
ffffffff80000d64:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80000d6b:	00 
ffffffff80000d6c:	48 c7 45 e0 8a 94 01 	mov    QWORD PTR [rbp-0x20],0xffffffff8001948a
ffffffff80000d73:	80 
            if (value) |payload| {
ffffffff80000d74:	48 83 fe 00          	cmp    rsi,0x0
ffffffff80000d78:	74 29                	je     ffffffff80000da3 <fmt.formatType__anon_1609+0x73>
ffffffff80000d7a:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff80000d7e:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff80000d82:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffffffff80000d86:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff80000d8a:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80000d8e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
                return formatType(payload, remaining_fmt, options, writer, max_depth);
ffffffff80000d92:	e8 49 88 00 00       	call   ffffffff800095e0 <fmt.formatType__anon_2887>
ffffffff80000d97:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff80000d9b:	b0 01                	mov    al,0x1
ffffffff80000d9d:	a8 01                	test   al,0x1
ffffffff80000d9f:	75 2b                	jne    ffffffff80000dcc <fmt.formatType__anon_1609+0x9c>
ffffffff80000da1:	eb 33                	jmp    ffffffff80000dd6 <fmt.formatType__anon_1609+0xa6>
ffffffff80000da3:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
ffffffff80000da7:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffffffff80000dab:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
                return formatBuf("null", options, writer);
ffffffff80000daf:	48 c7 c6 af b3 01 80 	mov    rsi,0xffffffff8001b3af
ffffffff80000db6:	ba 04 00 00 00       	mov    edx,0x4
ffffffff80000dbb:	e8 a0 66 00 00       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff80000dc0:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80000dc4:	b0 01                	mov    al,0x1
ffffffff80000dc6:	a8 01                	test   al,0x1
ffffffff80000dc8:	75 1f                	jne    ffffffff80000de9 <fmt.formatType__anon_1609+0xb9>
ffffffff80000dca:	eb 27                	jmp    ffffffff80000df3 <fmt.formatType__anon_1609+0xc3>
                return formatType(payload, remaining_fmt, options, writer, max_depth);
ffffffff80000dcc:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
ffffffff80000dd0:	48 83 c4 70          	add    rsp,0x70
ffffffff80000dd4:	5d                   	pop    rbp
ffffffff80000dd5:	c3                   	ret
ffffffff80000dd6:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80000dda:	e8 31 26 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff80000ddf:	66 8b 45 fc          	mov    ax,WORD PTR [rbp-0x4]
ffffffff80000de3:	48 83 c4 70          	add    rsp,0x70
ffffffff80000de7:	5d                   	pop    rbp
ffffffff80000de8:	c3                   	ret
                return formatBuf("null", options, writer);
ffffffff80000de9:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000ded:	48 83 c4 70          	add    rsp,0x70
ffffffff80000df1:	5d                   	pop    rbp
ffffffff80000df2:	c3                   	ret
ffffffff80000df3:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80000df7:	e8 14 26 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff80000dfc:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80000e00:	48 83 c4 70          	add    rsp,0x70
ffffffff80000e04:	5d                   	pop    rbp
ffffffff80000e05:	c3                   	ret
ffffffff80000e06:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000e0d:	00 00 00 

ffffffff80000e10 <main.debug_print__anon_1575>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80000e10:	55                   	push   rbp
ffffffff80000e11:	48 89 e5             	mov    rbp,rsp
ffffffff80000e14:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000e18:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80000e1c:	48 89 fe             	mov    rsi,rdi
ffffffff80000e1f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80000e23:	48 c7 c2 18 95 01 80 	mov    rdx,0xffffffff80019518
ffffffff80000e2a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80000e31:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80000e35:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff80000e3b:	e8 00 f7 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80000e40:	48 c7 c6 24 95 01 80 	mov    rsi,0xffffffff80019524
ffffffff80000e47:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80000e4b:	e8 a0 f7 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80000e50:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000e54:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80000e58:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000e5c:	e8 3f fe ff ff       	call   ffffffff80000ca0 <fmt.format__anon_1576>
ffffffff80000e61:	31 c0                	xor    eax,eax
ffffffff80000e63:	48 83 c4 30          	add    rsp,0x30
ffffffff80000e67:	5d                   	pop    rbp
ffffffff80000e68:	c3                   	ret
ffffffff80000e69:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80000e70 <fmt.format__anon_1612>:
) !void {
ffffffff80000e70:	55                   	push   rbp
ffffffff80000e71:	48 89 e5             	mov    rbp,rsp
ffffffff80000e74:	48 83 ec 20          	sub    rsp,0x20
ffffffff80000e78:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000e7c:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80000e7f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000e83:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80000e86:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80000e89:	b0 01                	mov    al,0x1
ffffffff80000e8b:	a8 01                	test   al,0x1
ffffffff80000e8d:	75 02                	jne    ffffffff80000e91 <fmt.format__anon_1612+0x21>
ffffffff80000e8f:	eb 02                	jmp    ffffffff80000e93 <fmt.format__anon_1612+0x23>
ffffffff80000e91:	eb 10                	jmp    ffffffff80000ea3 <fmt.format__anon_1612+0x33>
ffffffff80000e93:	31 c0                	xor    eax,eax
ffffffff80000e95:	31 c0                	xor    eax,eax
ffffffff80000e97:	89 c7                	mov    edi,eax
ffffffff80000e99:	be 0f 00 00 00       	mov    esi,0xf
ffffffff80000e9e:	e8 6d f4 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000ea3:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff80000ea7:	48 c7 c2 4a b2 01 80 	mov    rdx,0xffffffff8001b24a
ffffffff80000eae:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000eb2:	b9 0f 00 00 00       	mov    ecx,0xf
ffffffff80000eb7:	e8 94 f4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80000ebc:	31 c0                	xor    eax,eax
ffffffff80000ebe:	48 83 c4 20          	add    rsp,0x20
ffffffff80000ec2:	5d                   	pop    rbp
ffffffff80000ec3:	c3                   	ret
ffffffff80000ec4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000ecb:	00 00 00 
ffffffff80000ece:	66 90                	xchg   ax,ax

ffffffff80000ed0 <main.debug_print__anon_1611>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80000ed0:	55                   	push   rbp
ffffffff80000ed1:	48 89 e5             	mov    rbp,rsp
ffffffff80000ed4:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000ed8:	48 89 fe             	mov    rsi,rdi
ffffffff80000edb:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80000edf:	48 c7 c2 4a 95 01 80 	mov    rdx,0xffffffff8001954a
ffffffff80000ee6:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80000eed:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80000ef1:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff80000ef7:	e8 44 f6 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80000efc:	48 c7 c6 56 95 01 80 	mov    rsi,0xffffffff80019556
ffffffff80000f03:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80000f07:	e8 e4 f6 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80000f0c:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80000f10:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000f14:	e8 57 ff ff ff       	call   ffffffff80000e70 <fmt.format__anon_1612>
ffffffff80000f19:	31 c0                	xor    eax,eax
ffffffff80000f1b:	48 83 c4 30          	add    rsp,0x30
ffffffff80000f1f:	5d                   	pop    rbp
ffffffff80000f20:	c3                   	ret
ffffffff80000f21:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000f28:	00 00 00 
ffffffff80000f2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80000f30 <fmt.format__anon_1622>:
) !void {
ffffffff80000f30:	55                   	push   rbp
ffffffff80000f31:	48 89 e5             	mov    rbp,rsp
ffffffff80000f34:	48 83 ec 40          	sub    rsp,0x40
ffffffff80000f38:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80000f3c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff80000f40:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000f44:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80000f47:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80000f4b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80000f4e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80000f51:	b0 01                	mov    al,0x1
ffffffff80000f53:	a8 01                	test   al,0x1
ffffffff80000f55:	75 02                	jne    ffffffff80000f59 <fmt.format__anon_1622+0x29>
ffffffff80000f57:	eb 02                	jmp    ffffffff80000f5b <fmt.format__anon_1622+0x2b>
ffffffff80000f59:	eb 10                	jmp    ffffffff80000f6b <fmt.format__anon_1622+0x3b>
ffffffff80000f5b:	31 c0                	xor    eax,eax
ffffffff80000f5d:	31 c0                	xor    eax,eax
ffffffff80000f5f:	89 c7                	mov    edi,eax
ffffffff80000f61:	be 07 00 00 00       	mov    esi,0x7
ffffffff80000f66:	e8 a5 f3 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000f6b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000f6f:	48 c7 c2 5a b2 01 80 	mov    rdx,0xffffffff8001b25a
ffffffff80000f76:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff80000f7a:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80000f7f:	e8 cc f3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80000f84:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000f88:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff80000f8c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80000f90:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80000f97:	00 
        try formatType(
ffffffff80000f98:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff80000f9b:	48 c7 c2 e8 95 01 80 	mov    rdx,0xffffffff800195e8
ffffffff80000fa2:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80000fa8:	e8 53 00 00 00       	call   ffffffff80001000 <fmt.formatType__anon_1634>
ffffffff80000fad:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80000fb1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000fb4:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80000fb8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000fbb:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80000fbe:	b0 01                	mov    al,0x1
ffffffff80000fc0:	a8 01                	test   al,0x1
ffffffff80000fc2:	75 02                	jne    ffffffff80000fc6 <fmt.format__anon_1622+0x96>
ffffffff80000fc4:	eb 02                	jmp    ffffffff80000fc8 <fmt.format__anon_1622+0x98>
ffffffff80000fc6:	eb 0f                	jmp    ffffffff80000fd7 <fmt.format__anon_1622+0xa7>
ffffffff80000fc8:	bf 09 00 00 00       	mov    edi,0x9
ffffffff80000fcd:	be 0a 00 00 00       	mov    esi,0xa
ffffffff80000fd2:	e8 39 f3 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80000fd7:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80000fdb:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80000fdf:	48 c7 c2 63 b2 01 80 	mov    rdx,0xffffffff8001b263
ffffffff80000fe6:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80000feb:	e8 60 f3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80000ff0:	31 c0                	xor    eax,eax
ffffffff80000ff2:	48 83 c4 40          	add    rsp,0x40
ffffffff80000ff6:	5d                   	pop    rbp
ffffffff80000ff7:	c3                   	ret
ffffffff80000ff8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80000fff:	00 

ffffffff80001000 <fmt.formatType__anon_1634>:
) @TypeOf(writer).Error!void {
ffffffff80001000:	55                   	push   rbp
ffffffff80001001:	48 89 e5             	mov    rbp,rsp
ffffffff80001004:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001008:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000100c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80001010:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff80001014:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000101b:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000101e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80001022:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80001029:	00 
                    return formatType(value.*, actual_fmt, options, writer, max_depth);
ffffffff8000102a:	e8 21 86 00 00       	call   ffffffff80009650 <fmt.formatType__anon_2894>
ffffffff8000102f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80001033:	b0 01                	mov    al,0x1
ffffffff80001035:	a8 01                	test   al,0x1
ffffffff80001037:	75 02                	jne    ffffffff8000103b <fmt.formatType__anon_1634+0x3b>
ffffffff80001039:	eb 0a                	jmp    ffffffff80001045 <fmt.formatType__anon_1634+0x45>
ffffffff8000103b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000103f:	48 83 c4 30          	add    rsp,0x30
ffffffff80001043:	5d                   	pop    rbp
ffffffff80001044:	c3                   	ret
ffffffff80001045:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80001049:	e8 c2 23 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000104e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80001052:	48 83 c4 30          	add    rsp,0x30
ffffffff80001056:	5d                   	pop    rbp
ffffffff80001057:	c3                   	ret
ffffffff80001058:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000105f:	00 

ffffffff80001060 <main.debug_print__anon_1621>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80001060:	55                   	push   rbp
ffffffff80001061:	48 89 e5             	mov    rbp,rsp
ffffffff80001064:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001068:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000106c:	48 89 fe             	mov    rsi,rdi
ffffffff8000106f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80001073:	48 c7 c2 12 96 01 80 	mov    rdx,0xffffffff80019612
ffffffff8000107a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80001081:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80001085:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000108b:	e8 b0 f4 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80001090:	48 c7 c6 1e 96 01 80 	mov    rsi,0xffffffff8001961e
ffffffff80001097:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000109b:	e8 50 f5 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff800010a0:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800010a4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff800010a8:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800010ac:	e8 7f fe ff ff       	call   ffffffff80000f30 <fmt.format__anon_1622>
ffffffff800010b1:	31 c0                	xor    eax,eax
ffffffff800010b3:	48 83 c4 30          	add    rsp,0x30
ffffffff800010b7:	5d                   	pop    rbp
ffffffff800010b8:	c3                   	ret
ffffffff800010b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800010c0 <fmt.format__anon_1649>:
) !void {
ffffffff800010c0:	55                   	push   rbp
ffffffff800010c1:	48 89 e5             	mov    rbp,rsp
ffffffff800010c4:	48 83 ec 60          	sub    rsp,0x60
ffffffff800010c8:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff800010cc:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff800010d0:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800010d4:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff800010d7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800010db:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff800010de:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
ffffffff800010e1:	b0 01                	mov    al,0x1
ffffffff800010e3:	a8 01                	test   al,0x1
ffffffff800010e5:	75 02                	jne    ffffffff800010e9 <fmt.format__anon_1649+0x29>
ffffffff800010e7:	eb 02                	jmp    ffffffff800010eb <fmt.format__anon_1649+0x2b>
ffffffff800010e9:	eb 10                	jmp    ffffffff800010fb <fmt.format__anon_1649+0x3b>
ffffffff800010eb:	31 c0                	xor    eax,eax
ffffffff800010ed:	31 c0                	xor    eax,eax
ffffffff800010ef:	89 c7                	mov    edi,eax
ffffffff800010f1:	be 06 00 00 00       	mov    esi,0x6
ffffffff800010f6:	e8 15 f2 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800010fb:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff800010ff:	48 c7 c2 65 b2 01 80 	mov    rdx,0xffffffff8001b265
ffffffff80001106:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff8000110a:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff8000110f:	e8 3c f2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001114:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80001118:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff8000111c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80001120:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80001127:	00 
        try formatType(
ffffffff80001128:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff8000112b:	48 c7 c2 b0 96 01 80 	mov    rdx,0xffffffff800196b0
ffffffff80001132:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80001138:	e8 c3 00 00 00       	call   ffffffff80001200 <fmt.formatType__anon_1662>
ffffffff8000113d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80001141:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80001144:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80001148:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000114b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff8000114e:	b0 01                	mov    al,0x1
ffffffff80001150:	a8 01                	test   al,0x1
ffffffff80001152:	75 02                	jne    ffffffff80001156 <fmt.format__anon_1649+0x96>
ffffffff80001154:	eb 02                	jmp    ffffffff80001158 <fmt.format__anon_1649+0x98>
ffffffff80001156:	eb 0f                	jmp    ffffffff80001167 <fmt.format__anon_1649+0xa7>
ffffffff80001158:	bf 08 00 00 00       	mov    edi,0x8
ffffffff8000115d:	be 0a 00 00 00       	mov    esi,0xa
ffffffff80001162:	e8 a9 f1 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80001167:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000116b:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff8000116f:	48 c7 c2 6d b2 01 80 	mov    rdx,0xffffffff8001b26d
ffffffff80001176:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000117b:	e8 d0 f1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001180:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80001184:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff80001188:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff8000118c:	48 c7 45 e8 01 00 00 	mov    QWORD PTR [rbp-0x18],0x1
ffffffff80001193:	00 
        try formatType(
ffffffff80001194:	8a 40 08             	mov    al,BYTE PTR [rax+0x8]
            std.options.fmt_max_depth,
ffffffff80001197:	0f b6 f0             	movzx  esi,al
ffffffff8000119a:	48 c7 c2 40 97 01 80 	mov    rdx,0xffffffff80019740
ffffffff800011a1:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800011a7:	e8 b4 00 00 00       	call   ffffffff80001260 <fmt.formatType__anon_1669>
ffffffff800011ac:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800011b0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800011b3:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800011b7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800011ba:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800011bd:	b0 01                	mov    al,0x1
ffffffff800011bf:	a8 01                	test   al,0x1
ffffffff800011c1:	75 02                	jne    ffffffff800011c5 <fmt.format__anon_1649+0x105>
ffffffff800011c3:	eb 02                	jmp    ffffffff800011c7 <fmt.format__anon_1649+0x107>
ffffffff800011c5:	eb 0f                	jmp    ffffffff800011d6 <fmt.format__anon_1649+0x116>
ffffffff800011c7:	bf 0c 00 00 00       	mov    edi,0xc
ffffffff800011cc:	be 0d 00 00 00       	mov    esi,0xd
ffffffff800011d1:	e8 3a f1 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800011d6:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff800011da:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800011de:	48 c7 c2 71 b2 01 80 	mov    rdx,0xffffffff8001b271
ffffffff800011e5:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff800011ea:	e8 61 f1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800011ef:	31 c0                	xor    eax,eax
ffffffff800011f1:	48 83 c4 60          	add    rsp,0x60
ffffffff800011f5:	5d                   	pop    rbp
ffffffff800011f6:	c3                   	ret
ffffffff800011f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800011fe:	00 00 

ffffffff80001200 <fmt.formatType__anon_1662>:
) @TypeOf(writer).Error!void {
ffffffff80001200:	55                   	push   rbp
ffffffff80001201:	48 89 e5             	mov    rbp,rsp
ffffffff80001204:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001208:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000120c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80001210:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff80001214:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000121b:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000121e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80001222:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80001229:	00 
                    return formatType(value.*, actual_fmt, options, writer, max_depth);
ffffffff8000122a:	e8 c1 87 00 00       	call   ffffffff800099f0 <fmt.formatType__anon_2904>
ffffffff8000122f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80001233:	b0 01                	mov    al,0x1
ffffffff80001235:	a8 01                	test   al,0x1
ffffffff80001237:	75 02                	jne    ffffffff8000123b <fmt.formatType__anon_1662+0x3b>
ffffffff80001239:	eb 0a                	jmp    ffffffff80001245 <fmt.formatType__anon_1662+0x45>
ffffffff8000123b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000123f:	48 83 c4 30          	add    rsp,0x30
ffffffff80001243:	5d                   	pop    rbp
ffffffff80001244:	c3                   	ret
ffffffff80001245:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80001249:	e8 c2 21 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000124e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80001252:	48 83 c4 30          	add    rsp,0x30
ffffffff80001256:	5d                   	pop    rbp
ffffffff80001257:	c3                   	ret
ffffffff80001258:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000125f:	00 

ffffffff80001260 <fmt.formatType__anon_1669>:
) @TypeOf(writer).Error!void {
ffffffff80001260:	55                   	push   rbp
ffffffff80001261:	48 89 e5             	mov    rbp,rsp
ffffffff80001264:	48 83 ec 50          	sub    rsp,0x50
ffffffff80001268:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff8000126c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff80001270:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80001274:	40 88 f0             	mov    al,sil
ffffffff80001277:	88 c1                	mov    cl,al
ffffffff80001279:	80 e1 01             	and    cl,0x1
ffffffff8000127c:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
ffffffff8000127f:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff80001283:	48 b9 aa aa aa aa aa 	movabs rcx,0xaaaaaaaaaaaaaaaa
ffffffff8000128a:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000128d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80001291:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80001298:	00 
            return formatBuf(if (value) "true" else "false", options, writer);
ffffffff80001299:	a8 01                	test   al,0x1
ffffffff8000129b:	75 02                	jne    ffffffff8000129f <fmt.formatType__anon_1669+0x3f>
ffffffff8000129d:	eb 16                	jmp    ffffffff800012b5 <fmt.formatType__anon_1669+0x55>
ffffffff8000129f:	b8 04 00 00 00       	mov    eax,0x4
ffffffff800012a4:	48 c7 c1 b4 b3 01 80 	mov    rcx,0xffffffff8001b3b4
ffffffff800012ab:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff800012af:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800012b3:	eb 16                	jmp    ffffffff800012cb <fmt.formatType__anon_1669+0x6b>
ffffffff800012b5:	b8 05 00 00 00       	mov    eax,0x5
ffffffff800012ba:	48 c7 c1 b9 b3 01 80 	mov    rcx,0xffffffff8001b3b9
ffffffff800012c1:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff800012c5:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800012c9:	eb 00                	jmp    ffffffff800012cb <fmt.formatType__anon_1669+0x6b>
ffffffff800012cb:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
ffffffff800012cf:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff800012d3:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800012d7:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff800012db:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffffffff800012df:	e8 7c 61 00 00       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800012e4:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800012e8:	b0 01                	mov    al,0x1
ffffffff800012ea:	a8 01                	test   al,0x1
ffffffff800012ec:	75 02                	jne    ffffffff800012f0 <fmt.formatType__anon_1669+0x90>
ffffffff800012ee:	eb 0a                	jmp    ffffffff800012fa <fmt.formatType__anon_1669+0x9a>
ffffffff800012f0:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800012f4:	48 83 c4 50          	add    rsp,0x50
ffffffff800012f8:	5d                   	pop    rbp
ffffffff800012f9:	c3                   	ret
ffffffff800012fa:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800012fe:	e8 0d 21 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff80001303:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80001307:	48 83 c4 50          	add    rsp,0x50
ffffffff8000130b:	5d                   	pop    rbp
ffffffff8000130c:	c3                   	ret
ffffffff8000130d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80001310 <main.debug_print__anon_1648>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80001310:	55                   	push   rbp
ffffffff80001311:	48 89 e5             	mov    rbp,rsp
ffffffff80001314:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001318:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000131c:	48 89 fe             	mov    rsi,rdi
ffffffff8000131f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80001323:	48 c7 c2 6a 97 01 80 	mov    rdx,0xffffffff8001976a
ffffffff8000132a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80001331:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80001335:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000133b:	e8 00 f2 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80001340:	48 c7 c6 76 97 01 80 	mov    rsi,0xffffffff80019776
ffffffff80001347:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000134b:	e8 a0 f2 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80001350:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80001354:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80001358:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000135c:	e8 5f fd ff ff       	call   ffffffff800010c0 <fmt.format__anon_1649>
ffffffff80001361:	31 c0                	xor    eax,eax
ffffffff80001363:	48 83 c4 30          	add    rsp,0x30
ffffffff80001367:	5d                   	pop    rbp
ffffffff80001368:	c3                   	ret
ffffffff80001369:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80001370 <fmt.format__anon_1675>:
) !void {
ffffffff80001370:	55                   	push   rbp
ffffffff80001371:	48 89 e5             	mov    rbp,rsp
ffffffff80001374:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001378:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff8000137c:	48 89 f1             	mov    rcx,rsi
ffffffff8000137f:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffffffff80001383:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff80001387:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff8000138b:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80001392:	00 
            std.options.fmt_max_depth,
ffffffff80001393:	48 c7 c2 08 98 01 80 	mov    rdx,0xffffffff80019808
ffffffff8000139a:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800013a0:	e8 4b 00 00 00       	call   ffffffff800013f0 <fmt.formatType__anon_1686>
ffffffff800013a5:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800013a9:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff800013ac:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800013b0:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff800013b3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800013b6:	b0 01                	mov    al,0x1
ffffffff800013b8:	a8 01                	test   al,0x1
ffffffff800013ba:	75 02                	jne    ffffffff800013be <fmt.format__anon_1675+0x4e>
ffffffff800013bc:	eb 02                	jmp    ffffffff800013c0 <fmt.format__anon_1675+0x50>
ffffffff800013be:	eb 0f                	jmp    ffffffff800013cf <fmt.format__anon_1675+0x5f>
ffffffff800013c0:	bf 03 00 00 00       	mov    edi,0x3
ffffffff800013c5:	be 04 00 00 00       	mov    esi,0x4
ffffffff800013ca:	e8 41 ef ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800013cf:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800013d3:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800013d7:	48 c7 c2 76 b2 01 80 	mov    rdx,0xffffffff8001b276
ffffffff800013de:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff800013e3:	e8 68 ef ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800013e8:	31 c0                	xor    eax,eax
ffffffff800013ea:	48 83 c4 30          	add    rsp,0x30
ffffffff800013ee:	5d                   	pop    rbp
ffffffff800013ef:	c3                   	ret

ffffffff800013f0 <fmt.formatType__anon_1686>:
) @TypeOf(writer).Error!void {
ffffffff800013f0:	55                   	push   rbp
ffffffff800013f1:	48 89 e5             	mov    rbp,rsp
ffffffff800013f4:	48 83 ec 60          	sub    rsp,0x60
ffffffff800013f8:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff800013fc:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffffffff80001400:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
ffffffff80001404:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff80001408:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000140c:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffffffff80001413:	00 
ffffffff80001414:	48 c7 45 d0 d9 90 01 	mov    QWORD PTR [rbp-0x30],0xffffffff800190d9
ffffffff8000141b:	80 
            },
        },
        .Array => |info| {
            if (actual_fmt.len == 0)
                @compileError("cannot format array without a specifier (i.e. {s} or {any})");
            if (max_depth == 0) {
ffffffff8000141c:	49 83 f8 00          	cmp    r8,0x0
ffffffff80001420:	75 36                	jne    ffffffff80001458 <fmt.formatType__anon_1686+0x68>
ffffffff80001422:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80001426:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
                return writer.writeAll("{ ... }");
ffffffff8000142a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000142d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80001431:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80001434:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80001437:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8000143e:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff80001442:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80001447:	e8 04 ef ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000144c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
ffffffff80001450:	b0 01                	mov    al,0x1
ffffffff80001452:	a8 01                	test   al,0x1
ffffffff80001454:	75 04                	jne    ffffffff8000145a <fmt.formatType__anon_1686+0x6a>
ffffffff80001456:	eb 0c                	jmp    ffffffff80001464 <fmt.formatType__anon_1686+0x74>
ffffffff80001458:	eb 1d                	jmp    ffffffff80001477 <fmt.formatType__anon_1686+0x87>
ffffffff8000145a:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
ffffffff8000145e:	48 83 c4 60          	add    rsp,0x60
ffffffff80001462:	5d                   	pop    rbp
ffffffff80001463:	c3                   	ret
ffffffff80001464:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80001468:	e8 a3 1f 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000146d:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
ffffffff80001471:	48 83 c4 60          	add    rsp,0x60
ffffffff80001475:	5d                   	pop    rbp
ffffffff80001476:	c3                   	ret
ffffffff80001477:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
ffffffff8000147b:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff8000147f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80001483:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
            }
            if (info.child == u8) {
                switch (actual_fmt[0]) {
                    's', 'x', 'X', 'e', 'E' => {
                        comptime checkTextFmt(actual_fmt);
                        return formatBuf(&value, options, writer);
ffffffff80001487:	66 8b 50 04          	mov    dx,WORD PTR [rax+0x4]
ffffffff8000148b:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
ffffffff8000148f:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80001491:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80001494:	ba 06 00 00 00       	mov    edx,0x6
ffffffff80001499:	48 8d 75 f8          	lea    rsi,[rbp-0x8]
ffffffff8000149d:	e8 be 5f 00 00       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800014a2:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
ffffffff800014a6:	b0 01                	mov    al,0x1
ffffffff800014a8:	a8 01                	test   al,0x1
ffffffff800014aa:	75 02                	jne    ffffffff800014ae <fmt.formatType__anon_1686+0xbe>
ffffffff800014ac:	eb 0a                	jmp    ffffffff800014b8 <fmt.formatType__anon_1686+0xc8>
ffffffff800014ae:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff800014b2:	48 83 c4 60          	add    rsp,0x60
ffffffff800014b6:	5d                   	pop    rbp
ffffffff800014b7:	c3                   	ret
ffffffff800014b8:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff800014bc:	e8 4f 1f 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff800014c1:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff800014c5:	48 83 c4 60          	add    rsp,0x60
ffffffff800014c9:	5d                   	pop    rbp
ffffffff800014ca:	c3                   	ret
ffffffff800014cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800014d0 <main.debug_print__anon_1674>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff800014d0:	55                   	push   rbp
ffffffff800014d1:	48 89 e5             	mov    rbp,rsp
ffffffff800014d4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800014d8:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800014dc:	48 89 fe             	mov    rsi,rdi
ffffffff800014df:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff800014e3:	48 c7 c2 32 98 01 80 	mov    rdx,0xffffffff80019832
ffffffff800014ea:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff800014f1:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff800014f5:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff800014fb:	e8 40 f0 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80001500:	48 c7 c6 3e 98 01 80 	mov    rsi,0xffffffff8001983e
ffffffff80001507:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000150b:	e8 e0 f0 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80001510:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80001514:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80001518:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000151c:	e8 4f fe ff ff       	call   ffffffff80001370 <fmt.format__anon_1675>
ffffffff80001521:	31 c0                	xor    eax,eax
ffffffff80001523:	48 83 c4 30          	add    rsp,0x30
ffffffff80001527:	5d                   	pop    rbp
ffffffff80001528:	c3                   	ret
ffffffff80001529:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80001530 <fmt.format__anon_1692>:
) !void {
ffffffff80001530:	55                   	push   rbp
ffffffff80001531:	48 89 e5             	mov    rbp,rsp
ffffffff80001534:	48 83 ec 70          	sub    rsp,0x70
ffffffff80001538:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
ffffffff8000153c:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
ffffffff80001540:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80001544:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80001547:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff8000154b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000154e:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff80001551:	b0 01                	mov    al,0x1
ffffffff80001553:	a8 01                	test   al,0x1
ffffffff80001555:	75 02                	jne    ffffffff80001559 <fmt.format__anon_1692+0x29>
ffffffff80001557:	eb 02                	jmp    ffffffff8000155b <fmt.format__anon_1692+0x2b>
ffffffff80001559:	eb 10                	jmp    ffffffff8000156b <fmt.format__anon_1692+0x3b>
ffffffff8000155b:	31 c0                	xor    eax,eax
ffffffff8000155d:	31 c0                	xor    eax,eax
ffffffff8000155f:	89 c7                	mov    edi,eax
ffffffff80001561:	be 08 00 00 00       	mov    esi,0x8
ffffffff80001566:	e8 a5 ed ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000156b:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff8000156f:	48 c7 c2 78 b2 01 80 	mov    rdx,0xffffffff8001b278
ffffffff80001576:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff8000157a:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff8000157f:	e8 cc ed ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001584:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80001588:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
ffffffff8000158c:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80001590:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80001597:	00 
            std.options.fmt_max_depth,
ffffffff80001598:	48 c7 c2 d0 98 01 80 	mov    rdx,0xffffffff800198d0
ffffffff8000159f:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800015a5:	e8 36 01 00 00       	call   ffffffff800016e0 <fmt.formatType__anon_1706>
ffffffff800015aa:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800015ae:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800015b1:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff800015b5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800015b8:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
ffffffff800015bb:	b0 01                	mov    al,0x1
ffffffff800015bd:	a8 01                	test   al,0x1
ffffffff800015bf:	75 02                	jne    ffffffff800015c3 <fmt.format__anon_1692+0x93>
ffffffff800015c1:	eb 02                	jmp    ffffffff800015c5 <fmt.format__anon_1692+0x95>
ffffffff800015c3:	eb 0f                	jmp    ffffffff800015d4 <fmt.format__anon_1692+0xa4>
ffffffff800015c5:	bf 0a 00 00 00       	mov    edi,0xa
ffffffff800015ca:	be 0c 00 00 00       	mov    esi,0xc
ffffffff800015cf:	e8 3c ed ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800015d4:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff800015d8:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff800015dc:	48 c7 c2 82 b2 01 80 	mov    rdx,0xffffffff8001b282
ffffffff800015e3:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800015e8:	e8 63 ed ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800015ed:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff800015f1:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
ffffffff800015f5:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800015f9:	48 c7 45 d0 01 00 00 	mov    QWORD PTR [rbp-0x30],0x1
ffffffff80001600:	00 
        try formatType(
ffffffff80001601:	8a 40 24             	mov    al,BYTE PTR [rax+0x24]
            std.options.fmt_max_depth,
ffffffff80001604:	0f b6 f0             	movzx  esi,al
ffffffff80001607:	48 c7 c2 60 99 01 80 	mov    rdx,0xffffffff80019960
ffffffff8000160e:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80001614:	e8 47 fc ff ff       	call   ffffffff80001260 <fmt.formatType__anon_1669>
ffffffff80001619:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000161d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80001620:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80001624:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80001627:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff8000162a:	b0 01                	mov    al,0x1
ffffffff8000162c:	a8 01                	test   al,0x1
ffffffff8000162e:	75 02                	jne    ffffffff80001632 <fmt.format__anon_1692+0x102>
ffffffff80001630:	eb 02                	jmp    ffffffff80001634 <fmt.format__anon_1692+0x104>
ffffffff80001632:	eb 0f                	jmp    ffffffff80001643 <fmt.format__anon_1692+0x113>
ffffffff80001634:	bf 0e 00 00 00       	mov    edi,0xe
ffffffff80001639:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000163e:	e8 cd ec ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80001643:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80001647:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff8000164b:	48 c7 c2 86 b2 01 80 	mov    rdx,0xffffffff8001b286
ffffffff80001652:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80001657:	e8 f4 ec ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000165c:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80001660:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
ffffffff80001664:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80001668:	48 c7 45 e8 02 00 00 	mov    QWORD PTR [rbp-0x18],0x2
ffffffff8000166f:	00 
        try formatType(
ffffffff80001670:	48 8b 70 28          	mov    rsi,QWORD PTR [rax+0x28]
            std.options.fmt_max_depth,
ffffffff80001674:	48 c7 c2 f0 99 01 80 	mov    rdx,0xffffffff800199f0
ffffffff8000167b:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80001681:	e8 4a f3 ff ff       	call   ffffffff800009d0 <fmt.formatType__anon_1544>
ffffffff80001686:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000168a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000168d:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80001691:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80001694:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80001697:	b0 01                	mov    al,0x1
ffffffff80001699:	a8 01                	test   al,0x1
ffffffff8000169b:	75 02                	jne    ffffffff8000169f <fmt.format__anon_1692+0x16f>
ffffffff8000169d:	eb 02                	jmp    ffffffff800016a1 <fmt.format__anon_1692+0x171>
ffffffff8000169f:	eb 0f                	jmp    ffffffff800016b0 <fmt.format__anon_1692+0x180>
ffffffff800016a1:	bf 12 00 00 00       	mov    edi,0x12
ffffffff800016a6:	be 13 00 00 00       	mov    esi,0x13
ffffffff800016ab:	e8 60 ec ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800016b0:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff800016b4:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800016b8:	48 c7 c2 8a b2 01 80 	mov    rdx,0xffffffff8001b28a
ffffffff800016bf:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff800016c4:	e8 87 ec ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800016c9:	31 c0                	xor    eax,eax
ffffffff800016cb:	48 83 c4 70          	add    rsp,0x70
ffffffff800016cf:	5d                   	pop    rbp
ffffffff800016d0:	c3                   	ret
ffffffff800016d1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800016d8:	00 00 00 
ffffffff800016db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800016e0 <fmt.formatType__anon_1706>:
) @TypeOf(writer).Error!void {
ffffffff800016e0:	55                   	push   rbp
ffffffff800016e1:	48 89 e5             	mov    rbp,rsp
ffffffff800016e4:	48 81 ec 90 03 00 00 	sub    rsp,0x390
ffffffff800016eb:	4c 89 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],r8
ffffffff800016f2:	48 89 8d f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],rcx
ffffffff800016f9:	48 89 95 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],rdx
ffffffff80001700:	48 89 b5 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],rsi
ffffffff80001707:	48 89 bd 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],rdi
ffffffff8000170e:	4c 89 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],r8
ffffffff80001715:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000171c:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000171f:	48 89 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rax
ffffffff80001726:	48 c7 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],0x0
ffffffff8000172d:	00 00 00 00 
            try writer.writeAll(@typeName(T));
ffffffff80001731:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff80001734:	48 89 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rax
ffffffff8000173b:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff8000173e:	89 85 40 fd ff ff    	mov    DWORD PTR [rbp-0x2c0],eax
ffffffff80001744:	48 c7 c2 c7 b3 01 80 	mov    rdx,0xffffffff8001b3c7
ffffffff8000174b:	48 8d b5 38 fd ff ff 	lea    rsi,[rbp-0x2c8]
ffffffff80001752:	b9 19 00 00 00       	mov    ecx,0x19
ffffffff80001757:	e8 f4 eb ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000175c:	4c 8b 85 18 fd ff ff 	mov    r8,QWORD PTR [rbp-0x2e8]
            if (max_depth == 0) {
ffffffff80001763:	49 83 f8 00          	cmp    r8,0x0
ffffffff80001767:	75 48                	jne    ffffffff800017b1 <fmt.formatType__anon_1706+0xd1>
ffffffff80001769:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001770:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                return writer.writeAll("{ ... }");
ffffffff80001777:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000177a:	48 89 8d 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rcx
ffffffff80001781:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80001784:	89 85 50 fd ff ff    	mov    DWORD PTR [rbp-0x2b0],eax
ffffffff8000178a:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80001791:	48 8d b5 48 fd ff ff 	lea    rsi,[rbp-0x2b8]
ffffffff80001798:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000179d:	e8 ae eb ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800017a2:	66 89 85 46 fd ff ff 	mov    WORD PTR [rbp-0x2ba],ax
ffffffff800017a9:	b0 01                	mov    al,0x1
ffffffff800017ab:	a8 01                	test   al,0x1
ffffffff800017ad:	75 04                	jne    ffffffff800017b3 <fmt.formatType__anon_1706+0xd3>
ffffffff800017af:	eb 12                	jmp    ffffffff800017c3 <fmt.formatType__anon_1706+0xe3>
ffffffff800017b1:	eb 2c                	jmp    ffffffff800017df <fmt.formatType__anon_1706+0xff>
ffffffff800017b3:	66 8b 85 46 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ba]
ffffffff800017ba:	48 81 c4 90 03 00 00 	add    rsp,0x390
ffffffff800017c1:	5d                   	pop    rbp
ffffffff800017c2:	c3                   	ret
ffffffff800017c3:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800017ca:	e8 41 1c 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff800017cf:	66 8b 85 46 fd ff ff 	mov    ax,WORD PTR [rbp-0x2ba]
ffffffff800017d6:	48 81 c4 90 03 00 00 	add    rsp,0x390
ffffffff800017dd:	5d                   	pop    rbp
ffffffff800017de:	c3                   	ret
ffffffff800017df:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800017e6:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
            try writer.writeAll("{");
ffffffff800017ed:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800017f0:	89 8d 60 fd ff ff    	mov    DWORD PTR [rbp-0x2a0],ecx
ffffffff800017f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800017f9:	48 89 85 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rax
ffffffff80001800:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff80001807:	48 8d b5 58 fd ff ff 	lea    rsi,[rbp-0x2a8]
ffffffff8000180e:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80001813:	e8 38 eb ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001818:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff8000181f:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
            inline for (info.fields, 0..) |f, i| {
ffffffff80001826:	48 c7 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],0x0
ffffffff8000182d:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff80001831:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001834:	89 8d 78 fd ff ff    	mov    DWORD PTR [rbp-0x288],ecx
ffffffff8000183a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000183d:	48 89 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rax
ffffffff80001844:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff8000184b:	48 8d b5 70 fd ff ff 	lea    rsi,[rbp-0x290]
ffffffff80001852:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80001857:	e8 f4 ea ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000185c:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001863:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff8000186a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000186d:	89 8d 88 fd ff ff    	mov    DWORD PTR [rbp-0x278],ecx
ffffffff80001873:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001876:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
ffffffff8000187d:	48 c7 c2 e3 b3 01 80 	mov    rdx,0xffffffff8001b3e3
ffffffff80001884:	48 8d b5 80 fd ff ff 	lea    rsi,[rbp-0x280]
ffffffff8000188b:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff80001890:	e8 bb ea ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001895:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff8000189c:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff800018a3:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800018a6:	89 8d 98 fd ff ff    	mov    DWORD PTR [rbp-0x268],ecx
ffffffff800018ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800018af:	48 89 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rax
ffffffff800018b6:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff800018bd:	48 8d b5 90 fd ff ff 	lea    rsi,[rbp-0x270]
ffffffff800018c4:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800018c9:	e8 82 ea ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800018ce:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff800018d5:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
ffffffff800018dc:	48 89 8d f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],rcx
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff800018e3:	48 83 e8 01          	sub    rax,0x1
ffffffff800018e7:	48 89 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rax
ffffffff800018ee:	0f 92 85 a8 fd ff ff 	setb   BYTE PTR [rbp-0x258]
ffffffff800018f5:	8a 85 a8 fd ff ff    	mov    al,BYTE PTR [rbp-0x258]
ffffffff800018fb:	84 c0                	test   al,al
ffffffff800018fd:	75 04                	jne    ffffffff80001903 <fmt.formatType__anon_1706+0x223>
ffffffff800018ff:	eb 00                	jmp    ffffffff80001901 <fmt.formatType__anon_1706+0x221>
ffffffff80001901:	eb 1c                	jmp    ffffffff8000191f <fmt.formatType__anon_1706+0x23f>
ffffffff80001903:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000190a:	48 c7 c1 68 bd 01 80 	mov    rcx,0xffffffff8001bd68
ffffffff80001911:	31 c0                	xor    eax,eax
ffffffff80001913:	89 c2                	mov    edx,eax
ffffffff80001915:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000191a:	e8 91 e8 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000191f:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001926:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff8000192d:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff80001934:	48 8b b5 f0 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x310]
ffffffff8000193b:	4c 8b 85 a0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x260]
ffffffff80001942:	e8 f9 87 00 00       	call   ffffffff8000a140 <fmt.formatType__anon_2940>
ffffffff80001947:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff8000194e:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff80001955:	48 c7 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],0x1
ffffffff8000195c:	01 00 00 00 
                    try writer.writeAll(", .");
ffffffff80001960:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001963:	89 8d c0 fd ff ff    	mov    DWORD PTR [rbp-0x240],ecx
ffffffff80001969:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000196c:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
ffffffff80001973:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000197a:	48 8d b5 b8 fd ff ff 	lea    rsi,[rbp-0x248]
ffffffff80001981:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001986:	48 89 8d e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],rcx
ffffffff8000198d:	e8 be e9 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001992:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001999:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff800019a0:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800019a3:	89 8d d0 fd ff ff    	mov    DWORD PTR [rbp-0x230],ecx
ffffffff800019a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800019ac:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
ffffffff800019b3:	48 c7 c2 f4 b3 01 80 	mov    rdx,0xffffffff8001b3f4
ffffffff800019ba:	48 8d b5 c8 fd ff ff 	lea    rsi,[rbp-0x238]
ffffffff800019c1:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff800019c6:	e8 85 e9 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800019cb:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800019d2:	48 8b 8d e0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x320]
ffffffff800019d9:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff800019e0:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800019e3:	89 95 e0 fd ff ff    	mov    DWORD PTR [rbp-0x220],edx
ffffffff800019e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800019ec:	48 89 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rax
ffffffff800019f3:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff800019fa:	48 8d b5 d8 fd ff ff 	lea    rsi,[rbp-0x228]
ffffffff80001a01:	e8 4a e9 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001a06:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80001a0d:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80001a14:	8b 49 04             	mov    ecx,DWORD PTR [rcx+0x4]
ffffffff80001a17:	89 8d ec fc ff ff    	mov    DWORD PTR [rbp-0x314],ecx
ffffffff80001a1d:	48 83 e8 01          	sub    rax,0x1
ffffffff80001a21:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
ffffffff80001a28:	0f 92 85 f0 fd ff ff 	setb   BYTE PTR [rbp-0x210]
ffffffff80001a2f:	8a 85 f0 fd ff ff    	mov    al,BYTE PTR [rbp-0x210]
ffffffff80001a35:	84 c0                	test   al,al
ffffffff80001a37:	75 04                	jne    ffffffff80001a3d <fmt.formatType__anon_1706+0x35d>
ffffffff80001a39:	eb 00                	jmp    ffffffff80001a3b <fmt.formatType__anon_1706+0x35b>
ffffffff80001a3b:	eb 1c                	jmp    ffffffff80001a59 <fmt.formatType__anon_1706+0x379>
ffffffff80001a3d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80001a44:	48 c7 c1 78 bd 01 80 	mov    rcx,0xffffffff8001bd78
ffffffff80001a4b:	31 c0                	xor    eax,eax
ffffffff80001a4d:	89 c2                	mov    edx,eax
ffffffff80001a4f:	be 10 00 00 00       	mov    esi,0x10
ffffffff80001a54:	e8 57 e7 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80001a59:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001a60:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff80001a67:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff80001a6e:	8b b5 ec fc ff ff    	mov    esi,DWORD PTR [rbp-0x314]
ffffffff80001a74:	4c 8b 85 e8 fd ff ff 	mov    r8,QWORD PTR [rbp-0x218]
ffffffff80001a7b:	e8 d0 88 00 00       	call   ffffffff8000a350 <fmt.formatType__anon_2942>
ffffffff80001a80:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001a87:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff80001a8e:	48 c7 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],0x2
ffffffff80001a95:	02 00 00 00 
                    try writer.writeAll(", .");
ffffffff80001a99:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001a9c:	89 8d 08 fe ff ff    	mov    DWORD PTR [rbp-0x1f8],ecx
ffffffff80001aa2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001aa5:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
ffffffff80001aac:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80001ab3:	48 8d b5 00 fe ff ff 	lea    rsi,[rbp-0x200]
ffffffff80001aba:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001abf:	48 89 8d d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],rcx
ffffffff80001ac6:	e8 85 e8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001acb:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001ad2:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff80001ad9:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001adc:	89 8d 18 fe ff ff    	mov    DWORD PTR [rbp-0x1e8],ecx
ffffffff80001ae2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001ae5:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff80001aec:	48 c7 c2 ff b3 01 80 	mov    rdx,0xffffffff8001b3ff
ffffffff80001af3:	48 8d b5 10 fe ff ff 	lea    rsi,[rbp-0x1f0]
ffffffff80001afa:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80001aff:	e8 4c e8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001b04:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001b0b:	48 8b 8d d0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x330]
ffffffff80001b12:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff80001b19:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80001b1c:	89 95 28 fe ff ff    	mov    DWORD PTR [rbp-0x1d8],edx
ffffffff80001b22:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001b25:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff80001b2c:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80001b33:	48 8d b5 20 fe ff ff 	lea    rsi,[rbp-0x1e0]
ffffffff80001b3a:	e8 11 e8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001b3f:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80001b46:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80001b4d:	8a 49 08             	mov    cl,BYTE PTR [rcx+0x8]
ffffffff80001b50:	88 8d df fc ff ff    	mov    BYTE PTR [rbp-0x321],cl
ffffffff80001b56:	48 83 e8 01          	sub    rax,0x1
ffffffff80001b5a:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
ffffffff80001b61:	0f 92 85 38 fe ff ff 	setb   BYTE PTR [rbp-0x1c8]
ffffffff80001b68:	8a 85 38 fe ff ff    	mov    al,BYTE PTR [rbp-0x1c8]
ffffffff80001b6e:	84 c0                	test   al,al
ffffffff80001b70:	75 04                	jne    ffffffff80001b76 <fmt.formatType__anon_1706+0x496>
ffffffff80001b72:	eb 00                	jmp    ffffffff80001b74 <fmt.formatType__anon_1706+0x494>
ffffffff80001b74:	eb 1c                	jmp    ffffffff80001b92 <fmt.formatType__anon_1706+0x4b2>
ffffffff80001b76:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80001b7d:	48 c7 c1 88 bd 01 80 	mov    rcx,0xffffffff8001bd88
ffffffff80001b84:	31 c0                	xor    eax,eax
ffffffff80001b86:	89 c2                	mov    edx,eax
ffffffff80001b88:	be 10 00 00 00       	mov    esi,0x10
ffffffff80001b8d:	e8 1e e6 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80001b92:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001b99:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff80001ba0:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff80001ba7:	8a 85 df fc ff ff    	mov    al,BYTE PTR [rbp-0x321]
ffffffff80001bad:	4c 8b 85 30 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1d0]
ffffffff80001bb4:	0f b6 f0             	movzx  esi,al
ffffffff80001bb7:	e8 f4 87 00 00       	call   ffffffff8000a3b0 <fmt.formatType__anon_2943>
ffffffff80001bbc:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001bc3:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff80001bca:	48 c7 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],0x3
ffffffff80001bd1:	03 00 00 00 
                    try writer.writeAll(", .");
ffffffff80001bd5:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001bd8:	89 8d 50 fe ff ff    	mov    DWORD PTR [rbp-0x1b0],ecx
ffffffff80001bde:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001be1:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff80001be8:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80001bef:	48 8d b5 48 fe ff ff 	lea    rsi,[rbp-0x1b8]
ffffffff80001bf6:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001bfb:	48 89 8d c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],rcx
ffffffff80001c02:	e8 49 e7 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001c07:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001c0e:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff80001c15:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001c18:	89 8d 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],ecx
ffffffff80001c1e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001c21:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80001c28:	48 c7 c2 08 b4 01 80 	mov    rdx,0xffffffff8001b408
ffffffff80001c2f:	48 8d b5 58 fe ff ff 	lea    rsi,[rbp-0x1a8]
ffffffff80001c36:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80001c3b:	e8 10 e7 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001c40:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001c47:	48 8b 8d c0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x340]
ffffffff80001c4e:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff80001c55:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80001c58:	89 95 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],edx
ffffffff80001c5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001c61:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff80001c68:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80001c6f:	48 8d b5 68 fe ff ff 	lea    rsi,[rbp-0x198]
ffffffff80001c76:	e8 d5 e6 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001c7b:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80001c82:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80001c89:	8a 49 09             	mov    cl,BYTE PTR [rcx+0x9]
ffffffff80001c8c:	88 8d cf fc ff ff    	mov    BYTE PTR [rbp-0x331],cl
ffffffff80001c92:	48 83 e8 01          	sub    rax,0x1
ffffffff80001c96:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80001c9d:	0f 92 85 80 fe ff ff 	setb   BYTE PTR [rbp-0x180]
ffffffff80001ca4:	8a 85 80 fe ff ff    	mov    al,BYTE PTR [rbp-0x180]
ffffffff80001caa:	84 c0                	test   al,al
ffffffff80001cac:	75 04                	jne    ffffffff80001cb2 <fmt.formatType__anon_1706+0x5d2>
ffffffff80001cae:	eb 00                	jmp    ffffffff80001cb0 <fmt.formatType__anon_1706+0x5d0>
ffffffff80001cb0:	eb 1c                	jmp    ffffffff80001cce <fmt.formatType__anon_1706+0x5ee>
ffffffff80001cb2:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80001cb9:	48 c7 c1 98 bd 01 80 	mov    rcx,0xffffffff8001bd98
ffffffff80001cc0:	31 c0                	xor    eax,eax
ffffffff80001cc2:	89 c2                	mov    edx,eax
ffffffff80001cc4:	be 10 00 00 00       	mov    esi,0x10
ffffffff80001cc9:	e8 e2 e4 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80001cce:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001cd5:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff80001cdc:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff80001ce3:	8a 85 cf fc ff ff    	mov    al,BYTE PTR [rbp-0x331]
ffffffff80001ce9:	4c 8b 85 78 fe ff ff 	mov    r8,QWORD PTR [rbp-0x188]
ffffffff80001cf0:	0f b6 f0             	movzx  esi,al
ffffffff80001cf3:	e8 18 87 00 00       	call   ffffffff8000a410 <fmt.formatType__anon_2944>
ffffffff80001cf8:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001cff:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff80001d06:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x4
ffffffff80001d0d:	04 00 00 00 
                    try writer.writeAll(", .");
ffffffff80001d11:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001d14:	89 8d 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],ecx
ffffffff80001d1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001d1d:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff80001d24:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80001d2b:	48 8d b5 90 fe ff ff 	lea    rsi,[rbp-0x170]
ffffffff80001d32:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001d37:	48 89 8d b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],rcx
ffffffff80001d3e:	e8 0d e6 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001d43:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001d4a:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff80001d51:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001d54:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
ffffffff80001d5a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001d5d:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff80001d64:	48 c7 c2 11 b4 01 80 	mov    rdx,0xffffffff8001b411
ffffffff80001d6b:	48 8d b5 a0 fe ff ff 	lea    rsi,[rbp-0x160]
ffffffff80001d72:	b9 05 00 00 00       	mov    ecx,0x5
ffffffff80001d77:	e8 d4 e5 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001d7c:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001d83:	48 8b 8d b0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x350]
ffffffff80001d8a:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff80001d91:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80001d94:	89 95 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],edx
ffffffff80001d9a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001d9d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80001da4:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80001dab:	48 8d b5 b0 fe ff ff 	lea    rsi,[rbp-0x150]
ffffffff80001db2:	e8 99 e5 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001db7:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80001dbe:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80001dc5:	48 83 c1 0a          	add    rcx,0xa
ffffffff80001dc9:	48 89 8d b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],rcx
ffffffff80001dd0:	48 83 e8 01          	sub    rax,0x1
ffffffff80001dd4:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff80001ddb:	0f 92 85 c8 fe ff ff 	setb   BYTE PTR [rbp-0x138]
ffffffff80001de2:	8a 85 c8 fe ff ff    	mov    al,BYTE PTR [rbp-0x138]
ffffffff80001de8:	84 c0                	test   al,al
ffffffff80001dea:	75 04                	jne    ffffffff80001df0 <fmt.formatType__anon_1706+0x710>
ffffffff80001dec:	eb 00                	jmp    ffffffff80001dee <fmt.formatType__anon_1706+0x70e>
ffffffff80001dee:	eb 1c                	jmp    ffffffff80001e0c <fmt.formatType__anon_1706+0x72c>
ffffffff80001df0:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80001df7:	48 c7 c1 a8 bd 01 80 	mov    rcx,0xffffffff8001bda8
ffffffff80001dfe:	31 c0                	xor    eax,eax
ffffffff80001e00:	89 c2                	mov    edx,eax
ffffffff80001e02:	be 10 00 00 00       	mov    esi,0x10
ffffffff80001e07:	e8 a4 e3 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80001e0c:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001e13:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff80001e1a:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff80001e21:	48 8b b5 b8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x348]
ffffffff80001e28:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
ffffffff80001e2f:	e8 3c 86 00 00       	call   ffffffff8000a470 <fmt.formatType__anon_2945>
ffffffff80001e34:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001e3b:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff80001e42:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x5
ffffffff80001e49:	05 00 00 00 
                    try writer.writeAll(", .");
ffffffff80001e4d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001e50:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
ffffffff80001e56:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001e59:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80001e60:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80001e67:	48 8d b5 d8 fe ff ff 	lea    rsi,[rbp-0x128]
ffffffff80001e6e:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001e73:	48 89 8d a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rcx
ffffffff80001e7a:	e8 d1 e4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001e7f:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001e86:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff80001e8d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001e90:	89 8d f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],ecx
ffffffff80001e96:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001e99:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80001ea0:	48 c7 c2 17 b4 01 80 	mov    rdx,0xffffffff8001b417
ffffffff80001ea7:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
ffffffff80001eae:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff80001eb3:	e8 98 e4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001eb8:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001ebf:	48 8b 8d a0 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x360]
ffffffff80001ec6:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff80001ecd:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80001ed0:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffffffff80001ed6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001ed9:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80001ee0:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80001ee7:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
ffffffff80001eee:	e8 5d e4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001ef3:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80001efa:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80001f01:	48 83 c1 10          	add    rcx,0x10
ffffffff80001f05:	48 89 8d a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rcx
ffffffff80001f0c:	48 83 e8 01          	sub    rax,0x1
ffffffff80001f10:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80001f17:	0f 92 85 10 ff ff ff 	setb   BYTE PTR [rbp-0xf0]
ffffffff80001f1e:	8a 85 10 ff ff ff    	mov    al,BYTE PTR [rbp-0xf0]
ffffffff80001f24:	84 c0                	test   al,al
ffffffff80001f26:	75 04                	jne    ffffffff80001f2c <fmt.formatType__anon_1706+0x84c>
ffffffff80001f28:	eb 00                	jmp    ffffffff80001f2a <fmt.formatType__anon_1706+0x84a>
ffffffff80001f2a:	eb 1c                	jmp    ffffffff80001f48 <fmt.formatType__anon_1706+0x868>
ffffffff80001f2c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80001f33:	48 c7 c1 b8 bd 01 80 	mov    rcx,0xffffffff8001bdb8
ffffffff80001f3a:	31 c0                	xor    eax,eax
ffffffff80001f3c:	89 c2                	mov    edx,eax
ffffffff80001f3e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80001f43:	e8 68 e2 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80001f48:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001f4f:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff80001f56:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff80001f5d:	48 8b b5 a8 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x358]
ffffffff80001f64:	4c 8b 85 08 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf8]
ffffffff80001f6b:	e8 10 87 00 00       	call   ffffffff8000a680 <fmt.formatType__anon_2946>
ffffffff80001f70:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001f77:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff80001f7e:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x6
ffffffff80001f85:	06 00 00 00 
                    try writer.writeAll(", .");
ffffffff80001f89:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001f8c:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
ffffffff80001f92:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001f95:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80001f9c:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80001fa3:	48 8d b5 20 ff ff ff 	lea    rsi,[rbp-0xe0]
ffffffff80001faa:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001faf:	48 89 8d 90 fc ff ff 	mov    QWORD PTR [rbp-0x370],rcx
ffffffff80001fb6:	e8 95 e3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001fbb:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001fc2:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff80001fc9:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80001fcc:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
ffffffff80001fd2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001fd5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff80001fdc:	48 c7 c2 22 b4 01 80 	mov    rdx,0xffffffff8001b422
ffffffff80001fe3:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff80001fea:	b9 0b 00 00 00       	mov    ecx,0xb
ffffffff80001fef:	e8 5c e3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80001ff4:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80001ffb:	48 8b 8d 90 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x370]
ffffffff80002002:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff80002009:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000200c:	89 95 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],edx
ffffffff80002012:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002015:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffffffff8000201c:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80002023:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff8000202a:	e8 21 e3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000202f:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80002036:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000203d:	8a 49 18             	mov    cl,BYTE PTR [rcx+0x18]
ffffffff80002040:	88 8d 9f fc ff ff    	mov    BYTE PTR [rbp-0x361],cl
ffffffff80002046:	48 83 e8 01          	sub    rax,0x1
ffffffff8000204a:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff80002051:	0f 92 85 58 ff ff ff 	setb   BYTE PTR [rbp-0xa8]
ffffffff80002058:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [rbp-0xa8]
ffffffff8000205e:	84 c0                	test   al,al
ffffffff80002060:	75 04                	jne    ffffffff80002066 <fmt.formatType__anon_1706+0x986>
ffffffff80002062:	eb 00                	jmp    ffffffff80002064 <fmt.formatType__anon_1706+0x984>
ffffffff80002064:	eb 1c                	jmp    ffffffff80002082 <fmt.formatType__anon_1706+0x9a2>
ffffffff80002066:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000206d:	48 c7 c1 c8 bd 01 80 	mov    rcx,0xffffffff8001bdc8
ffffffff80002074:	31 c0                	xor    eax,eax
ffffffff80002076:	89 c2                	mov    edx,eax
ffffffff80002078:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000207d:	e8 2e e1 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80002082:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80002089:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff80002090:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff80002097:	8a 85 9f fc ff ff    	mov    al,BYTE PTR [rbp-0x361]
ffffffff8000209d:	4c 8b 85 50 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb0]
ffffffff800020a4:	0f b6 f0             	movzx  esi,al
ffffffff800020a7:	e8 e4 87 00 00       	call   ffffffff8000a890 <fmt.formatType__anon_2947>
ffffffff800020ac:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800020b3:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff800020ba:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x7
ffffffff800020c1:	07 00 00 00 
                    try writer.writeAll(", .");
ffffffff800020c5:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800020c8:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff800020ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800020d1:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff800020d8:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800020df:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff800020e6:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800020eb:	48 89 8d 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rcx
ffffffff800020f2:	e8 59 e2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800020f7:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800020fe:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff80002105:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002108:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff8000210b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000210e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80002115:	48 c7 c2 2e b4 01 80 	mov    rdx,0xffffffff8001b42e
ffffffff8000211c:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff80002123:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff80002128:	e8 23 e2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000212d:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80002134:	48 8b 8d 80 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x380]
ffffffff8000213b:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff80002142:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80002145:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
ffffffff80002148:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000214b:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000214f:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80002156:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff8000215a:	e8 f1 e1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000215f:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80002166:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000216d:	8b 49 1c             	mov    ecx,DWORD PTR [rcx+0x1c]
ffffffff80002170:	89 8d 8c fc ff ff    	mov    DWORD PTR [rbp-0x374],ecx
ffffffff80002176:	48 83 e8 01          	sub    rax,0x1
ffffffff8000217a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000217e:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80002182:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80002185:	84 c0                	test   al,al
ffffffff80002187:	75 04                	jne    ffffffff8000218d <fmt.formatType__anon_1706+0xaad>
ffffffff80002189:	eb 00                	jmp    ffffffff8000218b <fmt.formatType__anon_1706+0xaab>
ffffffff8000218b:	eb 1c                	jmp    ffffffff800021a9 <fmt.formatType__anon_1706+0xac9>
ffffffff8000218d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80002194:	48 c7 c1 d8 bd 01 80 	mov    rcx,0xffffffff8001bdd8
ffffffff8000219b:	31 c0                	xor    eax,eax
ffffffff8000219d:	89 c2                	mov    edx,eax
ffffffff8000219f:	be 10 00 00 00       	mov    esi,0x10
ffffffff800021a4:	e8 07 e0 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800021a9:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800021b0:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff800021b7:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff800021be:	8b b5 8c fc ff ff    	mov    esi,DWORD PTR [rbp-0x374]
ffffffff800021c4:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff800021c8:	e8 23 87 00 00       	call   ffffffff8000a8f0 <fmt.formatType__anon_2948>
ffffffff800021cd:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800021d4:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
ffffffff800021db:	48 c7 45 a8 08 00 00 	mov    QWORD PTR [rbp-0x58],0x8
ffffffff800021e2:	00 
                    try writer.writeAll(", .");
ffffffff800021e3:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800021e6:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff800021e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800021ec:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800021f0:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800021f7:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff800021fb:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002200:	48 89 8d 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rcx
ffffffff80002207:	e8 44 e1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000220c:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80002213:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(f.name);
ffffffff8000221a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000221d:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff80002220:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002223:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80002227:	48 c7 c2 38 b4 01 80 	mov    rdx,0xffffffff8001b438
ffffffff8000222e:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff80002232:	b9 0f 00 00 00       	mov    ecx,0xf
ffffffff80002237:	e8 14 e1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000223c:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff80002243:	48 8b 8d 70 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x390]
ffffffff8000224a:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
                try writer.writeAll(" = ");
ffffffff80002251:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80002254:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff80002257:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000225a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000225e:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80002265:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff80002269:	e8 e2 e0 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000226e:	48 8b 8d 08 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2f8]
ffffffff80002275:	48 8b 85 18 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2e8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000227c:	8b 49 20             	mov    ecx,DWORD PTR [rcx+0x20]
ffffffff8000227f:	89 8d 7c fc ff ff    	mov    DWORD PTR [rbp-0x384],ecx
ffffffff80002285:	48 83 e8 01          	sub    rax,0x1
ffffffff80002289:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8000228d:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff80002291:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff80002294:	84 c0                	test   al,al
ffffffff80002296:	75 04                	jne    ffffffff8000229c <fmt.formatType__anon_1706+0xbbc>
ffffffff80002298:	eb 00                	jmp    ffffffff8000229a <fmt.formatType__anon_1706+0xbba>
ffffffff8000229a:	eb 1c                	jmp    ffffffff800022b8 <fmt.formatType__anon_1706+0xbd8>
ffffffff8000229c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800022a3:	48 c7 c1 e8 bd 01 80 	mov    rcx,0xffffffff8001bde8
ffffffff800022aa:	31 c0                	xor    eax,eax
ffffffff800022ac:	89 c2                	mov    edx,eax
ffffffff800022ae:	be 10 00 00 00       	mov    esi,0x10
ffffffff800022b3:	e8 f8 de ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800022b8:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800022bf:	48 8b 8d f8 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x308]
ffffffff800022c6:	48 8b 95 00 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x300]
ffffffff800022cd:	8b b5 7c fc ff ff    	mov    esi,DWORD PTR [rbp-0x384]
ffffffff800022d3:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff800022d7:	e8 74 86 00 00       	call   ffffffff8000a950 <fmt.formatType__anon_2949>
ffffffff800022dc:	48 8b bd 10 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2f0]
ffffffff800022e3:	48 8b 85 f8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x308]
            try writer.writeAll(" }");
ffffffff800022ea:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800022ed:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800022f1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800022f4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800022f7:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff800022fe:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80002302:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80002307:	e8 44 e0 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000230c:	31 c0                	xor    eax,eax
ffffffff8000230e:	48 81 c4 90 03 00 00 	add    rsp,0x390
ffffffff80002315:	5d                   	pop    rbp
ffffffff80002316:	c3                   	ret
ffffffff80002317:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000231e:	00 00 

ffffffff80002320 <main.debug_print__anon_1691>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80002320:	55                   	push   rbp
ffffffff80002321:	48 89 e5             	mov    rbp,rsp
ffffffff80002324:	48 83 ec 30          	sub    rsp,0x30
ffffffff80002328:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000232c:	48 89 fe             	mov    rsi,rdi
ffffffff8000232f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80002333:	48 c7 c2 1a 9a 01 80 	mov    rdx,0xffffffff80019a1a
ffffffff8000233a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80002341:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80002345:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000234b:	e8 f0 e1 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80002350:	48 c7 c6 26 9a 01 80 	mov    rsi,0xffffffff80019a26
ffffffff80002357:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000235b:	e8 90 e2 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80002360:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80002364:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80002368:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000236c:	e8 bf f1 ff ff       	call   ffffffff80001530 <fmt.format__anon_1692>
ffffffff80002371:	31 c0                	xor    eax,eax
ffffffff80002373:	48 83 c4 30          	add    rsp,0x30
ffffffff80002377:	5d                   	pop    rbp
ffffffff80002378:	c3                   	ret
ffffffff80002379:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80002380 <fmt.format__anon_1724>:
) !void {
ffffffff80002380:	55                   	push   rbp
ffffffff80002381:	48 89 e5             	mov    rbp,rsp
ffffffff80002384:	48 83 ec 70          	sub    rsp,0x70
ffffffff80002388:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
ffffffff8000238c:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
ffffffff80002390:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80002394:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80002397:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff8000239b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000239e:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff800023a1:	b0 01                	mov    al,0x1
ffffffff800023a3:	a8 01                	test   al,0x1
ffffffff800023a5:	75 02                	jne    ffffffff800023a9 <fmt.format__anon_1724+0x29>
ffffffff800023a7:	eb 02                	jmp    ffffffff800023ab <fmt.format__anon_1724+0x2b>
ffffffff800023a9:	eb 10                	jmp    ffffffff800023bb <fmt.format__anon_1724+0x3b>
ffffffff800023ab:	31 c0                	xor    eax,eax
ffffffff800023ad:	31 c0                	xor    eax,eax
ffffffff800023af:	89 c7                	mov    edi,eax
ffffffff800023b1:	be 01 00 00 00       	mov    esi,0x1
ffffffff800023b6:	e8 55 df ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800023bb:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff800023bf:	48 c7 c2 8c b2 01 80 	mov    rdx,0xffffffff8001b28c
ffffffff800023c6:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff800023ca:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff800023cf:	e8 7c df ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800023d4:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff800023d8:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
ffffffff800023dc:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800023e0:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff800023e7:	00 
            std.options.fmt_max_depth,
ffffffff800023e8:	48 c7 c2 b8 9a 01 80 	mov    rdx,0xffffffff80019ab8
ffffffff800023ef:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800023f5:	e8 26 01 00 00       	call   ffffffff80002520 <fmt.formatType__anon_1738>
ffffffff800023fa:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800023fe:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80002401:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff80002405:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80002408:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
ffffffff8000240b:	b0 01                	mov    al,0x1
ffffffff8000240d:	a8 01                	test   al,0x1
ffffffff8000240f:	75 02                	jne    ffffffff80002413 <fmt.format__anon_1724+0x93>
ffffffff80002411:	eb 02                	jmp    ffffffff80002415 <fmt.format__anon_1724+0x95>
ffffffff80002413:	eb 0f                	jmp    ffffffff80002424 <fmt.format__anon_1724+0xa4>
ffffffff80002415:	bf 04 00 00 00       	mov    edi,0x4
ffffffff8000241a:	be 07 00 00 00       	mov    esi,0x7
ffffffff8000241f:	e8 ec de ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80002424:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80002428:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff8000242c:	48 c7 c2 90 b2 01 80 	mov    rdx,0xffffffff8001b290
ffffffff80002433:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002438:	e8 13 df ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000243d:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
ffffffff80002441:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80002445:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80002449:	48 c7 45 d0 01 00 00 	mov    QWORD PTR [rbp-0x30],0x1
ffffffff80002450:	00 
        try formatType(
ffffffff80002451:	48 83 c6 04          	add    rsi,0x4
            std.options.fmt_max_depth,
ffffffff80002455:	48 c7 c2 48 9b 01 80 	mov    rdx,0xffffffff80019b48
ffffffff8000245c:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80002462:	e8 89 ef ff ff       	call   ffffffff800013f0 <fmt.formatType__anon_1686>
ffffffff80002467:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000246b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000246e:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80002472:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80002475:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80002478:	b0 01                	mov    al,0x1
ffffffff8000247a:	a8 01                	test   al,0x1
ffffffff8000247c:	75 02                	jne    ffffffff80002480 <fmt.format__anon_1724+0x100>
ffffffff8000247e:	eb 02                	jmp    ffffffff80002482 <fmt.format__anon_1724+0x102>
ffffffff80002480:	eb 0f                	jmp    ffffffff80002491 <fmt.format__anon_1724+0x111>
ffffffff80002482:	bf 0a 00 00 00       	mov    edi,0xa
ffffffff80002487:	be 0e 00 00 00       	mov    esi,0xe
ffffffff8000248c:	e8 7f de ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80002491:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80002495:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff80002499:	48 c7 c2 96 b2 01 80 	mov    rdx,0xffffffff8001b296
ffffffff800024a0:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff800024a5:	e8 a6 de ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800024aa:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
ffffffff800024ae:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff800024b2:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800024b6:	48 c7 45 e8 02 00 00 	mov    QWORD PTR [rbp-0x18],0x2
ffffffff800024bd:	00 
        try formatType(
ffffffff800024be:	48 83 c6 0a          	add    rsi,0xa
            std.options.fmt_max_depth,
ffffffff800024c2:	48 c7 c2 d8 9b 01 80 	mov    rdx,0xffffffff80019bd8
ffffffff800024c9:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800024cf:	e8 2c 01 00 00       	call   ffffffff80002600 <fmt.formatType__anon_1751>
ffffffff800024d4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800024d8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800024db:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800024df:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800024e2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800024e5:	b0 01                	mov    al,0x1
ffffffff800024e7:	a8 01                	test   al,0x1
ffffffff800024e9:	75 02                	jne    ffffffff800024ed <fmt.format__anon_1724+0x16d>
ffffffff800024eb:	eb 02                	jmp    ffffffff800024ef <fmt.format__anon_1724+0x16f>
ffffffff800024ed:	eb 0f                	jmp    ffffffff800024fe <fmt.format__anon_1724+0x17e>
ffffffff800024ef:	bf 11 00 00 00       	mov    edi,0x11
ffffffff800024f4:	be 13 00 00 00       	mov    esi,0x13
ffffffff800024f9:	e8 12 de ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800024fe:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80002502:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80002506:	48 c7 c2 9d b2 01 80 	mov    rdx,0xffffffff8001b29d
ffffffff8000250d:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80002512:	e8 39 de ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80002517:	31 c0                	xor    eax,eax
ffffffff80002519:	48 83 c4 70          	add    rsp,0x70
ffffffff8000251d:	5d                   	pop    rbp
ffffffff8000251e:	c3                   	ret
ffffffff8000251f:	90                   	nop

ffffffff80002520 <fmt.formatType__anon_1738>:
) @TypeOf(writer).Error!void {
ffffffff80002520:	55                   	push   rbp
ffffffff80002521:	48 89 e5             	mov    rbp,rsp
ffffffff80002524:	48 83 ec 60          	sub    rsp,0x60
ffffffff80002528:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff8000252c:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffffffff80002530:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
ffffffff80002534:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff80002538:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000253c:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffffffff80002543:	00 
ffffffff80002544:	48 c7 45 d0 d9 90 01 	mov    QWORD PTR [rbp-0x30],0xffffffff800190d9
ffffffff8000254b:	80 
            if (max_depth == 0) {
ffffffff8000254c:	49 83 f8 00          	cmp    r8,0x0
ffffffff80002550:	75 36                	jne    ffffffff80002588 <fmt.formatType__anon_1738+0x68>
ffffffff80002552:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80002556:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
                return writer.writeAll("{ ... }");
ffffffff8000255a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000255d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80002561:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80002564:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80002567:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8000256e:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff80002572:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80002577:	e8 d4 dd ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000257c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
ffffffff80002580:	b0 01                	mov    al,0x1
ffffffff80002582:	a8 01                	test   al,0x1
ffffffff80002584:	75 04                	jne    ffffffff8000258a <fmt.formatType__anon_1738+0x6a>
ffffffff80002586:	eb 0c                	jmp    ffffffff80002594 <fmt.formatType__anon_1738+0x74>
ffffffff80002588:	eb 1d                	jmp    ffffffff800025a7 <fmt.formatType__anon_1738+0x87>
ffffffff8000258a:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
ffffffff8000258e:	48 83 c4 60          	add    rsp,0x60
ffffffff80002592:	5d                   	pop    rbp
ffffffff80002593:	c3                   	ret
ffffffff80002594:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80002598:	e8 73 0e 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000259d:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
ffffffff800025a1:	48 83 c4 60          	add    rsp,0x60
ffffffff800025a5:	5d                   	pop    rbp
ffffffff800025a6:	c3                   	ret
ffffffff800025a7:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
ffffffff800025ab:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff800025af:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff800025b3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
                        return formatBuf(&value, options, writer);
ffffffff800025b7:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800025b9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800025bc:	ba 04 00 00 00       	mov    edx,0x4
ffffffff800025c1:	48 8d 75 fc          	lea    rsi,[rbp-0x4]
ffffffff800025c5:	e8 96 4e 00 00       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800025ca:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
ffffffff800025ce:	b0 01                	mov    al,0x1
ffffffff800025d0:	a8 01                	test   al,0x1
ffffffff800025d2:	75 02                	jne    ffffffff800025d6 <fmt.formatType__anon_1738+0xb6>
ffffffff800025d4:	eb 0a                	jmp    ffffffff800025e0 <fmt.formatType__anon_1738+0xc0>
ffffffff800025d6:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
ffffffff800025da:	48 83 c4 60          	add    rsp,0x60
ffffffff800025de:	5d                   	pop    rbp
ffffffff800025df:	c3                   	ret
ffffffff800025e0:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff800025e4:	e8 27 0e 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff800025e9:	66 8b 45 fa          	mov    ax,WORD PTR [rbp-0x6]
ffffffff800025ed:	48 83 c4 60          	add    rsp,0x60
ffffffff800025f1:	5d                   	pop    rbp
ffffffff800025f2:	c3                   	ret
ffffffff800025f3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800025fa:	00 00 00 
ffffffff800025fd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80002600 <fmt.formatType__anon_1751>:
) @TypeOf(writer).Error!void {
ffffffff80002600:	55                   	push   rbp
ffffffff80002601:	48 89 e5             	mov    rbp,rsp
ffffffff80002604:	48 83 ec 60          	sub    rsp,0x60
ffffffff80002608:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff8000260c:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
ffffffff80002610:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
ffffffff80002614:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff80002618:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000261c:	48 c7 45 d8 01 00 00 	mov    QWORD PTR [rbp-0x28],0x1
ffffffff80002623:	00 
ffffffff80002624:	48 c7 45 d0 d9 90 01 	mov    QWORD PTR [rbp-0x30],0xffffffff800190d9
ffffffff8000262b:	80 
            if (max_depth == 0) {
ffffffff8000262c:	49 83 f8 00          	cmp    r8,0x0
ffffffff80002630:	75 36                	jne    ffffffff80002668 <fmt.formatType__anon_1751+0x68>
ffffffff80002632:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80002636:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
                return writer.writeAll("{ ... }");
ffffffff8000263a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000263d:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80002641:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80002644:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80002647:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8000264e:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff80002652:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80002657:	e8 f4 dc ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000265c:	66 89 45 e6          	mov    WORD PTR [rbp-0x1a],ax
ffffffff80002660:	b0 01                	mov    al,0x1
ffffffff80002662:	a8 01                	test   al,0x1
ffffffff80002664:	75 04                	jne    ffffffff8000266a <fmt.formatType__anon_1751+0x6a>
ffffffff80002666:	eb 0c                	jmp    ffffffff80002674 <fmt.formatType__anon_1751+0x74>
ffffffff80002668:	eb 1d                	jmp    ffffffff80002687 <fmt.formatType__anon_1751+0x87>
ffffffff8000266a:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
ffffffff8000266e:	48 83 c4 60          	add    rsp,0x60
ffffffff80002672:	5d                   	pop    rbp
ffffffff80002673:	c3                   	ret
ffffffff80002674:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80002678:	e8 93 0d 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000267d:	66 8b 45 e6          	mov    ax,WORD PTR [rbp-0x1a]
ffffffff80002681:	48 83 c4 60          	add    rsp,0x60
ffffffff80002685:	5d                   	pop    rbp
ffffffff80002686:	c3                   	ret
ffffffff80002687:	4c 8b 45 a8          	mov    r8,QWORD PTR [rbp-0x58]
ffffffff8000268b:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff8000268f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80002693:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
                        return formatBuf(&value, options, writer);
ffffffff80002697:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000269a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000269e:	ba 08 00 00 00       	mov    edx,0x8
ffffffff800026a3:	48 8d 75 f8          	lea    rsi,[rbp-0x8]
ffffffff800026a7:	e8 b4 4d 00 00       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800026ac:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
ffffffff800026b0:	b0 01                	mov    al,0x1
ffffffff800026b2:	a8 01                	test   al,0x1
ffffffff800026b4:	75 02                	jne    ffffffff800026b8 <fmt.formatType__anon_1751+0xb8>
ffffffff800026b6:	eb 0a                	jmp    ffffffff800026c2 <fmt.formatType__anon_1751+0xc2>
ffffffff800026b8:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff800026bc:	48 83 c4 60          	add    rsp,0x60
ffffffff800026c0:	5d                   	pop    rbp
ffffffff800026c1:	c3                   	ret
ffffffff800026c2:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff800026c6:	e8 45 0d 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff800026cb:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff800026cf:	48 83 c4 60          	add    rsp,0x60
ffffffff800026d3:	5d                   	pop    rbp
ffffffff800026d4:	c3                   	ret
ffffffff800026d5:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800026dc:	00 00 00 
ffffffff800026df:	90                   	nop

ffffffff800026e0 <main.debug_print__anon_1723>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff800026e0:	55                   	push   rbp
ffffffff800026e1:	48 89 e5             	mov    rbp,rsp
ffffffff800026e4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800026e8:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800026ec:	48 89 fe             	mov    rsi,rdi
ffffffff800026ef:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff800026f3:	48 c7 c2 02 9c 01 80 	mov    rdx,0xffffffff80019c02
ffffffff800026fa:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80002701:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80002705:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000270b:	e8 30 de ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80002710:	48 c7 c6 0e 9c 01 80 	mov    rsi,0xffffffff80019c0e
ffffffff80002717:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000271b:	e8 d0 de ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80002720:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80002724:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80002728:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000272c:	e8 4f fc ff ff       	call   ffffffff80002380 <fmt.format__anon_1724>
ffffffff80002731:	31 c0                	xor    eax,eax
ffffffff80002733:	48 83 c4 30          	add    rsp,0x30
ffffffff80002737:	5d                   	pop    rbp
ffffffff80002738:	c3                   	ret
ffffffff80002739:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80002740 <fmt.format__anon_1757>:
) !void {
ffffffff80002740:	55                   	push   rbp
ffffffff80002741:	48 89 e5             	mov    rbp,rsp
ffffffff80002744:	48 83 ec 40          	sub    rsp,0x40
ffffffff80002748:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff8000274c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff80002750:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80002754:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80002757:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000275b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000275e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80002761:	b0 01                	mov    al,0x1
ffffffff80002763:	a8 01                	test   al,0x1
ffffffff80002765:	75 02                	jne    ffffffff80002769 <fmt.format__anon_1757+0x29>
ffffffff80002767:	eb 02                	jmp    ffffffff8000276b <fmt.format__anon_1757+0x2b>
ffffffff80002769:	eb 10                	jmp    ffffffff8000277b <fmt.format__anon_1757+0x3b>
ffffffff8000276b:	31 c0                	xor    eax,eax
ffffffff8000276d:	31 c0                	xor    eax,eax
ffffffff8000276f:	89 c7                	mov    edi,eax
ffffffff80002771:	be 0d 00 00 00       	mov    esi,0xd
ffffffff80002776:	e8 95 db ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000277b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000277f:	48 c7 c2 a0 b2 01 80 	mov    rdx,0xffffffff8001b2a0
ffffffff80002786:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff8000278a:	b9 0d 00 00 00       	mov    ecx,0xd
ffffffff8000278f:	e8 bc db ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002794:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80002798:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffffffff8000279c:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800027a0:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800027a7:	00 
            std.options.fmt_max_depth,
ffffffff800027a8:	48 c7 c2 a0 9c 01 80 	mov    rdx,0xffffffff80019ca0
ffffffff800027af:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800027b5:	e8 26 ef ff ff       	call   ffffffff800016e0 <fmt.formatType__anon_1706>
ffffffff800027ba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800027be:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800027c1:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800027c5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800027c8:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800027cb:	b0 01                	mov    al,0x1
ffffffff800027cd:	a8 01                	test   al,0x1
ffffffff800027cf:	75 02                	jne    ffffffff800027d3 <fmt.format__anon_1757+0x93>
ffffffff800027d1:	eb 02                	jmp    ffffffff800027d5 <fmt.format__anon_1757+0x95>
ffffffff800027d3:	eb 0f                	jmp    ffffffff800027e4 <fmt.format__anon_1757+0xa4>
ffffffff800027d5:	bf 0f 00 00 00       	mov    edi,0xf
ffffffff800027da:	be 10 00 00 00       	mov    esi,0x10
ffffffff800027df:	e8 2c db ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800027e4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800027e8:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800027ec:	48 c7 c2 af b2 01 80 	mov    rdx,0xffffffff8001b2af
ffffffff800027f3:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff800027f8:	e8 53 db ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800027fd:	31 c0                	xor    eax,eax
ffffffff800027ff:	48 83 c4 40          	add    rsp,0x40
ffffffff80002803:	5d                   	pop    rbp
ffffffff80002804:	c3                   	ret
ffffffff80002805:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000280c:	00 00 00 
ffffffff8000280f:	90                   	nop

ffffffff80002810 <main.debug_print__anon_1756>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80002810:	55                   	push   rbp
ffffffff80002811:	48 89 e5             	mov    rbp,rsp
ffffffff80002814:	48 83 ec 30          	sub    rsp,0x30
ffffffff80002818:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000281c:	48 89 fe             	mov    rsi,rdi
ffffffff8000281f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80002823:	48 c7 c2 ca 9c 01 80 	mov    rdx,0xffffffff80019cca
ffffffff8000282a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80002831:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80002835:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000283b:	e8 00 dd ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80002840:	48 c7 c6 d6 9c 01 80 	mov    rsi,0xffffffff80019cd6
ffffffff80002847:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000284b:	e8 a0 dd ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80002850:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80002854:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80002858:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000285c:	e8 df fe ff ff       	call   ffffffff80002740 <fmt.format__anon_1757>
ffffffff80002861:	31 c0                	xor    eax,eax
ffffffff80002863:	48 83 c4 30          	add    rsp,0x30
ffffffff80002867:	5d                   	pop    rbp
ffffffff80002868:	c3                   	ret
ffffffff80002869:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80002870 <fmt.format__anon_1788>:
) !void {
ffffffff80002870:	55                   	push   rbp
ffffffff80002871:	48 89 e5             	mov    rbp,rsp
ffffffff80002874:	48 83 ec 40          	sub    rsp,0x40
ffffffff80002878:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff8000287c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff80002880:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80002884:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80002887:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000288b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000288e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80002891:	b0 01                	mov    al,0x1
ffffffff80002893:	a8 01                	test   al,0x1
ffffffff80002895:	75 02                	jne    ffffffff80002899 <fmt.format__anon_1788+0x29>
ffffffff80002897:	eb 02                	jmp    ffffffff8000289b <fmt.format__anon_1788+0x2b>
ffffffff80002899:	eb 10                	jmp    ffffffff800028ab <fmt.format__anon_1788+0x3b>
ffffffff8000289b:	31 c0                	xor    eax,eax
ffffffff8000289d:	31 c0                	xor    eax,eax
ffffffff8000289f:	89 c7                	mov    edi,eax
ffffffff800028a1:	be 0a 00 00 00       	mov    esi,0xa
ffffffff800028a6:	e8 65 da ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800028ab:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800028af:	48 c7 c2 b1 b2 01 80 	mov    rdx,0xffffffff8001b2b1
ffffffff800028b6:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff800028ba:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff800028bf:	e8 8c da ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800028c4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800028c8:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffffffff800028cc:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800028d0:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800028d7:	00 
            std.options.fmt_max_depth,
ffffffff800028d8:	48 c7 c2 68 9d 01 80 	mov    rdx,0xffffffff80019d68
ffffffff800028df:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800028e5:	e8 56 00 00 00       	call   ffffffff80002940 <fmt.formatType__anon_1800>
ffffffff800028ea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800028ee:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800028f1:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800028f5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800028f8:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800028fb:	b0 01                	mov    al,0x1
ffffffff800028fd:	a8 01                	test   al,0x1
ffffffff800028ff:	75 02                	jne    ffffffff80002903 <fmt.format__anon_1788+0x93>
ffffffff80002901:	eb 02                	jmp    ffffffff80002905 <fmt.format__anon_1788+0x95>
ffffffff80002903:	eb 0f                	jmp    ffffffff80002914 <fmt.format__anon_1788+0xa4>
ffffffff80002905:	bf 0c 00 00 00       	mov    edi,0xc
ffffffff8000290a:	be 0d 00 00 00       	mov    esi,0xd
ffffffff8000290f:	e8 fc d9 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80002914:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80002918:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000291c:	48 c7 c2 bd b2 01 80 	mov    rdx,0xffffffff8001b2bd
ffffffff80002923:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80002928:	e8 23 da ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff8000292d:	31 c0                	xor    eax,eax
ffffffff8000292f:	48 83 c4 40          	add    rsp,0x40
ffffffff80002933:	5d                   	pop    rbp
ffffffff80002934:	c3                   	ret
ffffffff80002935:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000293c:	00 00 00 
ffffffff8000293f:	90                   	nop

ffffffff80002940 <fmt.formatType__anon_1800>:
) @TypeOf(writer).Error!void {
ffffffff80002940:	55                   	push   rbp
ffffffff80002941:	48 89 e5             	mov    rbp,rsp
ffffffff80002944:	48 81 ec e0 02 00 00 	sub    rsp,0x2e0
ffffffff8000294b:	4c 89 85 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],r8
ffffffff80002952:	48 89 8d 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rcx
ffffffff80002959:	48 89 95 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rdx
ffffffff80002960:	48 89 b5 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],rsi
ffffffff80002967:	48 89 bd a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rdi
ffffffff8000296e:	4c 89 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],r8
ffffffff80002975:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000297c:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000297f:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
ffffffff80002986:	48 c7 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],0x0
ffffffff8000298d:	00 00 00 00 
            try writer.writeAll(@typeName(T));
ffffffff80002991:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff80002994:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
ffffffff8000299b:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff8000299e:	89 85 d0 fd ff ff    	mov    DWORD PTR [rbp-0x230],eax
ffffffff800029a4:	48 c7 c2 4b b4 01 80 	mov    rdx,0xffffffff8001b44b
ffffffff800029ab:	48 8d b5 c8 fd ff ff 	lea    rsi,[rbp-0x238]
ffffffff800029b2:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff800029b7:	e8 94 d9 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800029bc:	4c 8b 85 a8 fd ff ff 	mov    r8,QWORD PTR [rbp-0x258]
            if (max_depth == 0) {
ffffffff800029c3:	49 83 f8 00          	cmp    r8,0x0
ffffffff800029c7:	75 48                	jne    ffffffff80002a11 <fmt.formatType__anon_1800+0xd1>
ffffffff800029c9:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff800029d0:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                return writer.writeAll("{ ... }");
ffffffff800029d7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800029da:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
ffffffff800029e1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800029e4:	89 85 e0 fd ff ff    	mov    DWORD PTR [rbp-0x220],eax
ffffffff800029ea:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff800029f1:	48 8d b5 d8 fd ff ff 	lea    rsi,[rbp-0x228]
ffffffff800029f8:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff800029fd:	e8 4e d9 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002a02:	66 89 85 d6 fd ff ff 	mov    WORD PTR [rbp-0x22a],ax
ffffffff80002a09:	b0 01                	mov    al,0x1
ffffffff80002a0b:	a8 01                	test   al,0x1
ffffffff80002a0d:	75 04                	jne    ffffffff80002a13 <fmt.formatType__anon_1800+0xd3>
ffffffff80002a0f:	eb 12                	jmp    ffffffff80002a23 <fmt.formatType__anon_1800+0xe3>
ffffffff80002a11:	eb 2c                	jmp    ffffffff80002a3f <fmt.formatType__anon_1800+0xff>
ffffffff80002a13:	66 8b 85 d6 fd ff ff 	mov    ax,WORD PTR [rbp-0x22a]
ffffffff80002a1a:	48 81 c4 e0 02 00 00 	add    rsp,0x2e0
ffffffff80002a21:	5d                   	pop    rbp
ffffffff80002a22:	c3                   	ret
ffffffff80002a23:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002a2a:	e8 e1 09 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff80002a2f:	66 8b 85 d6 fd ff ff 	mov    ax,WORD PTR [rbp-0x22a]
ffffffff80002a36:	48 81 c4 e0 02 00 00 	add    rsp,0x2e0
ffffffff80002a3d:	5d                   	pop    rbp
ffffffff80002a3e:	c3                   	ret
ffffffff80002a3f:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002a46:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
            try writer.writeAll("{");
ffffffff80002a4d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002a50:	89 8d f0 fd ff ff    	mov    DWORD PTR [rbp-0x210],ecx
ffffffff80002a56:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002a59:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
ffffffff80002a60:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff80002a67:	48 8d b5 e8 fd ff ff 	lea    rsi,[rbp-0x218]
ffffffff80002a6e:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80002a73:	e8 d8 d8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002a78:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002a7f:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
            inline for (info.fields, 0..) |f, i| {
ffffffff80002a86:	48 c7 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],0x0
ffffffff80002a8d:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff80002a91:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002a94:	89 8d 08 fe ff ff    	mov    DWORD PTR [rbp-0x1f8],ecx
ffffffff80002a9a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002a9d:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
ffffffff80002aa4:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff80002aab:	48 8d b5 00 fe ff ff 	lea    rsi,[rbp-0x200]
ffffffff80002ab2:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80002ab7:	e8 94 d8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002abc:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002ac3:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(f.name);
ffffffff80002aca:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002acd:	89 8d 18 fe ff ff    	mov    DWORD PTR [rbp-0x1e8],ecx
ffffffff80002ad3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002ad6:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff80002add:	48 c7 c2 54 b4 01 80 	mov    rdx,0xffffffff8001b454
ffffffff80002ae4:	48 8d b5 10 fe ff ff 	lea    rsi,[rbp-0x1f0]
ffffffff80002aeb:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff80002af0:	e8 5b d8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002af5:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002afc:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(" = ");
ffffffff80002b03:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002b06:	89 8d 28 fe ff ff    	mov    DWORD PTR [rbp-0x1d8],ecx
ffffffff80002b0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002b0f:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff80002b16:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80002b1d:	48 8d b5 20 fe ff ff 	lea    rsi,[rbp-0x1e0]
ffffffff80002b24:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002b29:	e8 22 d8 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002b2e:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff80002b35:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80002b3c:	8a 09                	mov    cl,BYTE PTR [rcx]
ffffffff80002b3e:	88 8d 87 fd ff ff    	mov    BYTE PTR [rbp-0x279],cl
ffffffff80002b44:	48 83 e8 01          	sub    rax,0x1
ffffffff80002b48:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
ffffffff80002b4f:	0f 92 85 38 fe ff ff 	setb   BYTE PTR [rbp-0x1c8]
ffffffff80002b56:	8a 85 38 fe ff ff    	mov    al,BYTE PTR [rbp-0x1c8]
ffffffff80002b5c:	84 c0                	test   al,al
ffffffff80002b5e:	75 04                	jne    ffffffff80002b64 <fmt.formatType__anon_1800+0x224>
ffffffff80002b60:	eb 00                	jmp    ffffffff80002b62 <fmt.formatType__anon_1800+0x222>
ffffffff80002b62:	eb 1c                	jmp    ffffffff80002b80 <fmt.formatType__anon_1800+0x240>
ffffffff80002b64:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80002b6b:	48 c7 c1 f8 bd 01 80 	mov    rcx,0xffffffff8001bdf8
ffffffff80002b72:	31 c0                	xor    eax,eax
ffffffff80002b74:	89 c2                	mov    edx,eax
ffffffff80002b76:	be 10 00 00 00       	mov    esi,0x10
ffffffff80002b7b:	e8 30 d6 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80002b80:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002b87:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff80002b8e:	48 8b 95 90 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x270]
ffffffff80002b95:	8a 85 87 fd ff ff    	mov    al,BYTE PTR [rbp-0x279]
ffffffff80002b9b:	4c 8b 85 30 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1d0]
ffffffff80002ba2:	0f b6 f0             	movzx  esi,al
ffffffff80002ba5:	e8 c6 7e 00 00       	call   ffffffff8000aa70 <fmt.formatType__anon_2992>
ffffffff80002baa:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002bb1:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
ffffffff80002bb8:	48 c7 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],0x1
ffffffff80002bbf:	01 00 00 00 
                    try writer.writeAll(", .");
ffffffff80002bc3:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002bc6:	89 8d 50 fe ff ff    	mov    DWORD PTR [rbp-0x1b0],ecx
ffffffff80002bcc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002bcf:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff80002bd6:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80002bdd:	48 8d b5 48 fe ff ff 	lea    rsi,[rbp-0x1b8]
ffffffff80002be4:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002be9:	48 89 8d 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rcx
ffffffff80002bf0:	e8 5b d7 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002bf5:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002bfc:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(f.name);
ffffffff80002c03:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002c06:	89 8d 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],ecx
ffffffff80002c0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002c0f:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80002c16:	48 c7 c2 5b b4 01 80 	mov    rdx,0xffffffff8001b45b
ffffffff80002c1d:	48 8d b5 58 fe ff ff 	lea    rsi,[rbp-0x1a8]
ffffffff80002c24:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80002c29:	e8 22 d7 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002c2e:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002c35:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
ffffffff80002c3c:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(" = ");
ffffffff80002c43:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80002c46:	89 95 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],edx
ffffffff80002c4c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002c4f:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff80002c56:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80002c5d:	48 8d b5 68 fe ff ff 	lea    rsi,[rbp-0x198]
ffffffff80002c64:	e8 e7 d6 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002c69:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff80002c70:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80002c77:	8a 49 01             	mov    cl,BYTE PTR [rcx+0x1]
ffffffff80002c7a:	88 8d 86 fd ff ff    	mov    BYTE PTR [rbp-0x27a],cl
ffffffff80002c80:	48 83 e8 01          	sub    rax,0x1
ffffffff80002c84:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80002c8b:	0f 92 85 80 fe ff ff 	setb   BYTE PTR [rbp-0x180]
ffffffff80002c92:	8a 85 80 fe ff ff    	mov    al,BYTE PTR [rbp-0x180]
ffffffff80002c98:	84 c0                	test   al,al
ffffffff80002c9a:	75 04                	jne    ffffffff80002ca0 <fmt.formatType__anon_1800+0x360>
ffffffff80002c9c:	eb 00                	jmp    ffffffff80002c9e <fmt.formatType__anon_1800+0x35e>
ffffffff80002c9e:	eb 1c                	jmp    ffffffff80002cbc <fmt.formatType__anon_1800+0x37c>
ffffffff80002ca0:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80002ca7:	48 c7 c1 08 be 01 80 	mov    rcx,0xffffffff8001be08
ffffffff80002cae:	31 c0                	xor    eax,eax
ffffffff80002cb0:	89 c2                	mov    edx,eax
ffffffff80002cb2:	be 10 00 00 00       	mov    esi,0x10
ffffffff80002cb7:	e8 f4 d4 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80002cbc:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002cc3:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff80002cca:	48 8b 95 90 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x270]
ffffffff80002cd1:	8a 85 86 fd ff ff    	mov    al,BYTE PTR [rbp-0x27a]
ffffffff80002cd7:	4c 8b 85 78 fe ff ff 	mov    r8,QWORD PTR [rbp-0x188]
ffffffff80002cde:	0f b6 f0             	movzx  esi,al
ffffffff80002ce1:	e8 ea 7d 00 00       	call   ffffffff8000aad0 <fmt.formatType__anon_2993>
ffffffff80002ce6:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002ced:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
ffffffff80002cf4:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x2
ffffffff80002cfb:	02 00 00 00 
                    try writer.writeAll(", .");
ffffffff80002cff:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002d02:	89 8d 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],ecx
ffffffff80002d08:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002d0b:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff80002d12:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80002d19:	48 8d b5 90 fe ff ff 	lea    rsi,[rbp-0x170]
ffffffff80002d20:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002d25:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
ffffffff80002d2c:	e8 1f d6 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002d31:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002d38:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(f.name);
ffffffff80002d3f:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002d42:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
ffffffff80002d48:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002d4b:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff80002d52:	48 c7 c2 60 b4 01 80 	mov    rdx,0xffffffff8001b460
ffffffff80002d59:	48 8d b5 a0 fe ff ff 	lea    rsi,[rbp-0x160]
ffffffff80002d60:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff80002d65:	e8 e6 d5 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002d6a:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002d71:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
ffffffff80002d78:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(" = ");
ffffffff80002d7f:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80002d82:	89 95 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],edx
ffffffff80002d88:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002d8b:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80002d92:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80002d99:	48 8d b5 b0 fe ff ff 	lea    rsi,[rbp-0x150]
ffffffff80002da0:	e8 ab d5 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002da5:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff80002dac:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80002db3:	8a 49 02             	mov    cl,BYTE PTR [rcx+0x2]
ffffffff80002db6:	88 8d 77 fd ff ff    	mov    BYTE PTR [rbp-0x289],cl
ffffffff80002dbc:	48 83 e8 01          	sub    rax,0x1
ffffffff80002dc0:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff80002dc7:	0f 92 85 c8 fe ff ff 	setb   BYTE PTR [rbp-0x138]
ffffffff80002dce:	8a 85 c8 fe ff ff    	mov    al,BYTE PTR [rbp-0x138]
ffffffff80002dd4:	84 c0                	test   al,al
ffffffff80002dd6:	75 04                	jne    ffffffff80002ddc <fmt.formatType__anon_1800+0x49c>
ffffffff80002dd8:	eb 00                	jmp    ffffffff80002dda <fmt.formatType__anon_1800+0x49a>
ffffffff80002dda:	eb 1c                	jmp    ffffffff80002df8 <fmt.formatType__anon_1800+0x4b8>
ffffffff80002ddc:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80002de3:	48 c7 c1 18 be 01 80 	mov    rcx,0xffffffff8001be18
ffffffff80002dea:	31 c0                	xor    eax,eax
ffffffff80002dec:	89 c2                	mov    edx,eax
ffffffff80002dee:	be 10 00 00 00       	mov    esi,0x10
ffffffff80002df3:	e8 b8 d3 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80002df8:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002dff:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff80002e06:	48 8b 95 90 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x270]
ffffffff80002e0d:	8a 85 77 fd ff ff    	mov    al,BYTE PTR [rbp-0x289]
ffffffff80002e13:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
ffffffff80002e1a:	0f b6 f0             	movzx  esi,al
ffffffff80002e1d:	e8 0e 7d 00 00       	call   ffffffff8000ab30 <fmt.formatType__anon_2994>
ffffffff80002e22:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002e29:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
ffffffff80002e30:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x3
ffffffff80002e37:	03 00 00 00 
                    try writer.writeAll(", .");
ffffffff80002e3b:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002e3e:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
ffffffff80002e44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002e47:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80002e4e:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80002e55:	48 8d b5 d8 fe ff ff 	lea    rsi,[rbp-0x128]
ffffffff80002e5c:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002e61:	48 89 8d 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rcx
ffffffff80002e68:	e8 e3 d4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002e6d:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002e74:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
ffffffff80002e7b:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(f.name);
ffffffff80002e82:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80002e85:	89 95 f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],edx
ffffffff80002e8b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002e8e:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80002e95:	48 c7 c2 67 b4 01 80 	mov    rdx,0xffffffff8001b467
ffffffff80002e9c:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
ffffffff80002ea3:	e8 a8 d4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002ea8:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002eaf:	48 8b 8d 58 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2a8]
ffffffff80002eb6:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(" = ");
ffffffff80002ebd:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80002ec0:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffffffff80002ec6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002ec9:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80002ed0:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80002ed7:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
ffffffff80002ede:	e8 6d d4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002ee3:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff80002eea:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80002ef1:	8a 49 03             	mov    cl,BYTE PTR [rcx+0x3]
ffffffff80002ef4:	88 8d 67 fd ff ff    	mov    BYTE PTR [rbp-0x299],cl
ffffffff80002efa:	48 83 e8 01          	sub    rax,0x1
ffffffff80002efe:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80002f05:	0f 92 85 10 ff ff ff 	setb   BYTE PTR [rbp-0xf0]
ffffffff80002f0c:	8a 85 10 ff ff ff    	mov    al,BYTE PTR [rbp-0xf0]
ffffffff80002f12:	84 c0                	test   al,al
ffffffff80002f14:	75 04                	jne    ffffffff80002f1a <fmt.formatType__anon_1800+0x5da>
ffffffff80002f16:	eb 00                	jmp    ffffffff80002f18 <fmt.formatType__anon_1800+0x5d8>
ffffffff80002f18:	eb 1c                	jmp    ffffffff80002f36 <fmt.formatType__anon_1800+0x5f6>
ffffffff80002f1a:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80002f21:	48 c7 c1 28 be 01 80 	mov    rcx,0xffffffff8001be28
ffffffff80002f28:	31 c0                	xor    eax,eax
ffffffff80002f2a:	89 c2                	mov    edx,eax
ffffffff80002f2c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80002f31:	e8 7a d2 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80002f36:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002f3d:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff80002f44:	48 8b 95 90 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x270]
ffffffff80002f4b:	8a 85 67 fd ff ff    	mov    al,BYTE PTR [rbp-0x299]
ffffffff80002f51:	4c 8b 85 08 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf8]
ffffffff80002f58:	0f b6 f0             	movzx  esi,al
ffffffff80002f5b:	e8 30 7c 00 00       	call   ffffffff8000ab90 <fmt.formatType__anon_2995>
ffffffff80002f60:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002f67:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
ffffffff80002f6e:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x4
ffffffff80002f75:	04 00 00 00 
                    try writer.writeAll(", .");
ffffffff80002f79:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002f7c:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
ffffffff80002f82:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002f85:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80002f8c:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80002f93:	48 8d b5 20 ff ff ff 	lea    rsi,[rbp-0xe0]
ffffffff80002f9a:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002f9f:	48 89 8d 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rcx
ffffffff80002fa6:	e8 a5 d3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002fab:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002fb2:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(f.name);
ffffffff80002fb9:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80002fbc:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
ffffffff80002fc2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002fc5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff80002fcc:	48 c7 c2 6b b4 01 80 	mov    rdx,0xffffffff8001b46b
ffffffff80002fd3:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff80002fda:	b9 05 00 00 00       	mov    ecx,0x5
ffffffff80002fdf:	e8 6c d3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80002fe4:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80002feb:	48 8b 8d 48 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2b8]
ffffffff80002ff2:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(" = ");
ffffffff80002ff9:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80002ffc:	89 95 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],edx
ffffffff80003002:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003005:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffffffff8000300c:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80003013:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff8000301a:	e8 31 d3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000301f:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff80003026:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000302d:	8a 49 04             	mov    cl,BYTE PTR [rcx+0x4]
ffffffff80003030:	88 8d 57 fd ff ff    	mov    BYTE PTR [rbp-0x2a9],cl
ffffffff80003036:	48 83 e8 01          	sub    rax,0x1
ffffffff8000303a:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff80003041:	0f 92 85 58 ff ff ff 	setb   BYTE PTR [rbp-0xa8]
ffffffff80003048:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [rbp-0xa8]
ffffffff8000304e:	84 c0                	test   al,al
ffffffff80003050:	75 04                	jne    ffffffff80003056 <fmt.formatType__anon_1800+0x716>
ffffffff80003052:	eb 00                	jmp    ffffffff80003054 <fmt.formatType__anon_1800+0x714>
ffffffff80003054:	eb 1c                	jmp    ffffffff80003072 <fmt.formatType__anon_1800+0x732>
ffffffff80003056:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000305d:	48 c7 c1 38 be 01 80 	mov    rcx,0xffffffff8001be38
ffffffff80003064:	31 c0                	xor    eax,eax
ffffffff80003066:	89 c2                	mov    edx,eax
ffffffff80003068:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000306d:	e8 3e d1 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80003072:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80003079:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff80003080:	48 8b 95 90 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x270]
ffffffff80003087:	8a 85 57 fd ff ff    	mov    al,BYTE PTR [rbp-0x2a9]
ffffffff8000308d:	4c 8b 85 50 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb0]
ffffffff80003094:	0f b6 f0             	movzx  esi,al
ffffffff80003097:	e8 54 7b 00 00       	call   ffffffff8000abf0 <fmt.formatType__anon_2996>
ffffffff8000309c:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff800030a3:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
ffffffff800030aa:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x5
ffffffff800030b1:	05 00 00 00 
                    try writer.writeAll(", .");
ffffffff800030b5:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800030b8:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff800030be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800030c1:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff800030c8:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800030cf:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff800030d6:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800030db:	48 89 8d 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],rcx
ffffffff800030e2:	e8 69 d2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800030e7:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff800030ee:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(f.name);
ffffffff800030f5:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800030f8:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff800030fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800030fe:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80003105:	48 c7 c2 71 b4 01 80 	mov    rdx,0xffffffff8001b471
ffffffff8000310c:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff80003113:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80003118:	e8 33 d2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000311d:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80003124:	48 8b 8d 38 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2c8]
ffffffff8000312b:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(" = ");
ffffffff80003132:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80003135:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
ffffffff80003138:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000313b:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000313f:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80003146:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff8000314a:	e8 01 d2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000314f:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff80003156:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000315d:	8a 49 05             	mov    cl,BYTE PTR [rcx+0x5]
ffffffff80003160:	88 8d 47 fd ff ff    	mov    BYTE PTR [rbp-0x2b9],cl
ffffffff80003166:	48 83 e8 01          	sub    rax,0x1
ffffffff8000316a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000316e:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80003172:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80003175:	84 c0                	test   al,al
ffffffff80003177:	75 04                	jne    ffffffff8000317d <fmt.formatType__anon_1800+0x83d>
ffffffff80003179:	eb 00                	jmp    ffffffff8000317b <fmt.formatType__anon_1800+0x83b>
ffffffff8000317b:	eb 1c                	jmp    ffffffff80003199 <fmt.formatType__anon_1800+0x859>
ffffffff8000317d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80003184:	48 c7 c1 48 be 01 80 	mov    rcx,0xffffffff8001be48
ffffffff8000318b:	31 c0                	xor    eax,eax
ffffffff8000318d:	89 c2                	mov    edx,eax
ffffffff8000318f:	be 10 00 00 00       	mov    esi,0x10
ffffffff80003194:	e8 17 d0 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80003199:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff800031a0:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff800031a7:	48 8b 95 90 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x270]
ffffffff800031ae:	8a 85 47 fd ff ff    	mov    al,BYTE PTR [rbp-0x2b9]
ffffffff800031b4:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff800031b8:	0f b6 f0             	movzx  esi,al
ffffffff800031bb:	e8 90 7a 00 00       	call   ffffffff8000ac50 <fmt.formatType__anon_2997>
ffffffff800031c0:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff800031c7:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
ffffffff800031ce:	48 c7 45 a8 06 00 00 	mov    QWORD PTR [rbp-0x58],0x6
ffffffff800031d5:	00 
                    try writer.writeAll(", .");
ffffffff800031d6:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800031d9:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff800031dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800031df:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800031e3:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800031ea:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff800031ee:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800031f3:	48 89 8d 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],rcx
ffffffff800031fa:	e8 51 d1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800031ff:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80003206:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(f.name);
ffffffff8000320d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80003210:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff80003213:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003216:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff8000321a:	48 c7 c2 76 b4 01 80 	mov    rdx,0xffffffff8001b476
ffffffff80003221:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff80003225:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000322a:	e8 21 d1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000322f:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff80003236:	48 8b 8d 28 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2d8]
ffffffff8000323d:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
                try writer.writeAll(" = ");
ffffffff80003244:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80003247:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff8000324a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000324d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80003251:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80003258:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff8000325c:	e8 ef d0 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80003261:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff80003268:	48 8b 85 a8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x258]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000326f:	8a 49 06             	mov    cl,BYTE PTR [rcx+0x6]
ffffffff80003272:	88 8d 37 fd ff ff    	mov    BYTE PTR [rbp-0x2c9],cl
ffffffff80003278:	48 83 e8 01          	sub    rax,0x1
ffffffff8000327c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80003280:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff80003284:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff80003287:	84 c0                	test   al,al
ffffffff80003289:	75 04                	jne    ffffffff8000328f <fmt.formatType__anon_1800+0x94f>
ffffffff8000328b:	eb 00                	jmp    ffffffff8000328d <fmt.formatType__anon_1800+0x94d>
ffffffff8000328d:	eb 1c                	jmp    ffffffff800032ab <fmt.formatType__anon_1800+0x96b>
ffffffff8000328f:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80003296:	48 c7 c1 58 be 01 80 	mov    rcx,0xffffffff8001be58
ffffffff8000329d:	31 c0                	xor    eax,eax
ffffffff8000329f:	89 c2                	mov    edx,eax
ffffffff800032a1:	be 10 00 00 00       	mov    esi,0x10
ffffffff800032a6:	e8 05 cf ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800032ab:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff800032b2:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff800032b9:	48 8b 95 90 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x270]
ffffffff800032c0:	8a 85 37 fd ff ff    	mov    al,BYTE PTR [rbp-0x2c9]
ffffffff800032c6:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff800032ca:	0f b6 f0             	movzx  esi,al
ffffffff800032cd:	e8 de 79 00 00       	call   ffffffff8000acb0 <fmt.formatType__anon_2998>
ffffffff800032d2:	48 8b bd a0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x260]
ffffffff800032d9:	48 8b 85 88 fd ff ff 	mov    rax,QWORD PTR [rbp-0x278]
            try writer.writeAll(" }");
ffffffff800032e0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800032e3:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800032e7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800032ea:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800032ed:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff800032f4:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800032f8:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800032fd:	e8 4e d0 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80003302:	31 c0                	xor    eax,eax
ffffffff80003304:	48 81 c4 e0 02 00 00 	add    rsp,0x2e0
ffffffff8000330b:	5d                   	pop    rbp
ffffffff8000330c:	c3                   	ret
ffffffff8000330d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80003310 <main.debug_print__anon_1787>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80003310:	55                   	push   rbp
ffffffff80003311:	48 89 e5             	mov    rbp,rsp
ffffffff80003314:	48 83 ec 30          	sub    rsp,0x30
ffffffff80003318:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000331c:	48 89 fe             	mov    rsi,rdi
ffffffff8000331f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80003323:	48 c7 c2 92 9d 01 80 	mov    rdx,0xffffffff80019d92
ffffffff8000332a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80003331:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80003335:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000333b:	e8 00 d2 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80003340:	48 c7 c6 9e 9d 01 80 	mov    rsi,0xffffffff80019d9e
ffffffff80003347:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000334b:	e8 a0 d2 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80003350:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80003354:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80003358:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000335c:	e8 0f f5 ff ff       	call   ffffffff80002870 <fmt.format__anon_1788>
ffffffff80003361:	31 c0                	xor    eax,eax
ffffffff80003363:	48 83 c4 30          	add    rsp,0x30
ffffffff80003367:	5d                   	pop    rbp
ffffffff80003368:	c3                   	ret
ffffffff80003369:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80003370 <mem.allocate_new>:

    // next_page = first_entry.next.?;
}

// Allocates a new 4kib page
pub fn allocate_new() !*anyopaque {
ffffffff80003370:	55                   	push   rbp
ffffffff80003371:	48 89 e5             	mov    rbp,rsp
ffffffff80003374:	48 83 ec 40          	sub    rsp,0x40
ffffffff80003378:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff8000337c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff80003380:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
    if (next_page) |page| {
ffffffff80003384:	48 8b 05 a5 ae 01 00 	mov    rax,QWORD PTR [rip+0x1aea5]        # ffffffff8001e230 <mem.next_page>
ffffffff8000338b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000338f:	48 83 f8 00          	cmp    rax,0x0
ffffffff80003393:	74 48                	je     ffffffff800033dd <mem.allocate_new+0x6d>
ffffffff80003395:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003399:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8000339d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff800033a1:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff800033a5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
        next_page = page.next;
ffffffff800033a9:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffffffff800033ac:	48 89 35 7d ae 01 00 	mov    QWORD PTR [rip+0x1ae7d],rsi        # ffffffff8001e230 <mem.next_page>
        page.next = null;
ffffffff800033b3:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffffffff800033b7:	48 c7 06 00 00 00 00 	mov    QWORD PTR [rsi],0x0

        return @ptrCast(*anyopaque, page);
ffffffff800033be:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
ffffffff800033c4:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff800033c8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800033cc:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff800033cf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800033d3:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff800033d7:	48 83 c4 40          	add    rsp,0x40
ffffffff800033db:	5d                   	pop    rbp
ffffffff800033dc:	c3                   	ret
ffffffff800033dd:	eb 00                	jmp    ffffffff800033df <mem.allocate_new+0x6f>
ffffffff800033df:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
    }

    return error.NoMorePhysicalMemory;
ffffffff800033e3:	e8 28 00 00 00       	call   ffffffff80003410 <builtin.returnError>
ffffffff800033e8:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff800033ec:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800033f0:	48 c7 41 08 01 00 00 	mov    QWORD PTR [rcx+0x8],0x1
ffffffff800033f7:	00 
ffffffff800033f8:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
ffffffff800033ff:	48 83 c4 40          	add    rsp,0x40
ffffffff80003403:	5d                   	pop    rbp
ffffffff80003404:	c3                   	ret
ffffffff80003405:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000340c:	00 00 00 
ffffffff8000340f:	90                   	nop

ffffffff80003410 <builtin.returnError>:
    pub const index_out_of_bounds = "index out of bounds";
    pub const start_index_greater_than_end = "start index is larger than end index";
    pub const for_len_mismatch = "for loop over objects with non-equal lengths";
};

pub noinline fn returnError(st: *StackTrace) void {
ffffffff80003410:	55                   	push   rbp
ffffffff80003411:	48 89 e5             	mov    rbp,rsp
ffffffff80003414:	48 83 ec 70          	sub    rsp,0x70
ffffffff80003418:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff8000341c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    @setCold(true);
    @setRuntimeSafety(false);
    addErrRetTraceAddr(st, @returnAddress());
ffffffff80003420:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
ffffffff80003424:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80003428:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000342c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
}

pub inline fn addErrRetTraceAddr(st: *StackTrace, addr: usize) void {
    if (st.index < st.instruction_addresses.len)
ffffffff80003430:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80003433:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
ffffffff80003437:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
ffffffff8000343b:	48 39 c8             	cmp    rax,rcx
ffffffff8000343e:	73 2a                	jae    ffffffff8000346a <builtin.returnError+0x5a>
ffffffff80003440:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
        st.instruction_addresses[st.index] = addr;
ffffffff80003444:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80003448:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff8000344c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000344f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80003453:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
ffffffff80003457:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff8000345b:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffffffff8000345f:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff80003463:	48 39 c8             	cmp    rax,rcx
ffffffff80003466:	72 04                	jb     ffffffff8000346c <builtin.returnError+0x5c>
ffffffff80003468:	eb 04                	jmp    ffffffff8000346e <builtin.returnError+0x5e>
ffffffff8000346a:	eb 1f                	jmp    ffffffff8000348b <builtin.returnError+0x7b>
ffffffff8000346c:	eb 0d                	jmp    ffffffff8000347b <builtin.returnError+0x6b>
ffffffff8000346e:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff80003472:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80003476:	e8 55 cd ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000347b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8000347f:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff80003483:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff80003487:	48 89 14 c8          	mov    QWORD PTR [rax+rcx*8],rdx
ffffffff8000348b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]

    st.index += 1;
ffffffff8000348f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80003493:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003497:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000349b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000349e:	48 ff c0             	inc    rax
ffffffff800034a1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800034a5:	0f 94 45 f8          	sete   BYTE PTR [rbp-0x8]
ffffffff800034a9:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff800034ac:	84 c0                	test   al,al
ffffffff800034ae:	75 04                	jne    ffffffff800034b4 <builtin.returnError+0xa4>
ffffffff800034b0:	eb 00                	jmp    ffffffff800034b2 <builtin.returnError+0xa2>
ffffffff800034b2:	eb 1c                	jmp    ffffffff800034d0 <builtin.returnError+0xc0>
ffffffff800034b4:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800034bb:	48 c7 c1 68 be 01 80 	mov    rcx,0xffffffff8001be68
ffffffff800034c2:	31 c0                	xor    eax,eax
ffffffff800034c4:	89 c2                	mov    edx,eax
ffffffff800034c6:	be 10 00 00 00       	mov    esi,0x10
ffffffff800034cb:	e8 e0 cc ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800034d0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff800034d4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff800034d8:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff800034db:	48 83 c4 70          	add    rsp,0x70
ffffffff800034df:	5d                   	pop    rbp
ffffffff800034e0:	c3                   	ret
ffffffff800034e1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800034e8:	00 00 00 
ffffffff800034eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800034f0 <fmt.format__anon_1807>:
) !void {
ffffffff800034f0:	55                   	push   rbp
ffffffff800034f1:	48 89 e5             	mov    rbp,rsp
ffffffff800034f4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800034f8:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff800034fc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80003500:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80003504:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80003507:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000350b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000350e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80003511:	b0 01                	mov    al,0x1
ffffffff80003513:	a8 01                	test   al,0x1
ffffffff80003515:	75 02                	jne    ffffffff80003519 <fmt.format__anon_1807+0x29>
ffffffff80003517:	eb 02                	jmp    ffffffff8000351b <fmt.format__anon_1807+0x2b>
ffffffff80003519:	eb 10                	jmp    ffffffff8000352b <fmt.format__anon_1807+0x3b>
ffffffff8000351b:	31 c0                	xor    eax,eax
ffffffff8000351d:	31 c0                	xor    eax,eax
ffffffff8000351f:	89 c7                	mov    edi,eax
ffffffff80003521:	be 12 00 00 00       	mov    esi,0x12
ffffffff80003526:	e8 e5 cd ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000352b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff8000352f:	48 c7 c2 bf b2 01 80 	mov    rdx,0xffffffff8001b2bf
ffffffff80003536:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff8000353a:	b9 12 00 00 00       	mov    ecx,0x12
ffffffff8000353f:	e8 0c ce ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80003544:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80003548:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000354c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80003550:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80003557:	00 
        try formatType(
ffffffff80003558:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff8000355b:	48 c7 c2 30 9e 01 80 	mov    rdx,0xffffffff80019e30
ffffffff80003562:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80003568:	e8 63 d4 ff ff       	call   ffffffff800009d0 <fmt.formatType__anon_1544>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff8000356d:	31 c0                	xor    eax,eax
ffffffff8000356f:	48 83 c4 30          	add    rsp,0x30
ffffffff80003573:	5d                   	pop    rbp
ffffffff80003574:	c3                   	ret
ffffffff80003575:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000357c:	00 00 00 
ffffffff8000357f:	90                   	nop

ffffffff80003580 <main.debug_print__anon_1806>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80003580:	55                   	push   rbp
ffffffff80003581:	48 89 e5             	mov    rbp,rsp
ffffffff80003584:	48 83 ec 30          	sub    rsp,0x30
ffffffff80003588:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000358c:	48 89 fe             	mov    rsi,rdi
ffffffff8000358f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80003593:	48 c7 c2 58 9e 01 80 	mov    rdx,0xffffffff80019e58
ffffffff8000359a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff800035a1:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff800035a5:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff800035ab:	e8 90 cf ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff800035b0:	48 c7 c6 64 9e 01 80 	mov    rsi,0xffffffff80019e64
ffffffff800035b7:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff800035bb:	e8 30 d0 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff800035c0:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800035c4:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff800035c8:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800035cc:	e8 1f ff ff ff       	call   ffffffff800034f0 <fmt.format__anon_1807>
ffffffff800035d1:	31 c0                	xor    eax,eax
ffffffff800035d3:	48 83 c4 30          	add    rsp,0x30
ffffffff800035d7:	5d                   	pop    rbp
ffffffff800035d8:	c3                   	ret
ffffffff800035d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800035e0 <fmt.format__anon_1821>:
) !void {
ffffffff800035e0:	55                   	push   rbp
ffffffff800035e1:	48 89 e5             	mov    rbp,rsp
ffffffff800035e4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffffffff800035eb:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
ffffffff800035f2:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffffffff800035f6:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800035fa:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff800035fd:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80003601:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80003604:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
ffffffff80003607:	b0 01                	mov    al,0x1
ffffffff80003609:	a8 01                	test   al,0x1
ffffffff8000360b:	75 02                	jne    ffffffff8000360f <fmt.format__anon_1821+0x2f>
ffffffff8000360d:	eb 02                	jmp    ffffffff80003611 <fmt.format__anon_1821+0x31>
ffffffff8000360f:	eb 10                	jmp    ffffffff80003621 <fmt.format__anon_1821+0x41>
ffffffff80003611:	31 c0                	xor    eax,eax
ffffffff80003613:	31 c0                	xor    eax,eax
ffffffff80003615:	89 c7                	mov    edi,eax
ffffffff80003617:	be 0a 00 00 00       	mov    esi,0xa
ffffffff8000361c:	e8 ef cc ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80003621:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff80003625:	48 c7 c2 d4 b2 01 80 	mov    rdx,0xffffffff8001b2d4
ffffffff8000362c:	48 8d 75 90          	lea    rsi,[rbp-0x70]
ffffffff80003630:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff80003635:	e8 16 cd ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000363a:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff8000363e:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff80003642:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80003649:	48 c7 45 a0 00 00 00 	mov    QWORD PTR [rbp-0x60],0x0
ffffffff80003650:	00 
        try formatType(
ffffffff80003651:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff80003654:	48 c7 c2 f0 9e 01 80 	mov    rdx,0xffffffff80019ef0
ffffffff8000365b:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80003661:	e8 6a d3 ff ff       	call   ffffffff800009d0 <fmt.formatType__anon_1544>
ffffffff80003666:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000366a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000366d:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff80003671:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80003674:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff80003677:	b0 01                	mov    al,0x1
ffffffff80003679:	a8 01                	test   al,0x1
ffffffff8000367b:	75 02                	jne    ffffffff8000367f <fmt.format__anon_1821+0x9f>
ffffffff8000367d:	eb 02                	jmp    ffffffff80003681 <fmt.format__anon_1821+0xa1>
ffffffff8000367f:	eb 0f                	jmp    ffffffff80003690 <fmt.format__anon_1821+0xb0>
ffffffff80003681:	bf 0c 00 00 00       	mov    edi,0xc
ffffffff80003686:	be 12 00 00 00       	mov    esi,0x12
ffffffff8000368b:	e8 80 cc ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80003690:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff80003694:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff80003698:	48 c7 c2 e0 b2 01 80 	mov    rdx,0xffffffff8001b2e0
ffffffff8000369f:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff800036a4:	e8 a7 cc ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800036a9:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff800036ad:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff800036b1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800036b8:	48 c7 45 b8 01 00 00 	mov    QWORD PTR [rbp-0x48],0x1
ffffffff800036bf:	00 
        try formatType(
ffffffff800036c0:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
            std.options.fmt_max_depth,
ffffffff800036c4:	48 c7 c2 80 9f 01 80 	mov    rdx,0xffffffff80019f80
ffffffff800036cb:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800036d1:	e8 3a 01 00 00       	call   ffffffff80003810 <fmt.formatType__anon_1863>
ffffffff800036d6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800036da:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800036dd:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff800036e1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800036e4:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
ffffffff800036e7:	b0 01                	mov    al,0x1
ffffffff800036e9:	a8 01                	test   al,0x1
ffffffff800036eb:	75 02                	jne    ffffffff800036ef <fmt.format__anon_1821+0x10f>
ffffffff800036ed:	eb 02                	jmp    ffffffff800036f1 <fmt.format__anon_1821+0x111>
ffffffff800036ef:	eb 0f                	jmp    ffffffff80003700 <fmt.format__anon_1821+0x120>
ffffffff800036f1:	bf 15 00 00 00       	mov    edi,0x15
ffffffff800036f6:	be 26 00 00 00       	mov    esi,0x26
ffffffff800036fb:	e8 10 cc ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80003700:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff80003704:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff80003708:	48 c7 c2 e9 b2 01 80 	mov    rdx,0xffffffff8001b2e9
ffffffff8000370f:	b9 11 00 00 00       	mov    ecx,0x11
ffffffff80003714:	e8 37 cc ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80003719:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff8000371d:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff80003721:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80003728:	48 c7 45 d0 02 00 00 	mov    QWORD PTR [rbp-0x30],0x2
ffffffff8000372f:	00 
        try formatType(
ffffffff80003730:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
            std.options.fmt_max_depth,
ffffffff80003734:	48 c7 c2 10 a0 01 80 	mov    rdx,0xffffffff8001a010
ffffffff8000373b:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80003741:	e8 2a 01 00 00       	call   ffffffff80003870 <fmt.formatType__anon_1870>
ffffffff80003746:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000374a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000374d:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80003751:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80003754:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80003757:	b0 01                	mov    al,0x1
ffffffff80003759:	a8 01                	test   al,0x1
ffffffff8000375b:	75 02                	jne    ffffffff8000375f <fmt.format__anon_1821+0x17f>
ffffffff8000375d:	eb 02                	jmp    ffffffff80003761 <fmt.format__anon_1821+0x181>
ffffffff8000375f:	eb 0f                	jmp    ffffffff80003770 <fmt.format__anon_1821+0x190>
ffffffff80003761:	bf 28 00 00 00       	mov    edi,0x28
ffffffff80003766:	be 30 00 00 00       	mov    esi,0x30
ffffffff8000376b:	e8 a0 cb ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80003770:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff80003774:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff80003778:	48 c7 c2 fc b2 01 80 	mov    rdx,0xffffffff8001b2fc
ffffffff8000377f:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80003784:	e8 c7 cb ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80003789:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff8000378d:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff80003791:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80003798:	48 c7 45 e8 03 00 00 	mov    QWORD PTR [rbp-0x18],0x3
ffffffff8000379f:	00 
        try formatType(
ffffffff800037a0:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
            std.options.fmt_max_depth,
ffffffff800037a4:	48 c7 c2 a0 a0 01 80 	mov    rdx,0xffffffff8001a0a0
ffffffff800037ab:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800037b1:	e8 1a 01 00 00       	call   ffffffff800038d0 <fmt.formatType__anon_1898>
ffffffff800037b6:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800037ba:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800037bd:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800037c1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800037c4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800037c7:	b0 01                	mov    al,0x1
ffffffff800037c9:	a8 01                	test   al,0x1
ffffffff800037cb:	75 02                	jne    ffffffff800037cf <fmt.format__anon_1821+0x1ef>
ffffffff800037cd:	eb 02                	jmp    ffffffff800037d1 <fmt.format__anon_1821+0x1f1>
ffffffff800037cf:	eb 0f                	jmp    ffffffff800037e0 <fmt.format__anon_1821+0x200>
ffffffff800037d1:	bf 33 00 00 00       	mov    edi,0x33
ffffffff800037d6:	be 34 00 00 00       	mov    esi,0x34
ffffffff800037db:	e8 30 cb ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800037e0:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff800037e4:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800037e8:	48 c7 c2 07 b3 01 80 	mov    rdx,0xffffffff8001b307
ffffffff800037ef:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff800037f4:	e8 57 cb ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800037f9:	31 c0                	xor    eax,eax
ffffffff800037fb:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffffffff80003802:	5d                   	pop    rbp
ffffffff80003803:	c3                   	ret
ffffffff80003804:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000380b:	00 00 00 
ffffffff8000380e:	66 90                	xchg   ax,ax

ffffffff80003810 <fmt.formatType__anon_1863>:
) @TypeOf(writer).Error!void {
ffffffff80003810:	55                   	push   rbp
ffffffff80003811:	48 89 e5             	mov    rbp,rsp
ffffffff80003814:	48 83 ec 30          	sub    rsp,0x30
ffffffff80003818:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000381c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80003820:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80003824:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
ffffffff8000382b:	00 
ffffffff8000382c:	48 c7 45 e8 19 9f 01 	mov    QWORD PTR [rbp-0x18],0xffffffff80019f19
ffffffff80003833:	80 
        return formatAddress(value, options, writer);
ffffffff80003834:	e8 d7 74 00 00       	call   ffffffff8000ad10 <fmt.formatAddress__anon_3000>
ffffffff80003839:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000383d:	b0 01                	mov    al,0x1
ffffffff8000383f:	a8 01                	test   al,0x1
ffffffff80003841:	75 02                	jne    ffffffff80003845 <fmt.formatType__anon_1863+0x35>
ffffffff80003843:	eb 0a                	jmp    ffffffff8000384f <fmt.formatType__anon_1863+0x3f>
ffffffff80003845:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80003849:	48 83 c4 30          	add    rsp,0x30
ffffffff8000384d:	5d                   	pop    rbp
ffffffff8000384e:	c3                   	ret
ffffffff8000384f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80003853:	e8 b8 fb ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80003858:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000385c:	48 83 c4 30          	add    rsp,0x30
ffffffff80003860:	5d                   	pop    rbp
ffffffff80003861:	c3                   	ret
ffffffff80003862:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80003869:	00 00 00 
ffffffff8000386c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80003870 <fmt.formatType__anon_1870>:
) @TypeOf(writer).Error!void {
ffffffff80003870:	55                   	push   rbp
ffffffff80003871:	48 89 e5             	mov    rbp,rsp
ffffffff80003874:	48 83 ec 30          	sub    rsp,0x30
ffffffff80003878:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000387c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80003880:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff80003884:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000388b:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000388e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80003892:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80003899:	00 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000389a:	e8 e1 74 00 00       	call   ffffffff8000ad80 <fmt.formatValue__anon_3002>
ffffffff8000389f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800038a3:	b0 01                	mov    al,0x1
ffffffff800038a5:	a8 01                	test   al,0x1
ffffffff800038a7:	75 02                	jne    ffffffff800038ab <fmt.formatType__anon_1870+0x3b>
ffffffff800038a9:	eb 0a                	jmp    ffffffff800038b5 <fmt.formatType__anon_1870+0x45>
ffffffff800038ab:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800038af:	48 83 c4 30          	add    rsp,0x30
ffffffff800038b3:	5d                   	pop    rbp
ffffffff800038b4:	c3                   	ret
ffffffff800038b5:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800038b9:	e8 52 fb ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800038be:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800038c2:	48 83 c4 30          	add    rsp,0x30
ffffffff800038c6:	5d                   	pop    rbp
ffffffff800038c7:	c3                   	ret
ffffffff800038c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800038cf:	00 

ffffffff800038d0 <fmt.formatType__anon_1898>:
) @TypeOf(writer).Error!void {
ffffffff800038d0:	55                   	push   rbp
ffffffff800038d1:	48 89 e5             	mov    rbp,rsp
ffffffff800038d4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800038d8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800038dc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800038e0:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff800038e4:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
ffffffff800038eb:	00 
ffffffff800038ec:	48 c7 45 e8 39 a0 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001a039
ffffffff800038f3:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff800038f4:	e8 d7 7e 00 00       	call   ffffffff8000b7d0 <fmt.formatValue__anon_3009>
ffffffff800038f9:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800038fd:	b0 01                	mov    al,0x1
ffffffff800038ff:	a8 01                	test   al,0x1
ffffffff80003901:	75 02                	jne    ffffffff80003905 <fmt.formatType__anon_1898+0x35>
ffffffff80003903:	eb 0a                	jmp    ffffffff8000390f <fmt.formatType__anon_1898+0x3f>
ffffffff80003905:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80003909:	48 83 c4 30          	add    rsp,0x30
ffffffff8000390d:	5d                   	pop    rbp
ffffffff8000390e:	c3                   	ret
ffffffff8000390f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80003913:	e8 f8 fa ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80003918:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000391c:	48 83 c4 30          	add    rsp,0x30
ffffffff80003920:	5d                   	pop    rbp
ffffffff80003921:	c3                   	ret
ffffffff80003922:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80003929:	00 00 00 
ffffffff8000392c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80003930 <main.debug_print__anon_1820>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80003930:	55                   	push   rbp
ffffffff80003931:	48 89 e5             	mov    rbp,rsp
ffffffff80003934:	48 83 ec 30          	sub    rsp,0x30
ffffffff80003938:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000393c:	48 89 fe             	mov    rsi,rdi
ffffffff8000393f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80003943:	48 c7 c2 ca a0 01 80 	mov    rdx,0xffffffff8001a0ca
ffffffff8000394a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80003951:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80003955:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000395b:	e8 e0 cb ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80003960:	48 c7 c6 d6 a0 01 80 	mov    rsi,0xffffffff8001a0d6
ffffffff80003967:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000396b:	e8 80 cc ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80003970:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80003974:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80003978:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000397c:	e8 5f fc ff ff       	call   ffffffff800035e0 <fmt.format__anon_1821>
ffffffff80003981:	31 c0                	xor    eax,eax
ffffffff80003983:	48 83 c4 30          	add    rsp,0x30
ffffffff80003987:	5d                   	pop    rbp
ffffffff80003988:	c3                   	ret
ffffffff80003989:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80003990 <_start>:
        };
    }
};

// The following will be our kernel's entry point.
export fn _start() callconv(.C) void {
ffffffff80003990:	55                   	push   rbp
ffffffff80003991:	48 89 e5             	mov    rbp,rsp
ffffffff80003994:	48 81 ec f0 03 00 00 	sub    rsp,0x3f0
ffffffff8000399b:	48 8d 85 a0 fc ff ff 	lea    rax,[rbp-0x360]
ffffffff800039a2:	48 89 85 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rax
ffffffff800039a9:	48 c7 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],0x20
ffffffff800039b0:	20 00 00 00 
ffffffff800039b4:	48 c7 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],0x0
ffffffff800039bb:	00 00 00 00 
    serial_port.init();
ffffffff800039bf:	48 c7 c7 e2 a0 01 80 	mov    rdi,0xffffffff8001a0e2
ffffffff800039c6:	e8 35 08 00 00       	call   ffffffff80004200 <ports.SerialPort.init>
ffffffff800039cb:	bf 03 00 00 00       	mov    edi,0x3

    idt.add_interrupt(3);
ffffffff800039d0:	e8 6b 09 00 00       	call   ffffffff80004340 <idt.add_interrupt>
ffffffff800039d5:	bf 0d 00 00 00       	mov    edi,0xd
    idt.add_interrupt(13);
ffffffff800039da:	e8 61 09 00 00       	call   ffffffff80004340 <idt.add_interrupt>

    idt.load();
ffffffff800039df:	e8 cc 0a 00 00       	call   ffffffff800044b0 <idt.load>

    asm volatile ("int $3");
ffffffff800039e4:	cc                   	int3

    // intentional(0);

    if (info_request.response) |info_response| {
ffffffff800039e5:	48 8b 05 4c 9f 01 00 	mov    rax,QWORD PTR [rip+0x19f4c]        # ffffffff8001d938 <info_request+0x28>
ffffffff800039ec:	48 89 85 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rax
ffffffff800039f3:	48 83 f8 00          	cmp    rax,0x0
ffffffff800039f7:	74 5a                	je     ffffffff80003a53 <_start+0xc3>
ffffffff800039f9:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
ffffffff80003a00:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
ffffffff80003a07:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
        try debug_print("Info request completed!\n", .{});
ffffffff80003a0e:	e8 cd ca ff ff       	call   ffffffff800004e0 <main.debug_print__anon_1081>
ffffffff80003a13:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
        const name: [*:0]u8 = info_response.name;
ffffffff80003a1a:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff80003a1e:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
        const version: [*:0]u8 = info_response.version;
ffffffff80003a25:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003a29:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax

        try debug_print("Using: \"{s}\", Version: {s}\n", .{ name, version });
ffffffff80003a30:	48 89 8d d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rcx
ffffffff80003a37:	48 89 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rax
ffffffff80003a3e:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003a45:	48 8d b5 d0 fd ff ff 	lea    rsi,[rbp-0x230]
ffffffff80003a4c:	e8 8f cd ff ff       	call   ffffffff800007e0 <main.debug_print__anon_1326>
ffffffff80003a51:	eb 0c                	jmp    ffffffff80003a5f <_start+0xcf>
ffffffff80003a53:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
    } else {
        try debug_print("Info request failed!\n", .{});
ffffffff80003a5a:	e8 41 ce ff ff       	call   ffffffff800008a0 <main.debug_print__anon_1488>
    }

    if (memory_map_request.response) |memory_map_response| {
ffffffff80003a5f:	48 8b 05 02 9f 01 00 	mov    rax,QWORD PTR [rip+0x19f02]        # ffffffff8001d968 <memory_map_request+0x28>
ffffffff80003a66:	48 89 85 90 fc ff ff 	mov    QWORD PTR [rbp-0x370],rax
ffffffff80003a6d:	48 83 f8 00          	cmp    rax,0x0
ffffffff80003a71:	74 50                	je     ffffffff80003ac3 <_start+0x133>
ffffffff80003a73:	48 8b 85 90 fc ff ff 	mov    rax,QWORD PTR [rbp-0x370]
ffffffff80003a7a:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
ffffffff80003a81:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
        const entries = memory_map_response.entries();
ffffffff80003a88:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff80003a8f:	48 89 8d f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rcx
    revision: u64,
    entry_count: u64,
    entries_ptr: [*]*MemoryMapEntry,

    pub inline fn entries(self: *@This()) []*MemoryMapEntry {
        return self.entries_ptr[0..self.entry_count];
ffffffff80003a96:	48 89 8d f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rcx
ffffffff80003a9d:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
ffffffff80003aa4:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80003aa8:	48 89 8d 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rcx
ffffffff80003aaf:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003ab3:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
ffffffff80003aba:	31 c0                	xor    eax,eax
ffffffff80003abc:	48 39 c8             	cmp    rax,rcx
ffffffff80003abf:	76 07                	jbe    ffffffff80003ac8 <_start+0x138>
ffffffff80003ac1:	eb 07                	jmp    ffffffff80003aca <_start+0x13a>
        for (entries) |entry| {
            // try debug_print("Found entry of type: {}, base: 0x{x}, length: {} bytes\n", .{ entry.kind, entry.base, entry.length });
            total_size += entry.length;
        }

        try debug_print("{} entries, {} bytes\n", .{ memory_map_response.entry_count, total_size });
ffffffff80003ac3:	e9 ae 01 00 00       	jmp    ffffffff80003c76 <_start+0x2e6>
ffffffff80003ac8:	eb 12                	jmp    ffffffff80003adc <_start+0x14c>
ffffffff80003aca:	48 8b b5 80 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x380]
ffffffff80003ad1:	31 c0                	xor    eax,eax
ffffffff80003ad3:	31 c0                	xor    eax,eax
ffffffff80003ad5:	89 c7                	mov    edi,eax
ffffffff80003ad7:	e8 34 c8 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80003adc:	48 8b 8d 80 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x380]
ffffffff80003ae3:	31 c0                	xor    eax,eax
ffffffff80003ae5:	48 39 c8             	cmp    rax,rcx
ffffffff80003ae8:	77 02                	ja     ffffffff80003aec <_start+0x15c>
ffffffff80003aea:	eb 12                	jmp    ffffffff80003afe <_start+0x16e>
ffffffff80003aec:	48 8b b5 80 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x380]
ffffffff80003af3:	31 c0                	xor    eax,eax
ffffffff80003af5:	31 c0                	xor    eax,eax
ffffffff80003af7:	89 c7                	mov    edi,eax
ffffffff80003af9:	e8 d2 c6 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80003afe:	48 8b b5 80 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x380]
ffffffff80003b05:	48 8b bd 88 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x378]
ffffffff80003b0c:	48 89 f0             	mov    rax,rsi
ffffffff80003b0f:	48 89 85 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rax
ffffffff80003b16:	48 89 f8             	mov    rax,rdi
ffffffff80003b19:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
ffffffff80003b20:	48 89 b5 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rsi
ffffffff80003b27:	48 89 bd 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rdi
        mem.init(entries);
ffffffff80003b2e:	e8 ad 09 00 00       	call   ffffffff800044e0 <mem.init>
ffffffff80003b33:	48 8b 85 78 fc ff ff 	mov    rax,QWORD PTR [rbp-0x388]
        var total_size: u128 = 0;
ffffffff80003b3a:	48 c7 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],0x0
ffffffff80003b41:	00 00 00 00 
ffffffff80003b45:	48 c7 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],0x0
ffffffff80003b4c:	00 00 00 00 
        try debug_print("Found {} memory map entries\n", .{entries.len});
ffffffff80003b50:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff80003b57:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003b5e:	48 8d b5 20 fe ff ff 	lea    rsi,[rbp-0x1e0]
ffffffff80003b65:	e8 c6 ce ff ff       	call   ffffffff80000a30 <main.debug_print__anon_1511>
ffffffff80003b6a:	48 c7 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],0x0
ffffffff80003b71:	00 00 00 00 
ffffffff80003b75:	48 8b 8d 78 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x388]
        for (entries) |entry| {
ffffffff80003b7c:	48 8b 85 28 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d8]
ffffffff80003b83:	48 89 85 68 fc ff ff 	mov    QWORD PTR [rbp-0x398],rax
ffffffff80003b8a:	48 39 c8             	cmp    rax,rcx
ffffffff80003b8d:	73 53                	jae    ffffffff80003be2 <_start+0x252>
ffffffff80003b8f:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
ffffffff80003b96:	48 8b 8d 68 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x398]
ffffffff80003b9d:	48 8b 14 c8          	mov    rdx,QWORD PTR [rax+rcx*8]
ffffffff80003ba1:	48 89 95 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdx
            total_size += entry.length;
ffffffff80003ba8:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
ffffffff80003baf:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff80003bb6:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80003bba:	48 01 d1             	add    rcx,rdx
ffffffff80003bbd:	48 83 d0 00          	adc    rax,0x0
ffffffff80003bc1:	48 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rcx
ffffffff80003bc8:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
ffffffff80003bcf:	0f 92 85 48 fe ff ff 	setb   BYTE PTR [rbp-0x1b8]
ffffffff80003bd6:	8a 85 48 fe ff ff    	mov    al,BYTE PTR [rbp-0x1b8]
ffffffff80003bdc:	84 c0                	test   al,al
ffffffff80003bde:	74 04                	je     ffffffff80003be4 <_start+0x254>
ffffffff80003be0:	eb 04                	jmp    ffffffff80003be6 <_start+0x256>
ffffffff80003be2:	eb 51                	jmp    ffffffff80003c35 <_start+0x2a5>
ffffffff80003be4:	eb 1c                	jmp    ffffffff80003c02 <_start+0x272>
ffffffff80003be6:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80003bed:	48 c7 c1 78 b8 01 80 	mov    rcx,0xffffffff8001b878
ffffffff80003bf4:	31 c0                	xor    eax,eax
ffffffff80003bf6:	89 c2                	mov    edx,eax
ffffffff80003bf8:	be 10 00 00 00       	mov    esi,0x10
ffffffff80003bfd:	e8 ae c5 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80003c02:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
ffffffff80003c09:	48 8b 8d 40 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c0]
ffffffff80003c10:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
ffffffff80003c17:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff80003c1e:	48 8b 85 68 fc ff ff 	mov    rax,QWORD PTR [rbp-0x398]
ffffffff80003c25:	48 83 c0 01          	add    rax,0x1
ffffffff80003c29:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
ffffffff80003c30:	e9 40 ff ff ff       	jmp    ffffffff80003b75 <_start+0x1e5>
ffffffff80003c35:	48 8b 85 90 fc ff ff 	mov    rax,QWORD PTR [rbp-0x370]
        try debug_print("{} entries, {} bytes\n", .{ memory_map_response.entry_count, total_size });
ffffffff80003c3c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80003c40:	48 8b 85 10 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f0]
ffffffff80003c47:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80003c4e:	48 89 95 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rdx
ffffffff80003c55:	48 89 8d 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rcx
ffffffff80003c5c:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80003c63:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003c6a:	48 8d b5 50 fe ff ff 	lea    rsi,[rbp-0x1b0]
ffffffff80003c71:	e8 ca cf ff ff       	call   ffffffff80000c40 <main.debug_print__anon_1550>
    }

    if (device_tree_request.response) |device_tree_blob_response| {
ffffffff80003c76:	48 8b 05 1b 9d 01 00 	mov    rax,QWORD PTR [rip+0x19d1b]        # ffffffff8001d998 <device_tree_request+0x28>
ffffffff80003c7d:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
ffffffff80003c84:	48 83 f8 00          	cmp    rax,0x0
ffffffff80003c88:	74 35                	je     ffffffff80003cbf <_start+0x32f>
ffffffff80003c8a:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
ffffffff80003c91:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
        const dtb_e = device_tree_blob_response.dtb;
ffffffff80003c98:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003c9c:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
        try debug_print("DTB found: {?}", .{dtb_e});
ffffffff80003ca3:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80003caa:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003cb1:	48 8d b5 78 fe ff ff 	lea    rsi,[rbp-0x188]
ffffffff80003cb8:	e8 53 d1 ff ff       	call   ffffffff80000e10 <main.debug_print__anon_1575>
ffffffff80003cbd:	eb 0c                	jmp    ffffffff80003ccb <_start+0x33b>
ffffffff80003cbf:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
        //     try debug_print("DTB! {*}", dtb);
        //                const header: *FDT_HEADER = @ptrCast(*FDT_HEADER, @alignCast(4, dtb));
        //              try debug_print("DTB header: {}", .{header});
        // }
    } else {
        try debug_print("DTB Not found!\n", .{});
ffffffff80003cc6:	e8 05 d2 ff ff       	call   ffffffff80000ed0 <main.debug_print__anon_1611>
    }

    if (sys_table_request.response) |sys_table_res| {
ffffffff80003ccb:	48 8b 05 f6 9c 01 00 	mov    rax,QWORD PTR [rip+0x19cf6]        # ffffffff8001d9c8 <sys_table_request+0x28>
ffffffff80003cd2:	48 89 85 58 fc ff ff 	mov    QWORD PTR [rbp-0x3a8],rax
ffffffff80003cd9:	48 83 f8 00          	cmp    rax,0x0
ffffffff80003cdd:	74 2a                	je     ffffffff80003d09 <_start+0x379>
ffffffff80003cdf:	48 8b 85 58 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a8]
ffffffff80003ce6:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
        try debug_print("Table: {}\n", .{sys_table_res});
ffffffff80003ced:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
ffffffff80003cf4:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003cfb:	48 8d b5 88 fe ff ff 	lea    rsi,[rbp-0x178]
ffffffff80003d02:	e8 59 d3 ff ff       	call   ffffffff80001060 <main.debug_print__anon_1621>
ffffffff80003d07:	eb 02                	jmp    ffffffff80003d0b <_start+0x37b>
ffffffff80003d09:	eb 00                	jmp    ffffffff80003d0b <_start+0x37b>
    }

    if (rsdp_request.response) |rsdp_res| {
ffffffff80003d0b:	48 8b 05 e6 9c 01 00 	mov    rax,QWORD PTR [rip+0x19ce6]        # ffffffff8001d9f8 <rsdp_request+0x28>
ffffffff80003d12:	48 89 85 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rax
ffffffff80003d19:	48 83 f8 00          	cmp    rax,0x0
ffffffff80003d1d:	74 3a                	je     ffffffff80003d59 <_start+0x3c9>
ffffffff80003d1f:	48 8b 85 50 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b0]
ffffffff80003d26:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax

                return sum == 0;
            }
        };

        const rsdp = @ptrCast(*align(1) RSDPDescriptor20, rsdp_res.address);
ffffffff80003d2d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003d31:	48 89 85 40 fc ff ff 	mov    QWORD PTR [rbp-0x3c0],rax
ffffffff80003d38:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80003d3f:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
            fn getEntriesAmount(self: *const @This()) usize {
                return (self.header.length - @sizeOf(ACPISDTHeader)) / 8;
            }
        };

        var xsdt = @intToPtr(*XSDT, rsdp.Xsdt_address);
ffffffff80003d46:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80003d4a:	48 89 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],rax
ffffffff80003d51:	48 83 f8 00          	cmp    rax,0x0
ffffffff80003d55:	75 07                	jne    ffffffff80003d5e <_start+0x3ce>
ffffffff80003d57:	eb 07                	jmp    ffffffff80003d60 <_start+0x3d0>
        try debug_print("'{s}' '{s}', '{s}'\n", .{ xsdt.header.signature, xsdt.header.OMEID, xsdt.header.OEMTableID });
        // try debug_print("XSDT: {}\n", .{xsdt});

        // const entries = xsdt.pointerToOtherSDT[0..5];

        try debug_print("First entry: {}\n", .{xsdt.pointerToOtherSDT.*});
ffffffff80003d59:	e9 13 02 00 00       	jmp    ffffffff80003f71 <_start+0x5e1>
        var xsdt = @intToPtr(*XSDT, rsdp.Xsdt_address);
ffffffff80003d5e:	eb 1c                	jmp    ffffffff80003d7c <_start+0x3ec>
ffffffff80003d60:	48 c7 c7 1a b3 01 80 	mov    rdi,0xffffffff8001b31a
ffffffff80003d67:	48 c7 c1 88 b8 01 80 	mov    rcx,0xffffffff8001b888
ffffffff80003d6e:	31 c0                	xor    eax,eax
ffffffff80003d70:	89 c2                	mov    edx,eax
ffffffff80003d72:	be 1e 00 00 00       	mov    esi,0x1e
ffffffff80003d77:	e8 34 c4 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80003d7c:	48 8b 85 48 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b8]
ffffffff80003d83:	48 83 e0 07          	and    rax,0x7
ffffffff80003d87:	48 83 f8 00          	cmp    rax,0x0
ffffffff80003d8b:	75 02                	jne    ffffffff80003d8f <_start+0x3ff>
ffffffff80003d8d:	eb 1c                	jmp    ffffffff80003dab <_start+0x41b>
ffffffff80003d8f:	48 c7 c7 39 b3 01 80 	mov    rdi,0xffffffff8001b339
ffffffff80003d96:	48 c7 c1 98 b8 01 80 	mov    rcx,0xffffffff8001b898
ffffffff80003d9d:	31 c0                	xor    eax,eax
ffffffff80003d9f:	89 c2                	mov    edx,eax
ffffffff80003da1:	be 13 00 00 00       	mov    esi,0x13
ffffffff80003da6:	e8 05 c4 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80003dab:	48 8b 85 48 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3b8]
ffffffff80003db2:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
        try debug_print("RSDP: {}, {}\n", .{ rsdp, rsdp.doChecksum() });
ffffffff80003db9:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff80003dc0:	e8 2b 09 00 00       	call   ffffffff800046f0 <main._start.RSDPDescriptor20.doChecksum>
ffffffff80003dc5:	48 8b 8d 40 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3c0]
ffffffff80003dcc:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
ffffffff80003dd3:	24 01                	and    al,0x1
ffffffff80003dd5:	88 85 b8 fe ff ff    	mov    BYTE PTR [rbp-0x148],al
ffffffff80003ddb:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003de2:	48 8d b5 b0 fe ff ff 	lea    rsi,[rbp-0x150]
ffffffff80003de9:	e8 22 d5 ff ff       	call   ffffffff80001310 <main.debug_print__anon_1648>
ffffffff80003dee:	48 8b 85 40 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3c0]
        try debug_print("{s}\n", .{rsdp.first_part.OEMID});
ffffffff80003df5:	8b 48 09             	mov    ecx,DWORD PTR [rax+0x9]
ffffffff80003df8:	89 8d c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],ecx
ffffffff80003dfe:	66 8b 40 0d          	mov    ax,WORD PTR [rax+0xd]
ffffffff80003e02:	66 89 85 c4 fe ff ff 	mov    WORD PTR [rbp-0x13c],ax
ffffffff80003e09:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003e10:	48 8d b5 c0 fe ff ff 	lea    rsi,[rbp-0x140]
ffffffff80003e17:	e8 b4 d6 ff ff       	call   ffffffff800014d0 <main.debug_print__anon_1674>
        try debug_print("Header: {}; {}; {}\n", .{ xsdt.header, xsdt.header.doChecksum(), xsdt.getEntriesAmount() });
ffffffff80003e1c:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff80003e23:	8b 41 20             	mov    eax,DWORD PTR [rcx+0x20]
ffffffff80003e26:	89 85 e8 fe ff ff    	mov    DWORD PTR [rbp-0x118],eax
ffffffff80003e2c:	48 8b 41 18          	mov    rax,QWORD PTR [rcx+0x18]
ffffffff80003e30:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff80003e37:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
ffffffff80003e3b:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80003e42:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff80003e45:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80003e49:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
ffffffff80003e50:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
ffffffff80003e57:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80003e5e:	e8 fd 08 00 00       	call   ffffffff80004760 <main._start.ACPISDTHeader.doChecksum>
ffffffff80003e63:	88 85 3f fc ff ff    	mov    BYTE PTR [rbp-0x3c1],al
ffffffff80003e69:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80003e70:	e8 5b 09 00 00       	call   ffffffff800047d0 <main._start.XSDT.getEntriesAmount>
ffffffff80003e75:	8a 8d 3f fc ff ff    	mov    cl,BYTE PTR [rbp-0x3c1]
ffffffff80003e7b:	48 8d 95 f0 fe ff ff 	lea    rdx,[rbp-0x110]
ffffffff80003e82:	8b b5 e8 fe ff ff    	mov    esi,DWORD PTR [rbp-0x118]
ffffffff80003e88:	89 72 20             	mov    DWORD PTR [rdx+0x20],esi
ffffffff80003e8b:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffffffff80003e92:	48 89 72 18          	mov    QWORD PTR [rdx+0x18],rsi
ffffffff80003e96:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
ffffffff80003e9d:	48 89 72 10          	mov    QWORD PTR [rdx+0x10],rsi
ffffffff80003ea1:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
ffffffff80003ea8:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff80003eaf:	48 89 7a 08          	mov    QWORD PTR [rdx+0x8],rdi
ffffffff80003eb3:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffffffff80003eb6:	80 e1 01             	and    cl,0x1
ffffffff80003eb9:	88 8d 14 ff ff ff    	mov    BYTE PTR [rbp-0xec],cl
ffffffff80003ebf:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff80003ec6:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003ecd:	48 8d b5 f0 fe ff ff 	lea    rsi,[rbp-0x110]
ffffffff80003ed4:	e8 47 e4 ff ff       	call   ffffffff80002320 <main.debug_print__anon_1691>
        try debug_print("'{s}' '{s}', '{s}'\n", .{ xsdt.header.signature, xsdt.header.OMEID, xsdt.header.OEMTableID });
ffffffff80003ed9:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
ffffffff80003ee0:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff80003ee7:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffffffff80003eee:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff80003ef0:	89 95 20 ff ff ff    	mov    DWORD PTR [rbp-0xe0],edx
ffffffff80003ef6:	8b 51 0a             	mov    edx,DWORD PTR [rcx+0xa]
ffffffff80003ef9:	89 95 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],edx
ffffffff80003eff:	66 8b 49 0e          	mov    cx,WORD PTR [rcx+0xe]
ffffffff80003f03:	66 89 8d 28 ff ff ff 	mov    WORD PTR [rbp-0xd8],cx
ffffffff80003f0a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003f0e:	48 89 85 2a ff ff ff 	mov    QWORD PTR [rbp-0xd6],rax
ffffffff80003f15:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003f1c:	48 8d b5 20 ff ff ff 	lea    rsi,[rbp-0xe0]
ffffffff80003f23:	e8 b8 e7 ff ff       	call   ffffffff800026e0 <main.debug_print__anon_1723>
        try debug_print("First entry: {}\n", .{xsdt.pointerToOtherSDT.*});
ffffffff80003f28:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffffffff80003f2f:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
ffffffff80003f33:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
ffffffff80003f3a:	8b 4a 20             	mov    ecx,DWORD PTR [rdx+0x20]
ffffffff80003f3d:	89 48 20             	mov    DWORD PTR [rax+0x20],ecx
ffffffff80003f40:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffffffff80003f44:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
ffffffff80003f48:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
ffffffff80003f4c:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffffffff80003f50:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffffffff80003f53:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80003f57:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80003f5b:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80003f5e:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80003f65:	48 8d b5 38 ff ff ff 	lea    rsi,[rbp-0xc8]
ffffffff80003f6c:	e8 9f e8 ff ff       	call   ffffffff80002810 <main.debug_print__anon_1756>
ffffffff80003f71:	48 8d bd 60 ff ff ff 	lea    rdi,[rbp-0xa0]
ffffffff80003f78:	be 70 00 00 00       	mov    esi,0x70
ffffffff80003f7d:	ba 71 00 00 00       	mov    edx,0x71
        // for (0..xsdt.getEntriesAmount()) |i| {
        //     try debug_print("Entry {} \n", .{i});
        // }
    }

    const rtc = RTC.new(0x70, 0x71);
ffffffff80003f82:	e8 99 08 00 00       	call   ffffffff80004820 <rtc.RTC.new>
ffffffff80003f87:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
ffffffff80003f8d:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
ffffffff80003f93:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]

    while (rtc.get_update_in_progress()) {}
ffffffff80003f9a:	e8 e1 08 00 00       	call   ffffffff80004880 <rtc.RTC.get_update_in_progress>
ffffffff80003f9f:	a8 01                	test   al,0x1
ffffffff80003fa1:	75 02                	jne    ffffffff80003fa5 <_start+0x615>
ffffffff80003fa3:	eb 02                	jmp    ffffffff80003fa7 <_start+0x617>
ffffffff80003fa5:	eb 02                	jmp    ffffffff80003fa9 <_start+0x619>
ffffffff80003fa7:	eb 02                	jmp    ffffffff80003fab <_start+0x61b>
ffffffff80003fa9:	eb e8                	jmp    ffffffff80003f93 <_start+0x603>
ffffffff80003fab:	48 8d bd 78 ff ff ff 	lea    rdi,[rbp-0x88]
ffffffff80003fb2:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
    var date: Date = rtc.get_date();
ffffffff80003fb9:	e8 f2 08 00 00       	call   ffffffff800048b0 <rtc.RTC.get_date>
ffffffff80003fbe:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
ffffffff80003fc4:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
ffffffff80003fca:	66 8b 85 7c ff ff ff 	mov    ax,WORD PTR [rbp-0x84]
ffffffff80003fd1:	66 89 85 74 ff ff ff 	mov    WORD PTR [rbp-0x8c],ax
ffffffff80003fd8:	8a 85 7e ff ff ff    	mov    al,BYTE PTR [rbp-0x82]
ffffffff80003fde:	88 85 76 ff ff ff    	mov    BYTE PTR [rbp-0x8a],al

    try debug_print("New date: {}\n", .{date});
ffffffff80003fe4:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
ffffffff80003fea:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
ffffffff80003fed:	66 8b 85 74 ff ff ff 	mov    ax,WORD PTR [rbp-0x8c]
ffffffff80003ff4:	66 89 45 84          	mov    WORD PTR [rbp-0x7c],ax
ffffffff80003ff8:	8a 85 76 ff ff ff    	mov    al,BYTE PTR [rbp-0x8a]
ffffffff80003ffe:	88 45 86             	mov    BYTE PTR [rbp-0x7a],al
ffffffff80004001:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff80004008:	48 8d 75 80          	lea    rsi,[rbp-0x80]
ffffffff8000400c:	e8 ff f2 ff ff       	call   ffffffff80003310 <main.debug_print__anon_1787>

    // Ensure we got a framebuffer.
    var last_address = @intCast(u64, 0);
ffffffff80004011:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
ffffffff80004018:	00 
ffffffff80004019:	48 c7 45 90 00 00 00 	mov    QWORD PTR [rbp-0x70],0x0
ffffffff80004020:	00 

    for (0..2) |i| {
ffffffff80004021:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80004025:	48 89 85 30 fc ff ff 	mov    QWORD PTR [rbp-0x3d0],rax
ffffffff8000402c:	48 83 f8 02          	cmp    rax,0x2
ffffffff80004030:	73 24                	jae    ffffffff80004056 <_start+0x6c6>
ffffffff80004032:	48 8b 85 30 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3d0]
ffffffff80004039:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000403d:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
ffffffff80004041:	48 8d b5 a0 fd ff ff 	lea    rsi,[rbp-0x260]
        const page = mem.allocate_new() catch {
ffffffff80004048:	e8 23 f3 ff ff       	call   ffffffff80003370 <mem.allocate_new>
ffffffff8000404d:	66 83 7d a8 00       	cmp    WORD PTR [rbp-0x58],0x0
ffffffff80004052:	74 07                	je     ffffffff8000405b <_start+0x6cb>
ffffffff80004054:	eb 12                	jmp    ffffffff80004068 <_start+0x6d8>

ffffffff80004056:	e9 9a 01 00 00       	jmp    ffffffff800041f5 <_start+0x865>
        const page = mem.allocate_new() catch {
ffffffff8000405b:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8000405f:	48 89 85 28 fc ff ff 	mov    QWORD PTR [rbp-0x3d8],rax
ffffffff80004066:	eb 1e                	jmp    ffffffff80004086 <_start+0x6f6>
ffffffff80004068:	48 8b 85 30 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3d0]
            try debug_print("Stopped at index: {}", .{i});
ffffffff8000406f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80004073:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff8000407a:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff8000407e:	e8 fd f4 ff ff       	call   ffffffff80003580 <main.debug_print__anon_1806>
        asm volatile ("hlt");
ffffffff80004083:	f4                   	hlt
ffffffff80004084:	eb fd                	jmp    ffffffff80004083 <_start+0x6f3>
ffffffff80004086:	48 8b 8d 28 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3d8]
ffffffff8000408d:	48 89 8d 20 fc ff ff 	mov    QWORD PTR [rbp-0x3e0],rcx
ffffffff80004094:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
        try debug_print("RSDP: {}, {}\n", .{ rsdp, rsdp.doChecksum() });
ffffffff80004098:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
        try debug_print("{s}\n", .{rsdp.first_part.OEMID});
ffffffff8000409c:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
ffffffff800040a3:	ff ff 7f 
ffffffff800040a6:	48 29 c8             	sub    rax,rcx
ffffffff800040a9:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
ffffffff800040b0:	ff ff 7f 
ffffffff800040b3:	48 39 c8             	cmp    rax,rcx
ffffffff800040b6:	77 02                	ja     ffffffff800040ba <_start+0x72a>
ffffffff800040b8:	eb 1c                	jmp    ffffffff800040d6 <_start+0x746>
ffffffff800040ba:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff800040c1:	48 c7 c1 a8 b8 01 80 	mov    rcx,0xffffffff8001b8a8
ffffffff800040c8:	31 c0                	xor    eax,eax
ffffffff800040ca:	89 c2                	mov    edx,eax
ffffffff800040cc:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff800040d1:	e8 da c0 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800040d6:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff800040da:	48 89 8d 18 fc ff ff 	mov    QWORD PTR [rbp-0x3e8],rcx
ffffffff800040e1:	48 b8 ff ff ff ff ff 	movabs rax,0x7fffffffffffffff
ffffffff800040e8:	ff ff 7f 
ffffffff800040eb:	48 29 c8             	sub    rax,rcx
ffffffff800040ee:	48 b9 ff ff ff ff ff 	movabs rcx,0x7fffffffffffffff
ffffffff800040f5:	ff ff 7f 
ffffffff800040f8:	48 39 c8             	cmp    rax,rcx
ffffffff800040fb:	77 02                	ja     ffffffff800040ff <_start+0x76f>
ffffffff800040fd:	eb 1c                	jmp    ffffffff8000411b <_start+0x78b>
ffffffff800040ff:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80004106:	48 c7 c1 b8 b8 01 80 	mov    rcx,0xffffffff8001b8b8
ffffffff8000410d:	31 c0                	xor    eax,eax
ffffffff8000410f:	89 c2                	mov    edx,eax
ffffffff80004111:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80004116:	e8 95 c0 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000411b:	48 8b 8d 18 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3e8]
ffffffff80004122:	48 8b 85 20 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e0]
ffffffff80004129:	48 29 c8             	sub    rax,rcx
ffffffff8000412c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80004130:	0f 90 45 d0          	seto   BYTE PTR [rbp-0x30]
ffffffff80004134:	8a 45 d0             	mov    al,BYTE PTR [rbp-0x30]
ffffffff80004137:	84 c0                	test   al,al
ffffffff80004139:	75 04                	jne    ffffffff8000413f <_start+0x7af>
ffffffff8000413b:	eb 00                	jmp    ffffffff8000413d <_start+0x7ad>
ffffffff8000413d:	eb 1c                	jmp    ffffffff8000415b <_start+0x7cb>
ffffffff8000413f:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80004146:	48 c7 c1 c8 b8 01 80 	mov    rcx,0xffffffff8001b8c8
ffffffff8000414d:	31 c0                	xor    eax,eax
ffffffff8000414f:	89 c2                	mov    edx,eax
ffffffff80004151:	be 10 00 00 00       	mov    esi,0x10
ffffffff80004156:	e8 55 c0 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000415b:	48 8b 85 20 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e0]
ffffffff80004162:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff80004166:	48 89 8d 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rcx
ffffffff8000416d:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
        try debug_print("First entry: {}\n", .{xsdt.pointerToOtherSDT.*});
ffffffff80004171:	48 83 e0 07          	and    rax,0x7
ffffffff80004175:	48 83 f8 00          	cmp    rax,0x0
ffffffff80004179:	75 02                	jne    ffffffff8000417d <_start+0x7ed>
ffffffff8000417b:	eb 1c                	jmp    ffffffff80004199 <_start+0x809>
ffffffff8000417d:	48 c7 c7 39 b3 01 80 	mov    rdi,0xffffffff8001b339
ffffffff80004184:	48 c7 c1 d8 b8 01 80 	mov    rcx,0xffffffff8001b8d8
ffffffff8000418b:	31 c0                	xor    eax,eax
ffffffff8000418d:	89 c2                	mov    edx,eax
ffffffff8000418f:	be 13 00 00 00       	mov    esi,0x13
ffffffff80004194:	e8 17 c0 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80004199:	48 8b 95 20 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e0]
ffffffff800041a0:	48 8b 8d 10 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3f0]
ffffffff800041a7:	48 8b b5 30 fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3d0]
ffffffff800041ae:	48 8b 02             	mov    rax,QWORD PTR [rdx]
ffffffff800041b1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800041b5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff800041b9:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800041bd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800041c1:	48 8d bd a0 fd ff ff 	lea    rdi,[rbp-0x260]
ffffffff800041c8:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff800041cc:	e8 5f f7 ff ff       	call   ffffffff80003930 <main.debug_print__anon_1820>
ffffffff800041d1:	48 8b bd 20 fc ff ff 	mov    rdi,QWORD PTR [rbp-0x3e0]
        // }
ffffffff800041d8:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi

ffffffff800041dc:	e8 cf 07 00 00       	call   ffffffff800049b0 <mem.free>
ffffffff800041e1:	48 8b 85 30 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3d0]
ffffffff800041e8:	48 83 c0 01          	add    rax,0x1
ffffffff800041ec:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff800041f0:	e9 2c fe ff ff       	jmp    ffffffff80004021 <_start+0x691>
        // }
ffffffff800041f5:	eb 00                	jmp    ffffffff800041f7 <_start+0x867>
        asm volatile ("hlt");
ffffffff800041f7:	f4                   	hlt
ffffffff800041f8:	eb fd                	jmp    ffffffff800041f7 <_start+0x867>
ffffffff800041fa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80004200 <ports.SerialPort.init>:
    pub fn init(self: SerialPort) void {
ffffffff80004200:	55                   	push   rbp
ffffffff80004201:	48 89 e5             	mov    rbp,rsp
ffffffff80004204:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffffffff8000420b:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
        self.int_en.write(0x00);
ffffffff80004212:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80004215:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80004219:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff8000421c:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
ffffffff8000421f:	48 8d 7d 80          	lea    rdi,[rbp-0x80]
ffffffff80004223:	48 83 c7 02          	add    rdi,0x2
ffffffff80004227:	31 c0                	xor    eax,eax
ffffffff80004229:	31 f6                	xor    esi,esi
ffffffff8000422b:	e8 f0 0b 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff80004230:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
        self.line_ctrl.write(0x80);
ffffffff80004237:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff8000423a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff8000423e:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff80004241:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
ffffffff80004244:	48 8d 7d 90          	lea    rdi,[rbp-0x70]
ffffffff80004248:	48 83 c7 06          	add    rdi,0x6
ffffffff8000424c:	be 80 00 00 00       	mov    esi,0x80
ffffffff80004251:	e8 ca 0b 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff80004256:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
        self.data.write(0x03);
ffffffff8000425d:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80004260:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80004264:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff80004267:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
ffffffff8000426a:	48 8d 7d a0          	lea    rdi,[rbp-0x60]
ffffffff8000426e:	be 03 00 00 00       	mov    esi,0x3
ffffffff80004273:	e8 a8 0b 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff80004278:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
        self.int_en.write(0x00);
ffffffff8000427f:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80004282:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80004286:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff80004289:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
ffffffff8000428c:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
ffffffff80004290:	48 83 c7 02          	add    rdi,0x2
ffffffff80004294:	31 c0                	xor    eax,eax
ffffffff80004296:	31 f6                	xor    esi,esi
ffffffff80004298:	e8 83 0b 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff8000429d:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
        self.line_ctrl.write(0x03);
ffffffff800042a4:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff800042a7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800042ab:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff800042ae:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
ffffffff800042b1:	48 8d 7d c0          	lea    rdi,[rbp-0x40]
ffffffff800042b5:	48 83 c7 06          	add    rdi,0x6
ffffffff800042b9:	be 03 00 00 00       	mov    esi,0x3
ffffffff800042be:	e8 5d 0b 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff800042c3:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
        self.fifo_ctrl.write(0xC7);
ffffffff800042ca:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff800042cd:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800042d1:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff800042d4:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff800042d7:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
ffffffff800042db:	48 83 c7 04          	add    rdi,0x4
ffffffff800042df:	be c7 00 00 00       	mov    esi,0xc7
ffffffff800042e4:	e8 37 0b 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff800042e9:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
        self.modem_ctrl.write(0x0B);
ffffffff800042f0:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff800042f3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800042f7:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff800042fa:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff800042fd:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80004301:	48 83 c7 08          	add    rdi,0x8
ffffffff80004305:	be 0b 00 00 00       	mov    esi,0xb
ffffffff8000430a:	e8 11 0b 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff8000430f:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
        self.int_en.write(0x01);
ffffffff80004316:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80004319:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000431d:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff80004320:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80004323:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80004327:	48 83 c7 02          	add    rdi,0x2
ffffffff8000432b:	be 01 00 00 00       	mov    esi,0x1
ffffffff80004330:	e8 eb 0a 00 00       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff80004335:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffffffff8000433c:	5d                   	pop    rbp
ffffffff8000433d:	c3                   	ret
ffffffff8000433e:	66 90                	xchg   ax,ax

ffffffff80004340 <idt.add_interrupt>:
        :
        : [idtr] "r" (&idtr),
    );
}

pub fn add_interrupt(idx: u8) void {
ffffffff80004340:	55                   	push   rbp
ffffffff80004341:	48 89 e5             	mov    rbp,rsp
ffffffff80004344:	48 81 ec 70 01 00 00 	sub    rsp,0x170
ffffffff8000434b:	40 88 f8             	mov    al,dil
ffffffff8000434e:	88 85 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],al
ffffffff80004354:	88 85 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],al
ffffffff8000435a:	48 8d 8d b8 fe ff ff 	lea    rcx,[rbp-0x148]
ffffffff80004361:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff80004365:	48 c7 45 c8 20 00 00 	mov    QWORD PTR [rbp-0x38],0x20
ffffffff8000436c:	00 
ffffffff8000436d:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80004374:	00 
    const pointer = @ptrToInt(trampolines[idx]);
ffffffff80004375:	0f b6 c0             	movzx  eax,al
ffffffff80004378:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff8000437f:	48 3d 00 01 00 00    	cmp    rax,0x100
ffffffff80004385:	73 02                	jae    ffffffff80004389 <idt.add_interrupt+0x49>
ffffffff80004387:	eb 11                	jmp    ffffffff8000439a <idt.add_interrupt+0x5a>
ffffffff80004389:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80004390:	be 00 01 00 00       	mov    esi,0x100
ffffffff80004395:	e8 36 be ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000439a:	8a 85 a7 fe ff ff    	mov    al,BYTE PTR [rbp-0x159]
ffffffff800043a0:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff800043a7:	48 8d 0c cd 00 da 01 	lea    rcx,[rcx*8-0x7ffe2600]
ffffffff800043ae:	80 
ffffffff800043af:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffffffff800043b2:	48 89 8d 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rcx
ffffffff800043b9:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    // var pointer = @intCast(usize, 4567);

    try debug_print("Interrupt: {}", .{idx});
ffffffff800043bd:	88 45 d8             	mov    BYTE PTR [rbp-0x28],al
ffffffff800043c0:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
ffffffff800043c4:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff800043c8:	e8 63 0b 00 00       	call   ffffffff80004f30 <main.debug_print__anon_2426>
ffffffff800043cd:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffffffff800043d4:	8a 85 a7 fe ff ff    	mov    al,BYTE PTR [rbp-0x159]

    var cs = asm ("mov %%cs, %[ret]"
ffffffff800043da:	66 8c ca             	mov    dx,cs
ffffffff800043dd:	66 89 55 de          	mov    WORD PTR [rbp-0x22],dx
        : [ret] "=r" (-> u16),
    );

    var entry = InterruptDescriptor{};
ffffffff800043e1:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800043e8:	00 
ffffffff800043e9:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff800043f0:	00 

    entry.selector = cs;
ffffffff800043f1:	66 8b 55 de          	mov    dx,WORD PTR [rbp-0x22]
ffffffff800043f5:	66 89 55 e2          	mov    WORD PTR [rbp-0x1e],dx
    entry.options.gate_type = 0xE;
ffffffff800043f9:	66 8b 55 e4          	mov    dx,WORD PTR [rbp-0x1c]
ffffffff800043fd:	66 81 e2 ff f0       	and    dx,0xf0ff
ffffffff80004402:	66 81 ca 00 0e       	or     dx,0xe00
ffffffff80004407:	66 89 55 e4          	mov    WORD PTR [rbp-0x1c],dx

    entry.offset_low = @truncate(u16, pointer);
ffffffff8000440b:	66 89 ca             	mov    dx,cx
ffffffff8000440e:	66 89 55 e0          	mov    WORD PTR [rbp-0x20],dx
    entry.offset_mid = @truncate(u16, pointer >> 16);
ffffffff80004412:	48 89 ca             	mov    rdx,rcx
ffffffff80004415:	48 c1 ea 10          	shr    rdx,0x10
ffffffff80004419:	66 89 55 e6          	mov    WORD PTR [rbp-0x1a],dx
    entry.offset_high = @truncate(u32, pointer >> 32);
ffffffff8000441d:	48 c1 e9 20          	shr    rcx,0x20
ffffffff80004421:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx

    entry.options.present = true;
ffffffff80004424:	66 8b 4d e4          	mov    cx,WORD PTR [rbp-0x1c]
ffffffff80004428:	66 81 e1 ff 7f       	and    cx,0x7fff
ffffffff8000442d:	66 81 c9 00 80       	or     cx,0x8000
ffffffff80004432:	66 89 4d e4          	mov    WORD PTR [rbp-0x1c],cx

    idt[idx] = entry;
ffffffff80004436:	0f b6 c0             	movzx  eax,al
ffffffff80004439:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80004440:	48 3d 00 01 00 00    	cmp    rax,0x100
ffffffff80004446:	73 02                	jae    ffffffff8000444a <idt.add_interrupt+0x10a>
ffffffff80004448:	eb 11                	jmp    ffffffff8000445b <idt.add_interrupt+0x11b>
ffffffff8000444a:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff80004451:	be 00 01 00 00       	mov    esi,0x100
ffffffff80004456:	e8 75 bd ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000445b:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
ffffffff80004462:	48 c1 e0 04          	shl    rax,0x4
ffffffff80004466:	48 8d 80 38 e2 01 80 	lea    rax,[rax-0x7ffe1dc8]
ffffffff8000446d:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff80004471:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80004474:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80004478:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx

    try debug_print("Interrupts: {}\n", .{entry});
ffffffff8000447c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004480:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80004484:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004488:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000448c:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
ffffffff80004490:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80004494:	e8 67 14 00 00       	call   ffffffff80005900 <main.debug_print__anon_2443>
ffffffff80004499:	48 81 c4 70 01 00 00 	add    rsp,0x170
ffffffff800044a0:	5d                   	pop    rbp
ffffffff800044a1:	c3                   	ret
ffffffff800044a2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800044a9:	00 00 00 
ffffffff800044ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800044b0 <idt.load>:
pub fn load() void {
ffffffff800044b0:	55                   	push   rbp
ffffffff800044b1:	48 89 e5             	mov    rbp,rsp
ffffffff800044b4:	48 83 ec 10          	sub    rsp,0x10
        .base = @ptrToInt(&idt),
ffffffff800044b8:	48 c7 45 f2 38 e2 01 	mov    QWORD PTR [rbp-0xe],0xffffffff8001e238
ffffffff800044bf:	80 
        .limit = @sizeOf(@TypeOf(idt)) - 1,
ffffffff800044c0:	66 c7 45 f0 ff 0f    	mov    WORD PTR [rbp-0x10],0xfff
ffffffff800044c6:	48 8d 45 f0          	lea    rax,[rbp-0x10]
    asm volatile ("lidt (%[idtr])"
ffffffff800044ca:	0f 01 18             	lidt   [rax]
ffffffff800044cd:	48 83 c4 10          	add    rsp,0x10
ffffffff800044d1:	5d                   	pop    rbp
ffffffff800044d2:	c3                   	ret
ffffffff800044d3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800044da:	00 00 00 
ffffffff800044dd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800044e0 <mem.init>:
pub fn init(entries: []*limine.MemoryMapEntry) void {
ffffffff800044e0:	55                   	push   rbp
ffffffff800044e1:	48 89 e5             	mov    rbp,rsp
ffffffff800044e4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffffffff800044eb:	48 89 f0             	mov    rax,rsi
ffffffff800044ee:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff800044f2:	48 89 f8             	mov    rax,rdi
ffffffff800044f5:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff800044f9:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff800044fd:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80004501:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80004508:	00 
ffffffff80004509:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
    for (entries) |entry| {
ffffffff8000450d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80004511:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80004515:	48 39 c8             	cmp    rax,rcx
ffffffff80004518:	73 23                	jae    ffffffff8000453d <mem.init+0x5d>
ffffffff8000451a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8000451e:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffffffff80004522:	48 8b 04 c8          	mov    rax,QWORD PTR [rax+rcx*8]
ffffffff80004526:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff8000452a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        switch (entry.kind) {
ffffffff8000452e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004532:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80004536:	48 85 c0             	test   rax,rax
ffffffff80004539:	74 1d                	je     ffffffff80004558 <mem.init+0x78>
ffffffff8000453b:	eb 05                	jmp    ffffffff80004542 <mem.init+0x62>
ffffffff8000453d:	e9 a5 01 00 00       	jmp    ffffffff800046e7 <mem.init+0x207>
ffffffff80004542:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff80004546:	e8 a5 23 00 00       	call   ffffffff800068f0 <__zig_is_named_enum_value_limine.MemoryMapEntryType>
ffffffff8000454b:	a8 01                	test   al,0x1
ffffffff8000454d:	0f 85 61 01 00 00    	jne    ffffffff800046b4 <mem.init+0x1d4>
ffffffff80004553:	e9 5e 01 00 00       	jmp    ffffffff800046b6 <mem.init+0x1d6>
ffffffff80004558:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff8000455c:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff80004563:	00 
                for (0..entry.length / page_size) |i| {
ffffffff80004564:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004568:	48 c1 e8 0c          	shr    rax,0xc
ffffffff8000456c:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80004573:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffffffff8000457a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000457e:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80004585:	48 39 c8             	cmp    rax,rcx
ffffffff80004588:	73 32                	jae    ffffffff800045bc <mem.init+0xdc>
ffffffff8000458a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80004591:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff80004595:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
                    var page = @intToPtr(*PageAllocatorEntry, entry.base + i * page_size);
ffffffff80004599:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffffffff8000459c:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffffffff800045a3:	b9 00 10 00 00       	mov    ecx,0x1000
ffffffff800045a8:	48 f7 e1             	mul    rcx
ffffffff800045ab:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800045af:	0f 90 45 e8          	seto   BYTE PTR [rbp-0x18]
ffffffff800045b3:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff800045b6:	84 c0                	test   al,al
ffffffff800045b8:	74 07                	je     ffffffff800045c1 <mem.init+0xe1>
ffffffff800045ba:	eb 07                	jmp    ffffffff800045c3 <mem.init+0xe3>
                    next_page = page;
ffffffff800045bc:	e9 f1 00 00 00       	jmp    ffffffff800046b2 <mem.init+0x1d2>
                    var page = @intToPtr(*PageAllocatorEntry, entry.base + i * page_size);
ffffffff800045c1:	eb 1c                	jmp    ffffffff800045df <mem.init+0xff>
ffffffff800045c3:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800045ca:	48 c7 c1 68 ba 01 80 	mov    rcx,0xffffffff8001ba68
ffffffff800045d1:	31 c0                	xor    eax,eax
ffffffff800045d3:	89 c2                	mov    edx,eax
ffffffff800045d5:	be 10 00 00 00       	mov    esi,0x10
ffffffff800045da:	e8 d1 bb ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800045df:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800045e6:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff800045ea:	48 01 c8             	add    rax,rcx
ffffffff800045ed:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800045f1:	0f 92 45 f8          	setb   BYTE PTR [rbp-0x8]
ffffffff800045f5:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff800045f8:	84 c0                	test   al,al
ffffffff800045fa:	75 04                	jne    ffffffff80004600 <mem.init+0x120>
ffffffff800045fc:	eb 00                	jmp    ffffffff800045fe <mem.init+0x11e>
ffffffff800045fe:	eb 1c                	jmp    ffffffff8000461c <mem.init+0x13c>
ffffffff80004600:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80004607:	48 c7 c1 78 ba 01 80 	mov    rcx,0xffffffff8001ba78
ffffffff8000460e:	31 c0                	xor    eax,eax
ffffffff80004610:	89 c2                	mov    edx,eax
ffffffff80004612:	be 10 00 00 00       	mov    esi,0x10
ffffffff80004617:	e8 94 bb ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000461c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004620:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
ffffffff80004627:	48 83 f8 00          	cmp    rax,0x0
ffffffff8000462b:	74 02                	je     ffffffff8000462f <mem.init+0x14f>
ffffffff8000462d:	eb 1c                	jmp    ffffffff8000464b <mem.init+0x16b>
ffffffff8000462f:	48 c7 c7 1a b3 01 80 	mov    rdi,0xffffffff8001b31a
ffffffff80004636:	48 c7 c1 88 ba 01 80 	mov    rcx,0xffffffff8001ba88
ffffffff8000463d:	31 c0                	xor    eax,eax
ffffffff8000463f:	89 c2                	mov    edx,eax
ffffffff80004641:	be 1e 00 00 00       	mov    esi,0x1e
ffffffff80004646:	e8 65 bb ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000464b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80004652:	48 83 e0 07          	and    rax,0x7
ffffffff80004656:	48 83 f8 00          	cmp    rax,0x0
ffffffff8000465a:	75 02                	jne    ffffffff8000465e <mem.init+0x17e>
ffffffff8000465c:	eb 1c                	jmp    ffffffff8000467a <mem.init+0x19a>
ffffffff8000465e:	48 c7 c7 39 b3 01 80 	mov    rdi,0xffffffff8001b339
ffffffff80004665:	48 c7 c1 98 ba 01 80 	mov    rcx,0xffffffff8001ba98
ffffffff8000466c:	31 c0                	xor    eax,eax
ffffffff8000466e:	89 c2                	mov    edx,eax
ffffffff80004670:	be 13 00 00 00       	mov    esi,0x13
ffffffff80004675:	e8 36 bb ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000467a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80004681:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
                    page.next = next_page;
ffffffff80004685:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80004689:	48 8b 0d a0 9b 01 00 	mov    rcx,QWORD PTR [rip+0x19ba0]        # ffffffff8001e230 <mem.next_page>
ffffffff80004690:	48 89 08             	mov    QWORD PTR [rax],rcx
                    next_page = page;
ffffffff80004693:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80004697:	48 89 05 92 9b 01 00 	mov    QWORD PTR [rip+0x19b92],rax        # ffffffff8001e230 <mem.next_page>
ffffffff8000469e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff800046a5:	48 83 c0 01          	add    rax,0x1
ffffffff800046a9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff800046ad:	e9 c1 fe ff ff       	jmp    ffffffff80004573 <mem.init+0x93>
ffffffff800046b2:	eb 20                	jmp    ffffffff800046d4 <mem.init+0x1f4>
        switch (entry.kind) {
ffffffff800046b4:	eb 1c                	jmp    ffffffff800046d2 <mem.init+0x1f2>
ffffffff800046b6:	48 c7 c7 9b b1 01 80 	mov    rdi,0xffffffff8001b19b
ffffffff800046bd:	48 c7 c1 a8 ba 01 80 	mov    rcx,0xffffffff8001baa8
ffffffff800046c4:	31 c0                	xor    eax,eax
ffffffff800046c6:	89 c2                	mov    edx,eax
ffffffff800046c8:	be 17 00 00 00       	mov    esi,0x17
ffffffff800046cd:	e8 de ba ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800046d2:	eb 00                	jmp    ffffffff800046d4 <mem.init+0x1f4>
ffffffff800046d4:	eb 00                	jmp    ffffffff800046d6 <mem.init+0x1f6>
ffffffff800046d6:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff800046da:	48 83 c0 01          	add    rax,0x1
ffffffff800046de:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800046e2:	e9 22 fe ff ff       	jmp    ffffffff80004509 <mem.init+0x29>
ffffffff800046e7:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff800046ee:	5d                   	pop    rbp
ffffffff800046ef:	c3                   	ret

ffffffff800046f0 <main._start.RSDPDescriptor20.doChecksum>:
            fn doChecksum(self: *align(1) @This()) bool {
ffffffff800046f0:	55                   	push   rbp
ffffffff800046f1:	48 89 e5             	mov    rbp,rsp
ffffffff800046f4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800046f8:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff800046fc:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
                const bytes = @ptrCast([*]const u8, self);
ffffffff80004700:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
                var sum: u8 = 0;
ffffffff80004704:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffffffff80004708:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000470f:	00 
                for (0..self.length) |i| {
ffffffff80004710:	8b 47 14             	mov    eax,DWORD PTR [rdi+0x14]
ffffffff80004713:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80004717:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff8000471b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000471f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80004723:	48 39 c8             	cmp    rax,rcx
ffffffff80004726:	73 17                	jae    ffffffff8000473f <main._start.RSDPDescriptor20.doChecksum+0x4f>
ffffffff80004728:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8000472c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff80004730:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
                    sum +%= bytes[i];
ffffffff80004734:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
ffffffff80004737:	02 04 11             	add    al,BYTE PTR [rcx+rdx*1]
ffffffff8000473a:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff8000473d:	eb 02                	jmp    ffffffff80004741 <main._start.RSDPDescriptor20.doChecksum+0x51>
ffffffff8000473f:	eb 0e                	jmp    ffffffff8000474f <main._start.RSDPDescriptor20.doChecksum+0x5f>
ffffffff80004741:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80004745:	48 83 c0 01          	add    rax,0x1
ffffffff80004749:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000474d:	eb c8                	jmp    ffffffff80004717 <main._start.RSDPDescriptor20.doChecksum+0x27>
                return sum == 0;
ffffffff8000474f:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
ffffffff80004752:	84 c0                	test   al,al
ffffffff80004754:	0f 94 c0             	sete   al
ffffffff80004757:	48 83 c4 40          	add    rsp,0x40
ffffffff8000475b:	5d                   	pop    rbp
ffffffff8000475c:	c3                   	ret
ffffffff8000475d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80004760 <main._start.ACPISDTHeader.doChecksum>:
            fn doChecksum(self: *const @This()) bool {
ffffffff80004760:	55                   	push   rbp
ffffffff80004761:	48 89 e5             	mov    rbp,rsp
ffffffff80004764:	48 83 ec 40          	sub    rsp,0x40
ffffffff80004768:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff8000476c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
                const bytes = @ptrCast([*]const u8, self);
ffffffff80004770:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
                var sum: u8 = 0;
ffffffff80004774:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
ffffffff80004778:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000477f:	00 
                for (0..self.length) |i| {
ffffffff80004780:	8b 47 04             	mov    eax,DWORD PTR [rdi+0x4]
ffffffff80004783:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80004787:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff8000478b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000478f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80004793:	48 39 c8             	cmp    rax,rcx
ffffffff80004796:	73 17                	jae    ffffffff800047af <main._start.ACPISDTHeader.doChecksum+0x4f>
ffffffff80004798:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8000479c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff800047a0:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
                    sum +%= bytes[i];
ffffffff800047a4:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
ffffffff800047a7:	02 04 11             	add    al,BYTE PTR [rcx+rdx*1]
ffffffff800047aa:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff800047ad:	eb 02                	jmp    ffffffff800047b1 <main._start.ACPISDTHeader.doChecksum+0x51>
ffffffff800047af:	eb 0e                	jmp    ffffffff800047bf <main._start.ACPISDTHeader.doChecksum+0x5f>
ffffffff800047b1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800047b5:	48 83 c0 01          	add    rax,0x1
ffffffff800047b9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800047bd:	eb c8                	jmp    ffffffff80004787 <main._start.ACPISDTHeader.doChecksum+0x27>
                return sum == 0;
ffffffff800047bf:	8a 45 ef             	mov    al,BYTE PTR [rbp-0x11]
ffffffff800047c2:	84 c0                	test   al,al
ffffffff800047c4:	0f 94 c0             	sete   al
ffffffff800047c7:	48 83 c4 40          	add    rsp,0x40
ffffffff800047cb:	5d                   	pop    rbp
ffffffff800047cc:	c3                   	ret
ffffffff800047cd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800047d0 <main._start.XSDT.getEntriesAmount>:
            fn getEntriesAmount(self: *const @This()) usize {
ffffffff800047d0:	55                   	push   rbp
ffffffff800047d1:	48 89 e5             	mov    rbp,rsp
ffffffff800047d4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800047d8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
                return (self.header.length - @sizeOf(ACPISDTHeader)) / 8;
ffffffff800047dc:	8b 47 04             	mov    eax,DWORD PTR [rdi+0x4]
ffffffff800047df:	83 e8 24             	sub    eax,0x24
ffffffff800047e2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800047e5:	0f 92 45 fc          	setb   BYTE PTR [rbp-0x4]
ffffffff800047e9:	8a 45 fc             	mov    al,BYTE PTR [rbp-0x4]
ffffffff800047ec:	84 c0                	test   al,al
ffffffff800047ee:	75 04                	jne    ffffffff800047f4 <main._start.XSDT.getEntriesAmount+0x24>
ffffffff800047f0:	eb 00                	jmp    ffffffff800047f2 <main._start.XSDT.getEntriesAmount+0x22>
ffffffff800047f2:	eb 1c                	jmp    ffffffff80004810 <main._start.XSDT.getEntriesAmount+0x40>
ffffffff800047f4:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800047fb:	48 c7 c1 58 bd 01 80 	mov    rcx,0xffffffff8001bd58
ffffffff80004802:	31 c0                	xor    eax,eax
ffffffff80004804:	89 c2                	mov    edx,eax
ffffffff80004806:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000480b:	e8 a0 b9 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80004810:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80004813:	c1 e8 03             	shr    eax,0x3
ffffffff80004816:	89 c0                	mov    eax,eax
ffffffff80004818:	48 83 c4 10          	add    rsp,0x10
ffffffff8000481c:	5d                   	pop    rbp
ffffffff8000481d:	c3                   	ret
ffffffff8000481e:	66 90                	xchg   ax,ax

ffffffff80004820 <rtc.RTC.new>:
    in: Port(u8),
    out: Port(u8),

    const Self = @This();

    pub fn new(out: u8, in: u8) Self {
ffffffff80004820:	55                   	push   rbp
ffffffff80004821:	48 89 e5             	mov    rbp,rsp
ffffffff80004824:	48 83 ec 30          	sub    rsp,0x30
ffffffff80004828:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff8000482c:	88 d0                	mov    al,dl
ffffffff8000482e:	40 88 f1             	mov    cl,sil
ffffffff80004831:	88 4d d7             	mov    BYTE PTR [rbp-0x29],cl
ffffffff80004834:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff80004838:	88 4d ee             	mov    BYTE PTR [rbp-0x12],cl
ffffffff8000483b:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
        return Self{
            .in = Port(u8).new(in),
ffffffff8000483e:	0f b6 c0             	movzx  eax,al
ffffffff80004841:	66 89 c6             	mov    si,ax
ffffffff80004844:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80004848:	e8 b3 05 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff8000484d:	8a 45 d7             	mov    al,BYTE PTR [rbp-0x29]
ffffffff80004850:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80004854:	66 8b 4d f0          	mov    cx,WORD PTR [rbp-0x10]
ffffffff80004858:	66 89 0f             	mov    WORD PTR [rdi],cx
            .out = Port(u8).new(out),
ffffffff8000485b:	0f b6 c0             	movzx  eax,al
ffffffff8000485e:	66 89 c6             	mov    si,ax
ffffffff80004861:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
ffffffff80004865:	e8 96 05 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff8000486a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff8000486e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004872:	66 8b 4d f8          	mov    cx,WORD PTR [rbp-0x8]
ffffffff80004876:	66 89 4f 02          	mov    WORD PTR [rdi+0x2],cx
        return Self{
ffffffff8000487a:	48 83 c4 30          	add    rsp,0x30
ffffffff8000487e:	5d                   	pop    rbp
ffffffff8000487f:	c3                   	ret

ffffffff80004880 <rtc.RTC.get_update_in_progress>:
        };
    }

    pub fn get_update_in_progress(self: Self) bool {
ffffffff80004880:	55                   	push   rbp
ffffffff80004881:	48 89 e5             	mov    rbp,rsp
ffffffff80004884:	48 83 ec 10          	sub    rsp,0x10
        return self.read_register(0x0A) & 0x80 == 1;
ffffffff80004888:	8b 07                	mov    eax,DWORD PTR [rdi]
ffffffff8000488a:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000488d:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
ffffffff80004891:	be 0a 00 00 00       	mov    esi,0xa
ffffffff80004896:	e8 15 61 00 00       	call   ffffffff8000a9b0 <rtc.RTC.read_register>
ffffffff8000489b:	24 80                	and    al,0x80
ffffffff8000489d:	2c 01                	sub    al,0x1
ffffffff8000489f:	0f 94 c0             	sete   al
ffffffff800048a2:	48 83 c4 10          	add    rsp,0x10
ffffffff800048a6:	5d                   	pop    rbp
ffffffff800048a7:	c3                   	ret
ffffffff800048a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800048af:	00 

ffffffff800048b0 <rtc.RTC.get_date>:
        self.out.write(register);
        const value_bcd = self.in.read();
        return (value_bcd & 0x0F) + ((value_bcd / 16) * 10);
    }

    pub fn get_date(self: Self) Date {
ffffffff800048b0:	55                   	push   rbp
ffffffff800048b1:	48 89 e5             	mov    rbp,rsp
ffffffff800048b4:	48 83 ec 50          	sub    rsp,0x50
ffffffff800048b8:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff800048bc:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff800048c0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
        const second = self.read_register(0x00);
ffffffff800048c4:	8b 06                	mov    eax,DWORD PTR [rsi]
ffffffff800048c6:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
ffffffff800048c9:	31 c0                	xor    eax,eax
ffffffff800048cb:	48 8d 7d d0          	lea    rdi,[rbp-0x30]
ffffffff800048cf:	31 f6                	xor    esi,esi
ffffffff800048d1:	e8 da 60 00 00       	call   ffffffff8000a9b0 <rtc.RTC.read_register>
ffffffff800048d6:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff800048da:	88 45 bb             	mov    BYTE PTR [rbp-0x45],al
ffffffff800048dd:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
        const minute = self.read_register(0x02);
ffffffff800048e0:	8b 06                	mov    eax,DWORD PTR [rsi]
ffffffff800048e2:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff800048e5:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
ffffffff800048e9:	be 02 00 00 00       	mov    esi,0x2
ffffffff800048ee:	e8 bd 60 00 00       	call   ffffffff8000a9b0 <rtc.RTC.read_register>
ffffffff800048f3:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff800048f7:	88 45 bc             	mov    BYTE PTR [rbp-0x44],al
ffffffff800048fa:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
        const hour = self.read_register(0x04);
ffffffff800048fd:	8b 06                	mov    eax,DWORD PTR [rsi]
ffffffff800048ff:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80004902:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80004906:	be 04 00 00 00       	mov    esi,0x4
ffffffff8000490b:	e8 a0 60 00 00       	call   ffffffff8000a9b0 <rtc.RTC.read_register>
ffffffff80004910:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff80004914:	88 45 bd             	mov    BYTE PTR [rbp-0x43],al
ffffffff80004917:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
        const day = self.read_register(0x07);
ffffffff8000491a:	8b 06                	mov    eax,DWORD PTR [rsi]
ffffffff8000491c:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000491f:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
ffffffff80004923:	be 07 00 00 00       	mov    esi,0x7
ffffffff80004928:	e8 83 60 00 00       	call   ffffffff8000a9b0 <rtc.RTC.read_register>
ffffffff8000492d:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff80004931:	88 45 be             	mov    BYTE PTR [rbp-0x42],al
ffffffff80004934:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
        const month = self.read_register(0x08);
ffffffff80004937:	8b 06                	mov    eax,DWORD PTR [rsi]
ffffffff80004939:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff8000493c:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80004940:	be 08 00 00 00       	mov    esi,0x8
ffffffff80004945:	e8 66 60 00 00       	call   ffffffff8000a9b0 <rtc.RTC.read_register>
ffffffff8000494a:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff8000494e:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
ffffffff80004951:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
        const year = self.read_register(0x09);
ffffffff80004954:	8b 06                	mov    eax,DWORD PTR [rsi]
ffffffff80004956:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80004959:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
ffffffff8000495d:	be 09 00 00 00       	mov    esi,0x9
ffffffff80004962:	e8 49 60 00 00       	call   ffffffff8000a9b0 <rtc.RTC.read_register>
ffffffff80004967:	44 8a 55 bb          	mov    r10b,BYTE PTR [rbp-0x45]
ffffffff8000496b:	44 8a 4d bc          	mov    r9b,BYTE PTR [rbp-0x44]
ffffffff8000496f:	44 8a 45 bd          	mov    r8b,BYTE PTR [rbp-0x43]
ffffffff80004973:	40 8a 75 be          	mov    sil,BYTE PTR [rbp-0x42]
ffffffff80004977:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
ffffffff8000497a:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff8000497e:	88 c1                	mov    cl,al
ffffffff80004980:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80004984:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
        const century = 20;

        return Date{
ffffffff80004987:	44 88 17             	mov    BYTE PTR [rdi],r10b
ffffffff8000498a:	44 88 4f 02          	mov    BYTE PTR [rdi+0x2],r9b
ffffffff8000498e:	44 88 47 01          	mov    BYTE PTR [rdi+0x1],r8b
ffffffff80004992:	40 88 77 03          	mov    BYTE PTR [rdi+0x3],sil
ffffffff80004996:	88 57 04             	mov    BYTE PTR [rdi+0x4],dl
ffffffff80004999:	88 4f 05             	mov    BYTE PTR [rdi+0x5],cl
ffffffff8000499c:	c6 47 06 14          	mov    BYTE PTR [rdi+0x6],0x14
ffffffff800049a0:	48 83 c4 50          	add    rsp,0x50
ffffffff800049a4:	5d                   	pop    rbp
ffffffff800049a5:	c3                   	ret
ffffffff800049a6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800049ad:	00 00 00 

ffffffff800049b0 <mem.free>:
}

pub fn free(page: *anyopaque) void {
ffffffff800049b0:	55                   	push   rbp
ffffffff800049b1:	48 89 e5             	mov    rbp,rsp
ffffffff800049b4:	48 83 ec 20          	sub    rsp,0x20
ffffffff800049b8:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff800049bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    const new = @ptrCast(*PageAllocatorEntry, @alignCast(8, page));
ffffffff800049c0:	48 83 e7 07          	and    rdi,0x7
ffffffff800049c4:	48 83 ff 00          	cmp    rdi,0x0
ffffffff800049c8:	75 02                	jne    ffffffff800049cc <mem.free+0x1c>
ffffffff800049ca:	eb 1c                	jmp    ffffffff800049e8 <mem.free+0x38>
ffffffff800049cc:	48 c7 c7 39 b3 01 80 	mov    rdi,0xffffffff8001b339
ffffffff800049d3:	48 c7 c1 38 bf 01 80 	mov    rcx,0xffffffff8001bf38
ffffffff800049da:	31 c0                	xor    eax,eax
ffffffff800049dc:	89 c2                	mov    edx,eax
ffffffff800049de:	be 13 00 00 00       	mov    esi,0x13
ffffffff800049e3:	e8 c8 b7 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800049e8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800049ec:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800049f0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    new.next = next_page;
ffffffff800049f4:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff800049f8:	48 8b 15 31 98 01 00 	mov    rdx,QWORD PTR [rip+0x19831]        # ffffffff8001e230 <mem.next_page>
ffffffff800049ff:	48 89 11             	mov    QWORD PTR [rcx],rdx
    next_page = new;
ffffffff80004a02:	48 89 05 27 98 01 00 	mov    QWORD PTR [rip+0x19827],rax        # ffffffff8001e230 <mem.next_page>
ffffffff80004a09:	48 83 c4 20          	add    rsp,0x20
ffffffff80004a0d:	5d                   	pop    rbp
ffffffff80004a0e:	c3                   	ret
ffffffff80004a0f:	90                   	nop

ffffffff80004a10 <debug.panicExtra__anon_1903>:
pub fn panicExtra(
    trace: ?*std.builtin.StackTrace,
    ret_addr: ?usize,
    comptime format: []const u8,
    args: anytype,
) noreturn {
ffffffff80004a10:	55                   	push   rbp
ffffffff80004a11:	48 89 e5             	mov    rbp,rsp
ffffffff80004a14:	b8 c0 11 00 00       	mov    eax,0x11c0
ffffffff80004a19:	e8 d2 33 01 00       	call   ffffffff80017df0 <__zig_probe_stack>
ffffffff80004a1e:	48 29 c4             	sub    rsp,rax
ffffffff80004a21:	48 89 95 68 ee ff ff 	mov    QWORD PTR [rbp-0x1198],rdx
ffffffff80004a28:	48 89 b5 70 ee ff ff 	mov    QWORD PTR [rbp-0x1190],rsi
ffffffff80004a2f:	48 89 bd 78 ee ff ff 	mov    QWORD PTR [rbp-0x1188],rdi
ffffffff80004a36:	48 89 bd 90 ee ff ff 	mov    QWORD PTR [rbp-0x1170],rdi
ffffffff80004a3d:	48 8d 85 98 ee ff ff 	lea    rax,[rbp-0x1168]
ffffffff80004a44:	48 89 85 a0 ef ff ff 	mov    QWORD PTR [rbp-0x1060],rax
ffffffff80004a4b:	48 c7 85 a8 ef ff ff 	mov    QWORD PTR [rbp-0x1058],0x20
ffffffff80004a52:	20 00 00 00 
ffffffff80004a56:	48 c7 85 98 ef ff ff 	mov    QWORD PTR [rbp-0x1068],0x0
ffffffff80004a5d:	00 00 00 00 
ffffffff80004a61:	48 8b 85 98 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1068]
ffffffff80004a68:	48 89 85 80 ee ff ff 	mov    QWORD PTR [rbp-0x1180],rax
    @setCold(true);

    const size = 0x1000;
    const trunc_msg = "(msg truncated)";
ffffffff80004a6f:	48 c7 85 b0 ef ff ff 	mov    QWORD PTR [rbp-0x1050],0xffffffff8001b47e
ffffffff80004a76:	7e b4 01 80 
ffffffff80004a7a:	48 8d bd b9 ef ff ff 	lea    rdi,[rbp-0x1047]
ffffffff80004a81:	be aa 00 00 00       	mov    esi,0xaa
ffffffff80004a86:	ba 0f 10 00 00       	mov    edx,0x100f
    var buf: [size + trunc_msg.len]u8 = undefined;
ffffffff80004a8b:	e8 70 34 01 00       	call   ffffffff80017f00 <memset>
    // a minor annoyance with this is that it will result in the NoSpaceLeft
    // error being part of the @panic stack trace (but that error should
    // only happen rarely)
    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {
ffffffff80004a90:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80004a97:	48 89 85 88 ee ff ff 	mov    QWORD PTR [rbp-0x1178],rax
ffffffff80004a9e:	b0 01                	mov    al,0x1
ffffffff80004aa0:	a8 01                	test   al,0x1
ffffffff80004aa2:	75 02                	jne    ffffffff80004aa6 <debug.panicExtra__anon_1903+0x96>
ffffffff80004aa4:	eb 02                	jmp    ffffffff80004aa8 <debug.panicExtra__anon_1903+0x98>
ffffffff80004aa6:	eb 10                	jmp    ffffffff80004ab8 <debug.panicExtra__anon_1903+0xa8>
ffffffff80004aa8:	31 c0                	xor    eax,eax
ffffffff80004aaa:	31 c0                	xor    eax,eax
ffffffff80004aac:	89 c7                	mov    edi,eax
ffffffff80004aae:	be 00 10 00 00       	mov    esi,0x1000
ffffffff80004ab3:	e8 58 b8 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80004ab8:	4c 8b 85 68 ee ff ff 	mov    r8,QWORD PTR [rbp-0x1198]
ffffffff80004abf:	48 8b 95 88 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1178]
ffffffff80004ac6:	b9 00 10 00 00       	mov    ecx,0x1000
ffffffff80004acb:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff80004acf:	48 8d b5 98 ef ff ff 	lea    rsi,[rbp-0x1068]
ffffffff80004ad6:	e8 85 6d 00 00       	call   ffffffff8000b860 <fmt.bufPrint__anon_3026>
ffffffff80004adb:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
ffffffff80004ae0:	75 1b                	jne    ffffffff80004afd <debug.panicExtra__anon_1903+0xed>
ffffffff80004ae2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff80004ae6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004aea:	48 89 8d 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rcx
ffffffff80004af1:	48 89 85 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rax
ffffffff80004af8:	e9 aa 00 00 00       	jmp    ffffffff80004ba7 <debug.panicExtra__anon_1903+0x197>
ffffffff80004afd:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
ffffffff80004b01:	66 83 e8 09          	sub    ax,0x9
ffffffff80004b05:	74 1e                	je     ffffffff80004b25 <debug.panicExtra__anon_1903+0x115>
ffffffff80004b07:	eb 00                	jmp    ffffffff80004b09 <debug.panicExtra__anon_1903+0xf9>
ffffffff80004b09:	48 c7 c7 9b b1 01 80 	mov    rdi,0xffffffff8001b19b
ffffffff80004b10:	48 c7 c1 48 bf 01 80 	mov    rcx,0xffffffff8001bf48
ffffffff80004b17:	31 c0                	xor    eax,eax
ffffffff80004b19:	89 c2                	mov    edx,eax
ffffffff80004b1b:	be 17 00 00 00       	mov    esi,0x17
ffffffff80004b20:	e8 8b b6 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
        std.fmt.BufPrintError.NoSpaceLeft => blk: {
            std.mem.copy(u8, buf[size..], trunc_msg);
ffffffff80004b25:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80004b2c:	48 05 00 10 00 00    	add    rax,0x1000
ffffffff80004b32:	48 89 85 50 ee ff ff 	mov    QWORD PTR [rbp-0x11b0],rax
ffffffff80004b39:	b0 01                	mov    al,0x1
ffffffff80004b3b:	a8 01                	test   al,0x1
ffffffff80004b3d:	75 02                	jne    ffffffff80004b41 <debug.panicExtra__anon_1903+0x131>
ffffffff80004b3f:	eb 02                	jmp    ffffffff80004b43 <debug.panicExtra__anon_1903+0x133>
ffffffff80004b41:	eb 0f                	jmp    ffffffff80004b52 <debug.panicExtra__anon_1903+0x142>
ffffffff80004b43:	bf 00 10 00 00       	mov    edi,0x1000
ffffffff80004b48:	be 0f 10 00 00       	mov    esi,0x100f
ffffffff80004b4d:	e8 be b7 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80004b52:	48 8b bd 50 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11b0]
ffffffff80004b59:	be 0f 00 00 00       	mov    esi,0xf
ffffffff80004b5e:	48 c7 c2 7e b4 01 80 	mov    rdx,0xffffffff8001b47e
ffffffff80004b65:	b9 0f 00 00 00       	mov    ecx,0xf
ffffffff80004b6a:	e8 31 6e 00 00       	call   ffffffff8000b9a0 <mem.copy__anon_3027>
ffffffff80004b6f:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80004b76:	48 89 85 48 ee ff ff 	mov    QWORD PTR [rbp-0x11b8],rax
ffffffff80004b7d:	48 8b 85 80 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1180]
ffffffff80004b84:	48 8b 8d 48 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11b8]
    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {
ffffffff80004b8b:	48 89 85 98 ef ff ff 	mov    QWORD PTR [rbp-0x1068],rax
ffffffff80004b92:	b8 0f 10 00 00       	mov    eax,0x100f
ffffffff80004b97:	48 89 8d 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rcx
ffffffff80004b9e:	48 89 85 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rax
ffffffff80004ba5:	eb 00                	jmp    ffffffff80004ba7 <debug.panicExtra__anon_1903+0x197>
ffffffff80004ba7:	48 8b 8d 70 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x1190]
ffffffff80004bae:	48 8b 95 78 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1188]
ffffffff80004bb5:	48 8b 85 58 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11a8]
ffffffff80004bbc:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
ffffffff80004bc3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80004bc7:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            break :blk &buf;
        },
    };
    std.builtin.panic(msg, trace, ret_addr);
ffffffff80004bcb:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
ffffffff80004bcf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80004bd3:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80004bd7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
ffffffff80004bdb:	e8 d0 b5 ff ff       	call   ffffffff800001b0 <builtin.default_panic>

ffffffff80004be0 <ports.SerialPort.new>:
    pub fn new(base: u16) @This() {
ffffffff80004be0:	55                   	push   rbp
ffffffff80004be1:	48 89 e5             	mov    rbp,rsp
ffffffff80004be4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffffffff80004beb:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
ffffffff80004bef:	66 89 f0             	mov    ax,si
ffffffff80004bf2:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff80004bf6:	48 89 7d 80          	mov    QWORD PTR [rbp-0x80],rdi
ffffffff80004bfa:	66 89 45 a6          	mov    WORD PTR [rbp-0x5a],ax
            .data = Port(u8).new(base),
ffffffff80004bfe:	66 89 c6             	mov    si,ax
ffffffff80004c01:	48 8d 7d a8          	lea    rdi,[rbp-0x58]
ffffffff80004c05:	e8 f6 01 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff80004c0a:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff80004c0e:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80004c12:	66 8b 4d a8          	mov    cx,WORD PTR [rbp-0x58]
ffffffff80004c16:	66 89 0f             	mov    WORD PTR [rdi],cx
ffffffff80004c19:	48 83 c7 02          	add    rdi,0x2
ffffffff80004c1d:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
            .int_en = Port(u8).new(base + 1),
ffffffff80004c21:	66 ff c0             	inc    ax
ffffffff80004c24:	66 89 45 b0          	mov    WORD PTR [rbp-0x50],ax
ffffffff80004c28:	0f 94 45 b2          	sete   BYTE PTR [rbp-0x4e]
ffffffff80004c2c:	8a 45 b2             	mov    al,BYTE PTR [rbp-0x4e]
ffffffff80004c2f:	84 c0                	test   al,al
ffffffff80004c31:	75 04                	jne    ffffffff80004c37 <ports.SerialPort.new+0x57>
ffffffff80004c33:	eb 00                	jmp    ffffffff80004c35 <ports.SerialPort.new+0x55>
ffffffff80004c35:	eb 1c                	jmp    ffffffff80004c53 <ports.SerialPort.new+0x73>
ffffffff80004c37:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80004c3e:	48 c7 c1 e8 b8 01 80 	mov    rcx,0xffffffff8001b8e8
ffffffff80004c45:	31 c0                	xor    eax,eax
ffffffff80004c47:	89 c2                	mov    edx,eax
ffffffff80004c49:	be 10 00 00 00       	mov    esi,0x10
ffffffff80004c4e:	e8 5d b5 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80004c53:	0f b7 75 b0          	movzx  esi,WORD PTR [rbp-0x50]
ffffffff80004c57:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
ffffffff80004c5b:	e8 a0 01 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff80004c60:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffffffff80004c64:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff80004c68:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80004c6c:	66 8b 75 b8          	mov    si,WORD PTR [rbp-0x48]
ffffffff80004c70:	66 89 32             	mov    WORD PTR [rdx],si
ffffffff80004c73:	48 83 c1 04          	add    rcx,0x4
ffffffff80004c77:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
            .fifo_ctrl = Port(u8).new(base + 2),
ffffffff80004c7e:	66 83 c0 02          	add    ax,0x2
ffffffff80004c82:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
ffffffff80004c86:	0f 92 45 c2          	setb   BYTE PTR [rbp-0x3e]
ffffffff80004c8a:	8a 45 c2             	mov    al,BYTE PTR [rbp-0x3e]
ffffffff80004c8d:	84 c0                	test   al,al
ffffffff80004c8f:	75 04                	jne    ffffffff80004c95 <ports.SerialPort.new+0xb5>
ffffffff80004c91:	eb 00                	jmp    ffffffff80004c93 <ports.SerialPort.new+0xb3>
ffffffff80004c93:	eb 1c                	jmp    ffffffff80004cb1 <ports.SerialPort.new+0xd1>
ffffffff80004c95:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80004c9c:	48 c7 c1 f8 b8 01 80 	mov    rcx,0xffffffff8001b8f8
ffffffff80004ca3:	31 c0                	xor    eax,eax
ffffffff80004ca5:	89 c2                	mov    edx,eax
ffffffff80004ca7:	be 10 00 00 00       	mov    esi,0x10
ffffffff80004cac:	e8 ff b4 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80004cb1:	0f b7 75 c0          	movzx  esi,WORD PTR [rbp-0x40]
ffffffff80004cb5:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff80004cb9:	e8 42 01 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff80004cbe:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff80004cc5:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff80004cc9:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80004ccd:	66 8b 75 c8          	mov    si,WORD PTR [rbp-0x38]
ffffffff80004cd1:	66 89 32             	mov    WORD PTR [rdx],si
ffffffff80004cd4:	48 83 c1 06          	add    rcx,0x6
ffffffff80004cd8:	48 89 8d 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rcx
            .line_ctrl = Port(u8).new(base + 3),
ffffffff80004cdf:	66 83 c0 03          	add    ax,0x3
ffffffff80004ce3:	66 89 45 d0          	mov    WORD PTR [rbp-0x30],ax
ffffffff80004ce7:	0f 92 45 d2          	setb   BYTE PTR [rbp-0x2e]
ffffffff80004ceb:	8a 45 d2             	mov    al,BYTE PTR [rbp-0x2e]
ffffffff80004cee:	84 c0                	test   al,al
ffffffff80004cf0:	75 04                	jne    ffffffff80004cf6 <ports.SerialPort.new+0x116>
ffffffff80004cf2:	eb 00                	jmp    ffffffff80004cf4 <ports.SerialPort.new+0x114>
ffffffff80004cf4:	eb 1c                	jmp    ffffffff80004d12 <ports.SerialPort.new+0x132>
ffffffff80004cf6:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80004cfd:	48 c7 c1 08 b9 01 80 	mov    rcx,0xffffffff8001b908
ffffffff80004d04:	31 c0                	xor    eax,eax
ffffffff80004d06:	89 c2                	mov    edx,eax
ffffffff80004d08:	be 10 00 00 00       	mov    esi,0x10
ffffffff80004d0d:	e8 9e b4 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80004d12:	0f b7 75 d0          	movzx  esi,WORD PTR [rbp-0x30]
ffffffff80004d16:	48 8d 7d d8          	lea    rdi,[rbp-0x28]
ffffffff80004d1a:	e8 e1 00 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff80004d1f:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffffffff80004d26:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff80004d2a:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80004d2e:	66 8b 75 d8          	mov    si,WORD PTR [rbp-0x28]
ffffffff80004d32:	66 89 32             	mov    WORD PTR [rdx],si
ffffffff80004d35:	48 83 c1 08          	add    rcx,0x8
ffffffff80004d39:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
            .modem_ctrl = Port(u8).new(base + 4),
ffffffff80004d40:	66 83 c0 04          	add    ax,0x4
ffffffff80004d44:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
ffffffff80004d48:	0f 92 45 e2          	setb   BYTE PTR [rbp-0x1e]
ffffffff80004d4c:	8a 45 e2             	mov    al,BYTE PTR [rbp-0x1e]
ffffffff80004d4f:	84 c0                	test   al,al
ffffffff80004d51:	75 04                	jne    ffffffff80004d57 <ports.SerialPort.new+0x177>
ffffffff80004d53:	eb 00                	jmp    ffffffff80004d55 <ports.SerialPort.new+0x175>
ffffffff80004d55:	eb 1c                	jmp    ffffffff80004d73 <ports.SerialPort.new+0x193>
ffffffff80004d57:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80004d5e:	48 c7 c1 18 b9 01 80 	mov    rcx,0xffffffff8001b918
ffffffff80004d65:	31 c0                	xor    eax,eax
ffffffff80004d67:	89 c2                	mov    edx,eax
ffffffff80004d69:	be 10 00 00 00       	mov    esi,0x10
ffffffff80004d6e:	e8 3d b4 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80004d73:	0f b7 75 e0          	movzx  esi,WORD PTR [rbp-0x20]
ffffffff80004d77:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
ffffffff80004d7b:	e8 80 00 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff80004d80:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff80004d87:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff80004d8b:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80004d8f:	66 8b 75 e8          	mov    si,WORD PTR [rbp-0x18]
ffffffff80004d93:	66 89 32             	mov    WORD PTR [rdx],si
ffffffff80004d96:	48 83 c1 0a          	add    rcx,0xa
ffffffff80004d9a:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
            .line_sts = Port(u8).new(base + 5),
ffffffff80004da1:	66 83 c0 05          	add    ax,0x5
ffffffff80004da5:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
ffffffff80004da9:	0f 92 45 f2          	setb   BYTE PTR [rbp-0xe]
ffffffff80004dad:	8a 45 f2             	mov    al,BYTE PTR [rbp-0xe]
ffffffff80004db0:	84 c0                	test   al,al
ffffffff80004db2:	75 04                	jne    ffffffff80004db8 <ports.SerialPort.new+0x1d8>
ffffffff80004db4:	eb 00                	jmp    ffffffff80004db6 <ports.SerialPort.new+0x1d6>
ffffffff80004db6:	eb 1c                	jmp    ffffffff80004dd4 <ports.SerialPort.new+0x1f4>
ffffffff80004db8:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80004dbf:	48 c7 c1 28 b9 01 80 	mov    rcx,0xffffffff8001b928
ffffffff80004dc6:	31 c0                	xor    eax,eax
ffffffff80004dc8:	89 c2                	mov    edx,eax
ffffffff80004dca:	be 10 00 00 00       	mov    esi,0x10
ffffffff80004dcf:	e8 dc b3 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80004dd4:	66 8b 45 f0          	mov    ax,WORD PTR [rbp-0x10]
ffffffff80004dd8:	66 89 c6             	mov    si,ax
ffffffff80004ddb:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
ffffffff80004ddf:	e8 1c 00 00 00       	call   ffffffff80004e00 <ports.Port(u8).new>
ffffffff80004de4:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
ffffffff80004deb:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80004def:	66 8b 55 f8          	mov    dx,WORD PTR [rbp-0x8]
ffffffff80004df3:	66 89 11             	mov    WORD PTR [rcx],dx
        return SerialPort{
ffffffff80004df6:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff80004dfd:	5d                   	pop    rbp
ffffffff80004dfe:	c3                   	ret
ffffffff80004dff:	90                   	nop

ffffffff80004e00 <ports.Port(u8).new>:
        pub fn new(port: u16) Self {
ffffffff80004e00:	55                   	push   rbp
ffffffff80004e01:	48 89 e5             	mov    rbp,rsp
ffffffff80004e04:	48 83 ec 02          	sub    rsp,0x2
ffffffff80004e08:	66 89 f1             	mov    cx,si
ffffffff80004e0b:	48 89 f8             	mov    rax,rdi
ffffffff80004e0e:	66 89 4d fe          	mov    WORD PTR [rbp-0x2],cx
            return Self{ .port = port };
ffffffff80004e12:	66 89 0f             	mov    WORD PTR [rdi],cx
ffffffff80004e15:	48 83 c4 02          	add    rsp,0x2
ffffffff80004e19:	5d                   	pop    rbp
ffffffff80004e1a:	c3                   	ret
ffffffff80004e1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80004e20 <ports.Port(u8).write>:
        pub fn write(self: Self, value: T) void {
ffffffff80004e20:	55                   	push   rbp
ffffffff80004e21:	48 89 e5             	mov    rbp,rsp
ffffffff80004e24:	48 83 ec 01          	sub    rsp,0x1
ffffffff80004e28:	40 88 f0             	mov    al,sil
ffffffff80004e2b:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
                      [port] "N{dx}" (self.port),
ffffffff80004e2e:	66 8b 17             	mov    dx,WORD PTR [rdi]
ffffffff80004e31:	ee                   	out    dx,al
ffffffff80004e32:	48 83 c4 01          	add    rsp,0x1
ffffffff80004e36:	5d                   	pop    rbp
ffffffff80004e37:	c3                   	ret
ffffffff80004e38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80004e3f:	00 

ffffffff80004e40 <fmt.format__anon_2427>:
) !void {
ffffffff80004e40:	55                   	push   rbp
ffffffff80004e41:	48 89 e5             	mov    rbp,rsp
ffffffff80004e44:	48 83 ec 30          	sub    rsp,0x30
ffffffff80004e48:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff80004e4c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80004e50:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80004e54:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80004e57:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80004e5b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80004e5e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80004e61:	b0 01                	mov    al,0x1
ffffffff80004e63:	a8 01                	test   al,0x1
ffffffff80004e65:	75 02                	jne    ffffffff80004e69 <fmt.format__anon_2427+0x29>
ffffffff80004e67:	eb 02                	jmp    ffffffff80004e6b <fmt.format__anon_2427+0x2b>
ffffffff80004e69:	eb 10                	jmp    ffffffff80004e7b <fmt.format__anon_2427+0x3b>
ffffffff80004e6b:	31 c0                	xor    eax,eax
ffffffff80004e6d:	31 c0                	xor    eax,eax
ffffffff80004e6f:	89 c7                	mov    edi,eax
ffffffff80004e71:	be 0b 00 00 00       	mov    esi,0xb
ffffffff80004e76:	e8 95 b4 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80004e7b:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80004e7f:	48 c7 c2 4d b3 01 80 	mov    rdx,0xffffffff8001b34d
ffffffff80004e86:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff80004e8a:	b9 0b 00 00 00       	mov    ecx,0xb
ffffffff80004e8f:	e8 bc b4 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80004e94:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80004e98:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80004e9c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80004ea0:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80004ea7:	00 
        try formatType(
ffffffff80004ea8:	8a 00                	mov    al,BYTE PTR [rax]
            std.options.fmt_max_depth,
ffffffff80004eaa:	0f b6 f0             	movzx  esi,al
ffffffff80004ead:	48 c7 c2 90 a1 01 80 	mov    rdx,0xffffffff8001a190
ffffffff80004eb4:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80004eba:	e8 11 00 00 00       	call   ffffffff80004ed0 <fmt.formatType__anon_2439>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80004ebf:	31 c0                	xor    eax,eax
ffffffff80004ec1:	48 83 c4 30          	add    rsp,0x30
ffffffff80004ec5:	5d                   	pop    rbp
ffffffff80004ec6:	c3                   	ret
ffffffff80004ec7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80004ece:	00 00 

ffffffff80004ed0 <fmt.formatType__anon_2439>:
) @TypeOf(writer).Error!void {
ffffffff80004ed0:	55                   	push   rbp
ffffffff80004ed1:	48 89 e5             	mov    rbp,rsp
ffffffff80004ed4:	48 83 ec 30          	sub    rsp,0x30
ffffffff80004ed8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80004edc:	40 88 f0             	mov    al,sil
ffffffff80004edf:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff80004ee2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff80004ee6:	48 be aa aa aa aa aa 	movabs rsi,0xaaaaaaaaaaaaaaaa
ffffffff80004eed:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80004ef0:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
ffffffff80004ef4:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80004efb:	00 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80004efc:	0f b6 f0             	movzx  esi,al
ffffffff80004eff:	e8 2c 94 00 00       	call   ffffffff8000e330 <fmt.formatValue__anon_3048>
ffffffff80004f04:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80004f08:	b0 01                	mov    al,0x1
ffffffff80004f0a:	a8 01                	test   al,0x1
ffffffff80004f0c:	75 02                	jne    ffffffff80004f10 <fmt.formatType__anon_2439+0x40>
ffffffff80004f0e:	eb 0a                	jmp    ffffffff80004f1a <fmt.formatType__anon_2439+0x4a>
ffffffff80004f10:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80004f14:	48 83 c4 30          	add    rsp,0x30
ffffffff80004f18:	5d                   	pop    rbp
ffffffff80004f19:	c3                   	ret
ffffffff80004f1a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80004f1e:	e8 ed e4 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80004f23:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80004f27:	48 83 c4 30          	add    rsp,0x30
ffffffff80004f2b:	5d                   	pop    rbp
ffffffff80004f2c:	c3                   	ret
ffffffff80004f2d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80004f30 <main.debug_print__anon_2426>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80004f30:	55                   	push   rbp
ffffffff80004f31:	48 89 e5             	mov    rbp,rsp
ffffffff80004f34:	48 83 ec 30          	sub    rsp,0x30
ffffffff80004f38:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80004f3c:	48 89 fe             	mov    rsi,rdi
ffffffff80004f3f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80004f43:	48 c7 c2 b8 a1 01 80 	mov    rdx,0xffffffff8001a1b8
ffffffff80004f4a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80004f51:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80004f55:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff80004f5b:	e8 e0 b5 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80004f60:	48 c7 c6 c4 a1 01 80 	mov    rsi,0xffffffff8001a1c4
ffffffff80004f67:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff80004f6b:	e8 80 b6 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80004f70:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80004f74:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80004f78:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80004f7c:	e8 bf fe ff ff       	call   ffffffff80004e40 <fmt.format__anon_2427>
ffffffff80004f81:	31 c0                	xor    eax,eax
ffffffff80004f83:	48 83 c4 30          	add    rsp,0x30
ffffffff80004f87:	5d                   	pop    rbp
ffffffff80004f88:	c3                   	ret
ffffffff80004f89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80004f90 <fmt.format__anon_2444>:
) !void {
ffffffff80004f90:	55                   	push   rbp
ffffffff80004f91:	48 89 e5             	mov    rbp,rsp
ffffffff80004f94:	48 83 ec 40          	sub    rsp,0x40
ffffffff80004f98:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80004f9c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff80004fa0:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80004fa4:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80004fa7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80004fab:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80004fae:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80004fb1:	b0 01                	mov    al,0x1
ffffffff80004fb3:	a8 01                	test   al,0x1
ffffffff80004fb5:	75 02                	jne    ffffffff80004fb9 <fmt.format__anon_2444+0x29>
ffffffff80004fb7:	eb 02                	jmp    ffffffff80004fbb <fmt.format__anon_2444+0x2b>
ffffffff80004fb9:	eb 10                	jmp    ffffffff80004fcb <fmt.format__anon_2444+0x3b>
ffffffff80004fbb:	31 c0                	xor    eax,eax
ffffffff80004fbd:	31 c0                	xor    eax,eax
ffffffff80004fbf:	89 c7                	mov    edi,eax
ffffffff80004fc1:	be 0c 00 00 00       	mov    esi,0xc
ffffffff80004fc6:	e8 45 b3 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80004fcb:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80004fcf:	48 c7 c2 5b b3 01 80 	mov    rdx,0xffffffff8001b35b
ffffffff80004fd6:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff80004fda:	b9 0c 00 00 00       	mov    ecx,0xc
ffffffff80004fdf:	e8 6c b3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80004fe4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80004fe8:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffffffff80004fec:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80004ff0:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80004ff7:	00 
            std.options.fmt_max_depth,
ffffffff80004ff8:	48 c7 c2 50 a2 01 80 	mov    rdx,0xffffffff8001a250
ffffffff80004fff:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80005005:	e8 56 00 00 00       	call   ffffffff80005060 <fmt.formatType__anon_2456>
ffffffff8000500a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000500e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80005011:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80005015:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80005018:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000501b:	b0 01                	mov    al,0x1
ffffffff8000501d:	a8 01                	test   al,0x1
ffffffff8000501f:	75 02                	jne    ffffffff80005023 <fmt.format__anon_2444+0x93>
ffffffff80005021:	eb 02                	jmp    ffffffff80005025 <fmt.format__anon_2444+0x95>
ffffffff80005023:	eb 0f                	jmp    ffffffff80005034 <fmt.format__anon_2444+0xa4>
ffffffff80005025:	bf 0e 00 00 00       	mov    edi,0xe
ffffffff8000502a:	be 0f 00 00 00       	mov    esi,0xf
ffffffff8000502f:	e8 dc b2 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80005034:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80005038:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000503c:	48 c7 c2 69 b3 01 80 	mov    rdx,0xffffffff8001b369
ffffffff80005043:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80005048:	e8 03 b3 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff8000504d:	31 c0                	xor    eax,eax
ffffffff8000504f:	48 83 c4 40          	add    rsp,0x40
ffffffff80005053:	5d                   	pop    rbp
ffffffff80005054:	c3                   	ret
ffffffff80005055:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000505c:	00 00 00 
ffffffff8000505f:	90                   	nop

ffffffff80005060 <fmt.formatType__anon_2456>:
) @TypeOf(writer).Error!void {
ffffffff80005060:	55                   	push   rbp
ffffffff80005061:	48 89 e5             	mov    rbp,rsp
ffffffff80005064:	48 81 ec 80 02 00 00 	sub    rsp,0x280
ffffffff8000506b:	4c 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],r8
ffffffff80005072:	48 89 8d d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rcx
ffffffff80005079:	48 89 95 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdx
ffffffff80005080:	48 89 b5 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rsi
ffffffff80005087:	48 89 bd e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rdi
ffffffff8000508e:	4c 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],r8
ffffffff80005095:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000509c:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000509f:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
ffffffff800050a6:	48 c7 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],0x0
ffffffff800050ad:	00 00 00 00 
            try writer.writeAll(@typeName(T));
ffffffff800050b1:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff800050b4:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff800050bb:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff800050be:	89 85 18 fe ff ff    	mov    DWORD PTR [rbp-0x1e8],eax
ffffffff800050c4:	48 c7 c2 9d b4 01 80 	mov    rdx,0xffffffff8001b49d
ffffffff800050cb:	48 8d b5 10 fe ff ff 	lea    rsi,[rbp-0x1f0]
ffffffff800050d2:	b9 17 00 00 00       	mov    ecx,0x17
ffffffff800050d7:	e8 74 b2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800050dc:	4c 8b 85 f0 fd ff ff 	mov    r8,QWORD PTR [rbp-0x210]
            if (max_depth == 0) {
ffffffff800050e3:	49 83 f8 00          	cmp    r8,0x0
ffffffff800050e7:	75 48                	jne    ffffffff80005131 <fmt.formatType__anon_2456+0xd1>
ffffffff800050e9:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800050f0:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                return writer.writeAll("{ ... }");
ffffffff800050f7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800050fa:	48 89 8d 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rcx
ffffffff80005101:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80005104:	89 85 28 fe ff ff    	mov    DWORD PTR [rbp-0x1d8],eax
ffffffff8000510a:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80005111:	48 8d b5 20 fe ff ff 	lea    rsi,[rbp-0x1e0]
ffffffff80005118:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000511d:	e8 2e b2 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005122:	66 89 85 1e fe ff ff 	mov    WORD PTR [rbp-0x1e2],ax
ffffffff80005129:	b0 01                	mov    al,0x1
ffffffff8000512b:	a8 01                	test   al,0x1
ffffffff8000512d:	75 04                	jne    ffffffff80005133 <fmt.formatType__anon_2456+0xd3>
ffffffff8000512f:	eb 12                	jmp    ffffffff80005143 <fmt.formatType__anon_2456+0xe3>
ffffffff80005131:	eb 2c                	jmp    ffffffff8000515f <fmt.formatType__anon_2456+0xff>
ffffffff80005133:	66 8b 85 1e fe ff ff 	mov    ax,WORD PTR [rbp-0x1e2]
ffffffff8000513a:	48 81 c4 80 02 00 00 	add    rsp,0x280
ffffffff80005141:	5d                   	pop    rbp
ffffffff80005142:	c3                   	ret
ffffffff80005143:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000514a:	e8 c1 e2 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000514f:	66 8b 85 1e fe ff ff 	mov    ax,WORD PTR [rbp-0x1e2]
ffffffff80005156:	48 81 c4 80 02 00 00 	add    rsp,0x280
ffffffff8000515d:	5d                   	pop    rbp
ffffffff8000515e:	c3                   	ret
ffffffff8000515f:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005166:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
            try writer.writeAll("{");
ffffffff8000516d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80005170:	89 8d 38 fe ff ff    	mov    DWORD PTR [rbp-0x1c8],ecx
ffffffff80005176:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005179:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
ffffffff80005180:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff80005187:	48 8d b5 30 fe ff ff 	lea    rsi,[rbp-0x1d0]
ffffffff8000518e:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80005193:	e8 b8 b1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005198:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000519f:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
            inline for (info.fields, 0..) |f, i| {
ffffffff800051a6:	48 c7 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],0x0
ffffffff800051ad:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff800051b1:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800051b4:	89 8d 50 fe ff ff    	mov    DWORD PTR [rbp-0x1b0],ecx
ffffffff800051ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800051bd:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff800051c4:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff800051cb:	48 8d b5 48 fe ff ff 	lea    rsi,[rbp-0x1b8]
ffffffff800051d2:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800051d7:	e8 74 b1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800051dc:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800051e3:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(f.name);
ffffffff800051ea:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800051ed:	89 8d 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],ecx
ffffffff800051f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800051f6:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff800051fd:	48 c7 c2 b5 b4 01 80 	mov    rdx,0xffffffff8001b4b5
ffffffff80005204:	48 8d b5 58 fe ff ff 	lea    rsi,[rbp-0x1a8]
ffffffff8000520b:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff80005210:	e8 3b b1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005215:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000521c:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(" = ");
ffffffff80005223:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80005226:	89 8d 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],ecx
ffffffff8000522c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000522f:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff80005236:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000523d:	48 8d b5 68 fe ff ff 	lea    rsi,[rbp-0x198]
ffffffff80005244:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80005249:	e8 02 b1 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000524e:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff80005255:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000525c:	66 8b 09             	mov    cx,WORD PTR [rcx]
ffffffff8000525f:	66 89 8d ce fd ff ff 	mov    WORD PTR [rbp-0x232],cx
ffffffff80005266:	48 83 e8 01          	sub    rax,0x1
ffffffff8000526a:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80005271:	0f 92 85 80 fe ff ff 	setb   BYTE PTR [rbp-0x180]
ffffffff80005278:	8a 85 80 fe ff ff    	mov    al,BYTE PTR [rbp-0x180]
ffffffff8000527e:	84 c0                	test   al,al
ffffffff80005280:	75 04                	jne    ffffffff80005286 <fmt.formatType__anon_2456+0x226>
ffffffff80005282:	eb 00                	jmp    ffffffff80005284 <fmt.formatType__anon_2456+0x224>
ffffffff80005284:	eb 1c                	jmp    ffffffff800052a2 <fmt.formatType__anon_2456+0x242>
ffffffff80005286:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000528d:	48 c7 c1 d8 bf 01 80 	mov    rcx,0xffffffff8001bfd8
ffffffff80005294:	31 c0                	xor    eax,eax
ffffffff80005296:	89 c2                	mov    edx,eax
ffffffff80005298:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000529d:	e8 0e af ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800052a2:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800052a9:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff800052b0:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
ffffffff800052b7:	66 8b 85 ce fd ff ff 	mov    ax,WORD PTR [rbp-0x232]
ffffffff800052be:	4c 8b 85 78 fe ff ff 	mov    r8,QWORD PTR [rbp-0x188]
ffffffff800052c5:	66 89 c6             	mov    si,ax
ffffffff800052c8:	e8 13 98 00 00       	call   ffffffff8000eae0 <fmt.formatType__anon_3087>
ffffffff800052cd:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800052d4:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
ffffffff800052db:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x1
ffffffff800052e2:	01 00 00 00 
                    try writer.writeAll(", .");
ffffffff800052e6:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800052e9:	89 8d 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],ecx
ffffffff800052ef:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800052f2:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff800052f9:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80005300:	48 8d b5 90 fe ff ff 	lea    rsi,[rbp-0x170]
ffffffff80005307:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000530c:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
ffffffff80005313:	e8 38 b0 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005318:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000531f:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(f.name);
ffffffff80005326:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80005329:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
ffffffff8000532f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005332:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff80005339:	48 c7 c2 c0 b4 01 80 	mov    rdx,0xffffffff8001b4c0
ffffffff80005340:	48 8d b5 a0 fe ff ff 	lea    rsi,[rbp-0x160]
ffffffff80005347:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff8000534c:	e8 ff af ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005351:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005358:	48 8b 8d c0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x240]
ffffffff8000535f:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(" = ");
ffffffff80005366:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80005369:	89 95 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],edx
ffffffff8000536f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005372:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80005379:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80005380:	48 8d b5 b0 fe ff ff 	lea    rsi,[rbp-0x150]
ffffffff80005387:	e8 c4 af ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000538c:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff80005393:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000539a:	66 8b 49 02          	mov    cx,WORD PTR [rcx+0x2]
ffffffff8000539e:	66 89 8d cc fd ff ff 	mov    WORD PTR [rbp-0x234],cx
ffffffff800053a5:	48 83 e8 01          	sub    rax,0x1
ffffffff800053a9:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff800053b0:	0f 92 85 c8 fe ff ff 	setb   BYTE PTR [rbp-0x138]
ffffffff800053b7:	8a 85 c8 fe ff ff    	mov    al,BYTE PTR [rbp-0x138]
ffffffff800053bd:	84 c0                	test   al,al
ffffffff800053bf:	75 04                	jne    ffffffff800053c5 <fmt.formatType__anon_2456+0x365>
ffffffff800053c1:	eb 00                	jmp    ffffffff800053c3 <fmt.formatType__anon_2456+0x363>
ffffffff800053c3:	eb 1c                	jmp    ffffffff800053e1 <fmt.formatType__anon_2456+0x381>
ffffffff800053c5:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800053cc:	48 c7 c1 e8 bf 01 80 	mov    rcx,0xffffffff8001bfe8
ffffffff800053d3:	31 c0                	xor    eax,eax
ffffffff800053d5:	89 c2                	mov    edx,eax
ffffffff800053d7:	be 10 00 00 00       	mov    esi,0x10
ffffffff800053dc:	e8 cf ad ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800053e1:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800053e8:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff800053ef:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
ffffffff800053f6:	66 8b 85 cc fd ff ff 	mov    ax,WORD PTR [rbp-0x234]
ffffffff800053fd:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
ffffffff80005404:	66 89 c6             	mov    si,ax
ffffffff80005407:	e8 34 97 00 00       	call   ffffffff8000eb40 <fmt.formatType__anon_3088>
ffffffff8000540c:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005413:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
ffffffff8000541a:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x2
ffffffff80005421:	02 00 00 00 
                    try writer.writeAll(", .");
ffffffff80005425:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80005428:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
ffffffff8000542e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005431:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80005438:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000543f:	48 8d b5 d8 fe ff ff 	lea    rsi,[rbp-0x128]
ffffffff80005446:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000544b:	48 89 8d b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rcx
ffffffff80005452:	e8 f9 ae ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005457:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000545e:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(f.name);
ffffffff80005465:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80005468:	89 8d f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],ecx
ffffffff8000546e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005471:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80005478:	48 c7 c2 c9 b4 01 80 	mov    rdx,0xffffffff8001b4c9
ffffffff8000547f:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
ffffffff80005486:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000548b:	e8 c0 ae ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005490:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005497:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
ffffffff8000549e:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(" = ");
ffffffff800054a5:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800054a8:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffffffff800054ae:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800054b1:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff800054b8:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff800054bf:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
ffffffff800054c6:	e8 85 ae ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800054cb:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff800054d2:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff800054d9:	66 8b 49 04          	mov    cx,WORD PTR [rcx+0x4]
ffffffff800054dd:	66 89 8d be fd ff ff 	mov    WORD PTR [rbp-0x242],cx
ffffffff800054e4:	48 83 e8 01          	sub    rax,0x1
ffffffff800054e8:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff800054ef:	0f 92 85 10 ff ff ff 	setb   BYTE PTR [rbp-0xf0]
ffffffff800054f6:	8a 85 10 ff ff ff    	mov    al,BYTE PTR [rbp-0xf0]
ffffffff800054fc:	84 c0                	test   al,al
ffffffff800054fe:	75 04                	jne    ffffffff80005504 <fmt.formatType__anon_2456+0x4a4>
ffffffff80005500:	eb 00                	jmp    ffffffff80005502 <fmt.formatType__anon_2456+0x4a2>
ffffffff80005502:	eb 1c                	jmp    ffffffff80005520 <fmt.formatType__anon_2456+0x4c0>
ffffffff80005504:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000550b:	48 c7 c1 f8 bf 01 80 	mov    rcx,0xffffffff8001bff8
ffffffff80005512:	31 c0                	xor    eax,eax
ffffffff80005514:	89 c2                	mov    edx,eax
ffffffff80005516:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000551b:	e8 90 ac ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80005520:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005527:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff8000552e:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
ffffffff80005535:	66 8b 85 be fd ff ff 	mov    ax,WORD PTR [rbp-0x242]
ffffffff8000553c:	4c 8b 85 08 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf8]
ffffffff80005543:	66 89 c6             	mov    si,ax
ffffffff80005546:	e8 55 96 00 00       	call   ffffffff8000eba0 <fmt.formatType__anon_3089>
ffffffff8000554b:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005552:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
ffffffff80005559:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x3
ffffffff80005560:	03 00 00 00 
                    try writer.writeAll(", .");
ffffffff80005564:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80005567:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
ffffffff8000556d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005570:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80005577:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000557e:	48 8d b5 20 ff ff ff 	lea    rsi,[rbp-0xe0]
ffffffff80005585:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000558a:	48 89 8d a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rcx
ffffffff80005591:	e8 ba ad ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80005596:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000559d:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(f.name);
ffffffff800055a4:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800055a7:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
ffffffff800055ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800055b0:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff800055b7:	48 c7 c2 d1 b4 01 80 	mov    rdx,0xffffffff8001b4d1
ffffffff800055be:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff800055c5:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff800055ca:	e8 81 ad ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800055cf:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800055d6:	48 8b 8d a0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x260]
ffffffff800055dd:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(" = ");
ffffffff800055e4:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800055e7:	89 95 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],edx
ffffffff800055ed:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800055f0:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffffffff800055f7:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff800055fe:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff80005605:	e8 46 ad ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000560a:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff80005611:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80005618:	66 8b 49 06          	mov    cx,WORD PTR [rcx+0x6]
ffffffff8000561c:	66 89 8d ae fd ff ff 	mov    WORD PTR [rbp-0x252],cx
ffffffff80005623:	48 83 e8 01          	sub    rax,0x1
ffffffff80005627:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff8000562e:	0f 92 85 58 ff ff ff 	setb   BYTE PTR [rbp-0xa8]
ffffffff80005635:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [rbp-0xa8]
ffffffff8000563b:	84 c0                	test   al,al
ffffffff8000563d:	75 04                	jne    ffffffff80005643 <fmt.formatType__anon_2456+0x5e3>
ffffffff8000563f:	eb 00                	jmp    ffffffff80005641 <fmt.formatType__anon_2456+0x5e1>
ffffffff80005641:	eb 1c                	jmp    ffffffff8000565f <fmt.formatType__anon_2456+0x5ff>
ffffffff80005643:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000564a:	48 c7 c1 08 c0 01 80 	mov    rcx,0xffffffff8001c008
ffffffff80005651:	31 c0                	xor    eax,eax
ffffffff80005653:	89 c2                	mov    edx,eax
ffffffff80005655:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000565a:	e8 51 ab ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000565f:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005666:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff8000566d:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
ffffffff80005674:	66 8b 85 ae fd ff ff 	mov    ax,WORD PTR [rbp-0x252]
ffffffff8000567b:	4c 8b 85 50 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb0]
ffffffff80005682:	66 89 c6             	mov    si,ax
ffffffff80005685:	e8 c6 9d 00 00       	call   ffffffff8000f450 <fmt.formatType__anon_3090>
ffffffff8000568a:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005691:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
ffffffff80005698:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x4
ffffffff8000569f:	04 00 00 00 
                    try writer.writeAll(", .");
ffffffff800056a3:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800056a6:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff800056ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800056af:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff800056b6:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800056bd:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff800056c4:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800056c9:	48 89 8d 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rcx
ffffffff800056d0:	e8 7b ac ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800056d5:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800056dc:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(f.name);
ffffffff800056e3:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800056e6:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff800056e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800056ec:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff800056f3:	48 c7 c2 dc b4 01 80 	mov    rdx,0xffffffff8001b4dc
ffffffff800056fa:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff80005701:	b9 0b 00 00 00       	mov    ecx,0xb
ffffffff80005706:	e8 45 ac ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000570b:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005712:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
ffffffff80005719:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(" = ");
ffffffff80005720:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80005723:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
ffffffff80005726:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005729:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000572d:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80005734:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff80005738:	e8 13 ac ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000573d:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff80005744:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000574b:	8b 49 08             	mov    ecx,DWORD PTR [rcx+0x8]
ffffffff8000574e:	89 8d 9c fd ff ff    	mov    DWORD PTR [rbp-0x264],ecx
ffffffff80005754:	48 83 e8 01          	sub    rax,0x1
ffffffff80005758:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000575c:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80005760:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80005763:	84 c0                	test   al,al
ffffffff80005765:	75 04                	jne    ffffffff8000576b <fmt.formatType__anon_2456+0x70b>
ffffffff80005767:	eb 00                	jmp    ffffffff80005769 <fmt.formatType__anon_2456+0x709>
ffffffff80005769:	eb 1c                	jmp    ffffffff80005787 <fmt.formatType__anon_2456+0x727>
ffffffff8000576b:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80005772:	48 c7 c1 18 c0 01 80 	mov    rcx,0xffffffff8001c018
ffffffff80005779:	31 c0                	xor    eax,eax
ffffffff8000577b:	89 c2                	mov    edx,eax
ffffffff8000577d:	be 10 00 00 00       	mov    esi,0x10
ffffffff80005782:	e8 29 aa ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80005787:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000578e:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff80005795:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
ffffffff8000579c:	8b b5 9c fd ff ff    	mov    esi,DWORD PTR [rbp-0x264]
ffffffff800057a2:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff800057a6:	e8 05 9d 00 00       	call   ffffffff8000f4b0 <fmt.formatType__anon_3091>
ffffffff800057ab:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800057b2:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
ffffffff800057b9:	48 c7 45 a8 05 00 00 	mov    QWORD PTR [rbp-0x58],0x5
ffffffff800057c0:	00 
                    try writer.writeAll(", .");
ffffffff800057c1:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800057c4:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff800057c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800057ca:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800057ce:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800057d5:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff800057d9:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800057de:	48 89 8d 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rcx
ffffffff800057e5:	e8 66 ab ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800057ea:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800057f1:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(f.name);
ffffffff800057f8:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800057fb:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff800057fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005801:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80005805:	48 c7 c2 e8 b4 01 80 	mov    rdx,0xffffffff8001b4e8
ffffffff8000580c:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff80005810:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80005815:	e8 36 ab ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000581a:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff80005821:	48 8b 8d 80 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x280]
ffffffff80005828:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
                try writer.writeAll(" = ");
ffffffff8000582f:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80005832:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff80005835:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80005838:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000583c:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80005843:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff80005847:	e8 04 ab ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000584c:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff80005853:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000585a:	8b 49 0c             	mov    ecx,DWORD PTR [rcx+0xc]
ffffffff8000585d:	89 8d 8c fd ff ff    	mov    DWORD PTR [rbp-0x274],ecx
ffffffff80005863:	48 83 e8 01          	sub    rax,0x1
ffffffff80005867:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8000586b:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff8000586f:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff80005872:	84 c0                	test   al,al
ffffffff80005874:	75 04                	jne    ffffffff8000587a <fmt.formatType__anon_2456+0x81a>
ffffffff80005876:	eb 00                	jmp    ffffffff80005878 <fmt.formatType__anon_2456+0x818>
ffffffff80005878:	eb 1c                	jmp    ffffffff80005896 <fmt.formatType__anon_2456+0x836>
ffffffff8000587a:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80005881:	48 c7 c1 28 c0 01 80 	mov    rcx,0xffffffff8001c028
ffffffff80005888:	31 c0                	xor    eax,eax
ffffffff8000588a:	89 c2                	mov    edx,eax
ffffffff8000588c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80005891:	e8 1a a9 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80005896:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff8000589d:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff800058a4:	48 8b 95 d8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x228]
ffffffff800058ab:	8b b5 8c fd ff ff    	mov    esi,DWORD PTR [rbp-0x274]
ffffffff800058b1:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff800058b5:	e8 56 9c 00 00       	call   ffffffff8000f510 <fmt.formatType__anon_3092>
ffffffff800058ba:	48 8b bd e8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x218]
ffffffff800058c1:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
            try writer.writeAll(" }");
ffffffff800058c8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800058cb:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800058cf:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800058d2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800058d5:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff800058dc:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800058e0:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800058e5:	e8 66 aa ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800058ea:	31 c0                	xor    eax,eax
ffffffff800058ec:	48 81 c4 80 02 00 00 	add    rsp,0x280
ffffffff800058f3:	5d                   	pop    rbp
ffffffff800058f4:	c3                   	ret
ffffffff800058f5:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800058fc:	00 00 00 
ffffffff800058ff:	90                   	nop

ffffffff80005900 <main.debug_print__anon_2443>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff80005900:	55                   	push   rbp
ffffffff80005901:	48 89 e5             	mov    rbp,rsp
ffffffff80005904:	48 83 ec 30          	sub    rsp,0x30
ffffffff80005908:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000590c:	48 89 fe             	mov    rsi,rdi
ffffffff8000590f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff80005913:	48 c7 c2 7a a2 01 80 	mov    rdx,0xffffffff8001a27a
ffffffff8000591a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff80005921:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff80005925:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000592b:	e8 10 ac ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff80005930:	48 c7 c6 86 a2 01 80 	mov    rsi,0xffffffff8001a286
ffffffff80005937:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000593b:	e8 b0 ac ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff80005940:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80005944:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80005948:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000594c:	e8 3f f6 ff ff       	call   ffffffff80004f90 <fmt.format__anon_2444>
ffffffff80005951:	31 c0                	xor    eax,eax
ffffffff80005953:	48 83 c4 30          	add    rsp,0x30
ffffffff80005957:	5d                   	pop    rbp
ffffffff80005958:	c3                   	ret
ffffffff80005959:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80005960 <ports.SerialPort.send>:
    pub fn send(self: SerialPort, data: u8) void {
ffffffff80005960:	55                   	push   rbp
ffffffff80005961:	48 89 e5             	mov    rbp,rsp
ffffffff80005964:	48 83 ec 20          	sub    rsp,0x20
ffffffff80005968:	40 88 f0             	mov    al,sil
ffffffff8000596b:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
        self.data.write(data);
ffffffff8000596e:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
ffffffff80005971:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80005975:	8b 4f 08             	mov    ecx,DWORD PTR [rdi+0x8]
ffffffff80005978:	89 4d f8             	mov    DWORD PTR [rbp-0x8],ecx
ffffffff8000597b:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000597f:	0f b6 f0             	movzx  esi,al
ffffffff80005982:	e8 99 f4 ff ff       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff80005987:	48 83 c4 20          	add    rsp,0x20
ffffffff8000598b:	5d                   	pop    rbp
ffffffff8000598c:	c3                   	ret
ffffffff8000598d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80005990 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).write>:
        pub fn write(self: Self, bytes: []const u8) Error!usize {
ffffffff80005990:	55                   	push   rbp
ffffffff80005991:	48 89 e5             	mov    rbp,rsp
ffffffff80005994:	48 83 ec 40          	sub    rsp,0x40
ffffffff80005998:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffffffff8000599c:	48 89 c8             	mov    rax,rcx
ffffffff8000599f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff800059a3:	48 89 f9             	mov    rcx,rdi
ffffffff800059a6:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffffffff800059aa:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff800059ae:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffffffff800059b2:	49 89 f8             	mov    r8,rdi
ffffffff800059b5:	48 89 c1             	mov    rcx,rax
ffffffff800059b8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800059bc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800059c0:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
            return writeFn(self.context, bytes);
ffffffff800059c4:	e8 77 ab ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
ffffffff800059c9:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800059cd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800059d1:	48 89 07             	mov    QWORD PTR [rdi],rax
ffffffff800059d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800059d8:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
ffffffff800059dc:	b0 01                	mov    al,0x1
ffffffff800059de:	a8 01                	test   al,0x1
ffffffff800059e0:	75 02                	jne    ffffffff800059e4 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).write+0x54>
ffffffff800059e2:	eb 0a                	jmp    ffffffff800059ee <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).write+0x5e>
ffffffff800059e4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800059e8:	48 83 c4 40          	add    rsp,0x40
ffffffff800059ec:	5d                   	pop    rbp
ffffffff800059ed:	c3                   	ret
ffffffff800059ee:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff800059f2:	e8 19 da ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800059f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800059fb:	48 83 c4 40          	add    rsp,0x40
ffffffff800059ff:	5d                   	pop    rbp
ffffffff80005a00:	c3                   	ret
ffffffff80005a01:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80005a08:	00 00 00 
ffffffff80005a0b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80005a10 <debug.panicExtra__anon_2462>:
) noreturn {
ffffffff80005a10:	55                   	push   rbp
ffffffff80005a11:	48 89 e5             	mov    rbp,rsp
ffffffff80005a14:	b8 c0 11 00 00       	mov    eax,0x11c0
ffffffff80005a19:	e8 d2 23 01 00       	call   ffffffff80017df0 <__zig_probe_stack>
ffffffff80005a1e:	48 29 c4             	sub    rsp,rax
ffffffff80005a21:	48 89 95 68 ee ff ff 	mov    QWORD PTR [rbp-0x1198],rdx
ffffffff80005a28:	48 89 b5 70 ee ff ff 	mov    QWORD PTR [rbp-0x1190],rsi
ffffffff80005a2f:	48 89 bd 78 ee ff ff 	mov    QWORD PTR [rbp-0x1188],rdi
ffffffff80005a36:	48 89 bd 90 ee ff ff 	mov    QWORD PTR [rbp-0x1170],rdi
ffffffff80005a3d:	48 8d 85 98 ee ff ff 	lea    rax,[rbp-0x1168]
ffffffff80005a44:	48 89 85 a0 ef ff ff 	mov    QWORD PTR [rbp-0x1060],rax
ffffffff80005a4b:	48 c7 85 a8 ef ff ff 	mov    QWORD PTR [rbp-0x1058],0x20
ffffffff80005a52:	20 00 00 00 
ffffffff80005a56:	48 c7 85 98 ef ff ff 	mov    QWORD PTR [rbp-0x1068],0x0
ffffffff80005a5d:	00 00 00 00 
ffffffff80005a61:	48 8b 85 98 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1068]
ffffffff80005a68:	48 89 85 80 ee ff ff 	mov    QWORD PTR [rbp-0x1180],rax
    const trunc_msg = "(msg truncated)";
ffffffff80005a6f:	48 c7 85 b0 ef ff ff 	mov    QWORD PTR [rbp-0x1050],0xffffffff8001b47e
ffffffff80005a76:	7e b4 01 80 
ffffffff80005a7a:	48 8d bd b9 ef ff ff 	lea    rdi,[rbp-0x1047]
ffffffff80005a81:	be aa 00 00 00       	mov    esi,0xaa
ffffffff80005a86:	ba 0f 10 00 00       	mov    edx,0x100f
    var buf: [size + trunc_msg.len]u8 = undefined;
ffffffff80005a8b:	e8 70 24 01 00       	call   ffffffff80017f00 <memset>
    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {
ffffffff80005a90:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80005a97:	48 89 85 88 ee ff ff 	mov    QWORD PTR [rbp-0x1178],rax
ffffffff80005a9e:	b0 01                	mov    al,0x1
ffffffff80005aa0:	a8 01                	test   al,0x1
ffffffff80005aa2:	75 02                	jne    ffffffff80005aa6 <debug.panicExtra__anon_2462+0x96>
ffffffff80005aa4:	eb 02                	jmp    ffffffff80005aa8 <debug.panicExtra__anon_2462+0x98>
ffffffff80005aa6:	eb 10                	jmp    ffffffff80005ab8 <debug.panicExtra__anon_2462+0xa8>
ffffffff80005aa8:	31 c0                	xor    eax,eax
ffffffff80005aaa:	31 c0                	xor    eax,eax
ffffffff80005aac:	89 c7                	mov    edi,eax
ffffffff80005aae:	be 00 10 00 00       	mov    esi,0x1000
ffffffff80005ab3:	e8 58 a8 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80005ab8:	4c 8b 85 68 ee ff ff 	mov    r8,QWORD PTR [rbp-0x1198]
ffffffff80005abf:	48 8b 95 88 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1178]
ffffffff80005ac6:	b9 00 10 00 00       	mov    ecx,0x1000
ffffffff80005acb:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff80005acf:	48 8d b5 98 ef ff ff 	lea    rsi,[rbp-0x1068]
ffffffff80005ad6:	e8 95 9a 00 00       	call   ffffffff8000f570 <fmt.bufPrint__anon_3093>
ffffffff80005adb:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
ffffffff80005ae0:	75 1b                	jne    ffffffff80005afd <debug.panicExtra__anon_2462+0xed>
ffffffff80005ae2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff80005ae6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80005aea:	48 89 8d 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rcx
ffffffff80005af1:	48 89 85 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rax
ffffffff80005af8:	e9 aa 00 00 00       	jmp    ffffffff80005ba7 <debug.panicExtra__anon_2462+0x197>
ffffffff80005afd:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
ffffffff80005b01:	66 83 e8 09          	sub    ax,0x9
ffffffff80005b05:	74 1e                	je     ffffffff80005b25 <debug.panicExtra__anon_2462+0x115>
ffffffff80005b07:	eb 00                	jmp    ffffffff80005b09 <debug.panicExtra__anon_2462+0xf9>
ffffffff80005b09:	48 c7 c7 9b b1 01 80 	mov    rdi,0xffffffff8001b19b
ffffffff80005b10:	48 c7 c1 38 c0 01 80 	mov    rcx,0xffffffff8001c038
ffffffff80005b17:	31 c0                	xor    eax,eax
ffffffff80005b19:	89 c2                	mov    edx,eax
ffffffff80005b1b:	be 17 00 00 00       	mov    esi,0x17
ffffffff80005b20:	e8 8b a6 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
            std.mem.copy(u8, buf[size..], trunc_msg);
ffffffff80005b25:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80005b2c:	48 05 00 10 00 00    	add    rax,0x1000
ffffffff80005b32:	48 89 85 50 ee ff ff 	mov    QWORD PTR [rbp-0x11b0],rax
ffffffff80005b39:	b0 01                	mov    al,0x1
ffffffff80005b3b:	a8 01                	test   al,0x1
ffffffff80005b3d:	75 02                	jne    ffffffff80005b41 <debug.panicExtra__anon_2462+0x131>
ffffffff80005b3f:	eb 02                	jmp    ffffffff80005b43 <debug.panicExtra__anon_2462+0x133>
ffffffff80005b41:	eb 0f                	jmp    ffffffff80005b52 <debug.panicExtra__anon_2462+0x142>
ffffffff80005b43:	bf 00 10 00 00       	mov    edi,0x1000
ffffffff80005b48:	be 0f 10 00 00       	mov    esi,0x100f
ffffffff80005b4d:	e8 be a7 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80005b52:	48 8b bd 50 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11b0]
ffffffff80005b59:	be 0f 00 00 00       	mov    esi,0xf
ffffffff80005b5e:	48 c7 c2 7e b4 01 80 	mov    rdx,0xffffffff8001b47e
ffffffff80005b65:	b9 0f 00 00 00       	mov    ecx,0xf
ffffffff80005b6a:	e8 31 5e 00 00       	call   ffffffff8000b9a0 <mem.copy__anon_3027>
ffffffff80005b6f:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80005b76:	48 89 85 48 ee ff ff 	mov    QWORD PTR [rbp-0x11b8],rax
ffffffff80005b7d:	48 8b 85 80 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1180]
ffffffff80005b84:	48 8b 8d 48 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11b8]
    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {
ffffffff80005b8b:	48 89 85 98 ef ff ff 	mov    QWORD PTR [rbp-0x1068],rax
ffffffff80005b92:	b8 0f 10 00 00       	mov    eax,0x100f
ffffffff80005b97:	48 89 8d 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rcx
ffffffff80005b9e:	48 89 85 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rax
ffffffff80005ba5:	eb 00                	jmp    ffffffff80005ba7 <debug.panicExtra__anon_2462+0x197>
ffffffff80005ba7:	48 8b 8d 70 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x1190]
ffffffff80005bae:	48 8b 95 78 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1188]
ffffffff80005bb5:	48 8b 85 58 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11a8]
ffffffff80005bbc:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
ffffffff80005bc3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80005bc7:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    std.builtin.panic(msg, trace, ret_addr);
ffffffff80005bcb:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
ffffffff80005bcf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80005bd3:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80005bd7:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
ffffffff80005bdb:	e8 d0 a5 ff ff       	call   ffffffff800001b0 <builtin.default_panic>

ffffffff80005be0 <fmt.ArgState.hasUnusedArgs>:
    fn hasUnusedArgs(self: *@This()) bool {
ffffffff80005be0:	55                   	push   rbp
ffffffff80005be1:	48 89 e5             	mov    rbp,rsp
ffffffff80005be4:	50                   	push   rax
ffffffff80005be5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
        return @popCount(self.used_args) != self.args_len;
ffffffff80005be9:	8b 4f 10             	mov    ecx,DWORD PTR [rdi+0x10]
ffffffff80005bec:	89 c8                	mov    eax,ecx
ffffffff80005bee:	d1 e8                	shr    eax,1
ffffffff80005bf0:	25 55 55 55 55       	and    eax,0x55555555
ffffffff80005bf5:	29 c1                	sub    ecx,eax
ffffffff80005bf7:	89 c8                	mov    eax,ecx
ffffffff80005bf9:	25 33 33 33 33       	and    eax,0x33333333
ffffffff80005bfe:	c1 e9 02             	shr    ecx,0x2
ffffffff80005c01:	81 e1 33 33 33 33    	and    ecx,0x33333333
ffffffff80005c07:	01 c8                	add    eax,ecx
ffffffff80005c09:	89 c1                	mov    ecx,eax
ffffffff80005c0b:	c1 e9 04             	shr    ecx,0x4
ffffffff80005c0e:	01 c8                	add    eax,ecx
ffffffff80005c10:	25 0f 0f 0f 0f       	and    eax,0xf0f0f0f
ffffffff80005c15:	69 c0 01 01 01 01    	imul   eax,eax,0x1010101
ffffffff80005c1b:	c1 e8 18             	shr    eax,0x18
ffffffff80005c1e:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
ffffffff80005c22:	48 29 c8             	sub    rax,rcx
ffffffff80005c25:	0f 95 c0             	setne  al
ffffffff80005c28:	48 83 c4 08          	add    rsp,0x8
ffffffff80005c2c:	5d                   	pop    rbp
ffffffff80005c2d:	c3                   	ret
ffffffff80005c2e:	66 90                	xchg   ax,ax

ffffffff80005c30 <debug.assert>:
pub fn assert(ok: bool) void {
ffffffff80005c30:	55                   	push   rbp
ffffffff80005c31:	48 89 e5             	mov    rbp,rsp
ffffffff80005c34:	48 83 ec 10          	sub    rsp,0x10
ffffffff80005c38:	40 88 f8             	mov    al,dil
ffffffff80005c3b:	88 c1                	mov    cl,al
ffffffff80005c3d:	80 e1 01             	and    cl,0x1
ffffffff80005c40:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
    if (!ok) unreachable; // assertion failure
ffffffff80005c43:	34 ff                	xor    al,0xff
ffffffff80005c45:	a8 01                	test   al,0x1
ffffffff80005c47:	75 02                	jne    ffffffff80005c4b <debug.assert+0x1b>
ffffffff80005c49:	eb 1c                	jmp    ffffffff80005c67 <debug.assert+0x37>
ffffffff80005c4b:	48 c7 c7 6b b3 01 80 	mov    rdi,0xffffffff8001b36b
ffffffff80005c52:	48 c7 c1 58 b9 01 80 	mov    rcx,0xffffffff8001b958
ffffffff80005c59:	31 c0                	xor    eax,eax
ffffffff80005c5b:	89 c2                	mov    edx,eax
ffffffff80005c5d:	be 18 00 00 00       	mov    esi,0x18
ffffffff80005c62:	e8 49 a5 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80005c67:	eb 00                	jmp    ffffffff80005c69 <debug.assert+0x39>
ffffffff80005c69:	48 83 c4 10          	add    rsp,0x10
ffffffff80005c6d:	5d                   	pop    rbp
ffffffff80005c6e:	c3                   	ret
ffffffff80005c6f:	90                   	nop

ffffffff80005c70 <fmt.Parser.specifier>:
    fn specifier(self: *@This()) !Specifier {
ffffffff80005c70:	55                   	push   rbp
ffffffff80005c71:	48 89 e5             	mov    rbp,rsp
ffffffff80005c74:	48 81 ec 80 00 00 00 	sub    rsp,0x80
ffffffff80005c7b:	48 89 55 90          	mov    QWORD PTR [rbp-0x70],rdx
ffffffff80005c7f:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
ffffffff80005c83:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
ffffffff80005c87:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80005c8b:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
        if (self.maybe('[')) {
ffffffff80005c8f:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffffffff80005c93:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff80005c97:	be 5b 00 00 00       	mov    esi,0x5b
ffffffff80005c9c:	e8 8f 01 00 00       	call   ffffffff80005e30 <fmt.Parser.maybe>
ffffffff80005ca1:	a8 01                	test   al,0x1
ffffffff80005ca3:	75 02                	jne    ffffffff80005ca7 <fmt.Parser.specifier+0x37>
ffffffff80005ca5:	eb 4d                	jmp    ffffffff80005cf4 <fmt.Parser.specifier+0x84>
ffffffff80005ca7:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
            const arg_name = self.until(']');
ffffffff80005cab:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80005caf:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80005cb3:	be 5d 00 00 00       	mov    esi,0x5d
ffffffff80005cb8:	e8 63 02 00 00       	call   ffffffff80005f20 <fmt.Parser.until>
ffffffff80005cbd:	48 89 c1             	mov    rcx,rax
ffffffff80005cc0:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80005cc4:	48 89 d6             	mov    rsi,rdx
ffffffff80005cc7:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffffffff80005ccb:	48 89 ce             	mov    rsi,rcx
ffffffff80005cce:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
ffffffff80005cd2:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff80005cd6:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
            if (!self.maybe(']'))
ffffffff80005cda:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80005cde:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80005ce2:	be 5d 00 00 00       	mov    esi,0x5d
ffffffff80005ce7:	e8 44 01 00 00       	call   ffffffff80005e30 <fmt.Parser.maybe>
ffffffff80005cec:	34 ff                	xor    al,0xff
ffffffff80005cee:	a8 01                	test   al,0x1
ffffffff80005cf0:	75 07                	jne    ffffffff80005cf9 <fmt.Parser.specifier+0x89>
ffffffff80005cf2:	eb 31                	jmp    ffffffff80005d25 <fmt.Parser.specifier+0xb5>
            return Specifier{ .named = arg_name };
ffffffff80005cf4:	e9 98 00 00 00       	jmp    ffffffff80005d91 <fmt.Parser.specifier+0x121>
ffffffff80005cf9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
                return @field(anyerror, "Expected closing ]");
ffffffff80005cfd:	48 c7 40 18 02 00 00 	mov    QWORD PTR [rax+0x18],0x2
ffffffff80005d04:	00 
ffffffff80005d05:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffffffff80005d0c:	00 
ffffffff80005d0d:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff80005d14:	00 
ffffffff80005d15:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80005d1c:	66 83 78 18 00       	cmp    WORD PTR [rax+0x18],0x0
ffffffff80005d21:	74 04                	je     ffffffff80005d27 <fmt.Parser.specifier+0xb7>
ffffffff80005d23:	eb 0f                	jmp    ffffffff80005d34 <fmt.Parser.specifier+0xc4>
ffffffff80005d25:	eb 23                	jmp    ffffffff80005d4a <fmt.Parser.specifier+0xda>
ffffffff80005d27:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005d2b:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005d32:	5d                   	pop    rbp
ffffffff80005d33:	c3                   	ret
ffffffff80005d34:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff80005d38:	e8 d3 d6 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80005d3d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005d41:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005d48:	5d                   	pop    rbp
ffffffff80005d49:	c3                   	ret
ffffffff80005d4a:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80005d4e:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff80005d52:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
            return Specifier{ .named = arg_name };
ffffffff80005d56:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
ffffffff80005d5c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80005d60:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80005d63:	c6 40 10 02          	mov    BYTE PTR [rax+0x10],0x2
ffffffff80005d67:	66 83 78 18 00       	cmp    WORD PTR [rax+0x18],0x0
ffffffff80005d6c:	75 0d                	jne    ffffffff80005d7b <fmt.Parser.specifier+0x10b>
ffffffff80005d6e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005d72:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005d79:	5d                   	pop    rbp
ffffffff80005d7a:	c3                   	ret
ffffffff80005d7b:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff80005d7f:	e8 8c d6 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80005d84:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005d88:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005d8f:	5d                   	pop    rbp
ffffffff80005d90:	c3                   	ret
ffffffff80005d91:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
        if (self.number()) |i|
ffffffff80005d95:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80005d99:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffffffff80005d9d:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
ffffffff80005da1:	e8 3a 03 00 00       	call   ffffffff800060e0 <fmt.Parser.number>
ffffffff80005da6:	80 7d f0 00          	cmp    BYTE PTR [rbp-0x10],0x0
ffffffff80005daa:	74 22                	je     ffffffff80005dce <fmt.Parser.specifier+0x15e>
ffffffff80005dac:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80005db0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80005db4:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
            return Specifier{ .number = i };
ffffffff80005db8:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
ffffffff80005dbe:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80005dc1:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
ffffffff80005dc5:	66 83 78 18 00       	cmp    WORD PTR [rax+0x18],0x0
ffffffff80005dca:	74 04                	je     ffffffff80005dd0 <fmt.Parser.specifier+0x160>
ffffffff80005dcc:	eb 0f                	jmp    ffffffff80005ddd <fmt.Parser.specifier+0x16d>
ffffffff80005dce:	eb 23                	jmp    ffffffff80005df3 <fmt.Parser.specifier+0x183>
ffffffff80005dd0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005dd4:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005ddb:	5d                   	pop    rbp
ffffffff80005ddc:	c3                   	ret
ffffffff80005ddd:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff80005de1:	e8 2a d6 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80005de6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005dea:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005df1:	5d                   	pop    rbp
ffffffff80005df2:	c3                   	ret
ffffffff80005df3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
        return Specifier{ .none = {} };
ffffffff80005df7:	66 c7 40 18 00 00    	mov    WORD PTR [rax+0x18],0x0
ffffffff80005dfd:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
ffffffff80005e01:	66 83 78 18 00       	cmp    WORD PTR [rax+0x18],0x0
ffffffff80005e06:	75 0d                	jne    ffffffff80005e15 <fmt.Parser.specifier+0x1a5>
ffffffff80005e08:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005e0c:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005e13:	5d                   	pop    rbp
ffffffff80005e14:	c3                   	ret
ffffffff80005e15:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff80005e19:	e8 f2 d5 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80005e1e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005e22:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80005e29:	5d                   	pop    rbp
ffffffff80005e2a:	c3                   	ret
ffffffff80005e2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80005e30 <fmt.Parser.maybe>:
    fn maybe(self: *@This(), val: u8) bool {
ffffffff80005e30:	55                   	push   rbp
ffffffff80005e31:	48 89 e5             	mov    rbp,rsp
ffffffff80005e34:	48 83 ec 60          	sub    rsp,0x60
ffffffff80005e38:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff80005e3c:	40 88 f0             	mov    al,sil
ffffffff80005e3f:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
ffffffff80005e42:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80005e46:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
        if (self.pos < self.buf.len and self.buf[self.pos] == val) {
ffffffff80005e49:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
ffffffff80005e4d:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
ffffffff80005e50:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
ffffffff80005e54:	48 39 c8             	cmp    rax,rcx
ffffffff80005e57:	73 22                	jae    ffffffff80005e7b <fmt.Parser.maybe+0x4b>
ffffffff80005e59:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80005e5d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80005e60:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff80005e64:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff80005e68:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
ffffffff80005e6c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80005e70:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80005e74:	48 39 c8             	cmp    rax,rcx
ffffffff80005e77:	72 09                	jb     ffffffff80005e82 <fmt.Parser.maybe+0x52>
ffffffff80005e79:	eb 09                	jmp    ffffffff80005e84 <fmt.Parser.maybe+0x54>
ffffffff80005e7b:	31 c0                	xor    eax,eax
ffffffff80005e7d:	88 45 af             	mov    BYTE PTR [rbp-0x51],al
ffffffff80005e80:	eb 23                	jmp    ffffffff80005ea5 <fmt.Parser.maybe+0x75>
ffffffff80005e82:	eb 0d                	jmp    ffffffff80005e91 <fmt.Parser.maybe+0x61>
ffffffff80005e84:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffffffff80005e88:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80005e8c:	e8 3f a3 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80005e91:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80005e95:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff80005e99:	8a 55 d7             	mov    dl,BYTE PTR [rbp-0x29]
ffffffff80005e9c:	38 14 08             	cmp    BYTE PTR [rax+rcx*1],dl
ffffffff80005e9f:	0f 94 c0             	sete   al
ffffffff80005ea2:	88 45 af             	mov    BYTE PTR [rbp-0x51],al
ffffffff80005ea5:	8a 45 af             	mov    al,BYTE PTR [rbp-0x51]
ffffffff80005ea8:	a8 01                	test   al,0x1
ffffffff80005eaa:	75 02                	jne    ffffffff80005eae <fmt.Parser.maybe+0x7e>
ffffffff80005eac:	eb 2f                	jmp    ffffffff80005edd <fmt.Parser.maybe+0xad>
ffffffff80005eae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            self.pos += 1;
ffffffff80005eb2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80005eb6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005eba:	48 89 c1             	mov    rcx,rax
ffffffff80005ebd:	48 83 c1 10          	add    rcx,0x10
ffffffff80005ec1:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
ffffffff80005ec5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80005ec9:	48 ff c0             	inc    rax
ffffffff80005ecc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80005ed0:	0f 94 45 f8          	sete   BYTE PTR [rbp-0x8]
ffffffff80005ed4:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff80005ed7:	84 c0                	test   al,al
ffffffff80005ed9:	74 04                	je     ffffffff80005edf <fmt.Parser.maybe+0xaf>
ffffffff80005edb:	eb 04                	jmp    ffffffff80005ee1 <fmt.Parser.maybe+0xb1>
            return true;
ffffffff80005edd:	eb 31                	jmp    ffffffff80005f10 <fmt.Parser.maybe+0xe0>
            self.pos += 1;
ffffffff80005edf:	eb 1c                	jmp    ffffffff80005efd <fmt.Parser.maybe+0xcd>
ffffffff80005ee1:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80005ee8:	48 c7 c1 68 b9 01 80 	mov    rcx,0xffffffff8001b968
ffffffff80005eef:	31 c0                	xor    eax,eax
ffffffff80005ef1:	89 c2                	mov    edx,eax
ffffffff80005ef3:	be 10 00 00 00       	mov    esi,0x10
ffffffff80005ef8:	e8 b3 a2 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80005efd:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80005f01:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff80005f05:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80005f08:	b0 01                	mov    al,0x1
            return true;
ffffffff80005f0a:	48 83 c4 60          	add    rsp,0x60
ffffffff80005f0e:	5d                   	pop    rbp
ffffffff80005f0f:	c3                   	ret
ffffffff80005f10:	31 c0                	xor    eax,eax
        return false;
ffffffff80005f12:	48 83 c4 60          	add    rsp,0x60
ffffffff80005f16:	5d                   	pop    rbp
ffffffff80005f17:	c3                   	ret
ffffffff80005f18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80005f1f:	00 

ffffffff80005f20 <fmt.Parser.until>:
    fn until(self: *@This(), ch: u8) []const u8 {
ffffffff80005f20:	55                   	push   rbp
ffffffff80005f21:	48 89 e5             	mov    rbp,rsp
ffffffff80005f24:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffffffff80005f2b:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
ffffffff80005f2f:	40 88 f0             	mov    al,sil
ffffffff80005f32:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
ffffffff80005f35:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff80005f39:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
        const start = self.pos;
ffffffff80005f3c:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
ffffffff80005f40:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80005f44:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
        if (start >= self.buf.len)
ffffffff80005f48:	48 8b 0f             	mov    rcx,QWORD PTR [rdi]
ffffffff80005f4b:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
ffffffff80005f4f:	48 39 c8             	cmp    rax,rcx
ffffffff80005f52:	72 17                	jb     ffffffff80005f6b <fmt.Parser.until+0x4b>
ffffffff80005f54:	31 c0                	xor    eax,eax
ffffffff80005f56:	89 c2                	mov    edx,eax
ffffffff80005f58:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff80005f5f:	aa aa aa 
            return &[_]u8{};
ffffffff80005f62:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffffffff80005f69:	5d                   	pop    rbp
ffffffff80005f6a:	c3                   	ret
ffffffff80005f6b:	eb 00                	jmp    ffffffff80005f6d <fmt.Parser.until+0x4d>
ffffffff80005f6d:	eb 00                	jmp    ffffffff80005f6f <fmt.Parser.until+0x4f>
ffffffff80005f6f:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
        while (self.pos < self.buf.len) : (self.pos += 1) {
ffffffff80005f73:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
ffffffff80005f77:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
ffffffff80005f7a:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80005f7e:	48 39 c8             	cmp    rax,rcx
ffffffff80005f81:	73 22                	jae    ffffffff80005fa5 <fmt.Parser.until+0x85>
ffffffff80005f83:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
            if (self.buf[self.pos] == ch) break;
ffffffff80005f87:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80005f8a:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff80005f8e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff80005f92:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
ffffffff80005f96:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80005f9a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80005f9e:	48 39 c8             	cmp    rax,rcx
ffffffff80005fa1:	72 07                	jb     ffffffff80005faa <fmt.Parser.until+0x8a>
ffffffff80005fa3:	eb 07                	jmp    ffffffff80005fac <fmt.Parser.until+0x8c>
        while (self.pos < self.buf.len) : (self.pos += 1) {
ffffffff80005fa5:	e9 80 00 00 00       	jmp    ffffffff8000602a <fmt.Parser.until+0x10a>
            if (self.buf[self.pos] == ch) break;
ffffffff80005faa:	eb 0d                	jmp    ffffffff80005fb9 <fmt.Parser.until+0x99>
ffffffff80005fac:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff80005fb0:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
ffffffff80005fb4:	e8 17 a2 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80005fb9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80005fbd:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffffffff80005fc1:	8a 55 bf             	mov    dl,BYTE PTR [rbp-0x41]
ffffffff80005fc4:	38 14 08             	cmp    BYTE PTR [rax+rcx*1],dl
ffffffff80005fc7:	75 02                	jne    ffffffff80005fcb <fmt.Parser.until+0xab>
ffffffff80005fc9:	eb 5f                	jmp    ffffffff8000602a <fmt.Parser.until+0x10a>
ffffffff80005fcb:	eb 00                	jmp    ffffffff80005fcd <fmt.Parser.until+0xad>
ffffffff80005fcd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
        while (self.pos < self.buf.len) : (self.pos += 1) {
ffffffff80005fd1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80005fd5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80005fd9:	48 89 c1             	mov    rcx,rax
ffffffff80005fdc:	48 83 c1 10          	add    rcx,0x10
ffffffff80005fe0:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffffffff80005fe4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80005fe8:	48 ff c0             	inc    rax
ffffffff80005feb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80005fef:	0f 94 45 f0          	sete   BYTE PTR [rbp-0x10]
ffffffff80005ff3:	8a 45 f0             	mov    al,BYTE PTR [rbp-0x10]
ffffffff80005ff6:	84 c0                	test   al,al
ffffffff80005ff8:	75 04                	jne    ffffffff80005ffe <fmt.Parser.until+0xde>
ffffffff80005ffa:	eb 00                	jmp    ffffffff80005ffc <fmt.Parser.until+0xdc>
ffffffff80005ffc:	eb 1c                	jmp    ffffffff8000601a <fmt.Parser.until+0xfa>
ffffffff80005ffe:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006005:	48 c7 c1 f8 b9 01 80 	mov    rcx,0xffffffff8001b9f8
ffffffff8000600c:	31 c0                	xor    eax,eax
ffffffff8000600e:	89 c2                	mov    edx,eax
ffffffff80006010:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006015:	e8 96 a1 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000601a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff8000601e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80006022:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80006025:	e9 45 ff ff ff       	jmp    ffffffff80005f6f <fmt.Parser.until+0x4f>
ffffffff8000602a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000602e:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
        return self.buf[start..self.pos];
ffffffff80006032:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff80006036:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
ffffffff8000603a:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffffffff8000603e:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
ffffffff80006045:	48 8b 16             	mov    rdx,QWORD PTR [rsi]
ffffffff80006048:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
ffffffff8000604c:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
ffffffff80006050:	48 01 c2             	add    rdx,rax
ffffffff80006053:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffffffff80006057:	48 39 c8             	cmp    rax,rcx
ffffffff8000605a:	77 02                	ja     ffffffff8000605e <fmt.Parser.until+0x13e>
ffffffff8000605c:	eb 10                	jmp    ffffffff8000606e <fmt.Parser.until+0x14e>
ffffffff8000605e:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffffffff80006065:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80006069:	e8 a2 a2 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000606e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80006075:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff80006079:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffffffff8000607d:	48 89 c2             	mov    rdx,rax
ffffffff80006080:	48 29 f2             	sub    rdx,rsi
ffffffff80006083:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
ffffffff8000608a:	48 39 c8             	cmp    rax,rcx
ffffffff8000608d:	77 02                	ja     ffffffff80006091 <fmt.Parser.until+0x171>
ffffffff8000608f:	eb 10                	jmp    ffffffff800060a1 <fmt.Parser.until+0x181>
ffffffff80006091:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
ffffffff80006095:	48 8b bd 78 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x88]
ffffffff8000609c:	e8 2f a1 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800060a1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800060a5:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffffffff800060ac:	48 39 c8             	cmp    rax,rcx
ffffffff800060af:	77 02                	ja     ffffffff800060b3 <fmt.Parser.until+0x193>
ffffffff800060b1:	eb 10                	jmp    ffffffff800060c3 <fmt.Parser.until+0x1a3>
ffffffff800060b3:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffffffff800060ba:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff800060be:	e8 0d a1 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800060c3:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffffffff800060ca:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff800060ce:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffffffff800060d5:	5d                   	pop    rbp
ffffffff800060d6:	c3                   	ret
ffffffff800060d7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800060de:	00 00 

ffffffff800060e0 <fmt.Parser.number>:
    fn number(self: *@This()) ?usize {
ffffffff800060e0:	55                   	push   rbp
ffffffff800060e1:	48 89 e5             	mov    rbp,rsp
ffffffff800060e4:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
ffffffff800060eb:	48 89 75 90          	mov    QWORD PTR [rbp-0x70],rsi
ffffffff800060ef:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffffffff800060f3:	48 89 7d a0          	mov    QWORD PTR [rbp-0x60],rdi
ffffffff800060f7:	48 89 75 a8          	mov    QWORD PTR [rbp-0x58],rsi
        var r: ?usize = null;
ffffffff800060fb:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80006102:	00 
ffffffff80006103:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffffffff8000610a:	00 
ffffffff8000610b:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
        while (self.pos < self.buf.len) : (self.pos += 1) {
ffffffff8000610f:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
ffffffff80006113:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
ffffffff80006116:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff8000611a:	48 39 c8             	cmp    rax,rcx
ffffffff8000611d:	73 25                	jae    ffffffff80006144 <fmt.Parser.number+0x64>
ffffffff8000611f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
            switch (self.buf[self.pos]) {
ffffffff80006123:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80006126:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
ffffffff8000612d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff80006131:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffffffff80006135:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80006139:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000613d:	48 39 c8             	cmp    rax,rcx
ffffffff80006140:	72 07                	jb     ffffffff80006149 <fmt.Parser.number+0x69>
ffffffff80006142:	eb 07                	jmp    ffffffff8000614b <fmt.Parser.number+0x6b>
        while (self.pos < self.buf.len) : (self.pos += 1) {
ffffffff80006144:	e9 44 02 00 00       	jmp    ffffffff8000638d <fmt.Parser.number+0x2ad>
            switch (self.buf[self.pos]) {
ffffffff80006149:	eb 0d                	jmp    ffffffff80006158 <fmt.Parser.number+0x78>
ffffffff8000614b:	48 8b 75 80          	mov    rsi,QWORD PTR [rbp-0x80]
ffffffff8000614f:	48 8b 7d 88          	mov    rdi,QWORD PTR [rbp-0x78]
ffffffff80006153:	e8 78 a0 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006158:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff8000615f:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff80006163:	8a 04 08             	mov    al,BYTE PTR [rax+rcx*1]
ffffffff80006166:	88 85 77 ff ff ff    	mov    BYTE PTR [rbp-0x89],al
ffffffff8000616c:	8a 8d 77 ff ff ff    	mov    cl,BYTE PTR [rbp-0x89]
ffffffff80006172:	80 f9 30             	cmp    cl,0x30
ffffffff80006175:	0f 93 c0             	setae  al
ffffffff80006178:	80 f9 39             	cmp    cl,0x39
ffffffff8000617b:	0f 96 c1             	setbe  cl
ffffffff8000617e:	20 c8                	and    al,cl
ffffffff80006180:	a8 01                	test   al,0x1
ffffffff80006182:	75 02                	jne    ffffffff80006186 <fmt.Parser.number+0xa6>
ffffffff80006184:	eb 0f                	jmp    ffffffff80006195 <fmt.Parser.number+0xb5>
                    if (r == null) r = 0;
ffffffff80006186:	80 7d b8 00          	cmp    BYTE PTR [rbp-0x48],0x0
ffffffff8000618a:	0f 95 c0             	setne  al
ffffffff8000618d:	34 ff                	xor    al,0xff
ffffffff8000618f:	a8 01                	test   al,0x1
ffffffff80006191:	75 07                	jne    ffffffff8000619a <fmt.Parser.number+0xba>
ffffffff80006193:	eb 17                	jmp    ffffffff800061ac <fmt.Parser.number+0xcc>
                    r.? += self.buf[self.pos] - '0';
ffffffff80006195:	e9 f3 01 00 00       	jmp    ffffffff8000638d <fmt.Parser.number+0x2ad>
                    if (r == null) r = 0;
ffffffff8000619a:	48 c7 45 b8 01 00 00 	mov    QWORD PTR [rbp-0x48],0x1
ffffffff800061a1:	00 
ffffffff800061a2:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffffffff800061a9:	00 
ffffffff800061aa:	eb 02                	jmp    ffffffff800061ae <fmt.Parser.number+0xce>
ffffffff800061ac:	eb 00                	jmp    ffffffff800061ae <fmt.Parser.number+0xce>
                    r.? *= 10;
ffffffff800061ae:	80 7d b8 00          	cmp    BYTE PTR [rbp-0x48],0x0
ffffffff800061b2:	74 02                	je     ffffffff800061b6 <fmt.Parser.number+0xd6>
ffffffff800061b4:	eb 1c                	jmp    ffffffff800061d2 <fmt.Parser.number+0xf2>
ffffffff800061b6:	48 c7 c7 84 b3 01 80 	mov    rdi,0xffffffff8001b384
ffffffff800061bd:	48 c7 c1 98 b9 01 80 	mov    rcx,0xffffffff8001b998
ffffffff800061c4:	31 c0                	xor    eax,eax
ffffffff800061c6:	89 c2                	mov    edx,eax
ffffffff800061c8:	be 19 00 00 00       	mov    esi,0x19
ffffffff800061cd:	e8 de 9f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800061d2:	48 8d 45 b0          	lea    rax,[rbp-0x50]
ffffffff800061d6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff800061dd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800061e1:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff800061e6:	48 f7 e1             	mul    rcx
ffffffff800061e9:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800061ed:	0f 90 45 c8          	seto   BYTE PTR [rbp-0x38]
ffffffff800061f1:	8a 45 c8             	mov    al,BYTE PTR [rbp-0x38]
ffffffff800061f4:	84 c0                	test   al,al
ffffffff800061f6:	75 04                	jne    ffffffff800061fc <fmt.Parser.number+0x11c>
ffffffff800061f8:	eb 00                	jmp    ffffffff800061fa <fmt.Parser.number+0x11a>
ffffffff800061fa:	eb 1c                	jmp    ffffffff80006218 <fmt.Parser.number+0x138>
ffffffff800061fc:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006203:	48 c7 c1 a8 b9 01 80 	mov    rcx,0xffffffff8001b9a8
ffffffff8000620a:	31 c0                	xor    eax,eax
ffffffff8000620c:	89 c2                	mov    edx,eax
ffffffff8000620e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006213:	e8 98 9f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006218:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000621f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff80006223:	48 89 08             	mov    QWORD PTR [rax],rcx
                    r.? += self.buf[self.pos] - '0';
ffffffff80006226:	80 7d b8 00          	cmp    BYTE PTR [rbp-0x48],0x0
ffffffff8000622a:	74 02                	je     ffffffff8000622e <fmt.Parser.number+0x14e>
ffffffff8000622c:	eb 1c                	jmp    ffffffff8000624a <fmt.Parser.number+0x16a>
ffffffff8000622e:	48 c7 c7 84 b3 01 80 	mov    rdi,0xffffffff8001b384
ffffffff80006235:	48 c7 c1 b8 b9 01 80 	mov    rcx,0xffffffff8001b9b8
ffffffff8000623c:	31 c0                	xor    eax,eax
ffffffff8000623e:	89 c2                	mov    edx,eax
ffffffff80006240:	be 19 00 00 00       	mov    esi,0x19
ffffffff80006245:	e8 66 9f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000624a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff8000624e:	48 8d 4d b0          	lea    rcx,[rbp-0x50]
ffffffff80006252:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
ffffffff80006259:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff8000625d:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
ffffffff80006264:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80006267:	48 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rcx
ffffffff8000626e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff80006272:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffffffff80006279:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000627d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
ffffffff80006284:	48 39 c8             	cmp    rax,rcx
ffffffff80006287:	73 02                	jae    ffffffff8000628b <fmt.Parser.number+0x1ab>
ffffffff80006289:	eb 13                	jmp    ffffffff8000629e <fmt.Parser.number+0x1be>
ffffffff8000628b:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
ffffffff80006292:	48 8b bd 60 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xa0]
ffffffff80006299:	e8 32 9f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000629e:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff800062a5:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
ffffffff800062ac:	8a 04 08             	mov    al,BYTE PTR [rax+rcx*1]
ffffffff800062af:	2c 30                	sub    al,0x30
ffffffff800062b1:	88 45 d0             	mov    BYTE PTR [rbp-0x30],al
ffffffff800062b4:	0f 92 45 d1          	setb   BYTE PTR [rbp-0x2f]
ffffffff800062b8:	8a 45 d1             	mov    al,BYTE PTR [rbp-0x2f]
ffffffff800062bb:	84 c0                	test   al,al
ffffffff800062bd:	75 04                	jne    ffffffff800062c3 <fmt.Parser.number+0x1e3>
ffffffff800062bf:	eb 00                	jmp    ffffffff800062c1 <fmt.Parser.number+0x1e1>
ffffffff800062c1:	eb 1c                	jmp    ffffffff800062df <fmt.Parser.number+0x1ff>
ffffffff800062c3:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800062ca:	48 c7 c1 c8 b9 01 80 	mov    rcx,0xffffffff8001b9c8
ffffffff800062d1:	31 c0                	xor    eax,eax
ffffffff800062d3:	89 c2                	mov    edx,eax
ffffffff800062d5:	be 10 00 00 00       	mov    esi,0x10
ffffffff800062da:	e8 d1 9e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800062df:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff800062e6:	0f b6 4d d0          	movzx  ecx,BYTE PTR [rbp-0x30]
ffffffff800062ea:	48 01 c8             	add    rax,rcx
ffffffff800062ed:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800062f1:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff800062f5:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff800062f8:	84 c0                	test   al,al
ffffffff800062fa:	75 04                	jne    ffffffff80006300 <fmt.Parser.number+0x220>
ffffffff800062fc:	eb 00                	jmp    ffffffff800062fe <fmt.Parser.number+0x21e>
ffffffff800062fe:	eb 1c                	jmp    ffffffff8000631c <fmt.Parser.number+0x23c>
ffffffff80006300:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006307:	48 c7 c1 d8 b9 01 80 	mov    rcx,0xffffffff8001b9d8
ffffffff8000630e:	31 c0                	xor    eax,eax
ffffffff80006310:	89 c2                	mov    edx,eax
ffffffff80006312:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006317:	e8 94 9e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000631c:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff80006323:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80006327:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff8000632a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
        while (self.pos < self.buf.len) : (self.pos += 1) {
ffffffff8000632e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80006332:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80006336:	48 89 c1             	mov    rcx,rax
ffffffff80006339:	48 83 c1 10          	add    rcx,0x10
ffffffff8000633d:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
ffffffff80006344:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80006348:	48 ff c0             	inc    rax
ffffffff8000634b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000634f:	0f 94 45 f8          	sete   BYTE PTR [rbp-0x8]
ffffffff80006353:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff80006356:	84 c0                	test   al,al
ffffffff80006358:	75 04                	jne    ffffffff8000635e <fmt.Parser.number+0x27e>
ffffffff8000635a:	eb 00                	jmp    ffffffff8000635c <fmt.Parser.number+0x27c>
ffffffff8000635c:	eb 1c                	jmp    ffffffff8000637a <fmt.Parser.number+0x29a>
ffffffff8000635e:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006365:	48 c7 c1 e8 b9 01 80 	mov    rcx,0xffffffff8001b9e8
ffffffff8000636c:	31 c0                	xor    eax,eax
ffffffff8000636e:	89 c2                	mov    edx,eax
ffffffff80006370:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006375:	e8 36 9e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000637a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffffffff80006381:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff80006385:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80006388:	e9 7e fd ff ff       	jmp    ffffffff8000610b <fmt.Parser.number+0x2b>
ffffffff8000638d:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80006391:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
        return r;
ffffffff80006395:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80006399:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000639c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffffffff800063a0:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff800063a4:	48 81 c4 d0 00 00 00 	add    rsp,0xd0
ffffffff800063ab:	5d                   	pop    rbp
ffffffff800063ac:	c3                   	ret
ffffffff800063ad:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800063b0 <fmt.Parser.char>:
    fn char(self: *@This()) ?u8 {
ffffffff800063b0:	55                   	push   rbp
ffffffff800063b1:	48 89 e5             	mov    rbp,rsp
ffffffff800063b4:	48 83 ec 70          	sub    rsp,0x70
ffffffff800063b8:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
ffffffff800063bc:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff800063c0:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff800063c4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
        if (self.pos < self.buf.len) {
ffffffff800063c8:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
ffffffff800063cc:	48 8b 0e             	mov    rcx,QWORD PTR [rsi]
ffffffff800063cf:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
ffffffff800063d3:	48 39 c8             	cmp    rax,rcx
ffffffff800063d6:	73 22                	jae    ffffffff800063fa <fmt.Parser.char+0x4a>
ffffffff800063d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
            const ch = self.buf[self.pos];
ffffffff800063dc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800063df:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
ffffffff800063e3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff800063e7:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff800063eb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800063ef:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800063f3:	48 39 c8             	cmp    rax,rcx
ffffffff800063f6:	72 07                	jb     ffffffff800063ff <fmt.Parser.char+0x4f>
ffffffff800063f8:	eb 07                	jmp    ffffffff80006401 <fmt.Parser.char+0x51>
            return ch;
ffffffff800063fa:	e9 97 00 00 00       	jmp    ffffffff80006496 <fmt.Parser.char+0xe6>
            const ch = self.buf[self.pos];
ffffffff800063ff:	eb 0d                	jmp    ffffffff8000640e <fmt.Parser.char+0x5e>
ffffffff80006401:	48 8b 75 a8          	mov    rsi,QWORD PTR [rbp-0x58]
ffffffff80006405:	48 8b 7d b0          	mov    rdi,QWORD PTR [rbp-0x50]
ffffffff80006409:	e8 c2 9d ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000640e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80006412:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff80006416:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff8000641a:	8a 0c 11             	mov    cl,BYTE PTR [rcx+rdx*1]
ffffffff8000641d:	88 4d 97             	mov    BYTE PTR [rbp-0x69],cl
ffffffff80006420:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
            self.pos += 1;
ffffffff80006423:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80006427:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000642b:	48 89 c1             	mov    rcx,rax
ffffffff8000642e:	48 83 c1 10          	add    rcx,0x10
ffffffff80006432:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff80006436:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000643a:	48 ff c0             	inc    rax
ffffffff8000643d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80006441:	0f 94 45 f0          	sete   BYTE PTR [rbp-0x10]
ffffffff80006445:	8a 45 f0             	mov    al,BYTE PTR [rbp-0x10]
ffffffff80006448:	84 c0                	test   al,al
ffffffff8000644a:	75 04                	jne    ffffffff80006450 <fmt.Parser.char+0xa0>
ffffffff8000644c:	eb 00                	jmp    ffffffff8000644e <fmt.Parser.char+0x9e>
ffffffff8000644e:	eb 1c                	jmp    ffffffff8000646c <fmt.Parser.char+0xbc>
ffffffff80006450:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006457:	48 c7 c1 08 ba 01 80 	mov    rcx,0xffffffff8001ba08
ffffffff8000645e:	31 c0                	xor    eax,eax
ffffffff80006460:	89 c2                	mov    edx,eax
ffffffff80006462:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006467:	e8 44 9d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000646c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80006470:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff80006474:	8a 55 97             	mov    dl,BYTE PTR [rbp-0x69]
ffffffff80006477:	48 8b 75 98          	mov    rsi,QWORD PTR [rbp-0x68]
ffffffff8000647b:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff8000647f:	48 89 3e             	mov    QWORD PTR [rsi],rdi
            return ch;
ffffffff80006482:	88 55 f8             	mov    BYTE PTR [rbp-0x8],dl
ffffffff80006485:	c6 45 f9 01          	mov    BYTE PTR [rbp-0x7],0x1
ffffffff80006489:	66 8b 55 f8          	mov    dx,WORD PTR [rbp-0x8]
ffffffff8000648d:	66 89 11             	mov    WORD PTR [rcx],dx
ffffffff80006490:	48 83 c4 70          	add    rsp,0x70
ffffffff80006494:	5d                   	pop    rbp
ffffffff80006495:	c3                   	ret
ffffffff80006496:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000649a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
        return null;
ffffffff8000649e:	66 c7 01 00 00       	mov    WORD PTR [rcx],0x0
ffffffff800064a3:	48 83 c4 70          	add    rsp,0x70
ffffffff800064a7:	5d                   	pop    rbp
ffffffff800064a8:	c3                   	ret
ffffffff800064a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800064b0 <fmt.Parser.peek>:
    fn peek(self: *@This(), n: usize) ?u8 {
ffffffff800064b0:	55                   	push   rbp
ffffffff800064b1:	48 89 e5             	mov    rbp,rsp
ffffffff800064b4:	48 83 ec 70          	sub    rsp,0x70
ffffffff800064b8:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff800064bc:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff800064c0:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff800064c4:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff800064c8:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff800064cc:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
        return if (self.pos + n < self.buf.len) self.buf[self.pos + n] else null;
ffffffff800064d0:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
ffffffff800064d4:	48 01 d0             	add    rax,rdx
ffffffff800064d7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800064db:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff800064df:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff800064e2:	84 c0                	test   al,al
ffffffff800064e4:	75 04                	jne    ffffffff800064ea <fmt.Parser.peek+0x3a>
ffffffff800064e6:	eb 00                	jmp    ffffffff800064e8 <fmt.Parser.peek+0x38>
ffffffff800064e8:	eb 1c                	jmp    ffffffff80006506 <fmt.Parser.peek+0x56>
ffffffff800064ea:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800064f1:	48 c7 c1 18 ba 01 80 	mov    rcx,0xffffffff8001ba18
ffffffff800064f8:	31 c0                	xor    eax,eax
ffffffff800064fa:	89 c2                	mov    edx,eax
ffffffff800064fc:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006501:	e8 aa 9c ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006506:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff8000650a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000650e:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
ffffffff80006511:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80006515:	48 39 c8             	cmp    rax,rcx
ffffffff80006518:	73 2f                	jae    ffffffff80006549 <fmt.Parser.peek+0x99>
ffffffff8000651a:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffffffff8000651e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80006522:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80006525:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffffffff80006529:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8000652d:	48 89 55 a0          	mov    QWORD PTR [rbp-0x60],rdx
ffffffff80006531:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80006535:	48 01 c8             	add    rax,rcx
ffffffff80006538:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000653c:	0f 92 45 f0          	setb   BYTE PTR [rbp-0x10]
ffffffff80006540:	8a 45 f0             	mov    al,BYTE PTR [rbp-0x10]
ffffffff80006543:	84 c0                	test   al,al
ffffffff80006545:	74 0d                	je     ffffffff80006554 <fmt.Parser.peek+0xa4>
ffffffff80006547:	eb 0d                	jmp    ffffffff80006556 <fmt.Parser.peek+0xa6>
ffffffff80006549:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000654d:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
ffffffff80006552:	eb 5b                	jmp    ffffffff800065af <fmt.Parser.peek+0xff>
ffffffff80006554:	eb 1c                	jmp    ffffffff80006572 <fmt.Parser.peek+0xc2>
ffffffff80006556:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000655d:	48 c7 c1 28 ba 01 80 	mov    rcx,0xffffffff8001ba28
ffffffff80006564:	31 c0                	xor    eax,eax
ffffffff80006566:	89 c2                	mov    edx,eax
ffffffff80006568:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000656d:	e8 3e 9c ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006572:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff80006576:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000657a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff8000657e:	48 39 c8             	cmp    rax,rcx
ffffffff80006581:	73 02                	jae    ffffffff80006585 <fmt.Parser.peek+0xd5>
ffffffff80006583:	eb 0d                	jmp    ffffffff80006592 <fmt.Parser.peek+0xe2>
ffffffff80006585:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff80006589:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffffffff8000658d:	e8 3e 9c ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006592:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80006596:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
ffffffff8000659a:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffffffff8000659e:	8a 0c 11             	mov    cl,BYTE PTR [rcx+rdx*1]
ffffffff800065a1:	88 4d f8             	mov    BYTE PTR [rbp-0x8],cl
ffffffff800065a4:	c6 45 f9 01          	mov    BYTE PTR [rbp-0x7],0x1
ffffffff800065a8:	66 8b 4d f8          	mov    cx,WORD PTR [rbp-0x8]
ffffffff800065ac:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff800065af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800065b3:	48 83 c4 70          	add    rsp,0x70
ffffffff800065b7:	5d                   	pop    rbp
ffffffff800065b8:	c3                   	ret
ffffffff800065b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800065c0 <fmt.ArgState.nextArg>:
    fn nextArg(self: *@This(), arg_index: ?usize) ?usize {
ffffffff800065c0:	55                   	push   rbp
ffffffff800065c1:	48 89 e5             	mov    rbp,rsp
ffffffff800065c4:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffffffff800065cb:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffffffff800065cf:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffffffff800065d3:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff800065d7:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
ffffffff800065db:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
        const next_index = arg_index orelse init: {
ffffffff800065df:	80 7a 08 00          	cmp    BYTE PTR [rdx+0x8],0x0
ffffffff800065e3:	74 0d                	je     ffffffff800065f2 <fmt.ArgState.nextArg+0x32>
ffffffff800065e5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff800065e9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800065ec:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff800065f0:	eb 63                	jmp    ffffffff80006655 <fmt.ArgState.nextArg+0x95>
ffffffff800065f2:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
            const arg = self.next_arg;
ffffffff800065f6:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800065f9:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffffffff800065fd:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
            self.next_arg += 1;
ffffffff80006601:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80006605:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80006609:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000660d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80006610:	48 ff c0             	inc    rax
ffffffff80006613:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80006617:	0f 94 45 d8          	sete   BYTE PTR [rbp-0x28]
ffffffff8000661b:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff8000661e:	84 c0                	test   al,al
ffffffff80006620:	75 04                	jne    ffffffff80006626 <fmt.ArgState.nextArg+0x66>
ffffffff80006622:	eb 00                	jmp    ffffffff80006624 <fmt.ArgState.nextArg+0x64>
ffffffff80006624:	eb 1c                	jmp    ffffffff80006642 <fmt.ArgState.nextArg+0x82>
ffffffff80006626:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000662d:	48 c7 c1 38 ba 01 80 	mov    rcx,0xffffffff8001ba38
ffffffff80006634:	31 c0                	xor    eax,eax
ffffffff80006636:	89 c2                	mov    edx,eax
ffffffff80006638:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000663d:	e8 6e 9b ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006642:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80006646:	48 8b 4d 88          	mov    rcx,QWORD PTR [rbp-0x78]
ffffffff8000664a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000664e:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff80006651:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80006655:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff80006659:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff8000665d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
            break :init arg;
ffffffff80006664:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
        if (next_index >= self.args_len) {
ffffffff80006668:	48 3b 41 08          	cmp    rax,QWORD PTR [rcx+0x8]
ffffffff8000666c:	72 20                	jb     ffffffff8000668e <fmt.ArgState.nextArg+0xce>
ffffffff8000666e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80006672:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
            return null;
ffffffff80006676:	48 c7 41 08 00 00 00 	mov    QWORD PTR [rcx+0x8],0x0
ffffffff8000667d:	00 
ffffffff8000667e:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
ffffffff80006685:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff8000668c:	5d                   	pop    rbp
ffffffff8000668d:	c3                   	ret
ffffffff8000668e:	eb 00                	jmp    ffffffff80006690 <fmt.ArgState.nextArg+0xd0>
ffffffff80006690:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffffffff80006697:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
        self.used_args |= @as(ArgSetType, 1) << @intCast(u5, next_index);
ffffffff8000669b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000669f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800066a3:	48 89 c2             	mov    rdx,rax
ffffffff800066a6:	48 83 c2 10          	add    rdx,0x10
ffffffff800066aa:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
ffffffff800066b1:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffffffff800066b4:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
ffffffff800066ba:	b8 1f 00 00 00       	mov    eax,0x1f
ffffffff800066bf:	48 29 c8             	sub    rax,rcx
ffffffff800066c2:	48 83 f8 1f          	cmp    rax,0x1f
ffffffff800066c6:	77 02                	ja     ffffffff800066ca <fmt.ArgState.nextArg+0x10a>
ffffffff800066c8:	eb 1c                	jmp    ffffffff800066e6 <fmt.ArgState.nextArg+0x126>
ffffffff800066ca:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff800066d1:	48 c7 c1 58 ba 01 80 	mov    rcx,0xffffffff8001ba58
ffffffff800066d8:	31 c0                	xor    eax,eax
ffffffff800066da:	89 c2                	mov    edx,eax
ffffffff800066dc:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff800066e1:	e8 ca 9a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800066e6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800066ea:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff800066f1:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
ffffffff800066f8:	8b bd 74 ff ff ff    	mov    edi,DWORD PTR [rbp-0x8c]
ffffffff800066fe:	89 d1                	mov    ecx,edx
ffffffff80006700:	83 e1 1f             	and    ecx,0x1f
ffffffff80006703:	41 b8 01 00 00 00    	mov    r8d,0x1
ffffffff80006709:	41 d3 e0             	shl    r8d,cl
ffffffff8000670c:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffffffff80006710:	44 09 c7             	or     edi,r8d
ffffffff80006713:	89 3e                	mov    DWORD PTR [rsi],edi
        return next_index;
ffffffff80006715:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff80006719:	c6 45 f8 01          	mov    BYTE PTR [rbp-0x8],0x1
ffffffff8000671d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80006721:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff80006724:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80006728:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff8000672c:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff80006733:	5d                   	pop    rbp
ffffffff80006734:	c3                   	ret
ffffffff80006735:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000673c:	00 00 00 
ffffffff8000673f:	90                   	nop

ffffffff80006740 <mem.span__anon_2771>:

/// Takes a sentinel-terminated pointer and returns a slice, iterating over the
/// memory to find the sentinel and determine the length.
/// Ponter attributes such as const are preserved.
/// `[*c]` pointers are assumed to be non-null and 0-terminated.
pub fn span(ptr: anytype) Span(@TypeOf(ptr)) {
ffffffff80006740:	55                   	push   rbp
ffffffff80006741:	48 89 e5             	mov    rbp,rsp
ffffffff80006744:	48 83 ec 60          	sub    rsp,0x60
ffffffff80006748:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff8000674c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
        } else {
            return null;
        }
    }
    const Result = Span(@TypeOf(ptr));
    const l = len(ptr);
ffffffff80006750:	e8 5b 8f 00 00       	call   ffffffff8000f6b0 <mem.len__anon_3095>
ffffffff80006755:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80006759:	48 89 c1             	mov    rcx,rax
ffffffff8000675c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80006760:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    const ptr_info = @typeInfo(Result).Pointer;
    if (ptr_info.sentinel) |s_ptr| {
ffffffff80006764:	48 c7 45 e8 50 a7 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001a750
ffffffff8000676b:	80 
        const s = @ptrCast(*align(1) const ptr_info.child, s_ptr).*;
ffffffff8000676c:	c6 45 f7 00          	mov    BYTE PTR [rbp-0x9],0x0
        return ptr[0..l :s];
ffffffff80006770:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80006774:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80006778:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000677c:	31 c0                	xor    eax,eax
ffffffff8000677e:	48 39 c8             	cmp    rax,rcx
ffffffff80006781:	77 02                	ja     ffffffff80006785 <mem.span__anon_2771+0x45>
ffffffff80006783:	eb 0f                	jmp    ffffffff80006794 <mem.span__anon_2771+0x54>
ffffffff80006785:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffffffff80006789:	31 c0                	xor    eax,eax
ffffffff8000678b:	31 c0                	xor    eax,eax
ffffffff8000678d:	89 c7                	mov    edi,eax
ffffffff8000678f:	e8 7c 9b ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80006794:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff80006798:	31 c0                	xor    eax,eax
ffffffff8000679a:	48 39 c8             	cmp    rax,rcx
ffffffff8000679d:	77 02                	ja     ffffffff800067a1 <mem.span__anon_2771+0x61>
ffffffff8000679f:	eb 0f                	jmp    ffffffff800067b0 <mem.span__anon_2771+0x70>
ffffffff800067a1:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffffffff800067a5:	31 c0                	xor    eax,eax
ffffffff800067a7:	31 c0                	xor    eax,eax
ffffffff800067a9:	89 c7                	mov    edi,eax
ffffffff800067ab:	e8 20 9a ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800067b0:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff800067b4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800067b8:	48 89 ca             	mov    rdx,rcx
ffffffff800067bb:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff800067bf:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800067c3:	8a 0c 08             	mov    cl,BYTE PTR [rax+rcx*1]
ffffffff800067c6:	88 4d bf             	mov    BYTE PTR [rbp-0x41],cl
ffffffff800067c9:	31 c0                	xor    eax,eax
ffffffff800067cb:	38 c8                	cmp    al,cl
ffffffff800067cd:	75 02                	jne    ffffffff800067d1 <mem.span__anon_2771+0x91>
ffffffff800067cf:	eb 0f                	jmp    ffffffff800067e0 <mem.span__anon_2771+0xa0>
ffffffff800067d1:	8a 45 bf             	mov    al,BYTE PTR [rbp-0x41]
ffffffff800067d4:	31 c9                	xor    ecx,ecx
ffffffff800067d6:	0f b6 f0             	movzx  esi,al
ffffffff800067d9:	31 ff                	xor    edi,edi
ffffffff800067db:	e8 00 8f 00 00       	call   ffffffff8000f6e0 <builtin.panicSentinelMismatch__anon_3097>
ffffffff800067e0:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffffffff800067e4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800067e8:	48 83 c4 60          	add    rsp,0x60
ffffffff800067ec:	5d                   	pop    rbp
ffffffff800067ed:	c3                   	ret
ffffffff800067ee:	66 90                	xchg   ax,ax

ffffffff800067f0 <fmt.formatType__anon_2774>:
) @TypeOf(writer).Error!void {
ffffffff800067f0:	55                   	push   rbp
ffffffff800067f1:	48 89 e5             	mov    rbp,rsp
ffffffff800067f4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
ffffffff800067fb:	4c 89 45 88          	mov    QWORD PTR [rbp-0x78],r8
ffffffff800067ff:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffffffff80006803:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffffffff80006807:	48 89 d0             	mov    rax,rdx
ffffffff8000680a:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff8000680e:	48 89 f0             	mov    rax,rsi
ffffffff80006811:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80006815:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffffffff80006819:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff8000681d:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80006821:	48 c7 45 d0 01 00 00 	mov    QWORD PTR [rbp-0x30],0x1
ffffffff80006828:	00 
ffffffff80006829:	48 c7 45 c8 d9 90 01 	mov    QWORD PTR [rbp-0x38],0xffffffff800190d9
ffffffff80006830:	80 
                if (max_depth == 0) {
ffffffff80006831:	49 83 f9 00          	cmp    r9,0x0
ffffffff80006835:	75 36                	jne    ffffffff8000686d <fmt.formatType__anon_2774+0x7d>
ffffffff80006837:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff8000683b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
                    return writer.writeAll("{ ... }");
ffffffff8000683f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80006842:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff80006846:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80006849:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000684c:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80006853:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff80006857:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000685c:	e8 ef 9a ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80006861:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
ffffffff80006865:	b0 01                	mov    al,0x1
ffffffff80006867:	a8 01                	test   al,0x1
ffffffff80006869:	75 04                	jne    ffffffff8000686f <fmt.formatType__anon_2774+0x7f>
ffffffff8000686b:	eb 0f                	jmp    ffffffff8000687c <fmt.formatType__anon_2774+0x8c>
ffffffff8000686d:	eb 23                	jmp    ffffffff80006892 <fmt.formatType__anon_2774+0xa2>
ffffffff8000686f:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
ffffffff80006873:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff8000687a:	5d                   	pop    rbp
ffffffff8000687b:	c3                   	ret
ffffffff8000687c:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff80006880:	e8 8b cb ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80006885:	66 8b 45 de          	mov    ax,WORD PTR [rbp-0x22]
ffffffff80006889:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80006890:	5d                   	pop    rbp
ffffffff80006891:	c3                   	ret
ffffffff80006892:	4c 8b 45 88          	mov    r8,QWORD PTR [rbp-0x78]
ffffffff80006896:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffffffff8000689a:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff8000689e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff800068a2:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
                            return formatBuf(value, options, writer);
ffffffff800068a6:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff800068aa:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800068ae:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff800068b2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800068b6:	e8 a5 0b 00 00       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800068bb:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff800068bf:	b0 01                	mov    al,0x1
ffffffff800068c1:	a8 01                	test   al,0x1
ffffffff800068c3:	75 02                	jne    ffffffff800068c7 <fmt.formatType__anon_2774+0xd7>
ffffffff800068c5:	eb 0d                	jmp    ffffffff800068d4 <fmt.formatType__anon_2774+0xe4>
ffffffff800068c7:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800068cb:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff800068d2:	5d                   	pop    rbp
ffffffff800068d3:	c3                   	ret
ffffffff800068d4:	48 8b 7d 98          	mov    rdi,QWORD PTR [rbp-0x68]
ffffffff800068d8:	e8 33 cb ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800068dd:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800068e1:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff800068e8:	5d                   	pop    rbp
ffffffff800068e9:	c3                   	ret
ffffffff800068ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff800068f0 <__zig_is_named_enum_value_limine.MemoryMapEntryType>:
ffffffff800068f0:	55                   	push   rbp
ffffffff800068f1:	48 89 e5             	mov    rbp,rsp
ffffffff800068f4:	48 83 ef 07          	sub    rdi,0x7
ffffffff800068f8:	77 06                	ja     ffffffff80006900 <__zig_is_named_enum_value_limine.MemoryMapEntryType+0x10>
ffffffff800068fa:	eb 00                	jmp    ffffffff800068fc <__zig_is_named_enum_value_limine.MemoryMapEntryType+0xc>
ffffffff800068fc:	b0 01                	mov    al,0x1
ffffffff800068fe:	5d                   	pop    rbp
ffffffff800068ff:	c3                   	ret
ffffffff80006900:	31 c0                	xor    eax,eax
ffffffff80006902:	5d                   	pop    rbp
ffffffff80006903:	c3                   	ret
ffffffff80006904:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000690b:	00 00 00 
ffffffff8000690e:	66 90                	xchg   ax,ax

ffffffff80006910 <fmt.formatValue__anon_2776>:
fn formatValue(
    value: anytype,
    comptime fmt: []const u8,
    options: FormatOptions,
    writer: anytype,
) !void {
ffffffff80006910:	55                   	push   rbp
ffffffff80006911:	48 89 e5             	mov    rbp,rsp
ffffffff80006914:	48 83 ec 20          	sub    rsp,0x20
ffffffff80006918:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000691c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    }

    const T = @TypeOf(value);
    switch (@typeInfo(T)) {
        .Float, .ComptimeFloat => return formatFloatValue(value, fmt, options, writer),
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80006920:	e8 2b 00 00 00       	call   ffffffff80006950 <fmt.formatIntValue__anon_2779>
ffffffff80006925:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80006929:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000692e:	75 0a                	jne    ffffffff8000693a <fmt.formatValue__anon_2776+0x2a>
ffffffff80006930:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80006934:	48 83 c4 20          	add    rsp,0x20
ffffffff80006938:	5d                   	pop    rbp
ffffffff80006939:	c3                   	ret
ffffffff8000693a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff8000693e:	e8 cd ca ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80006943:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80006947:	48 83 c4 20          	add    rsp,0x20
ffffffff8000694b:	5d                   	pop    rbp
ffffffff8000694c:	c3                   	ret
ffffffff8000694d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80006950 <fmt.formatIntValue__anon_2779>:
pub fn formatIntValue(
    value: anytype,
    comptime fmt: []const u8,
    options: FormatOptions,
    writer: anytype,
) !void {
ffffffff80006950:	55                   	push   rbp
ffffffff80006951:	48 89 e5             	mov    rbp,rsp
ffffffff80006954:	48 83 ec 20          	sub    rsp,0x20
ffffffff80006958:	49 89 c9             	mov    r9,rcx
ffffffff8000695b:	49 89 d0             	mov    r8,rdx
ffffffff8000695e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff80006962:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    comptime var radix = 10;
    comptime var case: Case = .lower;

    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80006966:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        case = .lower;
    } else {
        invalidFmtError(fmt, value);
    }

    return formatInt(int_value, radix, case, options, writer);
ffffffff8000696a:	31 c0                	xor    eax,eax
ffffffff8000696c:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80006971:	31 c9                	xor    ecx,ecx
ffffffff80006973:	e8 28 00 00 00       	call   ffffffff800069a0 <fmt.formatInt__anon_2783>
ffffffff80006978:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000697c:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80006981:	75 0a                	jne    ffffffff8000698d <fmt.formatIntValue__anon_2779+0x3d>
ffffffff80006983:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80006987:	48 83 c4 20          	add    rsp,0x20
ffffffff8000698b:	5d                   	pop    rbp
ffffffff8000698c:	c3                   	ret
ffffffff8000698d:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80006991:	e8 7a ca ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80006996:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000699a:	48 83 c4 20          	add    rsp,0x20
ffffffff8000699e:	5d                   	pop    rbp
ffffffff8000699f:	c3                   	ret

ffffffff800069a0 <fmt.formatInt__anon_2783>:
    value: anytype,
    base: u8,
    case: Case,
    options: FormatOptions,
    writer: anytype,
) !void {
ffffffff800069a0:	55                   	push   rbp
ffffffff800069a1:	48 89 e5             	mov    rbp,rsp
ffffffff800069a4:	48 81 ec 10 02 00 00 	sub    rsp,0x210
ffffffff800069ab:	4c 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],r9
ffffffff800069b2:	4c 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],r8
ffffffff800069b9:	48 89 b5 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rsi
ffffffff800069c0:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
ffffffff800069c7:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
ffffffff800069cd:	88 d0                	mov    al,dl
ffffffff800069cf:	88 85 df fe ff ff    	mov    BYTE PTR [rbp-0x121],al
ffffffff800069d5:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
ffffffff800069dc:	88 85 f6 fe ff ff    	mov    BYTE PTR [rbp-0x10a],al
ffffffff800069e2:	80 e1 01             	and    cl,0x1
ffffffff800069e5:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
    assert(base >= 2);
ffffffff800069eb:	3c 02                	cmp    al,0x2
ffffffff800069ed:	0f 93 c0             	setae  al
ffffffff800069f0:	0f b6 f8             	movzx  edi,al
ffffffff800069f3:	e8 38 f2 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff800069f8:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]

    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff800069ff:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi

    const value_info = @typeInfo(@TypeOf(int_value)).Int;

    // The type must have the same size as `base` or be wider in order for the
    // division to work
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80006a06:	66 c7 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],0x40
ffffffff80006a0d:	40 00 
    const MinInt = std.meta.Int(.unsigned, min_int_bits);

    const abs_value = math.absCast(int_value);
ffffffff80006a0f:	e8 5c 07 00 00       	call   ffffffff80007170 <math.absCast__anon_2785>
ffffffff80006a14:	48 89 c1             	mov    rcx,rax
ffffffff80006a17:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
ffffffff80006a1d:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
ffffffff80006a24:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff80006a2b:	aa aa aa 
ffffffff80006a2e:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
    // The worst case in terms of space needed is base 2, plus 1 for the sign
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80006a35:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
ffffffff80006a3c:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
ffffffff80006a43:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
ffffffff80006a4a:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
ffffffff80006a51:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
ffffffff80006a58:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
ffffffff80006a5f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
ffffffff80006a66:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffffffff80006a6d:	c6 85 50 ff ff ff aa 	mov    BYTE PTR [rbp-0xb0],0xaa

    var a: MinInt = abs_value;
ffffffff80006a74:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
    var index: usize = buf.len;
ffffffff80006a7b:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x41
ffffffff80006a82:	41 00 00 00 

    // TODO isComptime here because of https://github.com/ziglang/zig/issues/13335.
    if (base == 10 and !isComptime()) {
ffffffff80006a86:	3c 0a                	cmp    al,0xa
ffffffff80006a88:	75 0f                	jne    ffffffff80006a99 <fmt.formatInt__anon_2783+0xf9>
ffffffff80006a8a:	e8 01 07 00 00       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80006a8f:	34 ff                	xor    al,0xff
ffffffff80006a91:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
ffffffff80006a97:	eb 0a                	jmp    ffffffff80006aa3 <fmt.formatInt__anon_2783+0x103>
ffffffff80006a99:	31 c0                	xor    eax,eax
ffffffff80006a9b:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
ffffffff80006aa1:	eb 00                	jmp    ffffffff80006aa3 <fmt.formatInt__anon_2783+0x103>
ffffffff80006aa3:	8a 85 af fe ff ff    	mov    al,BYTE PTR [rbp-0x151]
ffffffff80006aa9:	a8 01                	test   al,0x1
ffffffff80006aab:	75 02                	jne    ffffffff80006aaf <fmt.formatInt__anon_2783+0x10f>
ffffffff80006aad:	eb 02                	jmp    ffffffff80006ab1 <fmt.formatInt__anon_2783+0x111>
ffffffff80006aaf:	eb 05                	jmp    ffffffff80006ab6 <fmt.formatInt__anon_2783+0x116>
        if (a < 10) {
            index -= 1;
            buf[index] = '0' + @intCast(u8, a);
        } else {
            index -= 2;
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80006ab1:	e9 0d 04 00 00       	jmp    ffffffff80006ec3 <fmt.formatInt__anon_2783+0x523>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80006ab6:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x64
ffffffff80006abd:	64 
ffffffff80006abe:	72 25                	jb     ffffffff80006ae5 <fmt.formatInt__anon_2783+0x145>
            index -= 2;
ffffffff80006ac0:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006ac7:	48 83 e8 02          	sub    rax,0x2
ffffffff80006acb:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff80006ad2:	0f 92 85 70 ff ff ff 	setb   BYTE PTR [rbp-0x90]
ffffffff80006ad9:	8a 85 70 ff ff ff    	mov    al,BYTE PTR [rbp-0x90]
ffffffff80006adf:	84 c0                	test   al,al
ffffffff80006ae1:	74 07                	je     ffffffff80006aea <fmt.formatInt__anon_2783+0x14a>
ffffffff80006ae3:	eb 07                	jmp    ffffffff80006aec <fmt.formatInt__anon_2783+0x14c>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80006ae5:	e9 69 01 00 00       	jmp    ffffffff80006c53 <fmt.formatInt__anon_2783+0x2b3>
            index -= 2;
ffffffff80006aea:	eb 1c                	jmp    ffffffff80006b08 <fmt.formatInt__anon_2783+0x168>
ffffffff80006aec:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006af3:	48 c7 c1 b8 ba 01 80 	mov    rcx,0xffffffff8001bab8
ffffffff80006afa:	31 c0                	xor    eax,eax
ffffffff80006afc:	89 c2                	mov    edx,eax
ffffffff80006afe:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006b03:	e8 a8 96 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006b08:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80006b0f:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80006b16:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006b1d:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80006b24:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff80006b2b:	48 01 c1             	add    rcx,rax
ffffffff80006b2e:	48 89 8d a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rcx
ffffffff80006b35:	48 83 f8 41          	cmp    rax,0x41
ffffffff80006b39:	77 02                	ja     ffffffff80006b3d <fmt.formatInt__anon_2783+0x19d>
ffffffff80006b3b:	eb 11                	jmp    ffffffff80006b4e <fmt.formatInt__anon_2783+0x1ae>
ffffffff80006b3d:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff80006b44:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006b49:	e8 c2 97 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80006b4e:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
ffffffff80006b55:	b8 41 00 00 00       	mov    eax,0x41
ffffffff80006b5a:	48 29 c8             	sub    rax,rcx
ffffffff80006b5d:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff80006b64:	b0 01                	mov    al,0x1
ffffffff80006b66:	a8 01                	test   al,0x1
ffffffff80006b68:	75 02                	jne    ffffffff80006b6c <fmt.formatInt__anon_2783+0x1cc>
ffffffff80006b6a:	eb 02                	jmp    ffffffff80006b6e <fmt.formatInt__anon_2783+0x1ce>
ffffffff80006b6c:	eb 0d                	jmp    ffffffff80006b7b <fmt.formatInt__anon_2783+0x1db>
ffffffff80006b6e:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006b73:	48 89 f7             	mov    rdi,rsi
ffffffff80006b76:	e8 55 96 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006b7b:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
ffffffff80006b82:	48 83 f8 41          	cmp    rax,0x41
ffffffff80006b86:	77 02                	ja     ffffffff80006b8a <fmt.formatInt__anon_2783+0x1ea>
ffffffff80006b88:	eb 11                	jmp    ffffffff80006b9b <fmt.formatInt__anon_2783+0x1fb>
ffffffff80006b8a:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff80006b91:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006b96:	e8 35 96 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006b9b:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
ffffffff80006ba2:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffffffff80006ba9:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffffffff80006bad:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80006bb4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80006bbb:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
ffffffff80006bc2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80006bc6:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
ffffffff80006bcd:	b0 01                	mov    al,0x1
ffffffff80006bcf:	a8 01                	test   al,0x1
ffffffff80006bd1:	75 02                	jne    ffffffff80006bd5 <fmt.formatInt__anon_2783+0x235>
ffffffff80006bd3:	eb 02                	jmp    ffffffff80006bd7 <fmt.formatInt__anon_2783+0x237>
ffffffff80006bd5:	eb 10                	jmp    ffffffff80006be7 <fmt.formatInt__anon_2783+0x247>
ffffffff80006bd7:	31 c0                	xor    eax,eax
ffffffff80006bd9:	31 c0                	xor    eax,eax
ffffffff80006bdb:	89 c7                	mov    edi,eax
ffffffff80006bdd:	be 02 00 00 00       	mov    esi,0x2
ffffffff80006be2:	e8 29 97 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80006be7:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffffffff80006bee:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80006bf3:	48 39 c8             	cmp    rax,rcx
ffffffff80006bf6:	77 02                	ja     ffffffff80006bfa <fmt.formatInt__anon_2783+0x25a>
ffffffff80006bf8:	eb 11                	jmp    ffffffff80006c0b <fmt.formatInt__anon_2783+0x26b>
ffffffff80006bfa:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
ffffffff80006c01:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80006c06:	e8 c5 95 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006c0b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80006c12:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff80006c17:	31 d2                	xor    edx,edx
ffffffff80006c19:	48 f7 f1             	div    rcx
ffffffff80006c1c:	48 89 d6             	mov    rsi,rdx
ffffffff80006c1f:	48 8d 7d 8e          	lea    rdi,[rbp-0x72]
ffffffff80006c23:	e8 88 05 00 00       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80006c28:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff80006c2f:	66 8b 4d 8e          	mov    cx,WORD PTR [rbp-0x72]
ffffffff80006c33:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80006c36:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80006c3d:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff80006c42:	31 d2                	xor    edx,edx
ffffffff80006c44:	48 f7 f1             	div    rcx
ffffffff80006c47:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
ffffffff80006c4e:	e9 63 fe ff ff       	jmp    ffffffff80006ab6 <fmt.formatInt__anon_2783+0x116>
        if (a < 10) {
ffffffff80006c53:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0xa
ffffffff80006c5a:	0a 
ffffffff80006c5b:	73 1c                	jae    ffffffff80006c79 <fmt.formatInt__anon_2783+0x2d9>
            index -= 1;
ffffffff80006c5d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006c64:	48 83 e8 01          	sub    rax,0x1
ffffffff80006c68:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80006c6c:	0f 92 45 98          	setb   BYTE PTR [rbp-0x68]
ffffffff80006c70:	8a 45 98             	mov    al,BYTE PTR [rbp-0x68]
ffffffff80006c73:	84 c0                	test   al,al
ffffffff80006c75:	74 25                	je     ffffffff80006c9c <fmt.formatInt__anon_2783+0x2fc>
ffffffff80006c77:	eb 25                	jmp    ffffffff80006c9e <fmt.formatInt__anon_2783+0x2fe>
            index -= 2;
ffffffff80006c79:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006c80:	48 83 e8 02          	sub    rax,0x2
ffffffff80006c84:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80006c88:	0f 92 45 b0          	setb   BYTE PTR [rbp-0x50]
ffffffff80006c8c:	8a 45 b0             	mov    al,BYTE PTR [rbp-0x50]
ffffffff80006c8f:	84 c0                	test   al,al
ffffffff80006c91:	0f 84 f1 00 00 00    	je     ffffffff80006d88 <fmt.formatInt__anon_2783+0x3e8>
ffffffff80006c97:	e9 ee 00 00 00       	jmp    ffffffff80006d8a <fmt.formatInt__anon_2783+0x3ea>
            index -= 1;
ffffffff80006c9c:	eb 1c                	jmp    ffffffff80006cba <fmt.formatInt__anon_2783+0x31a>
ffffffff80006c9e:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006ca5:	48 c7 c1 c8 ba 01 80 	mov    rcx,0xffffffff8001bac8
ffffffff80006cac:	31 c0                	xor    eax,eax
ffffffff80006cae:	89 c2                	mov    edx,eax
ffffffff80006cb0:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006cb5:	e8 f6 94 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006cba:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80006cbe:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80006cc5:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006ccc:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80006cd3:	48 83 f8 41          	cmp    rax,0x41
ffffffff80006cd7:	73 02                	jae    ffffffff80006cdb <fmt.formatInt__anon_2783+0x33b>
ffffffff80006cd9:	eb 11                	jmp    ffffffff80006cec <fmt.formatInt__anon_2783+0x34c>
ffffffff80006cdb:	48 8b bd 78 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x188]
ffffffff80006ce2:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006ce7:	e8 e4 94 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006cec:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
ffffffff80006cf3:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffffffff80006cfa:	48 01 c8             	add    rax,rcx
ffffffff80006cfd:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff80006d04:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff80006d0b:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
ffffffff80006d12:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80006d17:	48 29 c8             	sub    rax,rcx
ffffffff80006d1a:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff80006d20:	77 02                	ja     ffffffff80006d24 <fmt.formatInt__anon_2783+0x384>
ffffffff80006d22:	eb 1c                	jmp    ffffffff80006d40 <fmt.formatInt__anon_2783+0x3a0>
ffffffff80006d24:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80006d2b:	48 c7 c1 d8 ba 01 80 	mov    rcx,0xffffffff8001bad8
ffffffff80006d32:	31 c0                	xor    eax,eax
ffffffff80006d34:	89 c2                	mov    edx,eax
ffffffff80006d36:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80006d3b:	e8 70 94 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006d40:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
ffffffff80006d47:	04 30                	add    al,0x30
ffffffff80006d49:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
ffffffff80006d4c:	0f 92 45 a1          	setb   BYTE PTR [rbp-0x5f]
ffffffff80006d50:	8a 45 a1             	mov    al,BYTE PTR [rbp-0x5f]
ffffffff80006d53:	84 c0                	test   al,al
ffffffff80006d55:	75 04                	jne    ffffffff80006d5b <fmt.formatInt__anon_2783+0x3bb>
ffffffff80006d57:	eb 00                	jmp    ffffffff80006d59 <fmt.formatInt__anon_2783+0x3b9>
ffffffff80006d59:	eb 1c                	jmp    ffffffff80006d77 <fmt.formatInt__anon_2783+0x3d7>
ffffffff80006d5b:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006d62:	48 c7 c1 e8 ba 01 80 	mov    rcx,0xffffffff8001bae8
ffffffff80006d69:	31 c0                	xor    eax,eax
ffffffff80006d6b:	89 c2                	mov    edx,eax
ffffffff80006d6d:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006d72:	e8 39 94 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006d77:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
ffffffff80006d7e:	8a 4d a0             	mov    cl,BYTE PTR [rbp-0x60]
ffffffff80006d81:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80006d83:	e9 36 01 00 00       	jmp    ffffffff80006ebe <fmt.formatInt__anon_2783+0x51e>
            index -= 2;
ffffffff80006d88:	eb 1c                	jmp    ffffffff80006da6 <fmt.formatInt__anon_2783+0x406>
ffffffff80006d8a:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006d91:	48 c7 c1 f8 ba 01 80 	mov    rcx,0xffffffff8001baf8
ffffffff80006d98:	31 c0                	xor    eax,eax
ffffffff80006d9a:	89 c2                	mov    edx,eax
ffffffff80006d9c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006da1:	e8 0a 94 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006da6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80006daa:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80006db1:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006db8:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80006dbf:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff80006dc6:	48 01 c1             	add    rcx,rax
ffffffff80006dc9:	48 89 8d 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rcx
ffffffff80006dd0:	48 83 f8 41          	cmp    rax,0x41
ffffffff80006dd4:	77 02                	ja     ffffffff80006dd8 <fmt.formatInt__anon_2783+0x438>
ffffffff80006dd6:	eb 11                	jmp    ffffffff80006de9 <fmt.formatInt__anon_2783+0x449>
ffffffff80006dd8:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff80006ddf:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006de4:	e8 27 95 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80006de9:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
ffffffff80006df0:	b8 41 00 00 00       	mov    eax,0x41
ffffffff80006df5:	48 29 c8             	sub    rax,rcx
ffffffff80006df8:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
ffffffff80006dff:	b0 01                	mov    al,0x1
ffffffff80006e01:	a8 01                	test   al,0x1
ffffffff80006e03:	75 02                	jne    ffffffff80006e07 <fmt.formatInt__anon_2783+0x467>
ffffffff80006e05:	eb 02                	jmp    ffffffff80006e09 <fmt.formatInt__anon_2783+0x469>
ffffffff80006e07:	eb 0d                	jmp    ffffffff80006e16 <fmt.formatInt__anon_2783+0x476>
ffffffff80006e09:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006e0e:	48 89 f7             	mov    rdi,rsi
ffffffff80006e11:	e8 ba 93 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006e16:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
ffffffff80006e1d:	48 83 f8 41          	cmp    rax,0x41
ffffffff80006e21:	77 02                	ja     ffffffff80006e25 <fmt.formatInt__anon_2783+0x485>
ffffffff80006e23:	eb 11                	jmp    ffffffff80006e36 <fmt.formatInt__anon_2783+0x496>
ffffffff80006e25:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff80006e2c:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006e31:	e8 9a 93 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006e36:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
ffffffff80006e3d:	48 8b 8d 50 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b0]
ffffffff80006e44:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff80006e48:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80006e4c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80006e50:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
ffffffff80006e57:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80006e5b:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff80006e62:	b0 01                	mov    al,0x1
ffffffff80006e64:	a8 01                	test   al,0x1
ffffffff80006e66:	75 02                	jne    ffffffff80006e6a <fmt.formatInt__anon_2783+0x4ca>
ffffffff80006e68:	eb 02                	jmp    ffffffff80006e6c <fmt.formatInt__anon_2783+0x4cc>
ffffffff80006e6a:	eb 10                	jmp    ffffffff80006e7c <fmt.formatInt__anon_2783+0x4dc>
ffffffff80006e6c:	31 c0                	xor    eax,eax
ffffffff80006e6e:	31 c0                	xor    eax,eax
ffffffff80006e70:	89 c7                	mov    edi,eax
ffffffff80006e72:	be 02 00 00 00       	mov    esi,0x2
ffffffff80006e77:	e8 94 94 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80006e7c:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
ffffffff80006e83:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80006e88:	48 39 c8             	cmp    rax,rcx
ffffffff80006e8b:	77 02                	ja     ffffffff80006e8f <fmt.formatInt__anon_2783+0x4ef>
ffffffff80006e8d:	eb 11                	jmp    ffffffff80006ea0 <fmt.formatInt__anon_2783+0x500>
ffffffff80006e8f:	48 8b b5 48 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1b8]
ffffffff80006e96:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80006e9b:	e8 30 93 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006ea0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
ffffffff80006ea7:	48 8d 7d ce          	lea    rdi,[rbp-0x32]
ffffffff80006eab:	e8 00 03 00 00       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80006eb0:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
ffffffff80006eb7:	66 8b 4d ce          	mov    cx,WORD PTR [rbp-0x32]
ffffffff80006ebb:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff80006ebe:	e9 b0 01 00 00       	jmp    ffffffff80007073 <fmt.formatInt__anon_2783+0x6d3>
ffffffff80006ec3:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
        }
    } else {
        while (true) {
            const digit = a % base;
ffffffff80006ec9:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff80006ed0:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
ffffffff80006ed7:	0f b6 c0             	movzx  eax,al
ffffffff80006eda:	48 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rax
ffffffff80006ee1:	48 83 f8 00          	cmp    rax,0x0
ffffffff80006ee5:	74 02                	je     ffffffff80006ee9 <fmt.formatInt__anon_2783+0x549>
ffffffff80006ee7:	eb 1c                	jmp    ffffffff80006f05 <fmt.formatInt__anon_2783+0x565>
ffffffff80006ee9:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80006ef0:	48 c7 c1 08 bb 01 80 	mov    rcx,0xffffffff8001bb08
ffffffff80006ef7:	31 c0                	xor    eax,eax
ffffffff80006ef9:	89 c2                	mov    edx,eax
ffffffff80006efb:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006f00:	e8 ab 92 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006f05:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
ffffffff80006f0c:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
ffffffff80006f13:	31 d2                	xor    edx,edx
ffffffff80006f15:	48 f7 f1             	div    rcx
ffffffff80006f18:	48 89 d0             	mov    rax,rdx
ffffffff80006f1b:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
ffffffff80006f22:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            index -= 1;
ffffffff80006f26:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006f2d:	48 83 e8 01          	sub    rax,0x1
ffffffff80006f31:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80006f35:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80006f39:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff80006f3c:	84 c0                	test   al,al
ffffffff80006f3e:	75 04                	jne    ffffffff80006f44 <fmt.formatInt__anon_2783+0x5a4>
ffffffff80006f40:	eb 00                	jmp    ffffffff80006f42 <fmt.formatInt__anon_2783+0x5a2>
ffffffff80006f42:	eb 1c                	jmp    ffffffff80006f60 <fmt.formatInt__anon_2783+0x5c0>
ffffffff80006f44:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80006f4b:	48 c7 c1 18 bb 01 80 	mov    rcx,0xffffffff8001bb18
ffffffff80006f52:	31 c0                	xor    eax,eax
ffffffff80006f54:	89 c2                	mov    edx,eax
ffffffff80006f56:	be 10 00 00 00       	mov    esi,0x10
ffffffff80006f5b:	e8 50 92 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006f60:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80006f64:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80006f6b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80006f72:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff80006f79:	48 83 f8 41          	cmp    rax,0x41
ffffffff80006f7d:	73 02                	jae    ffffffff80006f81 <fmt.formatInt__anon_2783+0x5e1>
ffffffff80006f7f:	eb 11                	jmp    ffffffff80006f92 <fmt.formatInt__anon_2783+0x5f2>
ffffffff80006f81:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
ffffffff80006f88:	be 41 00 00 00       	mov    esi,0x41
ffffffff80006f8d:	e8 3e 92 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80006f92:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80006f99:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80006fa0:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffffffff80006fa7:	48 01 d0             	add    rax,rdx
ffffffff80006faa:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
ffffffff80006fb1:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80006fb6:	48 29 c8             	sub    rax,rcx
ffffffff80006fb9:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff80006fbf:	77 02                	ja     ffffffff80006fc3 <fmt.formatInt__anon_2783+0x623>
ffffffff80006fc1:	eb 1c                	jmp    ffffffff80006fdf <fmt.formatInt__anon_2783+0x63f>
ffffffff80006fc3:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80006fca:	48 c7 c1 28 bb 01 80 	mov    rcx,0xffffffff8001bb28
ffffffff80006fd1:	31 c0                	xor    eax,eax
ffffffff80006fd3:	89 c2                	mov    edx,eax
ffffffff80006fd5:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80006fda:	e8 d1 91 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80006fdf:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
ffffffff80006fe5:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80006fec:	0f b6 f9             	movzx  edi,cl
ffffffff80006fef:	0f b6 f0             	movzx  esi,al
ffffffff80006ff2:	e8 29 03 00 00       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80006ff7:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80006ffe:	88 c2                	mov    dl,al
ffffffff80007000:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
ffffffff80007006:	88 11                	mov    BYTE PTR [rcx],dl
            a /= base;
ffffffff80007008:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff8000700f:	48 89 8d 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rcx
ffffffff80007016:	0f b6 c0             	movzx  eax,al
ffffffff80007019:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff80007020:	48 83 f8 00          	cmp    rax,0x0
ffffffff80007024:	74 02                	je     ffffffff80007028 <fmt.formatInt__anon_2783+0x688>
ffffffff80007026:	eb 1c                	jmp    ffffffff80007044 <fmt.formatInt__anon_2783+0x6a4>
ffffffff80007028:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8000702f:	48 c7 c1 38 bb 01 80 	mov    rcx,0xffffffff8001bb38
ffffffff80007036:	31 c0                	xor    eax,eax
ffffffff80007038:	89 c2                	mov    edx,eax
ffffffff8000703a:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000703f:	e8 6c 91 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007044:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
ffffffff8000704b:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
ffffffff80007052:	31 d2                	xor    edx,edx
ffffffff80007054:	48 f7 f1             	div    rcx
ffffffff80007057:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            if (a == 0) break;
ffffffff8000705e:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x0
ffffffff80007065:	00 
ffffffff80007066:	75 02                	jne    ffffffff8000706a <fmt.formatInt__anon_2783+0x6ca>
ffffffff80007068:	eb 07                	jmp    ffffffff80007071 <fmt.formatInt__anon_2783+0x6d1>
ffffffff8000706a:	eb 00                	jmp    ffffffff8000706c <fmt.formatInt__anon_2783+0x6cc>
ffffffff8000706c:	e9 52 fe ff ff       	jmp    ffffffff80006ec3 <fmt.formatInt__anon_2783+0x523>
ffffffff80007071:	eb 00                	jmp    ffffffff80007073 <fmt.formatInt__anon_2783+0x6d3>
            index -= 1;
            buf[index] = '+';
        }
    }

    return formatBuf(buf[index..], options, writer);
ffffffff80007073:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000707a:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
ffffffff80007081:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff80007088:	48 01 c1             	add    rcx,rax
ffffffff8000708b:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
ffffffff80007092:	48 83 f8 41          	cmp    rax,0x41
ffffffff80007096:	77 02                	ja     ffffffff8000709a <fmt.formatInt__anon_2783+0x6fa>
ffffffff80007098:	eb 11                	jmp    ffffffff800070ab <fmt.formatInt__anon_2783+0x70b>
ffffffff8000709a:	48 8b bd f8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x208]
ffffffff800070a1:	be 41 00 00 00       	mov    esi,0x41
ffffffff800070a6:	e8 65 92 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800070ab:	48 8b 8d f8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x208]
ffffffff800070b2:	b8 41 00 00 00       	mov    eax,0x41
ffffffff800070b7:	48 29 c8             	sub    rax,rcx
ffffffff800070ba:	48 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rax
ffffffff800070c1:	b0 01                	mov    al,0x1
ffffffff800070c3:	a8 01                	test   al,0x1
ffffffff800070c5:	75 02                	jne    ffffffff800070c9 <fmt.formatInt__anon_2783+0x729>
ffffffff800070c7:	eb 02                	jmp    ffffffff800070cb <fmt.formatInt__anon_2783+0x72b>
ffffffff800070c9:	eb 0d                	jmp    ffffffff800070d8 <fmt.formatInt__anon_2783+0x738>
ffffffff800070cb:	be 41 00 00 00       	mov    esi,0x41
ffffffff800070d0:	48 89 f7             	mov    rdi,rsi
ffffffff800070d3:	e8 f8 90 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800070d8:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
ffffffff800070df:	48 83 f8 41          	cmp    rax,0x41
ffffffff800070e3:	77 02                	ja     ffffffff800070e7 <fmt.formatInt__anon_2783+0x747>
ffffffff800070e5:	eb 11                	jmp    ffffffff800070f8 <fmt.formatInt__anon_2783+0x758>
ffffffff800070e7:	48 8b bd f8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x208]
ffffffff800070ee:	be 41 00 00 00       	mov    esi,0x41
ffffffff800070f3:	e8 d8 90 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800070f8:	4c 8b 85 b0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x150]
ffffffff800070ff:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff80007106:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff8000710d:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
ffffffff80007114:	48 8b 95 f0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x210]
ffffffff8000711b:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8000711f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80007123:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80007127:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000712b:	e8 30 03 00 00       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff80007130:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80007134:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80007139:	75 0d                	jne    ffffffff80007148 <fmt.formatInt__anon_2783+0x7a8>
ffffffff8000713b:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8000713f:	48 81 c4 10 02 00 00 	add    rsp,0x210
ffffffff80007146:	5d                   	pop    rbp
ffffffff80007147:	c3                   	ret
ffffffff80007148:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff8000714f:	e8 bc c2 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80007154:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80007158:	48 81 c4 10 02 00 00 	add    rsp,0x210
ffffffff8000715f:	5d                   	pop    rbp
ffffffff80007160:	c3                   	ret
ffffffff80007161:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80007168:	00 00 00 
ffffffff8000716b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80007170 <math.absCast__anon_2785>:
/// See also: `absInt`
pub fn absCast(x: anytype) switch (@typeInfo(@TypeOf(x))) {
    .ComptimeInt => comptime_int,
    .Int => |int_info| std.meta.Int(.unsigned, int_info.bits),
    else => @compileError("absCast only accepts integers"),
} {
ffffffff80007170:	55                   	push   rbp
ffffffff80007171:	48 89 e5             	mov    rbp,rsp
ffffffff80007174:	50                   	push   rax
ffffffff80007175:	48 89 f8             	mov    rax,rdi
ffffffff80007178:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
            } else {
                return x;
            }
        },
        .Int => |int_info| {
            if (int_info.signedness == .unsigned) return x;
ffffffff8000717c:	48 83 c4 08          	add    rsp,0x8
ffffffff80007180:	5d                   	pop    rbp
ffffffff80007181:	c3                   	ret
ffffffff80007182:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80007189:	00 00 00 
ffffffff8000718c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80007190 <fmt.isComptime>:
}

// TODO: Remove once https://github.com/ziglang/zig/issues/868 is resolved.
fn isComptime() bool {
ffffffff80007190:	55                   	push   rbp
ffffffff80007191:	48 89 e5             	mov    rbp,rsp
ffffffff80007194:	48 83 ec 01          	sub    rsp,0x1
    var a: u8 = 0;
ffffffff80007198:	c6 45 ff 00          	mov    BYTE PTR [rbp-0x1],0x0
ffffffff8000719c:	31 c0                	xor    eax,eax
    return @typeInfo(@TypeOf(.{a})).Struct.fields[0].is_comptime;
ffffffff8000719e:	48 83 c4 01          	add    rsp,0x1
ffffffff800071a2:	5d                   	pop    rbp
ffffffff800071a3:	c3                   	ret
ffffffff800071a4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800071ab:	00 00 00 
ffffffff800071ae:	66 90                	xchg   ax,ax

ffffffff800071b0 <fmt.digits2>:
    formatInt(value, base, case, options, fbs.writer()) catch unreachable;
    return fbs.pos;
}

// Converts values in the range [0, 100) to a string.
fn digits2(value: usize) [2]u8 {
ffffffff800071b0:	55                   	push   rbp
ffffffff800071b1:	48 89 e5             	mov    rbp,rsp
ffffffff800071b4:	48 81 ec 80 00 00 00 	sub    rsp,0x80
ffffffff800071bb:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff800071bf:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff800071c3:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
    return ("0001020304050607080910111213141516171819" ++
        "2021222324252627282930313233343536373839" ++
        "4041424344454647484950515253545556575859" ++
        "6061626364656667686970717273747576777879" ++
        "8081828384858687888990919293949596979899")[value * 2 ..][0..2].*;
ffffffff800071c7:	48 01 f6             	add    rsi,rsi
ffffffff800071ca:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800071ce:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff800071d2:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff800071d5:	84 c0                	test   al,al
ffffffff800071d7:	75 04                	jne    ffffffff800071dd <fmt.digits2+0x2d>
ffffffff800071d9:	eb 00                	jmp    ffffffff800071db <fmt.digits2+0x2b>
ffffffff800071db:	eb 1c                	jmp    ffffffff800071f9 <fmt.digits2+0x49>
ffffffff800071dd:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800071e4:	48 c7 c1 48 c0 01 80 	mov    rcx,0xffffffff8001c048
ffffffff800071eb:	31 c0                	xor    eax,eax
ffffffff800071ed:	89 c2                	mov    edx,eax
ffffffff800071ef:	be 10 00 00 00       	mov    esi,0x10
ffffffff800071f4:	e8 b7 8f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800071f9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800071fd:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80007201:	48 8d 88 f5 b4 01 80 	lea    rcx,[rax-0x7ffe4b0b]
ffffffff80007208:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff8000720c:	48 3d c8 00 00 00    	cmp    rax,0xc8
ffffffff80007212:	77 02                	ja     ffffffff80007216 <fmt.digits2+0x66>
ffffffff80007214:	eb 0e                	jmp    ffffffff80007224 <fmt.digits2+0x74>
ffffffff80007216:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
ffffffff8000721a:	be c8 00 00 00       	mov    esi,0xc8
ffffffff8000721f:	e8 ec 90 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80007224:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffffffff80007228:	b8 c8 00 00 00       	mov    eax,0xc8
ffffffff8000722d:	48 29 c8             	sub    rax,rcx
ffffffff80007230:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80007234:	b0 01                	mov    al,0x1
ffffffff80007236:	a8 01                	test   al,0x1
ffffffff80007238:	75 02                	jne    ffffffff8000723c <fmt.digits2+0x8c>
ffffffff8000723a:	eb 02                	jmp    ffffffff8000723e <fmt.digits2+0x8e>
ffffffff8000723c:	eb 0f                	jmp    ffffffff8000724d <fmt.digits2+0x9d>
ffffffff8000723e:	bf c8 00 00 00       	mov    edi,0xc8
ffffffff80007243:	be c9 00 00 00       	mov    esi,0xc9
ffffffff80007248:	e8 83 8f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000724d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80007251:	48 3d c8 00 00 00    	cmp    rax,0xc8
ffffffff80007257:	77 02                	ja     ffffffff8000725b <fmt.digits2+0xab>
ffffffff80007259:	eb 0e                	jmp    ffffffff80007269 <fmt.digits2+0xb9>
ffffffff8000725b:	48 8b 7d a8          	mov    rdi,QWORD PTR [rbp-0x58]
ffffffff8000725f:	be c8 00 00 00       	mov    esi,0xc8
ffffffff80007264:	e8 67 8f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80007269:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8000726d:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff80007271:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80007275:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80007279:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000727d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80007281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80007285:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80007289:	b0 01                	mov    al,0x1
ffffffff8000728b:	a8 01                	test   al,0x1
ffffffff8000728d:	75 02                	jne    ffffffff80007291 <fmt.digits2+0xe1>
ffffffff8000728f:	eb 02                	jmp    ffffffff80007293 <fmt.digits2+0xe3>
ffffffff80007291:	eb 10                	jmp    ffffffff800072a3 <fmt.digits2+0xf3>
ffffffff80007293:	31 c0                	xor    eax,eax
ffffffff80007295:	31 c0                	xor    eax,eax
ffffffff80007297:	89 c7                	mov    edi,eax
ffffffff80007299:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000729e:	e8 6d 90 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800072a3:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff800072a7:	48 ff c0             	inc    rax
ffffffff800072aa:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800072ae:	0f 94 45 f8          	sete   BYTE PTR [rbp-0x8]
ffffffff800072b2:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff800072b5:	84 c0                	test   al,al
ffffffff800072b7:	75 04                	jne    ffffffff800072bd <fmt.digits2+0x10d>
ffffffff800072b9:	eb 00                	jmp    ffffffff800072bb <fmt.digits2+0x10b>
ffffffff800072bb:	eb 1c                	jmp    ffffffff800072d9 <fmt.digits2+0x129>
ffffffff800072bd:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800072c4:	48 c7 c1 58 c0 01 80 	mov    rcx,0xffffffff8001c058
ffffffff800072cb:	31 c0                	xor    eax,eax
ffffffff800072cd:	89 c2                	mov    edx,eax
ffffffff800072cf:	be 10 00 00 00       	mov    esi,0x10
ffffffff800072d4:	e8 d7 8e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800072d9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff800072dd:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff800072e1:	b8 02 00 00 00       	mov    eax,0x2
ffffffff800072e6:	48 39 c8             	cmp    rax,rcx
ffffffff800072e9:	77 02                	ja     ffffffff800072ed <fmt.digits2+0x13d>
ffffffff800072eb:	eb 0e                	jmp    ffffffff800072fb <fmt.digits2+0x14b>
ffffffff800072ed:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffffffff800072f1:	bf 02 00 00 00       	mov    edi,0x2
ffffffff800072f6:	e8 d5 8e ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800072fb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800072ff:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80007303:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
    return ("0001020304050607080910111213141516171819" ++
ffffffff80007307:	66 8b 12             	mov    dx,WORD PTR [rdx]
ffffffff8000730a:	66 89 11             	mov    WORD PTR [rcx],dx
ffffffff8000730d:	48 81 c4 80 00 00 00 	add    rsp,0x80
ffffffff80007314:	5d                   	pop    rbp
ffffffff80007315:	c3                   	ret
ffffffff80007316:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000731d:	00 00 00 

ffffffff80007320 <fmt.digitToChar>:
    if (value >= radix) return error.InvalidCharacter;

    return value;
}

pub fn digitToChar(digit: u8, case: Case) u8 {
ffffffff80007320:	55                   	push   rbp
ffffffff80007321:	48 89 e5             	mov    rbp,rsp
ffffffff80007324:	48 83 ec 20          	sub    rsp,0x20
ffffffff80007328:	40 88 f0             	mov    al,sil
ffffffff8000732b:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
ffffffff8000732e:	40 88 f9             	mov    cl,dil
ffffffff80007331:	88 4d e4             	mov    BYTE PTR [rbp-0x1c],cl
ffffffff80007334:	88 4d e5             	mov    BYTE PTR [rbp-0x1b],cl
ffffffff80007337:	24 01                	and    al,0x1
ffffffff80007339:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
ffffffff8000733c:	8a 4d e4             	mov    cl,BYTE PTR [rbp-0x1c]
    return switch (digit) {
ffffffff8000733f:	80 f9 00             	cmp    cl,0x0
ffffffff80007342:	0f 93 c0             	setae  al
ffffffff80007345:	80 f9 09             	cmp    cl,0x9
ffffffff80007348:	0f 96 c1             	setbe  cl
ffffffff8000734b:	20 c8                	and    al,cl
ffffffff8000734d:	a8 01                	test   al,0x1
ffffffff8000734f:	75 02                	jne    ffffffff80007353 <fmt.digitToChar+0x33>
ffffffff80007351:	eb 15                	jmp    ffffffff80007368 <fmt.digitToChar+0x48>
ffffffff80007353:	8a 45 e4             	mov    al,BYTE PTR [rbp-0x1c]
        0...9 => digit + '0',
ffffffff80007356:	04 30                	add    al,0x30
ffffffff80007358:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
ffffffff8000735b:	0f 92 45 e9          	setb   BYTE PTR [rbp-0x17]
ffffffff8000735f:	8a 45 e9             	mov    al,BYTE PTR [rbp-0x17]
ffffffff80007362:	84 c0                	test   al,al
ffffffff80007364:	74 19                	je     ffffffff8000737f <fmt.digitToChar+0x5f>
ffffffff80007366:	eb 19                	jmp    ffffffff80007381 <fmt.digitToChar+0x61>
ffffffff80007368:	8a 4d e4             	mov    cl,BYTE PTR [rbp-0x1c]
ffffffff8000736b:	80 f9 0a             	cmp    cl,0xa
ffffffff8000736e:	0f 93 c0             	setae  al
ffffffff80007371:	80 f9 23             	cmp    cl,0x23
ffffffff80007374:	0f 96 c1             	setbe  cl
ffffffff80007377:	20 c8                	and    al,cl
ffffffff80007379:	a8 01                	test   al,0x1
ffffffff8000737b:	75 2b                	jne    ffffffff800073a8 <fmt.digitToChar+0x88>
ffffffff8000737d:	eb 32                	jmp    ffffffff800073b1 <fmt.digitToChar+0x91>
ffffffff8000737f:	eb 1c                	jmp    ffffffff8000739d <fmt.digitToChar+0x7d>
ffffffff80007381:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007388:	48 c7 c1 68 c0 01 80 	mov    rcx,0xffffffff8001c068
ffffffff8000738f:	31 c0                	xor    eax,eax
ffffffff80007391:	89 c2                	mov    edx,eax
ffffffff80007393:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007398:	e8 13 8e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000739d:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff800073a0:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
ffffffff800073a3:	e9 a2 00 00 00       	jmp    ffffffff8000744a <fmt.digitToChar+0x12a>
ffffffff800073a8:	8a 45 e3             	mov    al,BYTE PTR [rbp-0x1d]
        10...35 => digit + ((if (case == .upper) @as(u8, 'A') else @as(u8, 'a')) - 10),
ffffffff800073ab:	a8 01                	test   al,0x1
ffffffff800073ad:	75 1e                	jne    ffffffff800073cd <fmt.digitToChar+0xad>
ffffffff800073af:	eb 23                	jmp    ffffffff800073d4 <fmt.digitToChar+0xb4>
        else => unreachable,
ffffffff800073b1:	48 c7 c7 6b b3 01 80 	mov    rdi,0xffffffff8001b36b
ffffffff800073b8:	48 c7 c1 98 c0 01 80 	mov    rcx,0xffffffff8001c098
ffffffff800073bf:	31 c0                	xor    eax,eax
ffffffff800073c1:	89 c2                	mov    edx,eax
ffffffff800073c3:	be 18 00 00 00       	mov    esi,0x18
ffffffff800073c8:	e8 e3 8d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
        10...35 => digit + ((if (case == .upper) @as(u8, 'A') else @as(u8, 'a')) - 10),
ffffffff800073cd:	b0 41                	mov    al,0x41
ffffffff800073cf:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
ffffffff800073d2:	eb 07                	jmp    ffffffff800073db <fmt.digitToChar+0xbb>
ffffffff800073d4:	b0 61                	mov    al,0x61
ffffffff800073d6:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
ffffffff800073d9:	eb 00                	jmp    ffffffff800073db <fmt.digitToChar+0xbb>
ffffffff800073db:	8a 45 e2             	mov    al,BYTE PTR [rbp-0x1e]
ffffffff800073de:	2c 0a                	sub    al,0xa
ffffffff800073e0:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff800073e3:	0f 92 45 f1          	setb   BYTE PTR [rbp-0xf]
ffffffff800073e7:	8a 45 f1             	mov    al,BYTE PTR [rbp-0xf]
ffffffff800073ea:	84 c0                	test   al,al
ffffffff800073ec:	75 04                	jne    ffffffff800073f2 <fmt.digitToChar+0xd2>
ffffffff800073ee:	eb 00                	jmp    ffffffff800073f0 <fmt.digitToChar+0xd0>
ffffffff800073f0:	eb 1c                	jmp    ffffffff8000740e <fmt.digitToChar+0xee>
ffffffff800073f2:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800073f9:	48 c7 c1 78 c0 01 80 	mov    rcx,0xffffffff8001c078
ffffffff80007400:	31 c0                	xor    eax,eax
ffffffff80007402:	89 c2                	mov    edx,eax
ffffffff80007404:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007409:	e8 a2 8d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000740e:	8a 45 e4             	mov    al,BYTE PTR [rbp-0x1c]
ffffffff80007411:	8a 4d f0             	mov    cl,BYTE PTR [rbp-0x10]
ffffffff80007414:	00 c8                	add    al,cl
ffffffff80007416:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff80007419:	0f 92 45 f9          	setb   BYTE PTR [rbp-0x7]
ffffffff8000741d:	8a 45 f9             	mov    al,BYTE PTR [rbp-0x7]
ffffffff80007420:	84 c0                	test   al,al
ffffffff80007422:	75 04                	jne    ffffffff80007428 <fmt.digitToChar+0x108>
ffffffff80007424:	eb 00                	jmp    ffffffff80007426 <fmt.digitToChar+0x106>
ffffffff80007426:	eb 1c                	jmp    ffffffff80007444 <fmt.digitToChar+0x124>
ffffffff80007428:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000742f:	48 c7 c1 88 c0 01 80 	mov    rcx,0xffffffff8001c088
ffffffff80007436:	31 c0                	xor    eax,eax
ffffffff80007438:	89 c2                	mov    edx,eax
ffffffff8000743a:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000743f:	e8 6c 8d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007444:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff80007447:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
    return switch (digit) {
ffffffff8000744a:	8a 45 e7             	mov    al,BYTE PTR [rbp-0x19]
ffffffff8000744d:	48 83 c4 20          	add    rsp,0x20
ffffffff80007451:	5d                   	pop    rbp
ffffffff80007452:	c3                   	ret
ffffffff80007453:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000745a:	00 00 00 
ffffffff8000745d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80007460 <fmt.formatBuf__anon_2788>:
) !void {
ffffffff80007460:	55                   	push   rbp
ffffffff80007461:	48 89 e5             	mov    rbp,rsp
ffffffff80007464:	48 81 ec 80 01 00 00 	sub    rsp,0x180
ffffffff8000746b:	4c 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],r8
ffffffff80007472:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
ffffffff80007479:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
ffffffff80007480:	48 89 d0             	mov    rax,rdx
ffffffff80007483:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff8000748a:	48 89 f0             	mov    rax,rsi
ffffffff8000748d:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff80007494:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffffffff8000749b:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
ffffffff800074a2:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff800074a5:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
    if (options.width) |min_width| {
ffffffff800074ac:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
ffffffff800074b0:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff800074b7:	48 8b 41 18          	mov    rax,QWORD PTR [rcx+0x18]
ffffffff800074bb:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff800074c2:	80 bd 08 ff ff ff 00 	cmp    BYTE PTR [rbp-0xf8],0x0
ffffffff800074c9:	74 42                	je     ffffffff8000750d <fmt.formatBuf__anon_2788+0xad>
ffffffff800074cb:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff800074d2:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffffffff800074d9:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
ffffffff800074e0:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff800074e7:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
ffffffff800074ee:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff800074f5:	48 8d bd 18 ff ff ff 	lea    rdi,[rbp-0xe8]
        const width = unicode.utf8CountCodepoints(buf) catch buf.len;
ffffffff800074fc:	e8 cf 04 00 00       	call   ffffffff800079d0 <unicode.utf8CountCodepoints>
ffffffff80007501:	66 83 bd 20 ff ff ff 	cmp    WORD PTR [rbp-0xe0],0x0
ffffffff80007508:	00 
ffffffff80007509:	74 39                	je     ffffffff80007544 <fmt.formatBuf__anon_2788+0xe4>
ffffffff8000750b:	eb 47                	jmp    ffffffff80007554 <fmt.formatBuf__anon_2788+0xf4>
ffffffff8000750d:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80007514:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffffffff8000751b:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff80007522:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
        try writer.writeAll(buf);
ffffffff80007529:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff8000752c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80007530:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80007533:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80007536:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000753a:	e8 11 8e ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000753f:	e9 8b 03 00 00       	jmp    ffffffff800078cf <fmt.formatBuf__anon_2788+0x46f>
        const width = unicode.utf8CountCodepoints(buf) catch buf.len;
ffffffff80007544:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffffffff8000754b:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80007552:	eb 1f                	jmp    ffffffff80007573 <fmt.formatBuf__anon_2788+0x113>
ffffffff80007554:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff8000755b:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff80007562:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
ffffffff80007569:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000756c:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80007573:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff8000757a:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff80007581:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff80007588:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
        const padding = if (width < min_width) min_width - width else 0;
ffffffff8000758f:	48 39 c8             	cmp    rax,rcx
ffffffff80007592:	73 2b                	jae    ffffffff800075bf <fmt.formatBuf__anon_2788+0x15f>
ffffffff80007594:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff8000759b:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffffffff800075a2:	48 29 c8             	sub    rax,rcx
ffffffff800075a5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff800075ac:	0f 92 85 38 ff ff ff 	setb   BYTE PTR [rbp-0xc8]
ffffffff800075b3:	8a 85 38 ff ff ff    	mov    al,BYTE PTR [rbp-0xc8]
ffffffff800075b9:	84 c0                	test   al,al
ffffffff800075bb:	74 0d                	je     ffffffff800075ca <fmt.formatBuf__anon_2788+0x16a>
ffffffff800075bd:	eb 0d                	jmp    ffffffff800075cc <fmt.formatBuf__anon_2788+0x16c>
ffffffff800075bf:	31 c0                	xor    eax,eax
ffffffff800075c1:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff800075c8:	eb 2c                	jmp    ffffffff800075f6 <fmt.formatBuf__anon_2788+0x196>
ffffffff800075ca:	eb 1c                	jmp    ffffffff800075e8 <fmt.formatBuf__anon_2788+0x188>
ffffffff800075cc:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800075d3:	48 c7 c1 c8 bb 01 80 	mov    rcx,0xffffffff8001bbc8
ffffffff800075da:	31 c0                	xor    eax,eax
ffffffff800075dc:	89 c2                	mov    edx,eax
ffffffff800075de:	be 10 00 00 00       	mov    esi,0x10
ffffffff800075e3:	e8 c8 8b ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800075e8:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffffffff800075ef:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff800075f6:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
ffffffff800075fd:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80007604:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
        if (padding == 0)
ffffffff8000760b:	48 83 f8 00          	cmp    rax,0x0
ffffffff8000760f:	75 4e                	jne    ffffffff8000765f <fmt.formatBuf__anon_2788+0x1ff>
ffffffff80007611:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80007618:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffffffff8000761f:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff80007626:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
            return writer.writeAll(buf);
ffffffff8000762d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff80007630:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
ffffffff80007637:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000763a:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
ffffffff80007640:	48 8d b5 50 ff ff ff 	lea    rsi,[rbp-0xb0]
ffffffff80007647:	e8 04 8d ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000764c:	66 89 85 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],ax
ffffffff80007653:	66 83 bd 4e ff ff ff 	cmp    WORD PTR [rbp-0xb2],0x0
ffffffff8000765a:	00 
ffffffff8000765b:	74 04                	je     ffffffff80007661 <fmt.formatBuf__anon_2788+0x201>
ffffffff8000765d:	eb 12                	jmp    ffffffff80007671 <fmt.formatBuf__anon_2788+0x211>
ffffffff8000765f:	eb 2c                	jmp    ffffffff8000768d <fmt.formatBuf__anon_2788+0x22d>
ffffffff80007661:	66 8b 85 4e ff ff ff 	mov    ax,WORD PTR [rbp-0xb2]
ffffffff80007668:	48 81 c4 80 01 00 00 	add    rsp,0x180
ffffffff8000766f:	5d                   	pop    rbp
ffffffff80007670:	c3                   	ret
ffffffff80007671:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff80007678:	e8 93 bd ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000767d:	66 8b 85 4e ff ff ff 	mov    ax,WORD PTR [rbp-0xb2]
ffffffff80007684:	48 81 c4 80 01 00 00 	add    rsp,0x180
ffffffff8000768b:	5d                   	pop    rbp
ffffffff8000768c:	c3                   	ret
ffffffff8000768d:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
        switch (options.alignment) {
ffffffff80007694:	8a 40 20             	mov    al,BYTE PTR [rax+0x20]
ffffffff80007697:	88 85 97 fe ff ff    	mov    BYTE PTR [rbp-0x169],al
ffffffff8000769d:	2c 02                	sub    al,0x2
ffffffff8000769f:	0f 84 be 01 00 00    	je     ffffffff80007863 <fmt.formatBuf__anon_2788+0x403>
ffffffff800076a5:	eb 00                	jmp    ffffffff800076a7 <fmt.formatBuf__anon_2788+0x247>
ffffffff800076a7:	8a 85 97 fe ff ff    	mov    al,BYTE PTR [rbp-0x169]
ffffffff800076ad:	a8 03                	test   al,0x3
ffffffff800076af:	74 30                	je     ffffffff800076e1 <fmt.formatBuf__anon_2788+0x281>
ffffffff800076b1:	eb 00                	jmp    ffffffff800076b3 <fmt.formatBuf__anon_2788+0x253>
ffffffff800076b3:	8a 85 97 fe ff ff    	mov    al,BYTE PTR [rbp-0x169]
ffffffff800076b9:	24 03                	and    al,0x3
ffffffff800076bb:	2c 01                	sub    al,0x1
ffffffff800076bd:	0f 84 9f 00 00 00    	je     ffffffff80007762 <fmt.formatBuf__anon_2788+0x302>
ffffffff800076c3:	eb 00                	jmp    ffffffff800076c5 <fmt.formatBuf__anon_2788+0x265>
ffffffff800076c5:	48 c7 c7 9b b1 01 80 	mov    rdi,0xffffffff8001b19b
ffffffff800076cc:	48 c7 c1 e8 bb 01 80 	mov    rcx,0xffffffff8001bbe8
ffffffff800076d3:	31 c0                	xor    eax,eax
ffffffff800076d5:	89 c2                	mov    edx,eax
ffffffff800076d7:	be 17 00 00 00       	mov    esi,0x17
ffffffff800076dc:	e8 cf 8a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800076e1:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff800076e8:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffffffff800076ef:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff800076f6:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
                try writer.writeAll(buf);
ffffffff800076fd:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff80007700:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
ffffffff80007707:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000770a:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
ffffffff80007710:	48 8d b5 60 ff ff ff 	lea    rsi,[rbp-0xa0]
ffffffff80007717:	e8 34 8c ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000771c:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
ffffffff80007723:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff8000772a:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
ffffffff80007731:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
                try writer.writeByteNTimes(options.fill, padding);
ffffffff80007738:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffffffff8000773b:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffffffff80007742:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffffffff80007745:	89 95 78 ff ff ff    	mov    DWORD PTR [rbp-0x88],edx
ffffffff8000774b:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff8000774e:	0f b6 d0             	movzx  edx,al
ffffffff80007751:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
ffffffff80007758:	e8 43 0a 00 00       	call   ffffffff800081a0 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes>
ffffffff8000775d:	e9 6b 01 00 00       	jmp    ffffffff800078cd <fmt.formatBuf__anon_2788+0x46d>
ffffffff80007762:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
                const left_padding = padding / 2;
ffffffff80007769:	48 89 c1             	mov    rcx,rax
ffffffff8000776c:	48 d1 e9             	shr    rcx,1
ffffffff8000776f:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
ffffffff80007776:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
                const right_padding = (padding + 1) / 2;
ffffffff8000777a:	48 ff c0             	inc    rax
ffffffff8000777d:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80007781:	0f 94 45 90          	sete   BYTE PTR [rbp-0x70]
ffffffff80007785:	8a 45 90             	mov    al,BYTE PTR [rbp-0x70]
ffffffff80007788:	84 c0                	test   al,al
ffffffff8000778a:	75 04                	jne    ffffffff80007790 <fmt.formatBuf__anon_2788+0x330>
ffffffff8000778c:	eb 00                	jmp    ffffffff8000778e <fmt.formatBuf__anon_2788+0x32e>
ffffffff8000778e:	eb 1c                	jmp    ffffffff800077ac <fmt.formatBuf__anon_2788+0x34c>
ffffffff80007790:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007797:	48 c7 c1 d8 bb 01 80 	mov    rcx,0xffffffff8001bbd8
ffffffff8000779e:	31 c0                	xor    eax,eax
ffffffff800077a0:	89 c2                	mov    edx,eax
ffffffff800077a2:	be 10 00 00 00       	mov    esi,0x10
ffffffff800077a7:	e8 04 8a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800077ac:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff800077b3:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffffffff800077ba:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
ffffffff800077c1:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffffffff800077c8:	48 8b 75 88          	mov    rsi,QWORD PTR [rbp-0x78]
ffffffff800077cc:	48 c1 ee 01          	shr    rsi,0x1
ffffffff800077d0:	48 89 b5 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rsi
ffffffff800077d7:	48 89 75 98          	mov    QWORD PTR [rbp-0x68],rsi
                try writer.writeByteNTimes(options.fill, left_padding);
ffffffff800077db:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffffffff800077de:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffffffff800077e2:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffffffff800077e5:	89 55 a8             	mov    DWORD PTR [rbp-0x58],edx
ffffffff800077e8:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff800077eb:	0f b6 d0             	movzx  edx,al
ffffffff800077ee:	48 8d 75 a0          	lea    rsi,[rbp-0x60]
ffffffff800077f2:	e8 a9 09 00 00       	call   ffffffff800081a0 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes>
ffffffff800077f7:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffffffff800077fe:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80007805:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff8000780c:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
                try writer.writeAll(buf);
ffffffff80007813:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff80007816:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff8000781a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000781d:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
ffffffff80007820:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff80007824:	e8 27 8b ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80007829:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
ffffffff80007830:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff80007837:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
ffffffff8000783e:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
                try writer.writeByteNTimes(options.fill, right_padding);
ffffffff80007845:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffffffff80007848:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff8000784c:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffffffff8000784f:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
ffffffff80007852:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff80007855:	0f b6 d0             	movzx  edx,al
ffffffff80007858:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff8000785c:	e8 3f 09 00 00       	call   ffffffff800081a0 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes>
ffffffff80007861:	eb 6a                	jmp    ffffffff800078cd <fmt.formatBuf__anon_2788+0x46d>
ffffffff80007863:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff8000786a:	48 8b 95 c0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x140]
ffffffff80007871:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
ffffffff80007878:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
                try writer.writeByteNTimes(options.fill, padding);
ffffffff8000787f:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
ffffffff80007882:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80007886:	8b 52 08             	mov    edx,DWORD PTR [rdx+0x8]
ffffffff80007889:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff8000788c:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff8000788f:	0f b6 d0             	movzx  edx,al
ffffffff80007892:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff80007896:	e8 05 09 00 00       	call   ffffffff800081a0 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes>
ffffffff8000789b:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff800078a2:	48 8b 95 e0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x120]
ffffffff800078a9:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff800078b0:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
                try writer.writeAll(buf);
ffffffff800078b7:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff800078ba:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800078be:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800078c1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff800078c4:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff800078c8:	e8 83 8a ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
        switch (options.alignment) {
ffffffff800078cd:	eb 00                	jmp    ffffffff800078cf <fmt.formatBuf__anon_2788+0x46f>
        try writer.writeAll(buf);
ffffffff800078cf:	31 c0                	xor    eax,eax
ffffffff800078d1:	48 81 c4 80 01 00 00 	add    rsp,0x180
ffffffff800078d8:	5d                   	pop    rbp
ffffffff800078d9:	c3                   	ret
ffffffff800078da:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff800078e0 <unicode.utf8ByteSequenceLength>:
}

/// Given the first byte of a UTF-8 codepoint,
/// returns a number 1-4 indicating the total length of the codepoint in bytes.
/// If this byte does not match the form of a UTF-8 start byte, returns Utf8InvalidStartByte.
pub fn utf8ByteSequenceLength(first_byte: u8) !u3 {
ffffffff800078e0:	55                   	push   rbp
ffffffff800078e1:	48 89 e5             	mov    rbp,rsp
ffffffff800078e4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800078e8:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800078ec:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff800078f0:	88 d0                	mov    al,dl
ffffffff800078f2:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff800078f5:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff800078f9:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff800078fc:	8a 4d ef             	mov    cl,BYTE PTR [rbp-0x11]
    // The switch is optimized much better than a "smart" approach using @clz
    return switch (first_byte) {
ffffffff800078ff:	80 f9 00             	cmp    cl,0x0
ffffffff80007902:	0f 93 c0             	setae  al
ffffffff80007905:	80 f9 7f             	cmp    cl,0x7f
ffffffff80007908:	0f 96 c1             	setbe  cl
ffffffff8000790b:	20 c8                	and    al,cl
ffffffff8000790d:	a8 01                	test   al,0x1
ffffffff8000790f:	75 02                	jne    ffffffff80007913 <unicode.utf8ByteSequenceLength+0x33>
ffffffff80007911:	eb 0e                	jmp    ffffffff80007921 <unicode.utf8ByteSequenceLength+0x41>
ffffffff80007913:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80007917:	8b 0d 6f 4f 01 00    	mov    ecx,DWORD PTR [rip+0x14f6f]        # ffffffff8001c88c <fmt.formatType__anon_2904__anon_3169+0x1054>
ffffffff8000791d:	89 08                	mov    DWORD PTR [rax],ecx
ffffffff8000791f:	eb 79                	jmp    ffffffff8000799a <unicode.utf8ByteSequenceLength+0xba>
ffffffff80007921:	8a 4d ef             	mov    cl,BYTE PTR [rbp-0x11]
ffffffff80007924:	80 f9 c0             	cmp    cl,0xc0
ffffffff80007927:	0f 93 c0             	setae  al
ffffffff8000792a:	80 f9 df             	cmp    cl,0xdf
ffffffff8000792d:	0f 96 c1             	setbe  cl
ffffffff80007930:	20 c8                	and    al,cl
ffffffff80007932:	a8 01                	test   al,0x1
ffffffff80007934:	75 02                	jne    ffffffff80007938 <unicode.utf8ByteSequenceLength+0x58>
ffffffff80007936:	eb 0e                	jmp    ffffffff80007946 <unicode.utf8ByteSequenceLength+0x66>
ffffffff80007938:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000793c:	8b 0d 4e 4f 01 00    	mov    ecx,DWORD PTR [rip+0x14f4e]        # ffffffff8001c890 <fmt.formatType__anon_2904__anon_3169+0x1058>
ffffffff80007942:	89 08                	mov    DWORD PTR [rax],ecx
ffffffff80007944:	eb 54                	jmp    ffffffff8000799a <unicode.utf8ByteSequenceLength+0xba>
ffffffff80007946:	8a 4d ef             	mov    cl,BYTE PTR [rbp-0x11]
ffffffff80007949:	80 f9 e0             	cmp    cl,0xe0
ffffffff8000794c:	0f 93 c0             	setae  al
ffffffff8000794f:	80 f9 ef             	cmp    cl,0xef
ffffffff80007952:	0f 96 c1             	setbe  cl
ffffffff80007955:	20 c8                	and    al,cl
ffffffff80007957:	a8 01                	test   al,0x1
ffffffff80007959:	75 02                	jne    ffffffff8000795d <unicode.utf8ByteSequenceLength+0x7d>
ffffffff8000795b:	eb 0e                	jmp    ffffffff8000796b <unicode.utf8ByteSequenceLength+0x8b>
ffffffff8000795d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80007961:	8b 0d 2d 4f 01 00    	mov    ecx,DWORD PTR [rip+0x14f2d]        # ffffffff8001c894 <fmt.formatType__anon_2904__anon_3169+0x105c>
ffffffff80007967:	89 08                	mov    DWORD PTR [rax],ecx
ffffffff80007969:	eb 2f                	jmp    ffffffff8000799a <unicode.utf8ByteSequenceLength+0xba>
ffffffff8000796b:	8a 4d ef             	mov    cl,BYTE PTR [rbp-0x11]
ffffffff8000796e:	80 f9 f0             	cmp    cl,0xf0
ffffffff80007971:	0f 93 c0             	setae  al
ffffffff80007974:	80 f9 f7             	cmp    cl,0xf7
ffffffff80007977:	0f 96 c1             	setbe  cl
ffffffff8000797a:	20 c8                	and    al,cl
ffffffff8000797c:	a8 01                	test   al,0x1
ffffffff8000797e:	75 02                	jne    ffffffff80007982 <unicode.utf8ByteSequenceLength+0xa2>
ffffffff80007980:	eb 0e                	jmp    ffffffff80007990 <unicode.utf8ByteSequenceLength+0xb0>
ffffffff80007982:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80007986:	8b 0d 0c 4f 01 00    	mov    ecx,DWORD PTR [rip+0x14f0c]        # ffffffff8001c898 <fmt.formatType__anon_2904__anon_3169+0x1060>
ffffffff8000798c:	89 08                	mov    DWORD PTR [rax],ecx
ffffffff8000798e:	eb 0a                	jmp    ffffffff8000799a <unicode.utf8ByteSequenceLength+0xba>
ffffffff80007990:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80007994:	c7 00 03 00 00 00    	mov    DWORD PTR [rax],0x3
ffffffff8000799a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000799e:	66 83 38 00          	cmp    WORD PTR [rax],0x0
ffffffff800079a2:	75 0a                	jne    ffffffff800079ae <unicode.utf8ByteSequenceLength+0xce>
ffffffff800079a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800079a8:	48 83 c4 30          	add    rsp,0x30
ffffffff800079ac:	5d                   	pop    rbp
ffffffff800079ad:	c3                   	ret
ffffffff800079ae:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800079b2:	e8 59 ba ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800079b7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800079bb:	48 83 c4 30          	add    rsp,0x30
ffffffff800079bf:	5d                   	pop    rbp
ffffffff800079c0:	c3                   	ret
ffffffff800079c1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800079c8:	00 00 00 
ffffffff800079cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800079d0 <unicode.utf8CountCodepoints>:
    };
}

/// Returns the length of a supplied UTF-8 string literal in terms of unicode
/// codepoints.
pub fn utf8CountCodepoints(s: []const u8) !usize {
ffffffff800079d0:	55                   	push   rbp
ffffffff800079d1:	48 89 e5             	mov    rbp,rsp
ffffffff800079d4:	48 81 ec a0 01 00 00 	sub    rsp,0x1a0
ffffffff800079db:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
ffffffff800079e2:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
ffffffff800079e9:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
ffffffff800079f0:	48 89 c8             	mov    rax,rcx
ffffffff800079f3:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff800079fa:	48 89 d0             	mov    rax,rdx
ffffffff800079fd:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80007a04:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
ffffffff80007a0b:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
    var len: usize = 0;
ffffffff80007a12:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0x0
ffffffff80007a19:	00 00 00 00 

    const N = @sizeOf(usize);
    const MASK = 0x80 * (std.math.maxInt(usize) / 0xff);

    var i: usize = 0;
ffffffff80007a1d:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0x0
ffffffff80007a24:	00 00 00 00 
ffffffff80007a28:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
    while (i < s.len) {
ffffffff80007a2f:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007a36:	48 39 c8             	cmp    rax,rcx
ffffffff80007a39:	73 02                	jae    ffffffff80007a3d <unicode.utf8CountCodepoints+0x6d>
ffffffff80007a3b:	eb 05                	jmp    ffffffff80007a42 <unicode.utf8CountCodepoints+0x72>
                1 => {}, // ASCII, no validation needed
                else => _ = try utf8Decode(s[i .. i + n]),
            }

            i += n;
            len += 1;
ffffffff80007a3d:	e9 ce 05 00 00       	jmp    ffffffff80008010 <unicode.utf8CountCodepoints+0x640>
        while (i + N <= s.len) : (i += N) {
ffffffff80007a42:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007a49:	48 83 c0 08          	add    rax,0x8
ffffffff80007a4d:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff80007a54:	0f 92 85 18 ff ff ff 	setb   BYTE PTR [rbp-0xe8]
ffffffff80007a5b:	8a 85 18 ff ff ff    	mov    al,BYTE PTR [rbp-0xe8]
ffffffff80007a61:	84 c0                	test   al,al
ffffffff80007a63:	75 04                	jne    ffffffff80007a69 <unicode.utf8CountCodepoints+0x99>
ffffffff80007a65:	eb 00                	jmp    ffffffff80007a67 <unicode.utf8CountCodepoints+0x97>
ffffffff80007a67:	eb 1c                	jmp    ffffffff80007a85 <unicode.utf8CountCodepoints+0xb5>
ffffffff80007a69:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007a70:	48 c7 c1 48 bb 01 80 	mov    rcx,0xffffffff8001bb48
ffffffff80007a77:	31 c0                	xor    eax,eax
ffffffff80007a79:	89 c2                	mov    edx,eax
ffffffff80007a7b:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007a80:	e8 2b 87 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007a85:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff80007a8c:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff80007a93:	48 39 c8             	cmp    rax,rcx
ffffffff80007a96:	77 50                	ja     ffffffff80007ae8 <unicode.utf8CountCodepoints+0x118>
ffffffff80007a98:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffffffff80007a9f:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
            const v = mem.readIntNative(usize, s[i..][0..N]);
ffffffff80007aa6:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
ffffffff80007aad:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
ffffffff80007ab4:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007abb:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80007ac2:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
ffffffff80007ac9:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
ffffffff80007ad0:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
ffffffff80007ad7:	48 01 c2             	add    rdx,rax
ffffffff80007ada:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
ffffffff80007ae1:	48 39 c8             	cmp    rax,rcx
ffffffff80007ae4:	76 07                	jbe    ffffffff80007aed <unicode.utf8CountCodepoints+0x11d>
ffffffff80007ae6:	eb 07                	jmp    ffffffff80007aef <unicode.utf8CountCodepoints+0x11f>
        while (i + N <= s.len) : (i += N) {
ffffffff80007ae8:	e9 b8 01 00 00       	jmp    ffffffff80007ca5 <unicode.utf8CountCodepoints+0x2d5>
            const v = mem.readIntNative(usize, s[i..][0..N]);
ffffffff80007aed:	eb 13                	jmp    ffffffff80007b02 <unicode.utf8CountCodepoints+0x132>
ffffffff80007aef:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
ffffffff80007af6:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff80007afd:	e8 0e 88 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80007b02:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffffffff80007b09:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
ffffffff80007b10:	48 89 c1             	mov    rcx,rax
ffffffff80007b13:	48 29 d1             	sub    rcx,rdx
ffffffff80007b16:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
ffffffff80007b1d:	48 39 c0             	cmp    rax,rax
ffffffff80007b20:	77 02                	ja     ffffffff80007b24 <unicode.utf8CountCodepoints+0x154>
ffffffff80007b22:	eb 0f                	jmp    ffffffff80007b33 <unicode.utf8CountCodepoints+0x163>
ffffffff80007b24:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
ffffffff80007b2b:	48 89 f7             	mov    rdi,rsi
ffffffff80007b2e:	e8 9d 86 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80007b33:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff80007b3a:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff80007b41:	48 39 c8             	cmp    rax,rcx
ffffffff80007b44:	77 02                	ja     ffffffff80007b48 <unicode.utf8CountCodepoints+0x178>
ffffffff80007b46:	eb 13                	jmp    ffffffff80007b5b <unicode.utf8CountCodepoints+0x18b>
ffffffff80007b48:	48 8b b5 b8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x148]
ffffffff80007b4f:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff80007b56:	e8 75 86 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80007b5b:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffffffff80007b62:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff80007b69:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
ffffffff80007b70:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff80007b77:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffffffff80007b7e:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80007b85:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffffffff80007b8c:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff80007b93:	b0 01                	mov    al,0x1
ffffffff80007b95:	a8 01                	test   al,0x1
ffffffff80007b97:	75 02                	jne    ffffffff80007b9b <unicode.utf8CountCodepoints+0x1cb>
ffffffff80007b99:	eb 02                	jmp    ffffffff80007b9d <unicode.utf8CountCodepoints+0x1cd>
ffffffff80007b9b:	eb 10                	jmp    ffffffff80007bad <unicode.utf8CountCodepoints+0x1dd>
ffffffff80007b9d:	31 c0                	xor    eax,eax
ffffffff80007b9f:	31 c0                	xor    eax,eax
ffffffff80007ba1:	89 c7                	mov    edi,eax
ffffffff80007ba3:	be 08 00 00 00       	mov    esi,0x8
ffffffff80007ba8:	e8 63 87 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80007bad:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
ffffffff80007bb4:	b8 08 00 00 00       	mov    eax,0x8
ffffffff80007bb9:	48 39 c8             	cmp    rax,rcx
ffffffff80007bbc:	77 02                	ja     ffffffff80007bc0 <unicode.utf8CountCodepoints+0x1f0>
ffffffff80007bbe:	eb 11                	jmp    ffffffff80007bd1 <unicode.utf8CountCodepoints+0x201>
ffffffff80007bc0:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
ffffffff80007bc7:	bf 08 00 00 00       	mov    edi,0x8
ffffffff80007bcc:	e8 ff 85 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80007bd1:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff80007bd8:	e8 73 04 00 00       	call   ffffffff80008050 <mem.readIntNative__anon_2862>
ffffffff80007bdd:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
            if (v & MASK != 0) break;
ffffffff80007be4:	48 b9 80 80 80 80 80 	movabs rcx,0x8080808080808080
ffffffff80007beb:	80 80 80 
ffffffff80007bee:	48 21 c8             	and    rax,rcx
ffffffff80007bf1:	48 83 f8 00          	cmp    rax,0x0
ffffffff80007bf5:	74 05                	je     ffffffff80007bfc <unicode.utf8CountCodepoints+0x22c>
ffffffff80007bf7:	e9 a9 00 00 00       	jmp    ffffffff80007ca5 <unicode.utf8CountCodepoints+0x2d5>
ffffffff80007bfc:	eb 00                	jmp    ffffffff80007bfe <unicode.utf8CountCodepoints+0x22e>
            len += N;
ffffffff80007bfe:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff80007c05:	48 83 c0 08          	add    rax,0x8
ffffffff80007c09:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff80007c10:	0f 92 85 50 ff ff ff 	setb   BYTE PTR [rbp-0xb0]
ffffffff80007c17:	8a 85 50 ff ff ff    	mov    al,BYTE PTR [rbp-0xb0]
ffffffff80007c1d:	84 c0                	test   al,al
ffffffff80007c1f:	75 04                	jne    ffffffff80007c25 <unicode.utf8CountCodepoints+0x255>
ffffffff80007c21:	eb 00                	jmp    ffffffff80007c23 <unicode.utf8CountCodepoints+0x253>
ffffffff80007c23:	eb 1c                	jmp    ffffffff80007c41 <unicode.utf8CountCodepoints+0x271>
ffffffff80007c25:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007c2c:	48 c7 c1 58 bb 01 80 	mov    rcx,0xffffffff8001bb58
ffffffff80007c33:	31 c0                	xor    eax,eax
ffffffff80007c35:	89 c2                	mov    edx,eax
ffffffff80007c37:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007c3c:	e8 6f 85 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007c41:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff80007c48:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
        while (i + N <= s.len) : (i += N) {
ffffffff80007c4f:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007c56:	48 83 c0 08          	add    rax,0x8
ffffffff80007c5a:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
ffffffff80007c61:	0f 92 85 60 ff ff ff 	setb   BYTE PTR [rbp-0xa0]
ffffffff80007c68:	8a 85 60 ff ff ff    	mov    al,BYTE PTR [rbp-0xa0]
ffffffff80007c6e:	84 c0                	test   al,al
ffffffff80007c70:	75 04                	jne    ffffffff80007c76 <unicode.utf8CountCodepoints+0x2a6>
ffffffff80007c72:	eb 00                	jmp    ffffffff80007c74 <unicode.utf8CountCodepoints+0x2a4>
ffffffff80007c74:	eb 1c                	jmp    ffffffff80007c92 <unicode.utf8CountCodepoints+0x2c2>
ffffffff80007c76:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007c7d:	48 c7 c1 68 bb 01 80 	mov    rcx,0xffffffff8001bb68
ffffffff80007c84:	31 c0                	xor    eax,eax
ffffffff80007c86:	89 c2                	mov    edx,eax
ffffffff80007c88:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007c8d:	e8 1e 85 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007c92:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80007c99:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80007ca0:	e9 9d fd ff ff       	jmp    ffffffff80007a42 <unicode.utf8CountCodepoints+0x72>
ffffffff80007ca5:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
        if (i < s.len) {
ffffffff80007cac:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007cb3:	48 39 c8             	cmp    rax,rcx
ffffffff80007cb6:	73 1c                	jae    ffffffff80007cd4 <unicode.utf8CountCodepoints+0x304>
ffffffff80007cb8:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
            const n = try utf8ByteSequenceLength(s[i]);
ffffffff80007cbf:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007cc6:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff80007ccd:	48 39 c8             	cmp    rax,rcx
ffffffff80007cd0:	72 07                	jb     ffffffff80007cd9 <unicode.utf8CountCodepoints+0x309>
ffffffff80007cd2:	eb 07                	jmp    ffffffff80007cdb <unicode.utf8CountCodepoints+0x30b>
            len += 1;
ffffffff80007cd4:	e9 30 03 00 00       	jmp    ffffffff80008009 <unicode.utf8CountCodepoints+0x639>
            const n = try utf8ByteSequenceLength(s[i]);
ffffffff80007cd9:	eb 13                	jmp    ffffffff80007cee <unicode.utf8CountCodepoints+0x31e>
ffffffff80007cdb:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffffffff80007ce2:	48 8b bd 90 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x170]
ffffffff80007ce9:	e8 e2 84 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80007cee:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
ffffffff80007cf5:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffffffff80007cfc:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffffffff80007d03:	8a 04 08             	mov    al,BYTE PTR [rax+rcx*1]
ffffffff80007d06:	0f b6 d0             	movzx  edx,al
ffffffff80007d09:	48 8d bd 68 ff ff ff 	lea    rdi,[rbp-0x98]
ffffffff80007d10:	e8 cb fb ff ff       	call   ffffffff800078e0 <unicode.utf8ByteSequenceLength>
ffffffff80007d15:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
ffffffff80007d1c:	00 
ffffffff80007d1d:	74 46                	je     ffffffff80007d65 <unicode.utf8CountCodepoints+0x395>
ffffffff80007d1f:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
ffffffff80007d26:	66 8b 85 68 ff ff ff 	mov    ax,WORD PTR [rbp-0x98]
ffffffff80007d2d:	66 89 85 78 ff ff ff 	mov    WORD PTR [rbp-0x88],ax
ffffffff80007d34:	e8 d7 b6 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80007d39:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff80007d40:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff80007d47:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffffffff80007d4e:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff80007d51:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff80007d58:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff80007d5c:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
ffffffff80007d63:	5d                   	pop    rbp
ffffffff80007d64:	c3                   	ret
ffffffff80007d65:	0f b6 85 6a ff ff ff 	movzx  eax,BYTE PTR [rbp-0x96]
ffffffff80007d6c:	89 c1                	mov    ecx,eax
ffffffff80007d6e:	88 c8                	mov    al,cl
ffffffff80007d70:	88 85 8f fe ff ff    	mov    BYTE PTR [rbp-0x171],al
ffffffff80007d76:	88 45 87             	mov    BYTE PTR [rbp-0x79],al
            if (i + n > s.len) return error.TruncatedInput;
ffffffff80007d79:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007d80:	48 01 c8             	add    rax,rcx
ffffffff80007d83:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80007d87:	0f 92 45 90          	setb   BYTE PTR [rbp-0x70]
ffffffff80007d8b:	8a 45 90             	mov    al,BYTE PTR [rbp-0x70]
ffffffff80007d8e:	84 c0                	test   al,al
ffffffff80007d90:	75 04                	jne    ffffffff80007d96 <unicode.utf8CountCodepoints+0x3c6>
ffffffff80007d92:	eb 00                	jmp    ffffffff80007d94 <unicode.utf8CountCodepoints+0x3c4>
ffffffff80007d94:	eb 1c                	jmp    ffffffff80007db2 <unicode.utf8CountCodepoints+0x3e2>
ffffffff80007d96:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007d9d:	48 c7 c1 78 bb 01 80 	mov    rcx,0xffffffff8001bb78
ffffffff80007da4:	31 c0                	xor    eax,eax
ffffffff80007da6:	89 c2                	mov    edx,eax
ffffffff80007da8:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007dad:	e8 fe 83 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007db2:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff80007db9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80007dbd:	48 39 c8             	cmp    rax,rcx
ffffffff80007dc0:	76 32                	jbe    ffffffff80007df4 <unicode.utf8CountCodepoints+0x424>
ffffffff80007dc2:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
ffffffff80007dc9:	e8 42 b6 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80007dce:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff80007dd5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff80007ddc:	48 c7 41 08 04 00 00 	mov    QWORD PTR [rcx+0x8],0x4
ffffffff80007de3:	00 
ffffffff80007de4:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
ffffffff80007deb:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
ffffffff80007df2:	5d                   	pop    rbp
ffffffff80007df3:	c3                   	ret
ffffffff80007df4:	eb 00                	jmp    ffffffff80007df6 <unicode.utf8CountCodepoints+0x426>
ffffffff80007df6:	8a 85 8f fe ff ff    	mov    al,BYTE PTR [rbp-0x171]
            switch (n) {
ffffffff80007dfc:	24 07                	and    al,0x7
ffffffff80007dfe:	2c 01                	sub    al,0x1
ffffffff80007e00:	74 46                	je     ffffffff80007e48 <unicode.utf8CountCodepoints+0x478>
ffffffff80007e02:	eb 00                	jmp    ffffffff80007e04 <unicode.utf8CountCodepoints+0x434>
ffffffff80007e04:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
ffffffff80007e0a:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffffffff80007e11:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
                else => _ = try utf8Decode(s[i .. i + n]),
ffffffff80007e18:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffffffff80007e1c:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80007e20:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007e27:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
ffffffff80007e2e:	0f b6 c9             	movzx  ecx,cl
ffffffff80007e31:	83 e1 07             	and    ecx,0x7
ffffffff80007e34:	48 01 c8             	add    rax,rcx
ffffffff80007e37:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80007e3b:	0f 92 45 b0          	setb   BYTE PTR [rbp-0x50]
ffffffff80007e3f:	8a 45 b0             	mov    al,BYTE PTR [rbp-0x50]
ffffffff80007e42:	84 c0                	test   al,al
ffffffff80007e44:	74 07                	je     ffffffff80007e4d <unicode.utf8CountCodepoints+0x47d>
ffffffff80007e46:	eb 07                	jmp    ffffffff80007e4f <unicode.utf8CountCodepoints+0x47f>
            switch (n) {
ffffffff80007e48:	e9 28 01 00 00       	jmp    ffffffff80007f75 <unicode.utf8CountCodepoints+0x5a5>
                else => _ = try utf8Decode(s[i .. i + n]),
ffffffff80007e4d:	eb 1c                	jmp    ffffffff80007e6b <unicode.utf8CountCodepoints+0x49b>
ffffffff80007e4f:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007e56:	48 c7 c1 98 bb 01 80 	mov    rcx,0xffffffff8001bb98
ffffffff80007e5d:	31 c0                	xor    eax,eax
ffffffff80007e5f:	89 c2                	mov    edx,eax
ffffffff80007e61:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007e66:	e8 45 83 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007e6b:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff80007e72:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffffffff80007e76:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
ffffffff80007e7d:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffffffff80007e81:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff80007e85:	48 89 b5 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rsi
ffffffff80007e8c:	48 01 c2             	add    rdx,rax
ffffffff80007e8f:	48 89 95 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rdx
ffffffff80007e96:	48 39 c8             	cmp    rax,rcx
ffffffff80007e99:	77 02                	ja     ffffffff80007e9d <unicode.utf8CountCodepoints+0x4cd>
ffffffff80007e9b:	eb 13                	jmp    ffffffff80007eb0 <unicode.utf8CountCodepoints+0x4e0>
ffffffff80007e9d:	48 8b b5 68 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x198]
ffffffff80007ea4:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
ffffffff80007eab:	e8 60 84 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80007eb0:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
ffffffff80007eb7:	48 8b 8d 70 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x190]
ffffffff80007ebe:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
ffffffff80007ec5:	48 89 c2             	mov    rdx,rax
ffffffff80007ec8:	48 29 f2             	sub    rdx,rsi
ffffffff80007ecb:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
ffffffff80007ed2:	48 39 c8             	cmp    rax,rcx
ffffffff80007ed5:	77 02                	ja     ffffffff80007ed9 <unicode.utf8CountCodepoints+0x509>
ffffffff80007ed7:	eb 13                	jmp    ffffffff80007eec <unicode.utf8CountCodepoints+0x51c>
ffffffff80007ed9:	48 8b b5 70 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x190]
ffffffff80007ee0:	48 8b bd 68 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x198]
ffffffff80007ee7:	e8 e4 82 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80007eec:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff80007ef3:	48 8b 8d 68 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x198]
ffffffff80007efa:	48 39 c8             	cmp    rax,rcx
ffffffff80007efd:	77 02                	ja     ffffffff80007f01 <unicode.utf8CountCodepoints+0x531>
ffffffff80007eff:	eb 13                	jmp    ffffffff80007f14 <unicode.utf8CountCodepoints+0x544>
ffffffff80007f01:	48 8b b5 68 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x198]
ffffffff80007f08:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
ffffffff80007f0f:	e8 bc 82 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80007f14:	48 8b b5 c8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x138]
ffffffff80007f1b:	48 8b 95 78 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x188]
ffffffff80007f22:	48 8b 8d 60 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a0]
ffffffff80007f29:	48 8d 7d b8          	lea    rdi,[rbp-0x48]
ffffffff80007f2d:	e8 3e 01 00 00       	call   ffffffff80008070 <unicode.utf8Decode>
ffffffff80007f32:	66 83 7d bc 00       	cmp    WORD PTR [rbp-0x44],0x0
ffffffff80007f37:	74 3a                	je     ffffffff80007f73 <unicode.utf8CountCodepoints+0x5a3>
ffffffff80007f39:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
ffffffff80007f40:	66 8b 45 bc          	mov    ax,WORD PTR [rbp-0x44]
ffffffff80007f44:	66 89 45 c8          	mov    WORD PTR [rbp-0x38],ax
ffffffff80007f48:	e8 c3 b4 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80007f4d:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff80007f54:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff80007f5b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff80007f5f:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff80007f62:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffffffff80007f66:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff80007f6a:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
ffffffff80007f71:	5d                   	pop    rbp
ffffffff80007f72:	c3                   	ret
ffffffff80007f73:	eb 00                	jmp    ffffffff80007f75 <unicode.utf8CountCodepoints+0x5a5>
ffffffff80007f75:	8a 8d 8f fe ff ff    	mov    cl,BYTE PTR [rbp-0x171]
            i += n;
ffffffff80007f7b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80007f82:	0f b6 c9             	movzx  ecx,cl
ffffffff80007f85:	83 e1 07             	and    ecx,0x7
ffffffff80007f88:	48 01 c8             	add    rax,rcx
ffffffff80007f8b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80007f8f:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff80007f93:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff80007f96:	84 c0                	test   al,al
ffffffff80007f98:	75 04                	jne    ffffffff80007f9e <unicode.utf8CountCodepoints+0x5ce>
ffffffff80007f9a:	eb 00                	jmp    ffffffff80007f9c <unicode.utf8CountCodepoints+0x5cc>
ffffffff80007f9c:	eb 1c                	jmp    ffffffff80007fba <unicode.utf8CountCodepoints+0x5ea>
ffffffff80007f9e:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007fa5:	48 c7 c1 a8 bb 01 80 	mov    rcx,0xffffffff8001bba8
ffffffff80007fac:	31 c0                	xor    eax,eax
ffffffff80007fae:	89 c2                	mov    edx,eax
ffffffff80007fb0:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007fb5:	e8 f6 81 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007fba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80007fbe:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
            len += 1;
ffffffff80007fc5:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff80007fcc:	48 ff c0             	inc    rax
ffffffff80007fcf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80007fd3:	0f 94 45 e8          	sete   BYTE PTR [rbp-0x18]
ffffffff80007fd7:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff80007fda:	84 c0                	test   al,al
ffffffff80007fdc:	75 04                	jne    ffffffff80007fe2 <unicode.utf8CountCodepoints+0x612>
ffffffff80007fde:	eb 00                	jmp    ffffffff80007fe0 <unicode.utf8CountCodepoints+0x610>
ffffffff80007fe0:	eb 1c                	jmp    ffffffff80007ffe <unicode.utf8CountCodepoints+0x62e>
ffffffff80007fe2:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80007fe9:	48 c7 c1 b8 bb 01 80 	mov    rcx,0xffffffff8001bbb8
ffffffff80007ff0:	31 c0                	xor    eax,eax
ffffffff80007ff2:	89 c2                	mov    edx,eax
ffffffff80007ff4:	be 10 00 00 00       	mov    esi,0x10
ffffffff80007ff9:	e8 b2 81 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80007ffe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80008002:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff80008009:	eb 00                	jmp    ffffffff8000800b <unicode.utf8CountCodepoints+0x63b>
ffffffff8000800b:	e9 18 fa ff ff       	jmp    ffffffff80007a28 <unicode.utf8CountCodepoints+0x58>
ffffffff80008010:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff80008017:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
        }
    }

    return len;
ffffffff8000801e:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
ffffffff80008025:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
ffffffff8000802b:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff8000802f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80008033:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff80008036:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000803a:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff8000803e:	48 81 c4 a0 01 00 00 	add    rsp,0x1a0
ffffffff80008045:	5d                   	pop    rbp
ffffffff80008046:	c3                   	ret
ffffffff80008047:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000804e:	00 00 

ffffffff80008050 <mem.readIntNative__anon_2862>:
/// Reads an integer from memory with bit count specified by T.
/// The bit count of T must be evenly divisible by 8.
/// This function cannot fail and cannot cause undefined behavior.
/// Assumes the endianness of memory is native. This means the function can
/// simply pointer cast memory.
pub fn readIntNative(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {
ffffffff80008050:	55                   	push   rbp
ffffffff80008051:	48 89 e5             	mov    rbp,rsp
ffffffff80008054:	50                   	push   rax
ffffffff80008055:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    return @ptrCast(*align(1) const T, bytes).*;
ffffffff80008059:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff8000805c:	48 83 c4 08          	add    rsp,0x8
ffffffff80008060:	5d                   	pop    rbp
ffffffff80008061:	c3                   	ret
ffffffff80008062:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80008069:	00 00 00 
ffffffff8000806c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80008070 <unicode.utf8Decode>:
pub fn utf8Decode(bytes: []const u8) Utf8DecodeError!u21 {
ffffffff80008070:	55                   	push   rbp
ffffffff80008071:	48 89 e5             	mov    rbp,rsp
ffffffff80008074:	48 83 ec 60          	sub    rsp,0x60
ffffffff80008078:	48 89 c8             	mov    rax,rcx
ffffffff8000807b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffffffff8000807f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80008083:	48 89 7d b0          	mov    QWORD PTR [rbp-0x50],rdi
ffffffff80008087:	48 89 c1             	mov    rcx,rax
ffffffff8000808a:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
ffffffff8000808e:	48 89 d1             	mov    rcx,rdx
ffffffff80008091:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff80008095:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80008099:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
    return switch (bytes.len) {
ffffffff8000809d:	48 83 c0 ff          	add    rax,0xffffffffffffffff
ffffffff800080a1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff800080a5:	48 83 e8 03          	sub    rax,0x3
ffffffff800080a9:	77 0e                	ja     ffffffff800080b9 <unicode.utf8Decode+0x49>
ffffffff800080ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800080af:	48 8b 04 c5 88 8f 01 	mov    rax,QWORD PTR [rax*8-0x7ffe7078]
ffffffff800080b6:	80 
ffffffff800080b7:	ff e0                	jmp    rax
        else => unreachable,
ffffffff800080b9:	48 c7 c7 6b b3 01 80 	mov    rdi,0xffffffff8001b36b
ffffffff800080c0:	48 c7 c1 a8 c0 01 80 	mov    rcx,0xffffffff8001c0a8
ffffffff800080c7:	31 c0                	xor    eax,eax
ffffffff800080c9:	89 c2                	mov    edx,eax
ffffffff800080cb:	be 18 00 00 00       	mov    esi,0x18
ffffffff800080d0:	e8 db 80 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800080d5:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
        1 => @as(u21, bytes[0]),
ffffffff800080d9:	31 c0                	xor    eax,eax
ffffffff800080db:	48 39 c8             	cmp    rax,rcx
ffffffff800080de:	73 02                	jae    ffffffff800080e2 <unicode.utf8Decode+0x72>
ffffffff800080e0:	eb 0f                	jmp    ffffffff800080f1 <unicode.utf8Decode+0x81>
ffffffff800080e2:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffffffff800080e6:	31 c0                	xor    eax,eax
ffffffff800080e8:	31 c0                	xor    eax,eax
ffffffff800080ea:	89 c7                	mov    edi,eax
ffffffff800080ec:	e8 df 80 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800080f1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800080f5:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff800080f9:	0f b6 09             	movzx  ecx,BYTE PTR [rcx]
ffffffff800080fc:	66 c7 45 e4 00 00    	mov    WORD PTR [rbp-0x1c],0x0
ffffffff80008102:	66 89 4d e0          	mov    WORD PTR [rbp-0x20],cx
ffffffff80008106:	c6 45 e2 00          	mov    BYTE PTR [rbp-0x1e],0x0
ffffffff8000810a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff8000810e:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80008111:	eb 64                	jmp    ffffffff80008177 <unicode.utf8Decode+0x107>
ffffffff80008113:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80008117:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff8000811b:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff8000811f:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
        2 => utf8Decode2(bytes),
ffffffff80008123:	e8 f8 75 00 00       	call   ffffffff8000f720 <unicode.utf8Decode2>
ffffffff80008128:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8000812c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80008130:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80008133:	eb 42                	jmp    ffffffff80008177 <unicode.utf8Decode+0x107>
ffffffff80008135:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80008139:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff8000813d:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff80008141:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
        3 => utf8Decode3(bytes),
ffffffff80008145:	e8 c6 77 00 00       	call   ffffffff8000f910 <unicode.utf8Decode3>
ffffffff8000814a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8000814e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff80008152:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80008155:	eb 20                	jmp    ffffffff80008177 <unicode.utf8Decode+0x107>
ffffffff80008157:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff8000815b:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff8000815f:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff80008163:	48 8d 7d f8          	lea    rdi,[rbp-0x8]
        4 => utf8Decode4(bytes),
ffffffff80008167:	e8 e4 7a 00 00       	call   ffffffff8000fc50 <unicode.utf8Decode4>
ffffffff8000816c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80008170:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffffffff80008174:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80008177:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    return switch (bytes.len) {
ffffffff8000817b:	66 83 78 04 00       	cmp    WORD PTR [rax+0x4],0x0
ffffffff80008180:	75 0a                	jne    ffffffff8000818c <unicode.utf8Decode+0x11c>
ffffffff80008182:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80008186:	48 83 c4 60          	add    rsp,0x60
ffffffff8000818a:	5d                   	pop    rbp
ffffffff8000818b:	c3                   	ret
ffffffff8000818c:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff80008190:	e8 7b b2 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80008195:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80008199:	48 83 c4 60          	add    rsp,0x60
ffffffff8000819d:	5d                   	pop    rbp
ffffffff8000819e:	c3                   	ret
ffffffff8000819f:	90                   	nop

ffffffff800081a0 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes>:
        pub fn writeByte(self: Self, byte: u8) Error!void {
            const array = [1]u8{byte};
            return self.writeAll(&array);
        }

        pub fn writeByteNTimes(self: Self, byte: u8, n: usize) Error!void {
ffffffff800081a0:	55                   	push   rbp
ffffffff800081a1:	48 89 e5             	mov    rbp,rsp
ffffffff800081a4:	48 81 ec 90 01 00 00 	sub    rsp,0x190
ffffffff800081ab:	48 89 8d 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rcx
ffffffff800081b2:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
ffffffff800081b9:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
ffffffff800081c0:	88 d0                	mov    al,dl
ffffffff800081c2:	88 85 a7 fe ff ff    	mov    BYTE PTR [rbp-0x159],al
ffffffff800081c8:	88 85 b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],al
ffffffff800081ce:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
ffffffff800081d5:	48 8d bd c0 fe ff ff 	lea    rdi,[rbp-0x140]
ffffffff800081dc:	be aa 00 00 00       	mov    esi,0xaa
ffffffff800081e1:	ba 00 01 00 00       	mov    edx,0x100
            var bytes: [256]u8 = undefined;
ffffffff800081e6:	e8 15 fd 00 00       	call   ffffffff80017f00 <memset>
            mem.set(u8, bytes[0..], byte);
ffffffff800081eb:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
ffffffff800081f2:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff800081f9:	b0 01                	mov    al,0x1
ffffffff800081fb:	a8 01                	test   al,0x1
ffffffff800081fd:	75 02                	jne    ffffffff80008201 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x61>
ffffffff800081ff:	eb 02                	jmp    ffffffff80008203 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x63>
ffffffff80008201:	eb 10                	jmp    ffffffff80008213 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x73>
ffffffff80008203:	31 c0                	xor    eax,eax
ffffffff80008205:	31 c0                	xor    eax,eax
ffffffff80008207:	89 c7                	mov    edi,eax
ffffffff80008209:	be 00 01 00 00       	mov    esi,0x100
ffffffff8000820e:	e8 fd 80 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80008213:	8a 85 a7 fe ff ff    	mov    al,BYTE PTR [rbp-0x159]
ffffffff80008219:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80008220:	be 00 01 00 00       	mov    esi,0x100
ffffffff80008225:	0f b6 d0             	movzx  edx,al
ffffffff80008228:	e8 23 7e 00 00       	call   ffffffff80010050 <mem.set__anon_3114>
ffffffff8000822d:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]

            var remaining: usize = n;
ffffffff80008234:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
            while (remaining > 0) {
ffffffff80008238:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffffffff8000823d:	76 47                	jbe    ffffffff80008286 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0xe6>
                const to_write = std.math.min(remaining, bytes.len);
ffffffff8000823f:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80008243:	be 00 01 00 00       	mov    esi,0x100
ffffffff80008248:	e8 73 7e 00 00       	call   ffffffff800100c0 <math.min__anon_3115>
ffffffff8000824d:	48 89 c1             	mov    rcx,rax
ffffffff80008250:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
ffffffff80008257:	48 89 8d 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rcx
ffffffff8000825e:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                try self.writeAll(bytes[0..to_write]);
ffffffff80008262:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80008265:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff80008269:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000826c:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff8000826f:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
ffffffff80008276:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
ffffffff8000827d:	31 c0                	xor    eax,eax
ffffffff8000827f:	48 39 c8             	cmp    rax,rcx
ffffffff80008282:	76 07                	jbe    ffffffff8000828b <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0xeb>
ffffffff80008284:	eb 07                	jmp    ffffffff8000828d <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0xed>
                remaining -= to_write;
ffffffff80008286:	e9 d0 00 00 00       	jmp    ffffffff8000835b <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x1bb>
                try self.writeAll(bytes[0..to_write]);
ffffffff8000828b:	eb 12                	jmp    ffffffff8000829f <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0xff>
ffffffff8000828d:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
ffffffff80008294:	31 c0                	xor    eax,eax
ffffffff80008296:	31 c0                	xor    eax,eax
ffffffff80008298:	89 c7                	mov    edi,eax
ffffffff8000829a:	e8 71 80 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000829f:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
ffffffff800082a6:	48 3d 00 01 00 00    	cmp    rax,0x100
ffffffff800082ac:	77 02                	ja     ffffffff800082b0 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x110>
ffffffff800082ae:	eb 11                	jmp    ffffffff800082c1 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x121>
ffffffff800082b0:	48 8b bd 78 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x188]
ffffffff800082b7:	be 00 01 00 00       	mov    esi,0x100
ffffffff800082bc:	e8 0f 7f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800082c1:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
ffffffff800082c8:	31 c0                	xor    eax,eax
ffffffff800082ca:	48 39 c8             	cmp    rax,rcx
ffffffff800082cd:	77 02                	ja     ffffffff800082d1 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x131>
ffffffff800082cf:	eb 12                	jmp    ffffffff800082e3 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x143>
ffffffff800082d1:	48 8b b5 78 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x188]
ffffffff800082d8:	31 c0                	xor    eax,eax
ffffffff800082da:	31 c0                	xor    eax,eax
ffffffff800082dc:	89 c7                	mov    edi,eax
ffffffff800082de:	e8 ed 7e ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800082e3:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
ffffffff800082ea:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff800082f1:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff800082f8:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff800082fc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80008300:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80008304:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80008308:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff8000830c:	e8 3f 80 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80008311:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
                remaining -= to_write;
ffffffff80008318:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000831c:	48 29 c8             	sub    rax,rcx
ffffffff8000831f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80008323:	0f 92 45 f8          	setb   BYTE PTR [rbp-0x8]
ffffffff80008327:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff8000832a:	84 c0                	test   al,al
ffffffff8000832c:	75 04                	jne    ffffffff80008332 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x192>
ffffffff8000832e:	eb 00                	jmp    ffffffff80008330 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x190>
ffffffff80008330:	eb 1c                	jmp    ffffffff8000834e <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x1ae>
ffffffff80008332:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80008339:	48 c7 c1 b8 c0 01 80 	mov    rcx,0xffffffff8001c0b8
ffffffff80008340:	31 c0                	xor    eax,eax
ffffffff80008342:	89 c2                	mov    edx,eax
ffffffff80008344:	be 10 00 00 00       	mov    esi,0x10
ffffffff80008349:	e8 62 7e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000834e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80008352:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80008356:	e9 dd fe ff ff       	jmp    ffffffff80008238 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeByteNTimes+0x98>
ffffffff8000835b:	31 c0                	xor    eax,eax
ffffffff8000835d:	48 81 c4 90 01 00 00 	add    rsp,0x190
ffffffff80008364:	5d                   	pop    rbp
ffffffff80008365:	c3                   	ret
ffffffff80008366:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000836d:	00 00 00 

ffffffff80008370 <fmt.formatValue__anon_2867>:
) !void {
ffffffff80008370:	55                   	push   rbp
ffffffff80008371:	48 89 e5             	mov    rbp,rsp
ffffffff80008374:	48 83 ec 20          	sub    rsp,0x20
ffffffff80008378:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000837c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80008380:	e8 2b 00 00 00       	call   ffffffff800083b0 <fmt.formatIntValue__anon_2868>
ffffffff80008385:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80008389:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000838e:	75 0a                	jne    ffffffff8000839a <fmt.formatValue__anon_2867+0x2a>
ffffffff80008390:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80008394:	48 83 c4 20          	add    rsp,0x20
ffffffff80008398:	5d                   	pop    rbp
ffffffff80008399:	c3                   	ret
ffffffff8000839a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff8000839e:	e8 6d b0 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800083a3:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800083a7:	48 83 c4 20          	add    rsp,0x20
ffffffff800083ab:	5d                   	pop    rbp
ffffffff800083ac:	c3                   	ret
ffffffff800083ad:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800083b0 <fmt.formatIntValue__anon_2868>:
) !void {
ffffffff800083b0:	55                   	push   rbp
ffffffff800083b1:	48 89 e5             	mov    rbp,rsp
ffffffff800083b4:	48 83 ec 20          	sub    rsp,0x20
ffffffff800083b8:	49 89 c9             	mov    r9,rcx
ffffffff800083bb:	49 89 d0             	mov    r8,rdx
ffffffff800083be:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff800083c2:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff800083c6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return formatInt(int_value, radix, case, options, writer);
ffffffff800083ca:	31 c0                	xor    eax,eax
ffffffff800083cc:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff800083d1:	31 c9                	xor    ecx,ecx
ffffffff800083d3:	e8 28 00 00 00       	call   ffffffff80008400 <fmt.formatInt__anon_2871>
ffffffff800083d8:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800083dc:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800083e1:	75 0a                	jne    ffffffff800083ed <fmt.formatIntValue__anon_2868+0x3d>
ffffffff800083e3:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800083e7:	48 83 c4 20          	add    rsp,0x20
ffffffff800083eb:	5d                   	pop    rbp
ffffffff800083ec:	c3                   	ret
ffffffff800083ed:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff800083f1:	e8 1a b0 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800083f6:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800083fa:	48 83 c4 20          	add    rsp,0x20
ffffffff800083fe:	5d                   	pop    rbp
ffffffff800083ff:	c3                   	ret

ffffffff80008400 <fmt.formatInt__anon_2871>:
) !void {
ffffffff80008400:	55                   	push   rbp
ffffffff80008401:	48 89 e5             	mov    rbp,rsp
ffffffff80008404:	48 81 ec 10 02 00 00 	sub    rsp,0x210
ffffffff8000840b:	4c 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],r9
ffffffff80008412:	4c 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],r8
ffffffff80008419:	48 89 b5 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rsi
ffffffff80008420:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
ffffffff80008427:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
ffffffff8000842d:	88 d0                	mov    al,dl
ffffffff8000842f:	88 85 df fe ff ff    	mov    BYTE PTR [rbp-0x121],al
ffffffff80008435:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
ffffffff8000843c:	88 85 f6 fe ff ff    	mov    BYTE PTR [rbp-0x10a],al
ffffffff80008442:	80 e1 01             	and    cl,0x1
ffffffff80008445:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
    assert(base >= 2);
ffffffff8000844b:	3c 02                	cmp    al,0x2
ffffffff8000844d:	0f 93 c0             	setae  al
ffffffff80008450:	0f b6 f8             	movzx  edi,al
ffffffff80008453:	e8 d8 d7 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80008458:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8000845f:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80008466:	66 c7 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],0x40
ffffffff8000846d:	40 00 
    const abs_value = math.absCast(int_value);
ffffffff8000846f:	e8 5c 07 00 00       	call   ffffffff80008bd0 <math.absCast__anon_2872>
ffffffff80008474:	48 89 c1             	mov    rcx,rax
ffffffff80008477:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
ffffffff8000847d:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
ffffffff80008484:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff8000848b:	aa aa aa 
ffffffff8000848e:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80008495:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
ffffffff8000849c:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
ffffffff800084a3:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
ffffffff800084aa:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
ffffffff800084b1:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
ffffffff800084b8:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
ffffffff800084bf:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
ffffffff800084c6:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffffffff800084cd:	c6 85 50 ff ff ff aa 	mov    BYTE PTR [rbp-0xb0],0xaa
    var a: MinInt = abs_value;
ffffffff800084d4:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
    var index: usize = buf.len;
ffffffff800084db:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x41
ffffffff800084e2:	41 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff800084e6:	3c 0a                	cmp    al,0xa
ffffffff800084e8:	75 0f                	jne    ffffffff800084f9 <fmt.formatInt__anon_2871+0xf9>
ffffffff800084ea:	e8 a1 ec ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff800084ef:	34 ff                	xor    al,0xff
ffffffff800084f1:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
ffffffff800084f7:	eb 0a                	jmp    ffffffff80008503 <fmt.formatInt__anon_2871+0x103>
ffffffff800084f9:	31 c0                	xor    eax,eax
ffffffff800084fb:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
ffffffff80008501:	eb 00                	jmp    ffffffff80008503 <fmt.formatInt__anon_2871+0x103>
ffffffff80008503:	8a 85 af fe ff ff    	mov    al,BYTE PTR [rbp-0x151]
ffffffff80008509:	a8 01                	test   al,0x1
ffffffff8000850b:	75 02                	jne    ffffffff8000850f <fmt.formatInt__anon_2871+0x10f>
ffffffff8000850d:	eb 02                	jmp    ffffffff80008511 <fmt.formatInt__anon_2871+0x111>
ffffffff8000850f:	eb 05                	jmp    ffffffff80008516 <fmt.formatInt__anon_2871+0x116>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80008511:	e9 0d 04 00 00       	jmp    ffffffff80008923 <fmt.formatInt__anon_2871+0x523>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80008516:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x64
ffffffff8000851d:	64 
ffffffff8000851e:	72 25                	jb     ffffffff80008545 <fmt.formatInt__anon_2871+0x145>
            index -= 2;
ffffffff80008520:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80008527:	48 83 e8 02          	sub    rax,0x2
ffffffff8000852b:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff80008532:	0f 92 85 70 ff ff ff 	setb   BYTE PTR [rbp-0x90]
ffffffff80008539:	8a 85 70 ff ff ff    	mov    al,BYTE PTR [rbp-0x90]
ffffffff8000853f:	84 c0                	test   al,al
ffffffff80008541:	74 07                	je     ffffffff8000854a <fmt.formatInt__anon_2871+0x14a>
ffffffff80008543:	eb 07                	jmp    ffffffff8000854c <fmt.formatInt__anon_2871+0x14c>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80008545:	e9 69 01 00 00       	jmp    ffffffff800086b3 <fmt.formatInt__anon_2871+0x2b3>
            index -= 2;
ffffffff8000854a:	eb 1c                	jmp    ffffffff80008568 <fmt.formatInt__anon_2871+0x168>
ffffffff8000854c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80008553:	48 c7 c1 f8 bb 01 80 	mov    rcx,0xffffffff8001bbf8
ffffffff8000855a:	31 c0                	xor    eax,eax
ffffffff8000855c:	89 c2                	mov    edx,eax
ffffffff8000855e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80008563:	e8 48 7c ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80008568:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000856f:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80008576:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000857d:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80008584:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff8000858b:	48 01 c1             	add    rcx,rax
ffffffff8000858e:	48 89 8d a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rcx
ffffffff80008595:	48 83 f8 41          	cmp    rax,0x41
ffffffff80008599:	77 02                	ja     ffffffff8000859d <fmt.formatInt__anon_2871+0x19d>
ffffffff8000859b:	eb 11                	jmp    ffffffff800085ae <fmt.formatInt__anon_2871+0x1ae>
ffffffff8000859d:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff800085a4:	be 41 00 00 00       	mov    esi,0x41
ffffffff800085a9:	e8 62 7d ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800085ae:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
ffffffff800085b5:	b8 41 00 00 00       	mov    eax,0x41
ffffffff800085ba:	48 29 c8             	sub    rax,rcx
ffffffff800085bd:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff800085c4:	b0 01                	mov    al,0x1
ffffffff800085c6:	a8 01                	test   al,0x1
ffffffff800085c8:	75 02                	jne    ffffffff800085cc <fmt.formatInt__anon_2871+0x1cc>
ffffffff800085ca:	eb 02                	jmp    ffffffff800085ce <fmt.formatInt__anon_2871+0x1ce>
ffffffff800085cc:	eb 0d                	jmp    ffffffff800085db <fmt.formatInt__anon_2871+0x1db>
ffffffff800085ce:	be 41 00 00 00       	mov    esi,0x41
ffffffff800085d3:	48 89 f7             	mov    rdi,rsi
ffffffff800085d6:	e8 f5 7b ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800085db:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
ffffffff800085e2:	48 83 f8 41          	cmp    rax,0x41
ffffffff800085e6:	77 02                	ja     ffffffff800085ea <fmt.formatInt__anon_2871+0x1ea>
ffffffff800085e8:	eb 11                	jmp    ffffffff800085fb <fmt.formatInt__anon_2871+0x1fb>
ffffffff800085ea:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff800085f1:	be 41 00 00 00       	mov    esi,0x41
ffffffff800085f6:	e8 d5 7b ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800085fb:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
ffffffff80008602:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffffffff80008609:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffffffff8000860d:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80008614:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff8000861b:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
ffffffff80008622:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80008626:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
ffffffff8000862d:	b0 01                	mov    al,0x1
ffffffff8000862f:	a8 01                	test   al,0x1
ffffffff80008631:	75 02                	jne    ffffffff80008635 <fmt.formatInt__anon_2871+0x235>
ffffffff80008633:	eb 02                	jmp    ffffffff80008637 <fmt.formatInt__anon_2871+0x237>
ffffffff80008635:	eb 10                	jmp    ffffffff80008647 <fmt.formatInt__anon_2871+0x247>
ffffffff80008637:	31 c0                	xor    eax,eax
ffffffff80008639:	31 c0                	xor    eax,eax
ffffffff8000863b:	89 c7                	mov    edi,eax
ffffffff8000863d:	be 02 00 00 00       	mov    esi,0x2
ffffffff80008642:	e8 c9 7c ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80008647:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffffffff8000864e:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80008653:	48 39 c8             	cmp    rax,rcx
ffffffff80008656:	77 02                	ja     ffffffff8000865a <fmt.formatInt__anon_2871+0x25a>
ffffffff80008658:	eb 11                	jmp    ffffffff8000866b <fmt.formatInt__anon_2871+0x26b>
ffffffff8000865a:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
ffffffff80008661:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80008666:	e8 65 7b ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000866b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80008672:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff80008677:	31 d2                	xor    edx,edx
ffffffff80008679:	48 f7 f1             	div    rcx
ffffffff8000867c:	48 89 d6             	mov    rsi,rdx
ffffffff8000867f:	48 8d 7d 8e          	lea    rdi,[rbp-0x72]
ffffffff80008683:	e8 28 eb ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80008688:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff8000868f:	66 8b 4d 8e          	mov    cx,WORD PTR [rbp-0x72]
ffffffff80008693:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80008696:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff8000869d:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff800086a2:	31 d2                	xor    edx,edx
ffffffff800086a4:	48 f7 f1             	div    rcx
ffffffff800086a7:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
ffffffff800086ae:	e9 63 fe ff ff       	jmp    ffffffff80008516 <fmt.formatInt__anon_2871+0x116>
        if (a < 10) {
ffffffff800086b3:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0xa
ffffffff800086ba:	0a 
ffffffff800086bb:	73 1c                	jae    ffffffff800086d9 <fmt.formatInt__anon_2871+0x2d9>
            index -= 1;
ffffffff800086bd:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff800086c4:	48 83 e8 01          	sub    rax,0x1
ffffffff800086c8:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff800086cc:	0f 92 45 98          	setb   BYTE PTR [rbp-0x68]
ffffffff800086d0:	8a 45 98             	mov    al,BYTE PTR [rbp-0x68]
ffffffff800086d3:	84 c0                	test   al,al
ffffffff800086d5:	74 25                	je     ffffffff800086fc <fmt.formatInt__anon_2871+0x2fc>
ffffffff800086d7:	eb 25                	jmp    ffffffff800086fe <fmt.formatInt__anon_2871+0x2fe>
            index -= 2;
ffffffff800086d9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff800086e0:	48 83 e8 02          	sub    rax,0x2
ffffffff800086e4:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff800086e8:	0f 92 45 b0          	setb   BYTE PTR [rbp-0x50]
ffffffff800086ec:	8a 45 b0             	mov    al,BYTE PTR [rbp-0x50]
ffffffff800086ef:	84 c0                	test   al,al
ffffffff800086f1:	0f 84 f1 00 00 00    	je     ffffffff800087e8 <fmt.formatInt__anon_2871+0x3e8>
ffffffff800086f7:	e9 ee 00 00 00       	jmp    ffffffff800087ea <fmt.formatInt__anon_2871+0x3ea>
            index -= 1;
ffffffff800086fc:	eb 1c                	jmp    ffffffff8000871a <fmt.formatInt__anon_2871+0x31a>
ffffffff800086fe:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80008705:	48 c7 c1 08 bc 01 80 	mov    rcx,0xffffffff8001bc08
ffffffff8000870c:	31 c0                	xor    eax,eax
ffffffff8000870e:	89 c2                	mov    edx,eax
ffffffff80008710:	be 10 00 00 00       	mov    esi,0x10
ffffffff80008715:	e8 96 7a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000871a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff8000871e:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80008725:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000872c:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80008733:	48 83 f8 41          	cmp    rax,0x41
ffffffff80008737:	73 02                	jae    ffffffff8000873b <fmt.formatInt__anon_2871+0x33b>
ffffffff80008739:	eb 11                	jmp    ffffffff8000874c <fmt.formatInt__anon_2871+0x34c>
ffffffff8000873b:	48 8b bd 78 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x188]
ffffffff80008742:	be 41 00 00 00       	mov    esi,0x41
ffffffff80008747:	e8 84 7a ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000874c:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
ffffffff80008753:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffffffff8000875a:	48 01 c8             	add    rax,rcx
ffffffff8000875d:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff80008764:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff8000876b:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
ffffffff80008772:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80008777:	48 29 c8             	sub    rax,rcx
ffffffff8000877a:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff80008780:	77 02                	ja     ffffffff80008784 <fmt.formatInt__anon_2871+0x384>
ffffffff80008782:	eb 1c                	jmp    ffffffff800087a0 <fmt.formatInt__anon_2871+0x3a0>
ffffffff80008784:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff8000878b:	48 c7 c1 18 bc 01 80 	mov    rcx,0xffffffff8001bc18
ffffffff80008792:	31 c0                	xor    eax,eax
ffffffff80008794:	89 c2                	mov    edx,eax
ffffffff80008796:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff8000879b:	e8 10 7a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800087a0:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
ffffffff800087a7:	04 30                	add    al,0x30
ffffffff800087a9:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
ffffffff800087ac:	0f 92 45 a1          	setb   BYTE PTR [rbp-0x5f]
ffffffff800087b0:	8a 45 a1             	mov    al,BYTE PTR [rbp-0x5f]
ffffffff800087b3:	84 c0                	test   al,al
ffffffff800087b5:	75 04                	jne    ffffffff800087bb <fmt.formatInt__anon_2871+0x3bb>
ffffffff800087b7:	eb 00                	jmp    ffffffff800087b9 <fmt.formatInt__anon_2871+0x3b9>
ffffffff800087b9:	eb 1c                	jmp    ffffffff800087d7 <fmt.formatInt__anon_2871+0x3d7>
ffffffff800087bb:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800087c2:	48 c7 c1 28 bc 01 80 	mov    rcx,0xffffffff8001bc28
ffffffff800087c9:	31 c0                	xor    eax,eax
ffffffff800087cb:	89 c2                	mov    edx,eax
ffffffff800087cd:	be 10 00 00 00       	mov    esi,0x10
ffffffff800087d2:	e8 d9 79 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800087d7:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
ffffffff800087de:	8a 4d a0             	mov    cl,BYTE PTR [rbp-0x60]
ffffffff800087e1:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800087e3:	e9 36 01 00 00       	jmp    ffffffff8000891e <fmt.formatInt__anon_2871+0x51e>
            index -= 2;
ffffffff800087e8:	eb 1c                	jmp    ffffffff80008806 <fmt.formatInt__anon_2871+0x406>
ffffffff800087ea:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800087f1:	48 c7 c1 38 bc 01 80 	mov    rcx,0xffffffff8001bc38
ffffffff800087f8:	31 c0                	xor    eax,eax
ffffffff800087fa:	89 c2                	mov    edx,eax
ffffffff800087fc:	be 10 00 00 00       	mov    esi,0x10
ffffffff80008801:	e8 aa 79 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80008806:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8000880a:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80008811:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80008818:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff8000881f:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff80008826:	48 01 c1             	add    rcx,rax
ffffffff80008829:	48 89 8d 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rcx
ffffffff80008830:	48 83 f8 41          	cmp    rax,0x41
ffffffff80008834:	77 02                	ja     ffffffff80008838 <fmt.formatInt__anon_2871+0x438>
ffffffff80008836:	eb 11                	jmp    ffffffff80008849 <fmt.formatInt__anon_2871+0x449>
ffffffff80008838:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff8000883f:	be 41 00 00 00       	mov    esi,0x41
ffffffff80008844:	e8 c7 7a ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80008849:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
ffffffff80008850:	b8 41 00 00 00       	mov    eax,0x41
ffffffff80008855:	48 29 c8             	sub    rax,rcx
ffffffff80008858:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
ffffffff8000885f:	b0 01                	mov    al,0x1
ffffffff80008861:	a8 01                	test   al,0x1
ffffffff80008863:	75 02                	jne    ffffffff80008867 <fmt.formatInt__anon_2871+0x467>
ffffffff80008865:	eb 02                	jmp    ffffffff80008869 <fmt.formatInt__anon_2871+0x469>
ffffffff80008867:	eb 0d                	jmp    ffffffff80008876 <fmt.formatInt__anon_2871+0x476>
ffffffff80008869:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000886e:	48 89 f7             	mov    rdi,rsi
ffffffff80008871:	e8 5a 79 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008876:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
ffffffff8000887d:	48 83 f8 41          	cmp    rax,0x41
ffffffff80008881:	77 02                	ja     ffffffff80008885 <fmt.formatInt__anon_2871+0x485>
ffffffff80008883:	eb 11                	jmp    ffffffff80008896 <fmt.formatInt__anon_2871+0x496>
ffffffff80008885:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff8000888c:	be 41 00 00 00       	mov    esi,0x41
ffffffff80008891:	e8 3a 79 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008896:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
ffffffff8000889d:	48 8b 8d 50 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b0]
ffffffff800088a4:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff800088a8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800088ac:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800088b0:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
ffffffff800088b7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800088bb:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff800088c2:	b0 01                	mov    al,0x1
ffffffff800088c4:	a8 01                	test   al,0x1
ffffffff800088c6:	75 02                	jne    ffffffff800088ca <fmt.formatInt__anon_2871+0x4ca>
ffffffff800088c8:	eb 02                	jmp    ffffffff800088cc <fmt.formatInt__anon_2871+0x4cc>
ffffffff800088ca:	eb 10                	jmp    ffffffff800088dc <fmt.formatInt__anon_2871+0x4dc>
ffffffff800088cc:	31 c0                	xor    eax,eax
ffffffff800088ce:	31 c0                	xor    eax,eax
ffffffff800088d0:	89 c7                	mov    edi,eax
ffffffff800088d2:	be 02 00 00 00       	mov    esi,0x2
ffffffff800088d7:	e8 34 7a ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800088dc:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
ffffffff800088e3:	b8 02 00 00 00       	mov    eax,0x2
ffffffff800088e8:	48 39 c8             	cmp    rax,rcx
ffffffff800088eb:	77 02                	ja     ffffffff800088ef <fmt.formatInt__anon_2871+0x4ef>
ffffffff800088ed:	eb 11                	jmp    ffffffff80008900 <fmt.formatInt__anon_2871+0x500>
ffffffff800088ef:	48 8b b5 48 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1b8]
ffffffff800088f6:	bf 02 00 00 00       	mov    edi,0x2
ffffffff800088fb:	e8 d0 78 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008900:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
ffffffff80008907:	48 8d 7d ce          	lea    rdi,[rbp-0x32]
ffffffff8000890b:	e8 a0 e8 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80008910:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
ffffffff80008917:	66 8b 4d ce          	mov    cx,WORD PTR [rbp-0x32]
ffffffff8000891b:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff8000891e:	e9 b0 01 00 00       	jmp    ffffffff80008ad3 <fmt.formatInt__anon_2871+0x6d3>
ffffffff80008923:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
            const digit = a % base;
ffffffff80008929:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff80008930:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
ffffffff80008937:	0f b6 c0             	movzx  eax,al
ffffffff8000893a:	48 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rax
ffffffff80008941:	48 83 f8 00          	cmp    rax,0x0
ffffffff80008945:	74 02                	je     ffffffff80008949 <fmt.formatInt__anon_2871+0x549>
ffffffff80008947:	eb 1c                	jmp    ffffffff80008965 <fmt.formatInt__anon_2871+0x565>
ffffffff80008949:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80008950:	48 c7 c1 48 bc 01 80 	mov    rcx,0xffffffff8001bc48
ffffffff80008957:	31 c0                	xor    eax,eax
ffffffff80008959:	89 c2                	mov    edx,eax
ffffffff8000895b:	be 10 00 00 00       	mov    esi,0x10
ffffffff80008960:	e8 4b 78 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80008965:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
ffffffff8000896c:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
ffffffff80008973:	31 d2                	xor    edx,edx
ffffffff80008975:	48 f7 f1             	div    rcx
ffffffff80008978:	48 89 d0             	mov    rax,rdx
ffffffff8000897b:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
ffffffff80008982:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            index -= 1;
ffffffff80008986:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000898d:	48 83 e8 01          	sub    rax,0x1
ffffffff80008991:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80008995:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80008999:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff8000899c:	84 c0                	test   al,al
ffffffff8000899e:	75 04                	jne    ffffffff800089a4 <fmt.formatInt__anon_2871+0x5a4>
ffffffff800089a0:	eb 00                	jmp    ffffffff800089a2 <fmt.formatInt__anon_2871+0x5a2>
ffffffff800089a2:	eb 1c                	jmp    ffffffff800089c0 <fmt.formatInt__anon_2871+0x5c0>
ffffffff800089a4:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800089ab:	48 c7 c1 58 bc 01 80 	mov    rcx,0xffffffff8001bc58
ffffffff800089b2:	31 c0                	xor    eax,eax
ffffffff800089b4:	89 c2                	mov    edx,eax
ffffffff800089b6:	be 10 00 00 00       	mov    esi,0x10
ffffffff800089bb:	e8 f0 77 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800089c0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800089c4:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff800089cb:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff800089d2:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff800089d9:	48 83 f8 41          	cmp    rax,0x41
ffffffff800089dd:	73 02                	jae    ffffffff800089e1 <fmt.formatInt__anon_2871+0x5e1>
ffffffff800089df:	eb 11                	jmp    ffffffff800089f2 <fmt.formatInt__anon_2871+0x5f2>
ffffffff800089e1:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
ffffffff800089e8:	be 41 00 00 00       	mov    esi,0x41
ffffffff800089ed:	e8 de 77 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800089f2:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff800089f9:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80008a00:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffffffff80008a07:	48 01 d0             	add    rax,rdx
ffffffff80008a0a:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
ffffffff80008a11:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80008a16:	48 29 c8             	sub    rax,rcx
ffffffff80008a19:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff80008a1f:	77 02                	ja     ffffffff80008a23 <fmt.formatInt__anon_2871+0x623>
ffffffff80008a21:	eb 1c                	jmp    ffffffff80008a3f <fmt.formatInt__anon_2871+0x63f>
ffffffff80008a23:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80008a2a:	48 c7 c1 68 bc 01 80 	mov    rcx,0xffffffff8001bc68
ffffffff80008a31:	31 c0                	xor    eax,eax
ffffffff80008a33:	89 c2                	mov    edx,eax
ffffffff80008a35:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80008a3a:	e8 71 77 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80008a3f:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
ffffffff80008a45:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80008a4c:	0f b6 f9             	movzx  edi,cl
ffffffff80008a4f:	0f b6 f0             	movzx  esi,al
ffffffff80008a52:	e8 c9 e8 ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80008a57:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80008a5e:	88 c2                	mov    dl,al
ffffffff80008a60:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
ffffffff80008a66:	88 11                	mov    BYTE PTR [rcx],dl
            a /= base;
ffffffff80008a68:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff80008a6f:	48 89 8d 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rcx
ffffffff80008a76:	0f b6 c0             	movzx  eax,al
ffffffff80008a79:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff80008a80:	48 83 f8 00          	cmp    rax,0x0
ffffffff80008a84:	74 02                	je     ffffffff80008a88 <fmt.formatInt__anon_2871+0x688>
ffffffff80008a86:	eb 1c                	jmp    ffffffff80008aa4 <fmt.formatInt__anon_2871+0x6a4>
ffffffff80008a88:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80008a8f:	48 c7 c1 78 bc 01 80 	mov    rcx,0xffffffff8001bc78
ffffffff80008a96:	31 c0                	xor    eax,eax
ffffffff80008a98:	89 c2                	mov    edx,eax
ffffffff80008a9a:	be 10 00 00 00       	mov    esi,0x10
ffffffff80008a9f:	e8 0c 77 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80008aa4:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
ffffffff80008aab:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
ffffffff80008ab2:	31 d2                	xor    edx,edx
ffffffff80008ab4:	48 f7 f1             	div    rcx
ffffffff80008ab7:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            if (a == 0) break;
ffffffff80008abe:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x0
ffffffff80008ac5:	00 
ffffffff80008ac6:	75 02                	jne    ffffffff80008aca <fmt.formatInt__anon_2871+0x6ca>
ffffffff80008ac8:	eb 07                	jmp    ffffffff80008ad1 <fmt.formatInt__anon_2871+0x6d1>
ffffffff80008aca:	eb 00                	jmp    ffffffff80008acc <fmt.formatInt__anon_2871+0x6cc>
ffffffff80008acc:	e9 52 fe ff ff       	jmp    ffffffff80008923 <fmt.formatInt__anon_2871+0x523>
ffffffff80008ad1:	eb 00                	jmp    ffffffff80008ad3 <fmt.formatInt__anon_2871+0x6d3>
    return formatBuf(buf[index..], options, writer);
ffffffff80008ad3:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80008ada:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
ffffffff80008ae1:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff80008ae8:	48 01 c1             	add    rcx,rax
ffffffff80008aeb:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
ffffffff80008af2:	48 83 f8 41          	cmp    rax,0x41
ffffffff80008af6:	77 02                	ja     ffffffff80008afa <fmt.formatInt__anon_2871+0x6fa>
ffffffff80008af8:	eb 11                	jmp    ffffffff80008b0b <fmt.formatInt__anon_2871+0x70b>
ffffffff80008afa:	48 8b bd f8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x208]
ffffffff80008b01:	be 41 00 00 00       	mov    esi,0x41
ffffffff80008b06:	e8 05 78 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80008b0b:	48 8b 8d f8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x208]
ffffffff80008b12:	b8 41 00 00 00       	mov    eax,0x41
ffffffff80008b17:	48 29 c8             	sub    rax,rcx
ffffffff80008b1a:	48 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rax
ffffffff80008b21:	b0 01                	mov    al,0x1
ffffffff80008b23:	a8 01                	test   al,0x1
ffffffff80008b25:	75 02                	jne    ffffffff80008b29 <fmt.formatInt__anon_2871+0x729>
ffffffff80008b27:	eb 02                	jmp    ffffffff80008b2b <fmt.formatInt__anon_2871+0x72b>
ffffffff80008b29:	eb 0d                	jmp    ffffffff80008b38 <fmt.formatInt__anon_2871+0x738>
ffffffff80008b2b:	be 41 00 00 00       	mov    esi,0x41
ffffffff80008b30:	48 89 f7             	mov    rdi,rsi
ffffffff80008b33:	e8 98 76 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008b38:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
ffffffff80008b3f:	48 83 f8 41          	cmp    rax,0x41
ffffffff80008b43:	77 02                	ja     ffffffff80008b47 <fmt.formatInt__anon_2871+0x747>
ffffffff80008b45:	eb 11                	jmp    ffffffff80008b58 <fmt.formatInt__anon_2871+0x758>
ffffffff80008b47:	48 8b bd f8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x208]
ffffffff80008b4e:	be 41 00 00 00       	mov    esi,0x41
ffffffff80008b53:	e8 78 76 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008b58:	4c 8b 85 b0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x150]
ffffffff80008b5f:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff80008b66:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff80008b6d:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
ffffffff80008b74:	48 8b 95 f0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x210]
ffffffff80008b7b:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80008b7f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80008b83:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80008b87:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80008b8b:	e8 d0 e8 ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff80008b90:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80008b94:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80008b99:	75 0d                	jne    ffffffff80008ba8 <fmt.formatInt__anon_2871+0x7a8>
ffffffff80008b9b:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80008b9f:	48 81 c4 10 02 00 00 	add    rsp,0x210
ffffffff80008ba6:	5d                   	pop    rbp
ffffffff80008ba7:	c3                   	ret
ffffffff80008ba8:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff80008baf:	e8 5c a8 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80008bb4:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80008bb8:	48 81 c4 10 02 00 00 	add    rsp,0x210
ffffffff80008bbf:	5d                   	pop    rbp
ffffffff80008bc0:	c3                   	ret
ffffffff80008bc1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80008bc8:	00 00 00 
ffffffff80008bcb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80008bd0 <math.absCast__anon_2872>:
} {
ffffffff80008bd0:	55                   	push   rbp
ffffffff80008bd1:	48 89 e5             	mov    rbp,rsp
ffffffff80008bd4:	50                   	push   rax
ffffffff80008bd5:	48 89 f8             	mov    rax,rdi
ffffffff80008bd8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
            if (int_info.signedness == .unsigned) return x;
ffffffff80008bdc:	48 83 c4 08          	add    rsp,0x8
ffffffff80008be0:	5d                   	pop    rbp
ffffffff80008be1:	c3                   	ret
ffffffff80008be2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80008be9:	00 00 00 
ffffffff80008bec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80008bf0 <fmt.formatValue__anon_2874>:
) !void {
ffffffff80008bf0:	55                   	push   rbp
ffffffff80008bf1:	48 89 e5             	mov    rbp,rsp
ffffffff80008bf4:	48 83 ec 20          	sub    rsp,0x20
ffffffff80008bf8:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff80008bfc:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
ffffffff80008c00:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80008c04:	e8 37 00 00 00       	call   ffffffff80008c40 <fmt.formatIntValue__anon_2875>
ffffffff80008c09:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80008c0d:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80008c12:	75 0a                	jne    ffffffff80008c1e <fmt.formatValue__anon_2874+0x2e>
ffffffff80008c14:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80008c18:	48 83 c4 20          	add    rsp,0x20
ffffffff80008c1c:	5d                   	pop    rbp
ffffffff80008c1d:	c3                   	ret
ffffffff80008c1e:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80008c22:	e8 e9 a7 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80008c27:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80008c2b:	48 83 c4 20          	add    rsp,0x20
ffffffff80008c2f:	5d                   	pop    rbp
ffffffff80008c30:	c3                   	ret
ffffffff80008c31:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80008c38:	00 00 00 
ffffffff80008c3b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80008c40 <fmt.formatIntValue__anon_2875>:
) !void {
ffffffff80008c40:	55                   	push   rbp
ffffffff80008c41:	48 89 e5             	mov    rbp,rsp
ffffffff80008c44:	48 83 ec 40          	sub    rsp,0x40
ffffffff80008c48:	49 89 c9             	mov    r9,rcx
ffffffff80008c4b:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80008c4f:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80008c53:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80008c57:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff80008c5b:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    return formatInt(int_value, radix, case, options, writer);
ffffffff80008c5f:	48 89 e0             	mov    rax,rsp
ffffffff80008c62:	4c 89 00             	mov    QWORD PTR [rax],r8
ffffffff80008c65:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff80008c6a:	45 31 c0             	xor    r8d,r8d
ffffffff80008c6d:	e8 2e 00 00 00       	call   ffffffff80008ca0 <fmt.formatInt__anon_2878>
ffffffff80008c72:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80008c76:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80008c7b:	75 0a                	jne    ffffffff80008c87 <fmt.formatIntValue__anon_2875+0x47>
ffffffff80008c7d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80008c81:	48 83 c4 40          	add    rsp,0x40
ffffffff80008c85:	5d                   	pop    rbp
ffffffff80008c86:	c3                   	ret
ffffffff80008c87:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80008c8b:	e8 80 a7 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80008c90:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80008c94:	48 83 c4 40          	add    rsp,0x40
ffffffff80008c98:	5d                   	pop    rbp
ffffffff80008c99:	c3                   	ret
ffffffff80008c9a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80008ca0 <fmt.formatInt__anon_2878>:
) !void {
ffffffff80008ca0:	55                   	push   rbp
ffffffff80008ca1:	48 89 e5             	mov    rbp,rsp
ffffffff80008ca4:	48 81 ec c0 02 00 00 	sub    rsp,0x2c0
ffffffff80008cab:	4c 89 8d 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],r9
ffffffff80008cb2:	89 c8                	mov    eax,ecx
ffffffff80008cb4:	48 89 bd 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rdi
ffffffff80008cbb:	44 88 c1             	mov    cl,r8b
ffffffff80008cbe:	88 8d 4f fe ff ff    	mov    BYTE PTR [rbp-0x1b1],cl
ffffffff80008cc4:	88 85 7f fe ff ff    	mov    BYTE PTR [rbp-0x181],al
ffffffff80008cca:	48 89 95 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rdx
ffffffff80008cd1:	48 89 b5 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rsi
ffffffff80008cd8:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
ffffffff80008cdc:	48 89 bd 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rdi
ffffffff80008ce3:	48 89 b5 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rsi
ffffffff80008cea:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
ffffffff80008cf1:	88 85 96 fe ff ff    	mov    BYTE PTR [rbp-0x16a],al
ffffffff80008cf7:	80 e1 01             	and    cl,0x1
ffffffff80008cfa:	88 8d 97 fe ff ff    	mov    BYTE PTR [rbp-0x169],cl
    assert(base >= 2);
ffffffff80008d00:	2c 02                	sub    al,0x2
ffffffff80008d02:	0f 93 c0             	setae  al
ffffffff80008d05:	0f b6 f8             	movzx  edi,al
ffffffff80008d08:	e8 23 cf ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80008d0d:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff80008d14:	48 8b b5 60 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1a0]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80008d1b:	48 89 b5 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rsi
ffffffff80008d22:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80008d29:	66 c7 85 ae fe ff ff 	mov    WORD PTR [rbp-0x152],0x80
ffffffff80008d30:	80 00 
    const abs_value = math.absCast(int_value);
ffffffff80008d32:	e8 89 08 00 00       	call   ffffffff800095c0 <math.absCast__anon_2880>
ffffffff80008d37:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
ffffffff80008d3e:	48 89 95 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rdx
ffffffff80008d45:	48 89 95 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rdx
ffffffff80008d4c:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80008d53:	48 8d bd c7 fe ff ff 	lea    rdi,[rbp-0x139]
ffffffff80008d5a:	be aa 00 00 00       	mov    esi,0xaa
ffffffff80008d5f:	ba 81 00 00 00       	mov    edx,0x81
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80008d64:	e8 97 f1 00 00       	call   ffffffff80017f00 <memset>
ffffffff80008d69:	48 8b 95 68 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x198]
ffffffff80008d70:	48 8b 8d 70 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x190]
ffffffff80008d77:	8a 85 7f fe ff ff    	mov    al,BYTE PTR [rbp-0x181]
    var a: MinInt = abs_value;
ffffffff80008d7d:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffffffff80008d84:	48 89 8d 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rcx
    var index: usize = buf.len;
ffffffff80008d8b:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x81
ffffffff80008d92:	81 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff80008d96:	3c 0a                	cmp    al,0xa
ffffffff80008d98:	75 0f                	jne    ffffffff80008da9 <fmt.formatInt__anon_2878+0x109>
ffffffff80008d9a:	e8 f1 e3 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80008d9f:	34 ff                	xor    al,0xff
ffffffff80008da1:	88 85 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],al
ffffffff80008da7:	eb 0a                	jmp    ffffffff80008db3 <fmt.formatInt__anon_2878+0x113>
ffffffff80008da9:	31 c0                	xor    eax,eax
ffffffff80008dab:	88 85 37 fe ff ff    	mov    BYTE PTR [rbp-0x1c9],al
ffffffff80008db1:	eb 00                	jmp    ffffffff80008db3 <fmt.formatInt__anon_2878+0x113>
ffffffff80008db3:	8a 85 37 fe ff ff    	mov    al,BYTE PTR [rbp-0x1c9]
ffffffff80008db9:	a8 01                	test   al,0x1
ffffffff80008dbb:	75 02                	jne    ffffffff80008dbf <fmt.formatInt__anon_2878+0x11f>
ffffffff80008dbd:	eb 02                	jmp    ffffffff80008dc1 <fmt.formatInt__anon_2878+0x121>
ffffffff80008dbf:	eb 05                	jmp    ffffffff80008dc6 <fmt.formatInt__anon_2878+0x126>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80008dc1:	e9 db 04 00 00       	jmp    ffffffff800092a1 <fmt.formatInt__anon_2878+0x601>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80008dc6:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff80008dcd:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff80008dd4:	48 83 e9 64          	sub    rcx,0x64
ffffffff80008dd8:	48 83 d8 00          	sbb    rax,0x0
ffffffff80008ddc:	72 27                	jb     ffffffff80008e05 <fmt.formatInt__anon_2878+0x165>
ffffffff80008dde:	eb 00                	jmp    ffffffff80008de0 <fmt.formatInt__anon_2878+0x140>
            index -= 2;
ffffffff80008de0:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80008de7:	48 83 e8 02          	sub    rax,0x2
ffffffff80008deb:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
ffffffff80008df2:	0f 92 85 68 ff ff ff 	setb   BYTE PTR [rbp-0x98]
ffffffff80008df9:	8a 85 68 ff ff ff    	mov    al,BYTE PTR [rbp-0x98]
ffffffff80008dff:	84 c0                	test   al,al
ffffffff80008e01:	74 07                	je     ffffffff80008e0a <fmt.formatInt__anon_2878+0x16a>
ffffffff80008e03:	eb 07                	jmp    ffffffff80008e0c <fmt.formatInt__anon_2878+0x16c>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80008e05:	e9 c0 01 00 00       	jmp    ffffffff80008fca <fmt.formatInt__anon_2878+0x32a>
            index -= 2;
ffffffff80008e0a:	eb 1c                	jmp    ffffffff80008e28 <fmt.formatInt__anon_2878+0x188>
ffffffff80008e0c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80008e13:	48 c7 c1 88 bc 01 80 	mov    rcx,0xffffffff8001bc88
ffffffff80008e1a:	31 c0                	xor    eax,eax
ffffffff80008e1c:	89 c2                	mov    edx,eax
ffffffff80008e1e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80008e23:	e8 88 73 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80008e28:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80008e2f:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80008e36:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80008e3d:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff80008e44:	48 8d 8d c7 fe ff ff 	lea    rcx,[rbp-0x139]
ffffffff80008e4b:	48 01 c1             	add    rcx,rax
ffffffff80008e4e:	48 89 8d 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rcx
ffffffff80008e55:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff80008e5b:	77 02                	ja     ffffffff80008e5f <fmt.formatInt__anon_2878+0x1bf>
ffffffff80008e5d:	eb 11                	jmp    ffffffff80008e70 <fmt.formatInt__anon_2878+0x1d0>
ffffffff80008e5f:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
ffffffff80008e66:	be 81 00 00 00       	mov    esi,0x81
ffffffff80008e6b:	e8 a0 74 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80008e70:	48 8b 8d 20 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e0]
ffffffff80008e77:	b8 81 00 00 00       	mov    eax,0x81
ffffffff80008e7c:	48 29 c8             	sub    rax,rcx
ffffffff80008e7f:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
ffffffff80008e86:	b0 01                	mov    al,0x1
ffffffff80008e88:	a8 01                	test   al,0x1
ffffffff80008e8a:	75 02                	jne    ffffffff80008e8e <fmt.formatInt__anon_2878+0x1ee>
ffffffff80008e8c:	eb 02                	jmp    ffffffff80008e90 <fmt.formatInt__anon_2878+0x1f0>
ffffffff80008e8e:	eb 0d                	jmp    ffffffff80008e9d <fmt.formatInt__anon_2878+0x1fd>
ffffffff80008e90:	be 81 00 00 00       	mov    esi,0x81
ffffffff80008e95:	48 89 f7             	mov    rdi,rsi
ffffffff80008e98:	e8 33 73 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008e9d:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
ffffffff80008ea4:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff80008eaa:	77 02                	ja     ffffffff80008eae <fmt.formatInt__anon_2878+0x20e>
ffffffff80008eac:	eb 11                	jmp    ffffffff80008ebf <fmt.formatInt__anon_2878+0x21f>
ffffffff80008eae:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
ffffffff80008eb5:	be 81 00 00 00       	mov    esi,0x81
ffffffff80008eba:	e8 11 73 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008ebf:	48 8b 85 28 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d8]
ffffffff80008ec6:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80008ecd:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
ffffffff80008ed4:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80008edb:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80008ee2:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
ffffffff80008ee9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80008ef0:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff80008ef7:	b0 01                	mov    al,0x1
ffffffff80008ef9:	a8 01                	test   al,0x1
ffffffff80008efb:	75 02                	jne    ffffffff80008eff <fmt.formatInt__anon_2878+0x25f>
ffffffff80008efd:	eb 02                	jmp    ffffffff80008f01 <fmt.formatInt__anon_2878+0x261>
ffffffff80008eff:	eb 10                	jmp    ffffffff80008f11 <fmt.formatInt__anon_2878+0x271>
ffffffff80008f01:	31 c0                	xor    eax,eax
ffffffff80008f03:	31 c0                	xor    eax,eax
ffffffff80008f05:	89 c7                	mov    edi,eax
ffffffff80008f07:	be 02 00 00 00       	mov    esi,0x2
ffffffff80008f0c:	e8 ff 73 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80008f11:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
ffffffff80008f18:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80008f1d:	48 39 c8             	cmp    rax,rcx
ffffffff80008f20:	77 02                	ja     ffffffff80008f24 <fmt.formatInt__anon_2878+0x284>
ffffffff80008f22:	eb 11                	jmp    ffffffff80008f35 <fmt.formatInt__anon_2878+0x295>
ffffffff80008f24:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
ffffffff80008f2b:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80008f30:	e8 9b 72 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80008f35:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff80008f3c:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffffffff80008f43:	31 c0                	xor    eax,eax
ffffffff80008f45:	89 c1                	mov    ecx,eax
ffffffff80008f47:	ba 64 00 00 00       	mov    edx,0x64
ffffffff80008f4c:	e8 7f ee 00 00       	call   ffffffff80017dd0 <__umodti3>
ffffffff80008f51:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
ffffffff80008f58:	48 85 d2             	test   rdx,rdx
ffffffff80008f5b:	75 04                	jne    ffffffff80008f61 <fmt.formatInt__anon_2878+0x2c1>
ffffffff80008f5d:	eb 00                	jmp    ffffffff80008f5f <fmt.formatInt__anon_2878+0x2bf>
ffffffff80008f5f:	eb 1c                	jmp    ffffffff80008f7d <fmt.formatInt__anon_2878+0x2dd>
ffffffff80008f61:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80008f68:	48 c7 c1 98 bc 01 80 	mov    rcx,0xffffffff8001bc98
ffffffff80008f6f:	31 c0                	xor    eax,eax
ffffffff80008f71:	89 c2                	mov    edx,eax
ffffffff80008f73:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80008f78:	e8 33 72 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80008f7d:	48 8b b5 00 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x200]
ffffffff80008f84:	48 8d 7d 86          	lea    rdi,[rbp-0x7a]
ffffffff80008f88:	e8 23 e2 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80008f8d:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
ffffffff80008f94:	66 8b 4d 86          	mov    cx,WORD PTR [rbp-0x7a]
ffffffff80008f98:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80008f9b:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff80008fa2:	48 8b b5 50 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb0]
ffffffff80008fa9:	31 c0                	xor    eax,eax
ffffffff80008fab:	89 c1                	mov    ecx,eax
ffffffff80008fad:	ba 64 00 00 00       	mov    edx,0x64
ffffffff80008fb2:	e8 09 ee 00 00       	call   ffffffff80017dc0 <__udivti3>
ffffffff80008fb7:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffffffff80008fbe:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff80008fc5:	e9 fc fd ff ff       	jmp    ffffffff80008dc6 <fmt.formatInt__anon_2878+0x126>
        if (a < 10) {
ffffffff80008fca:	48 8b b5 48 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xb8]
ffffffff80008fd1:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff80008fd8:	31 c0                	xor    eax,eax
ffffffff80008fda:	ba 09 00 00 00       	mov    edx,0x9
ffffffff80008fdf:	48 29 f2             	sub    rdx,rsi
ffffffff80008fe2:	48 19 c8             	sbb    rax,rcx
ffffffff80008fe5:	72 1e                	jb     ffffffff80009005 <fmt.formatInt__anon_2878+0x365>
ffffffff80008fe7:	eb 00                	jmp    ffffffff80008fe9 <fmt.formatInt__anon_2878+0x349>
            index -= 1;
ffffffff80008fe9:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80008ff0:	48 83 e8 01          	sub    rax,0x1
ffffffff80008ff4:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80008ff8:	0f 92 45 90          	setb   BYTE PTR [rbp-0x70]
ffffffff80008ffc:	8a 45 90             	mov    al,BYTE PTR [rbp-0x70]
ffffffff80008fff:	84 c0                	test   al,al
ffffffff80009001:	74 25                	je     ffffffff80009028 <fmt.formatInt__anon_2878+0x388>
ffffffff80009003:	eb 25                	jmp    ffffffff8000902a <fmt.formatInt__anon_2878+0x38a>
            index -= 2;
ffffffff80009005:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff8000900c:	48 83 e8 02          	sub    rax,0x2
ffffffff80009010:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80009014:	0f 92 45 a8          	setb   BYTE PTR [rbp-0x58]
ffffffff80009018:	8a 45 a8             	mov    al,BYTE PTR [rbp-0x58]
ffffffff8000901b:	84 c0                	test   al,al
ffffffff8000901d:	0f 84 05 01 00 00    	je     ffffffff80009128 <fmt.formatInt__anon_2878+0x488>
ffffffff80009023:	e9 02 01 00 00       	jmp    ffffffff8000912a <fmt.formatInt__anon_2878+0x48a>
            index -= 1;
ffffffff80009028:	eb 1c                	jmp    ffffffff80009046 <fmt.formatInt__anon_2878+0x3a6>
ffffffff8000902a:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009031:	48 c7 c1 a8 bc 01 80 	mov    rcx,0xffffffff8001bca8
ffffffff80009038:	31 c0                	xor    eax,eax
ffffffff8000903a:	89 c2                	mov    edx,eax
ffffffff8000903c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009041:	e8 6a 71 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009046:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff8000904a:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80009051:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80009058:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
ffffffff8000905f:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff80009065:	73 02                	jae    ffffffff80009069 <fmt.formatInt__anon_2878+0x3c9>
ffffffff80009067:	eb 11                	jmp    ffffffff8000907a <fmt.formatInt__anon_2878+0x3da>
ffffffff80009069:	48 8b bd f8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x208]
ffffffff80009070:	be 81 00 00 00       	mov    esi,0x81
ffffffff80009075:	e8 56 71 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000907a:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
ffffffff80009081:	48 8d 84 05 c7 fe ff 	lea    rax,[rbp+rax*1-0x139]
ffffffff80009088:	ff 
ffffffff80009089:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
ffffffff80009090:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff80009097:	48 89 8d f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rcx
ffffffff8000909e:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
ffffffff800090a5:	31 c0                	xor    eax,eax
ffffffff800090a7:	ba ff 00 00 00       	mov    edx,0xff
ffffffff800090ac:	48 89 d6             	mov    rsi,rdx
ffffffff800090af:	48 29 ce             	sub    rsi,rcx
ffffffff800090b2:	48 89 c1             	mov    rcx,rax
ffffffff800090b5:	48 19 f9             	sbb    rcx,rdi
ffffffff800090b8:	48 29 f2             	sub    rdx,rsi
ffffffff800090bb:	48 19 c8             	sbb    rax,rcx
ffffffff800090be:	72 04                	jb     ffffffff800090c4 <fmt.formatInt__anon_2878+0x424>
ffffffff800090c0:	eb 00                	jmp    ffffffff800090c2 <fmt.formatInt__anon_2878+0x422>
ffffffff800090c2:	eb 1c                	jmp    ffffffff800090e0 <fmt.formatInt__anon_2878+0x440>
ffffffff800090c4:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff800090cb:	48 c7 c1 b8 bc 01 80 	mov    rcx,0xffffffff8001bcb8
ffffffff800090d2:	31 c0                	xor    eax,eax
ffffffff800090d4:	89 c2                	mov    edx,eax
ffffffff800090d6:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff800090db:	e8 d0 70 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800090e0:	48 8b 85 f0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x210]
ffffffff800090e7:	04 30                	add    al,0x30
ffffffff800090e9:	88 45 98             	mov    BYTE PTR [rbp-0x68],al
ffffffff800090ec:	0f 92 45 99          	setb   BYTE PTR [rbp-0x67]
ffffffff800090f0:	8a 45 99             	mov    al,BYTE PTR [rbp-0x67]
ffffffff800090f3:	84 c0                	test   al,al
ffffffff800090f5:	75 04                	jne    ffffffff800090fb <fmt.formatInt__anon_2878+0x45b>
ffffffff800090f7:	eb 00                	jmp    ffffffff800090f9 <fmt.formatInt__anon_2878+0x459>
ffffffff800090f9:	eb 1c                	jmp    ffffffff80009117 <fmt.formatInt__anon_2878+0x477>
ffffffff800090fb:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009102:	48 c7 c1 c8 bc 01 80 	mov    rcx,0xffffffff8001bcc8
ffffffff80009109:	31 c0                	xor    eax,eax
ffffffff8000910b:	89 c2                	mov    edx,eax
ffffffff8000910d:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009112:	e8 99 70 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009117:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
ffffffff8000911e:	8a 4d 98             	mov    cl,BYTE PTR [rbp-0x68]
ffffffff80009121:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80009123:	e9 74 01 00 00       	jmp    ffffffff8000929c <fmt.formatInt__anon_2878+0x5fc>
            index -= 2;
ffffffff80009128:	eb 1c                	jmp    ffffffff80009146 <fmt.formatInt__anon_2878+0x4a6>
ffffffff8000912a:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009131:	48 c7 c1 d8 bc 01 80 	mov    rcx,0xffffffff8001bcd8
ffffffff80009138:	31 c0                	xor    eax,eax
ffffffff8000913a:	89 c2                	mov    edx,eax
ffffffff8000913c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009141:	e8 6a 70 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009146:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8000914a:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80009151:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80009158:	48 89 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rax
ffffffff8000915f:	48 8d 8d c7 fe ff ff 	lea    rcx,[rbp-0x139]
ffffffff80009166:	48 01 c1             	add    rcx,rax
ffffffff80009169:	48 89 8d e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rcx
ffffffff80009170:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff80009176:	77 02                	ja     ffffffff8000917a <fmt.formatInt__anon_2878+0x4da>
ffffffff80009178:	eb 11                	jmp    ffffffff8000918b <fmt.formatInt__anon_2878+0x4eb>
ffffffff8000917a:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff80009181:	be 81 00 00 00       	mov    esi,0x81
ffffffff80009186:	e8 85 71 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000918b:	48 8b 8d d8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x228]
ffffffff80009192:	b8 81 00 00 00       	mov    eax,0x81
ffffffff80009197:	48 29 c8             	sub    rax,rcx
ffffffff8000919a:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
ffffffff800091a1:	b0 01                	mov    al,0x1
ffffffff800091a3:	a8 01                	test   al,0x1
ffffffff800091a5:	75 02                	jne    ffffffff800091a9 <fmt.formatInt__anon_2878+0x509>
ffffffff800091a7:	eb 02                	jmp    ffffffff800091ab <fmt.formatInt__anon_2878+0x50b>
ffffffff800091a9:	eb 0d                	jmp    ffffffff800091b8 <fmt.formatInt__anon_2878+0x518>
ffffffff800091ab:	be 81 00 00 00       	mov    esi,0x81
ffffffff800091b0:	48 89 f7             	mov    rdi,rsi
ffffffff800091b3:	e8 18 70 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800091b8:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff800091bf:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff800091c5:	77 02                	ja     ffffffff800091c9 <fmt.formatInt__anon_2878+0x529>
ffffffff800091c7:	eb 11                	jmp    ffffffff800091da <fmt.formatInt__anon_2878+0x53a>
ffffffff800091c9:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff800091d0:	be 81 00 00 00       	mov    esi,0x81
ffffffff800091d5:	e8 f6 6f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800091da:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
ffffffff800091e1:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff800091e8:	48 89 4d b8          	mov    QWORD PTR [rbp-0x48],rcx
ffffffff800091ec:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800091f0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800091f4:	48 89 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rax
ffffffff800091fb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800091ff:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
ffffffff80009206:	b0 01                	mov    al,0x1
ffffffff80009208:	a8 01                	test   al,0x1
ffffffff8000920a:	75 02                	jne    ffffffff8000920e <fmt.formatInt__anon_2878+0x56e>
ffffffff8000920c:	eb 02                	jmp    ffffffff80009210 <fmt.formatInt__anon_2878+0x570>
ffffffff8000920e:	eb 10                	jmp    ffffffff80009220 <fmt.formatInt__anon_2878+0x580>
ffffffff80009210:	31 c0                	xor    eax,eax
ffffffff80009212:	31 c0                	xor    eax,eax
ffffffff80009214:	89 c7                	mov    edi,eax
ffffffff80009216:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000921b:	e8 f0 70 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80009220:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
ffffffff80009227:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000922c:	48 39 c8             	cmp    rax,rcx
ffffffff8000922f:	77 02                	ja     ffffffff80009233 <fmt.formatInt__anon_2878+0x593>
ffffffff80009231:	eb 11                	jmp    ffffffff80009244 <fmt.formatInt__anon_2878+0x5a4>
ffffffff80009233:	48 8b b5 c8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x238]
ffffffff8000923a:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000923f:	e8 8c 6f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80009244:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff8000924b:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
ffffffff80009252:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff80009259:	48 85 c0             	test   rax,rax
ffffffff8000925c:	75 04                	jne    ffffffff80009262 <fmt.formatInt__anon_2878+0x5c2>
ffffffff8000925e:	eb 00                	jmp    ffffffff80009260 <fmt.formatInt__anon_2878+0x5c0>
ffffffff80009260:	eb 1c                	jmp    ffffffff8000927e <fmt.formatInt__anon_2878+0x5de>
ffffffff80009262:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80009269:	48 c7 c1 e8 bc 01 80 	mov    rcx,0xffffffff8001bce8
ffffffff80009270:	31 c0                	xor    eax,eax
ffffffff80009272:	89 c2                	mov    edx,eax
ffffffff80009274:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80009279:	e8 32 6f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000927e:	48 8b b5 b8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x248]
ffffffff80009285:	48 8d 7d c6          	lea    rdi,[rbp-0x3a]
ffffffff80009289:	e8 22 df ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8000928e:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
ffffffff80009295:	66 8b 4d c6          	mov    cx,WORD PTR [rbp-0x3a]
ffffffff80009299:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff8000929c:	e9 2d 02 00 00       	jmp    ffffffff800094ce <fmt.formatInt__anon_2878+0x82e>
ffffffff800092a1:	8a 85 7f fe ff ff    	mov    al,BYTE PTR [rbp-0x181]
            const digit = a % base;
ffffffff800092a7:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff800092ae:	48 89 8d 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],rcx
ffffffff800092b5:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff800092bc:	48 89 8d a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rcx
ffffffff800092c3:	0f b6 c8             	movzx  ecx,al
ffffffff800092c6:	48 89 8d a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rcx
ffffffff800092cd:	31 c9                	xor    ecx,ecx
ffffffff800092cf:	48 89 8d b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rcx
ffffffff800092d6:	84 c0                	test   al,al
ffffffff800092d8:	74 04                	je     ffffffff800092de <fmt.formatInt__anon_2878+0x63e>
ffffffff800092da:	eb 00                	jmp    ffffffff800092dc <fmt.formatInt__anon_2878+0x63c>
ffffffff800092dc:	eb 1c                	jmp    ffffffff800092fa <fmt.formatInt__anon_2878+0x65a>
ffffffff800092de:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff800092e5:	48 c7 c1 f8 bc 01 80 	mov    rcx,0xffffffff8001bcf8
ffffffff800092ec:	31 c0                	xor    eax,eax
ffffffff800092ee:	89 c2                	mov    edx,eax
ffffffff800092f0:	be 10 00 00 00       	mov    esi,0x10
ffffffff800092f5:	e8 b6 6e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800092fa:	48 8b 8d b0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x250]
ffffffff80009301:	48 8b 95 a8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x258]
ffffffff80009308:	48 8b b5 a0 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x260]
ffffffff8000930f:	48 8b bd 98 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x268]
ffffffff80009316:	e8 b5 ea 00 00       	call   ffffffff80017dd0 <__umodti3>
ffffffff8000931b:	48 89 d1             	mov    rcx,rdx
ffffffff8000931e:	48 89 8d 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rcx
ffffffff80009325:	48 89 c1             	mov    rcx,rax
ffffffff80009328:	48 89 8d 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],rcx
ffffffff8000932f:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff80009333:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            index -= 1;
ffffffff80009337:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff8000933e:	48 83 e8 01          	sub    rax,0x1
ffffffff80009342:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80009346:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff8000934a:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff8000934d:	84 c0                	test   al,al
ffffffff8000934f:	75 04                	jne    ffffffff80009355 <fmt.formatInt__anon_2878+0x6b5>
ffffffff80009351:	eb 00                	jmp    ffffffff80009353 <fmt.formatInt__anon_2878+0x6b3>
ffffffff80009353:	eb 1c                	jmp    ffffffff80009371 <fmt.formatInt__anon_2878+0x6d1>
ffffffff80009355:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000935c:	48 c7 c1 08 bd 01 80 	mov    rcx,0xffffffff8001bd08
ffffffff80009363:	31 c0                	xor    eax,eax
ffffffff80009365:	89 c2                	mov    edx,eax
ffffffff80009367:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000936c:	e8 3f 6e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009371:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80009375:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff8000937c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80009383:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
ffffffff8000938a:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff80009390:	73 02                	jae    ffffffff80009394 <fmt.formatInt__anon_2878+0x6f4>
ffffffff80009392:	eb 11                	jmp    ffffffff800093a5 <fmt.formatInt__anon_2878+0x705>
ffffffff80009394:	48 8b bd 80 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x280]
ffffffff8000939b:	be 81 00 00 00       	mov    esi,0x81
ffffffff800093a0:	e8 2b 6e ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800093a5:	48 8b bd 88 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x278]
ffffffff800093ac:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
ffffffff800093b3:	48 8b 85 80 fd ff ff 	mov    rax,QWORD PTR [rbp-0x280]
ffffffff800093ba:	48 8d 84 05 c7 fe ff 	lea    rax,[rbp+rax*1-0x139]
ffffffff800093c1:	ff 
ffffffff800093c2:	48 89 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rax
ffffffff800093c9:	31 c0                	xor    eax,eax
ffffffff800093cb:	ba ff 00 00 00       	mov    edx,0xff
ffffffff800093d0:	48 89 d6             	mov    rsi,rdx
ffffffff800093d3:	48 29 ce             	sub    rsi,rcx
ffffffff800093d6:	48 89 c1             	mov    rcx,rax
ffffffff800093d9:	48 19 f9             	sbb    rcx,rdi
ffffffff800093dc:	48 29 f2             	sub    rdx,rsi
ffffffff800093df:	48 19 c8             	sbb    rax,rcx
ffffffff800093e2:	72 04                	jb     ffffffff800093e8 <fmt.formatInt__anon_2878+0x748>
ffffffff800093e4:	eb 00                	jmp    ffffffff800093e6 <fmt.formatInt__anon_2878+0x746>
ffffffff800093e6:	eb 1c                	jmp    ffffffff80009404 <fmt.formatInt__anon_2878+0x764>
ffffffff800093e8:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff800093ef:	48 c7 c1 18 bd 01 80 	mov    rcx,0xffffffff8001bd18
ffffffff800093f6:	31 c0                	xor    eax,eax
ffffffff800093f8:	89 c2                	mov    edx,eax
ffffffff800093fa:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff800093ff:	e8 ac 6d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009404:	8a 85 4f fe ff ff    	mov    al,BYTE PTR [rbp-0x1b1]
ffffffff8000940a:	48 8b 8d 90 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x270]
ffffffff80009411:	89 cf                	mov    edi,ecx
ffffffff80009413:	0f b6 f0             	movzx  esi,al
ffffffff80009416:	e8 05 df ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff8000941b:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
ffffffff80009422:	88 c2                	mov    dl,al
ffffffff80009424:	8a 85 7f fe ff ff    	mov    al,BYTE PTR [rbp-0x181]
ffffffff8000942a:	88 11                	mov    BYTE PTR [rcx],dl
            a /= base;
ffffffff8000942c:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff80009433:	48 89 8d 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],rcx
ffffffff8000943a:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff80009441:	48 89 8d 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],rcx
ffffffff80009448:	0f b6 c8             	movzx  ecx,al
ffffffff8000944b:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
ffffffff80009452:	31 c9                	xor    ecx,ecx
ffffffff80009454:	48 89 8d 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],rcx
ffffffff8000945b:	84 c0                	test   al,al
ffffffff8000945d:	74 04                	je     ffffffff80009463 <fmt.formatInt__anon_2878+0x7c3>
ffffffff8000945f:	eb 00                	jmp    ffffffff80009461 <fmt.formatInt__anon_2878+0x7c1>
ffffffff80009461:	eb 1c                	jmp    ffffffff8000947f <fmt.formatInt__anon_2878+0x7df>
ffffffff80009463:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8000946a:	48 c7 c1 28 bd 01 80 	mov    rcx,0xffffffff8001bd28
ffffffff80009471:	31 c0                	xor    eax,eax
ffffffff80009473:	89 c2                	mov    edx,eax
ffffffff80009475:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000947a:	e8 31 6d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000947f:	48 8b 8d 70 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x290]
ffffffff80009486:	48 8b 95 68 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x298]
ffffffff8000948d:	48 8b b5 60 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x2a0]
ffffffff80009494:	48 8b bd 58 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2a8]
ffffffff8000949b:	e8 20 e9 00 00       	call   ffffffff80017dc0 <__udivti3>
ffffffff800094a0:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffffffff800094a7:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
            if (a == 0) break;
ffffffff800094ae:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff800094b5:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff800094bc:	48 09 c8             	or     rax,rcx
ffffffff800094bf:	75 04                	jne    ffffffff800094c5 <fmt.formatInt__anon_2878+0x825>
ffffffff800094c1:	eb 00                	jmp    ffffffff800094c3 <fmt.formatInt__anon_2878+0x823>
ffffffff800094c3:	eb 07                	jmp    ffffffff800094cc <fmt.formatInt__anon_2878+0x82c>
ffffffff800094c5:	eb 00                	jmp    ffffffff800094c7 <fmt.formatInt__anon_2878+0x827>
ffffffff800094c7:	e9 d5 fd ff ff       	jmp    ffffffff800092a1 <fmt.formatInt__anon_2878+0x601>
ffffffff800094cc:	eb 00                	jmp    ffffffff800094ce <fmt.formatInt__anon_2878+0x82e>
    return formatBuf(buf[index..], options, writer);
ffffffff800094ce:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff800094d5:	48 89 85 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],rax
ffffffff800094dc:	48 8d 8d c7 fe ff ff 	lea    rcx,[rbp-0x139]
ffffffff800094e3:	48 01 c1             	add    rcx,rax
ffffffff800094e6:	48 89 8d 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],rcx
ffffffff800094ed:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff800094f3:	77 02                	ja     ffffffff800094f7 <fmt.formatInt__anon_2878+0x857>
ffffffff800094f5:	eb 11                	jmp    ffffffff80009508 <fmt.formatInt__anon_2878+0x868>
ffffffff800094f7:	48 8b bd 48 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2b8]
ffffffff800094fe:	be 81 00 00 00       	mov    esi,0x81
ffffffff80009503:	e8 08 6e ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80009508:	48 8b 8d 48 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x2b8]
ffffffff8000950f:	b8 81 00 00 00       	mov    eax,0x81
ffffffff80009514:	48 29 c8             	sub    rax,rcx
ffffffff80009517:	48 89 85 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],rax
ffffffff8000951e:	b0 01                	mov    al,0x1
ffffffff80009520:	a8 01                	test   al,0x1
ffffffff80009522:	75 02                	jne    ffffffff80009526 <fmt.formatInt__anon_2878+0x886>
ffffffff80009524:	eb 02                	jmp    ffffffff80009528 <fmt.formatInt__anon_2878+0x888>
ffffffff80009526:	eb 0d                	jmp    ffffffff80009535 <fmt.formatInt__anon_2878+0x895>
ffffffff80009528:	be 81 00 00 00       	mov    esi,0x81
ffffffff8000952d:	48 89 f7             	mov    rdi,rsi
ffffffff80009530:	e8 9b 6c ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80009535:	48 8b 85 48 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b8]
ffffffff8000953c:	48 3d 81 00 00 00    	cmp    rax,0x81
ffffffff80009542:	77 02                	ja     ffffffff80009546 <fmt.formatInt__anon_2878+0x8a6>
ffffffff80009544:	eb 11                	jmp    ffffffff80009557 <fmt.formatInt__anon_2878+0x8b7>
ffffffff80009546:	48 8b bd 48 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x2b8]
ffffffff8000954d:	be 81 00 00 00       	mov    esi,0x81
ffffffff80009552:	e8 79 6c ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80009557:	4c 8b 85 50 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1b0]
ffffffff8000955e:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
ffffffff80009565:	48 8b bd 40 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c0]
ffffffff8000956c:	48 8b 85 50 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2b0]
ffffffff80009573:	48 8b 95 40 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2c0]
ffffffff8000957a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8000957e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80009582:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80009586:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000958a:	e8 d1 de ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff8000958f:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80009593:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80009598:	75 0d                	jne    ffffffff800095a7 <fmt.formatInt__anon_2878+0x907>
ffffffff8000959a:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8000959e:	48 81 c4 c0 02 00 00 	add    rsp,0x2c0
ffffffff800095a5:	5d                   	pop    rbp
ffffffff800095a6:	c3                   	ret
ffffffff800095a7:	48 8b bd 40 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c0]
ffffffff800095ae:	e8 5d 9e ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800095b3:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800095b7:	48 81 c4 c0 02 00 00 	add    rsp,0x2c0
ffffffff800095be:	5d                   	pop    rbp
ffffffff800095bf:	c3                   	ret

ffffffff800095c0 <math.absCast__anon_2880>:
} {
ffffffff800095c0:	55                   	push   rbp
ffffffff800095c1:	48 89 e5             	mov    rbp,rsp
ffffffff800095c4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800095c8:	48 89 f2             	mov    rdx,rsi
ffffffff800095cb:	48 89 f8             	mov    rax,rdi
ffffffff800095ce:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800095d2:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
            if (int_info.signedness == .unsigned) return x;
ffffffff800095d6:	48 83 c4 10          	add    rsp,0x10
ffffffff800095da:	5d                   	pop    rbp
ffffffff800095db:	c3                   	ret
ffffffff800095dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800095e0 <fmt.formatType__anon_2887>:
) @TypeOf(writer).Error!void {
ffffffff800095e0:	55                   	push   rbp
ffffffff800095e1:	48 89 e5             	mov    rbp,rsp
ffffffff800095e4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800095e8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff800095ec:	48 89 f0             	mov    rax,rsi
ffffffff800095ef:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffffffff800095f3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff800095f7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800095fb:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff800095ff:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80009606:	00 
ffffffff80009607:	48 c7 45 e0 8a 94 01 	mov    QWORD PTR [rbp-0x20],0xffffffff8001948a
ffffffff8000960e:	80 
                else => return format(writer, "{s}@{x}", .{ @typeName(ptr_info.child), @ptrToInt(value) }),
ffffffff8000960f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80009613:	48 8d 55 f8          	lea    rdx,[rbp-0x8]
ffffffff80009617:	e8 e4 6a 00 00       	call   ffffffff80010100 <fmt.format__anon_3120>
ffffffff8000961c:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
ffffffff80009620:	b0 01                	mov    al,0x1
ffffffff80009622:	a8 01                	test   al,0x1
ffffffff80009624:	75 02                	jne    ffffffff80009628 <fmt.formatType__anon_2887+0x48>
ffffffff80009626:	eb 0a                	jmp    ffffffff80009632 <fmt.formatType__anon_2887+0x52>
ffffffff80009628:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff8000962c:	48 83 c4 40          	add    rsp,0x40
ffffffff80009630:	5d                   	pop    rbp
ffffffff80009631:	c3                   	ret
ffffffff80009632:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffffffff80009636:	e8 d5 9d ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000963b:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff8000963f:	48 83 c4 40          	add    rsp,0x40
ffffffff80009643:	5d                   	pop    rbp
ffffffff80009644:	c3                   	ret
ffffffff80009645:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000964c:	00 00 00 
ffffffff8000964f:	90                   	nop

ffffffff80009650 <fmt.formatType__anon_2894>:
) @TypeOf(writer).Error!void {
ffffffff80009650:	55                   	push   rbp
ffffffff80009651:	48 89 e5             	mov    rbp,rsp
ffffffff80009654:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffffffff8000965b:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
ffffffff80009662:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
ffffffff80009669:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffffffff80009670:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
ffffffff80009677:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
ffffffff8000967e:	4c 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],r8
ffffffff80009685:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000968c:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000968f:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80009696:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffffffff8000969d:	00 00 00 00 
            try writer.writeAll(@typeName(T));
ffffffff800096a1:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff800096a4:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff800096ab:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff800096ae:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
ffffffff800096b4:	48 c7 c2 d0 b5 01 80 	mov    rdx,0xffffffff8001b5d0
ffffffff800096bb:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff800096c2:	b9 1e 00 00 00       	mov    ecx,0x1e
ffffffff800096c7:	e8 84 6c ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800096cc:	4c 8b 85 10 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf0]
            if (max_depth == 0) {
ffffffff800096d3:	49 83 f8 00          	cmp    r8,0x0
ffffffff800096d7:	75 48                	jne    ffffffff80009721 <fmt.formatType__anon_2894+0xd1>
ffffffff800096d9:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff800096e0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                return writer.writeAll("{ ... }");
ffffffff800096e7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800096ea:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
ffffffff800096f1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800096f4:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
ffffffff800096fa:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80009701:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff80009708:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000970d:	e8 3e 6c ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009712:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
ffffffff80009719:	b0 01                	mov    al,0x1
ffffffff8000971b:	a8 01                	test   al,0x1
ffffffff8000971d:	75 04                	jne    ffffffff80009723 <fmt.formatType__anon_2894+0xd3>
ffffffff8000971f:	eb 12                	jmp    ffffffff80009733 <fmt.formatType__anon_2894+0xe3>
ffffffff80009721:	eb 2c                	jmp    ffffffff8000974f <fmt.formatType__anon_2894+0xff>
ffffffff80009723:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
ffffffff8000972a:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff80009731:	5d                   	pop    rbp
ffffffff80009732:	c3                   	ret
ffffffff80009733:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff8000973a:	e8 d1 9c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000973f:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
ffffffff80009746:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff8000974d:	5d                   	pop    rbp
ffffffff8000974e:	c3                   	ret
ffffffff8000974f:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80009756:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
            try writer.writeAll("{");
ffffffff8000975d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009760:	89 8d 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],ecx
ffffffff80009766:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009769:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff80009770:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff80009777:	48 8d b5 50 ff ff ff 	lea    rsi,[rbp-0xb0]
ffffffff8000977e:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80009783:	e8 c8 6b ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009788:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff8000978f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
            inline for (info.fields, 0..) |f, i| {
ffffffff80009796:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
ffffffff8000979d:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff800097a1:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800097a4:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff800097aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800097ad:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff800097b4:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff800097bb:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff800097c2:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800097c7:	e8 84 6b ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800097cc:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff800097d3:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(f.name);
ffffffff800097da:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800097dd:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff800097e0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800097e3:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff800097ea:	48 c7 c2 ef b5 01 80 	mov    rdx,0xffffffff8001b5ef
ffffffff800097f1:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff800097f8:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff800097fd:	e8 4e 6b ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009802:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80009809:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(" = ");
ffffffff80009810:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009813:	89 4d 90             	mov    DWORD PTR [rbp-0x70],ecx
ffffffff80009816:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009819:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000981d:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80009824:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff80009828:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000982d:	e8 1e 6b ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009832:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
ffffffff80009839:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80009840:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffffffff80009843:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
ffffffff8000984a:	48 83 e8 01          	sub    rax,0x1
ffffffff8000984e:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80009852:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80009856:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80009859:	84 c0                	test   al,al
ffffffff8000985b:	75 04                	jne    ffffffff80009861 <fmt.formatType__anon_2894+0x211>
ffffffff8000985d:	eb 00                	jmp    ffffffff8000985f <fmt.formatType__anon_2894+0x20f>
ffffffff8000985f:	eb 1c                	jmp    ffffffff8000987d <fmt.formatType__anon_2894+0x22d>
ffffffff80009861:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009868:	48 c7 c1 d8 c0 01 80 	mov    rcx,0xffffffff8001c0d8
ffffffff8000986f:	31 c0                	xor    eax,eax
ffffffff80009871:	89 c2                	mov    edx,eax
ffffffff80009873:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009878:	e8 33 69 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000987d:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80009884:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff8000988b:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
ffffffff80009892:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
ffffffff80009899:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff8000989d:	e8 ce 69 00 00       	call   ffffffff80010270 <fmt.formatType__anon_3152>
ffffffff800098a2:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff800098a9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff800098b0:	48 c7 45 a8 01 00 00 	mov    QWORD PTR [rbp-0x58],0x1
ffffffff800098b7:	00 
                    try writer.writeAll(", .");
ffffffff800098b8:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800098bb:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff800098be:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800098c1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800098c5:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800098cc:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff800098d0:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800098d5:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
ffffffff800098dc:	e8 6f 6a ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800098e1:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff800098e8:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(f.name);
ffffffff800098ef:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800098f2:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff800098f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800098f8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800098fc:	48 c7 c2 f8 b5 01 80 	mov    rdx,0xffffffff8001b5f8
ffffffff80009903:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff80009907:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000990c:	e8 3f 6a ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009911:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80009918:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff8000991f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(" = ");
ffffffff80009926:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80009929:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff8000992c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000992f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80009933:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000993a:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff8000993e:	e8 0d 6a ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009943:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
ffffffff8000994a:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80009951:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80009955:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
ffffffff8000995c:	48 83 e8 01          	sub    rax,0x1
ffffffff80009960:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80009964:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff80009968:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff8000996b:	84 c0                	test   al,al
ffffffff8000996d:	75 04                	jne    ffffffff80009973 <fmt.formatType__anon_2894+0x323>
ffffffff8000996f:	eb 00                	jmp    ffffffff80009971 <fmt.formatType__anon_2894+0x321>
ffffffff80009971:	eb 1c                	jmp    ffffffff8000998f <fmt.formatType__anon_2894+0x33f>
ffffffff80009973:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000997a:	48 c7 c1 e8 c0 01 80 	mov    rcx,0xffffffff8001c0e8
ffffffff80009981:	31 c0                	xor    eax,eax
ffffffff80009983:	89 c2                	mov    edx,eax
ffffffff80009985:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000998a:	e8 21 68 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000998f:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80009996:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff8000999d:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
ffffffff800099a4:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffffffff800099ab:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff800099af:	e8 1c 69 00 00       	call   ffffffff800102d0 <fmt.formatType__anon_3153>
ffffffff800099b4:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff800099bb:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
            try writer.writeAll(" }");
ffffffff800099c2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800099c5:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff800099c9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800099cc:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800099cf:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff800099d6:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800099da:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800099df:	e8 6c 69 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800099e4:	31 c0                	xor    eax,eax
ffffffff800099e6:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff800099ed:	5d                   	pop    rbp
ffffffff800099ee:	c3                   	ret
ffffffff800099ef:	90                   	nop

ffffffff800099f0 <fmt.formatType__anon_2904>:
) @TypeOf(writer).Error!void {
ffffffff800099f0:	55                   	push   rbp
ffffffff800099f1:	48 89 e5             	mov    rbp,rsp
ffffffff800099f4:	48 81 ec 30 02 00 00 	sub    rsp,0x230
ffffffff800099fb:	4c 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],r8
ffffffff80009a02:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
ffffffff80009a09:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
ffffffff80009a10:	48 89 b5 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rsi
ffffffff80009a17:	48 89 bd 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdi
ffffffff80009a1e:	4c 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],r8
ffffffff80009a25:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff80009a2c:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80009a2f:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff80009a36:	48 c7 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],0x0
ffffffff80009a3d:	00 00 00 00 
            try writer.writeAll(@typeName(T));
ffffffff80009a41:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff80009a44:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80009a4b:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff80009a4e:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
ffffffff80009a54:	48 c7 c2 00 b6 01 80 	mov    rdx,0xffffffff8001b600
ffffffff80009a5b:	48 8d b5 58 fe ff ff 	lea    rsi,[rbp-0x1a8]
ffffffff80009a62:	b9 1c 00 00 00       	mov    ecx,0x1c
ffffffff80009a67:	e8 e4 68 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009a6c:	4c 8b 85 38 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1c8]
            if (max_depth == 0) {
ffffffff80009a73:	49 83 f8 00          	cmp    r8,0x0
ffffffff80009a77:	75 48                	jne    ffffffff80009ac1 <fmt.formatType__anon_2904+0xd1>
ffffffff80009a79:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009a80:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                return writer.writeAll("{ ... }");
ffffffff80009a87:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80009a8a:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
ffffffff80009a91:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80009a94:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
ffffffff80009a9a:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80009aa1:	48 8d b5 68 fe ff ff 	lea    rsi,[rbp-0x198]
ffffffff80009aa8:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80009aad:	e8 9e 68 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009ab2:	66 89 85 66 fe ff ff 	mov    WORD PTR [rbp-0x19a],ax
ffffffff80009ab9:	b0 01                	mov    al,0x1
ffffffff80009abb:	a8 01                	test   al,0x1
ffffffff80009abd:	75 04                	jne    ffffffff80009ac3 <fmt.formatType__anon_2904+0xd3>
ffffffff80009abf:	eb 12                	jmp    ffffffff80009ad3 <fmt.formatType__anon_2904+0xe3>
ffffffff80009ac1:	eb 2c                	jmp    ffffffff80009aef <fmt.formatType__anon_2904+0xff>
ffffffff80009ac3:	66 8b 85 66 fe ff ff 	mov    ax,WORD PTR [rbp-0x19a]
ffffffff80009aca:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffffffff80009ad1:	5d                   	pop    rbp
ffffffff80009ad2:	c3                   	ret
ffffffff80009ad3:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009ada:	e8 31 99 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80009adf:	66 8b 85 66 fe ff ff 	mov    ax,WORD PTR [rbp-0x19a]
ffffffff80009ae6:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffffffff80009aed:	5d                   	pop    rbp
ffffffff80009aee:	c3                   	ret
ffffffff80009aef:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009af6:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
            try writer.writeAll("{");
ffffffff80009afd:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009b00:	89 8d 80 fe ff ff    	mov    DWORD PTR [rbp-0x180],ecx
ffffffff80009b06:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009b09:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80009b10:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff80009b17:	48 8d b5 78 fe ff ff 	lea    rsi,[rbp-0x188]
ffffffff80009b1e:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80009b23:	e8 28 68 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009b28:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009b2f:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
            inline for (info.fields, 0..) |f, i| {
ffffffff80009b36:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffffffff80009b3d:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff80009b41:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009b44:	89 8d 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],ecx
ffffffff80009b4a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009b4d:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff80009b54:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff80009b5b:	48 8d b5 90 fe ff ff 	lea    rsi,[rbp-0x170]
ffffffff80009b62:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80009b67:	e8 e4 67 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009b6c:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009b73:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff80009b7a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009b7d:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
ffffffff80009b83:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009b86:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff80009b8d:	48 c7 c2 1d b6 01 80 	mov    rdx,0xffffffff8001b61d
ffffffff80009b94:	48 8d b5 a0 fe ff ff 	lea    rsi,[rbp-0x160]
ffffffff80009b9b:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff80009ba0:	e8 ab 67 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009ba5:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009bac:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff80009bb3:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009bb6:	89 8d b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],ecx
ffffffff80009bbc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009bbf:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80009bc6:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80009bcd:	48 8d b5 b0 fe ff ff 	lea    rsi,[rbp-0x150]
ffffffff80009bd4:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80009bd9:	e8 72 67 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009bde:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80009be5:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
ffffffff80009bec:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80009bf3:	48 83 e8 01          	sub    rax,0x1
ffffffff80009bf7:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff80009bfe:	0f 92 85 c8 fe ff ff 	setb   BYTE PTR [rbp-0x138]
ffffffff80009c05:	8a 85 c8 fe ff ff    	mov    al,BYTE PTR [rbp-0x138]
ffffffff80009c0b:	84 c0                	test   al,al
ffffffff80009c0d:	75 04                	jne    ffffffff80009c13 <fmt.formatType__anon_2904+0x223>
ffffffff80009c0f:	eb 00                	jmp    ffffffff80009c11 <fmt.formatType__anon_2904+0x221>
ffffffff80009c11:	eb 1c                	jmp    ffffffff80009c2f <fmt.formatType__anon_2904+0x23f>
ffffffff80009c13:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009c1a:	48 c7 c1 f8 c0 01 80 	mov    rcx,0xffffffff8001c0f8
ffffffff80009c21:	31 c0                	xor    eax,eax
ffffffff80009c23:	89 c2                	mov    edx,eax
ffffffff80009c25:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009c2a:	e8 81 65 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009c2f:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009c36:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80009c3d:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80009c44:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
ffffffff80009c4b:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
ffffffff80009c52:	e8 e9 66 00 00       	call   ffffffff80010340 <fmt.formatType__anon_3173>
ffffffff80009c57:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009c5e:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff80009c65:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x1
ffffffff80009c6c:	01 00 00 00 
                    try writer.writeAll(", .");
ffffffff80009c70:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009c73:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
ffffffff80009c79:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009c7c:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80009c83:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80009c8a:	48 8d b5 d8 fe ff ff 	lea    rsi,[rbp-0x128]
ffffffff80009c91:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80009c96:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
ffffffff80009c9d:	e8 ae 66 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009ca2:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009ca9:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff80009cb0:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009cb3:	89 8d f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],ecx
ffffffff80009cb9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009cbc:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80009cc3:	48 c7 c2 28 b6 01 80 	mov    rdx,0xffffffff8001b628
ffffffff80009cca:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
ffffffff80009cd1:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff80009cd6:	e8 75 66 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009cdb:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009ce2:	48 8b 8d 00 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x200]
ffffffff80009ce9:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff80009cf0:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80009cf3:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffffffff80009cf9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009cfc:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80009d03:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80009d0a:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
ffffffff80009d11:	e8 3a 66 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009d16:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80009d1d:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80009d24:	8b 49 14             	mov    ecx,DWORD PTR [rcx+0x14]
ffffffff80009d27:	89 8d 0c fe ff ff    	mov    DWORD PTR [rbp-0x1f4],ecx
ffffffff80009d2d:	48 83 e8 01          	sub    rax,0x1
ffffffff80009d31:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80009d38:	0f 92 85 10 ff ff ff 	setb   BYTE PTR [rbp-0xf0]
ffffffff80009d3f:	8a 85 10 ff ff ff    	mov    al,BYTE PTR [rbp-0xf0]
ffffffff80009d45:	84 c0                	test   al,al
ffffffff80009d47:	75 04                	jne    ffffffff80009d4d <fmt.formatType__anon_2904+0x35d>
ffffffff80009d49:	eb 00                	jmp    ffffffff80009d4b <fmt.formatType__anon_2904+0x35b>
ffffffff80009d4b:	eb 1c                	jmp    ffffffff80009d69 <fmt.formatType__anon_2904+0x379>
ffffffff80009d4d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009d54:	48 c7 c1 08 c1 01 80 	mov    rcx,0xffffffff8001c108
ffffffff80009d5b:	31 c0                	xor    eax,eax
ffffffff80009d5d:	89 c2                	mov    edx,eax
ffffffff80009d5f:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009d64:	e8 47 64 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009d69:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009d70:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80009d77:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80009d7e:	8b b5 0c fe ff ff    	mov    esi,DWORD PTR [rbp-0x1f4]
ffffffff80009d84:	4c 8b 85 08 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf8]
ffffffff80009d8b:	e8 00 6d 00 00       	call   ffffffff80010a90 <fmt.formatType__anon_3174>
ffffffff80009d90:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009d97:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff80009d9e:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x2
ffffffff80009da5:	02 00 00 00 
                    try writer.writeAll(", .");
ffffffff80009da9:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009dac:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
ffffffff80009db2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009db5:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80009dbc:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80009dc3:	48 8d b5 20 ff ff ff 	lea    rsi,[rbp-0xe0]
ffffffff80009dca:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80009dcf:	48 89 8d f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rcx
ffffffff80009dd6:	e8 75 65 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009ddb:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009de2:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff80009de9:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009dec:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
ffffffff80009df2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009df5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff80009dfc:	48 c7 c2 2f b6 01 80 	mov    rdx,0xffffffff8001b62f
ffffffff80009e03:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff80009e0a:	b9 0c 00 00 00       	mov    ecx,0xc
ffffffff80009e0f:	e8 3c 65 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009e14:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009e1b:	48 8b 8d f0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x210]
ffffffff80009e22:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff80009e29:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80009e2c:	89 95 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],edx
ffffffff80009e32:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009e35:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffffffff80009e3c:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80009e43:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff80009e4a:	e8 01 65 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009e4f:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80009e56:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80009e5d:	48 8b 49 18          	mov    rcx,QWORD PTR [rcx+0x18]
ffffffff80009e61:	48 89 8d f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rcx
ffffffff80009e68:	48 83 e8 01          	sub    rax,0x1
ffffffff80009e6c:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff80009e73:	0f 92 85 58 ff ff ff 	setb   BYTE PTR [rbp-0xa8]
ffffffff80009e7a:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [rbp-0xa8]
ffffffff80009e80:	84 c0                	test   al,al
ffffffff80009e82:	75 04                	jne    ffffffff80009e88 <fmt.formatType__anon_2904+0x498>
ffffffff80009e84:	eb 00                	jmp    ffffffff80009e86 <fmt.formatType__anon_2904+0x496>
ffffffff80009e86:	eb 1c                	jmp    ffffffff80009ea4 <fmt.formatType__anon_2904+0x4b4>
ffffffff80009e88:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009e8f:	48 c7 c1 18 c1 01 80 	mov    rcx,0xffffffff8001c118
ffffffff80009e96:	31 c0                	xor    eax,eax
ffffffff80009e98:	89 c2                	mov    edx,eax
ffffffff80009e9a:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009e9f:	e8 0c 63 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009ea4:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009eab:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80009eb2:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80009eb9:	48 8b b5 f8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x208]
ffffffff80009ec0:	4c 8b 85 50 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb0]
ffffffff80009ec7:	e8 24 6c 00 00       	call   ffffffff80010af0 <fmt.formatType__anon_3175>
ffffffff80009ecc:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009ed3:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff80009eda:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x3
ffffffff80009ee1:	03 00 00 00 
                    try writer.writeAll(", .");
ffffffff80009ee5:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009ee8:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff80009eee:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009ef1:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff80009ef8:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80009eff:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff80009f06:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80009f0b:	48 89 8d e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rcx
ffffffff80009f12:	e8 39 64 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009f17:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009f1e:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff80009f25:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80009f28:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff80009f2b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009f2e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80009f35:	48 c7 c2 3c b6 01 80 	mov    rdx,0xffffffff8001b63c
ffffffff80009f3c:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff80009f43:	b9 11 00 00 00       	mov    ecx,0x11
ffffffff80009f48:	e8 03 64 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009f4d:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009f54:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff80009f5b:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff80009f62:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80009f65:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
ffffffff80009f68:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80009f6b:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80009f6f:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80009f76:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff80009f7a:	e8 d1 63 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80009f7f:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80009f86:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80009f8d:	8a 49 20             	mov    cl,BYTE PTR [rcx+0x20]
ffffffff80009f90:	88 8d ef fd ff ff    	mov    BYTE PTR [rbp-0x211],cl
ffffffff80009f96:	48 83 e8 01          	sub    rax,0x1
ffffffff80009f9a:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80009f9e:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80009fa2:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80009fa5:	84 c0                	test   al,al
ffffffff80009fa7:	75 04                	jne    ffffffff80009fad <fmt.formatType__anon_2904+0x5bd>
ffffffff80009fa9:	eb 00                	jmp    ffffffff80009fab <fmt.formatType__anon_2904+0x5bb>
ffffffff80009fab:	eb 1c                	jmp    ffffffff80009fc9 <fmt.formatType__anon_2904+0x5d9>
ffffffff80009fad:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80009fb4:	48 c7 c1 28 c1 01 80 	mov    rcx,0xffffffff8001c128
ffffffff80009fbb:	31 c0                	xor    eax,eax
ffffffff80009fbd:	89 c2                	mov    edx,eax
ffffffff80009fbf:	be 10 00 00 00       	mov    esi,0x10
ffffffff80009fc4:	e8 e7 61 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80009fc9:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009fd0:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80009fd7:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80009fde:	8a 85 ef fd ff ff    	mov    al,BYTE PTR [rbp-0x211]
ffffffff80009fe4:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff80009fe8:	0f b6 f0             	movzx  esi,al
ffffffff80009feb:	e8 60 6b 00 00       	call   ffffffff80010b50 <fmt.formatType__anon_3176>
ffffffff80009ff0:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80009ff7:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff80009ffe:	48 c7 45 a8 04 00 00 	mov    QWORD PTR [rbp-0x58],0x4
ffffffff8000a005:	00 
                    try writer.writeAll(", .");
ffffffff8000a006:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000a009:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff8000a00c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000a00f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff8000a013:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000a01a:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff8000a01e:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000a023:	48 89 8d d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rcx
ffffffff8000a02a:	e8 21 63 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a02f:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8000a036:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff8000a03d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000a040:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff8000a043:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000a046:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff8000a04a:	48 c7 c2 4e b6 01 80 	mov    rdx,0xffffffff8001b64e
ffffffff8000a051:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff8000a055:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff8000a05a:	e8 f1 62 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a05f:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8000a066:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff8000a06d:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff8000a074:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000a077:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff8000a07a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000a07d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000a081:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000a088:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff8000a08c:	e8 bf 62 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a091:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff8000a098:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000a09f:	48 83 c1 21          	add    rcx,0x21
ffffffff8000a0a3:	48 89 8d d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rcx
ffffffff8000a0aa:	48 83 e8 01          	sub    rax,0x1
ffffffff8000a0ae:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8000a0b2:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff8000a0b6:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff8000a0b9:	84 c0                	test   al,al
ffffffff8000a0bb:	75 04                	jne    ffffffff8000a0c1 <fmt.formatType__anon_2904+0x6d1>
ffffffff8000a0bd:	eb 00                	jmp    ffffffff8000a0bf <fmt.formatType__anon_2904+0x6cf>
ffffffff8000a0bf:	eb 1c                	jmp    ffffffff8000a0dd <fmt.formatType__anon_2904+0x6ed>
ffffffff8000a0c1:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000a0c8:	48 c7 c1 38 c1 01 80 	mov    rcx,0xffffffff8001c138
ffffffff8000a0cf:	31 c0                	xor    eax,eax
ffffffff8000a0d1:	89 c2                	mov    edx,eax
ffffffff8000a0d3:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000a0d8:	e8 d3 60 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000a0dd:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8000a0e4:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff8000a0eb:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff8000a0f2:	48 8b b5 d8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x228]
ffffffff8000a0f9:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff8000a0fd:	e8 ae 6a 00 00       	call   ffffffff80010bb0 <fmt.formatType__anon_3177>
ffffffff8000a102:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8000a109:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
            try writer.writeAll(" }");
ffffffff8000a110:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a113:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff8000a117:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a11a:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000a11d:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff8000a124:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000a128:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a12d:	e8 1e 62 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a132:	31 c0                	xor    eax,eax
ffffffff8000a134:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffffffff8000a13b:	5d                   	pop    rbp
ffffffff8000a13c:	c3                   	ret
ffffffff8000a13d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff8000a140 <fmt.formatType__anon_2940>:
) @TypeOf(writer).Error!void {
ffffffff8000a140:	55                   	push   rbp
ffffffff8000a141:	48 89 e5             	mov    rbp,rsp
ffffffff8000a144:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffffffff8000a14b:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
ffffffff8000a152:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffffffff8000a159:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffffffff8000a160:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff8000a167:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
ffffffff8000a16e:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a175:	48 c7 45 88 03 00 00 	mov    QWORD PTR [rbp-0x78],0x3
ffffffff8000a17c:	00 
ffffffff8000a17d:	48 c7 45 80 f1 b4 01 	mov    QWORD PTR [rbp-0x80],0xffffffff8001b4f1
ffffffff8000a184:	80 
            if (max_depth == 0) {
ffffffff8000a185:	49 83 f8 00          	cmp    r8,0x0
ffffffff8000a189:	75 3c                	jne    ffffffff8000a1c7 <fmt.formatType__anon_2940+0x87>
ffffffff8000a18b:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a192:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                return writer.writeAll("{ ... }");
ffffffff8000a199:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a19c:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff8000a1a0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a1a3:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
ffffffff8000a1a6:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8000a1ad:	48 8d 75 98          	lea    rsi,[rbp-0x68]
ffffffff8000a1b1:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000a1b6:	e8 95 61 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a1bb:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff8000a1bf:	b0 01                	mov    al,0x1
ffffffff8000a1c1:	a8 01                	test   al,0x1
ffffffff8000a1c3:	75 04                	jne    ffffffff8000a1c9 <fmt.formatType__anon_2940+0x89>
ffffffff8000a1c5:	eb 0f                	jmp    ffffffff8000a1d6 <fmt.formatType__anon_2940+0x96>
ffffffff8000a1c7:	eb 26                	jmp    ffffffff8000a1ef <fmt.formatType__anon_2940+0xaf>
ffffffff8000a1c9:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff8000a1cd:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a1d4:	5d                   	pop    rbp
ffffffff8000a1d5:	c3                   	ret
ffffffff8000a1d6:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a1dd:	e8 2e 92 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a1e2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff8000a1e6:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a1ed:	5d                   	pop    rbp
ffffffff8000a1ee:	c3                   	ret
ffffffff8000a1ef:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a1f6:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll("{ ");
ffffffff8000a1fd:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a200:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff8000a204:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a207:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff8000a20a:	48 c7 c2 57 b6 01 80 	mov    rdx,0xffffffff8001b657
ffffffff8000a211:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff8000a215:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a21a:	e8 31 61 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a21f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff8000a226:	00 
            for (value, 0..) |elem, i| {
ffffffff8000a227:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000a22b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff8000a232:	48 83 f8 04          	cmp    rax,0x4
ffffffff8000a236:	73 3a                	jae    ffffffff8000a272 <fmt.formatType__anon_2940+0x132>
ffffffff8000a238:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff8000a23f:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff8000a246:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff8000a24d:	8a 14 0a             	mov    dl,BYTE PTR [rdx+rcx*1]
ffffffff8000a250:	88 95 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],dl
ffffffff8000a256:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
ffffffff8000a259:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff8000a25d:	48 83 e8 01          	sub    rax,0x1
ffffffff8000a261:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000a265:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff8000a269:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff8000a26c:	84 c0                	test   al,al
ffffffff8000a26e:	74 07                	je     ffffffff8000a277 <fmt.formatType__anon_2940+0x137>
ffffffff8000a270:	eb 07                	jmp    ffffffff8000a279 <fmt.formatType__anon_2940+0x139>
                    try writer.writeAll(", ");
ffffffff8000a272:	e9 9c 00 00 00       	jmp    ffffffff8000a313 <fmt.formatType__anon_2940+0x1d3>
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff8000a277:	eb 1c                	jmp    ffffffff8000a295 <fmt.formatType__anon_2940+0x155>
ffffffff8000a279:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000a280:	48 c7 c1 48 c1 01 80 	mov    rcx,0xffffffff8001c148
ffffffff8000a287:	31 c0                	xor    eax,eax
ffffffff8000a289:	89 c2                	mov    edx,eax
ffffffff8000a28b:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000a290:	e8 1b 5f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000a295:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff8000a29c:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffffffff8000a2a3:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a2aa:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [rbp-0xb9]
ffffffff8000a2b0:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
ffffffff8000a2b4:	0f b6 f0             	movzx  esi,al
ffffffff8000a2b7:	e8 f4 00 00 00       	call   ffffffff8000a3b0 <fmt.formatType__anon_2943>
ffffffff8000a2bc:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
                if (i < value.len - 1) {
ffffffff8000a2c3:	48 83 f8 03          	cmp    rax,0x3
ffffffff8000a2c7:	73 32                	jae    ffffffff8000a2fb <fmt.formatType__anon_2940+0x1bb>
ffffffff8000a2c9:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a2d0:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                    try writer.writeAll(", ");
ffffffff8000a2d7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a2da:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff8000a2de:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a2e1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000a2e4:	48 c7 c2 5a b6 01 80 	mov    rdx,0xffffffff8001b65a
ffffffff8000a2eb:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff8000a2ef:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a2f4:	e8 57 60 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a2f9:	eb 02                	jmp    ffffffff8000a2fd <fmt.formatType__anon_2940+0x1bd>
ffffffff8000a2fb:	eb 00                	jmp    ffffffff8000a2fd <fmt.formatType__anon_2940+0x1bd>
ffffffff8000a2fd:	eb 00                	jmp    ffffffff8000a2ff <fmt.formatType__anon_2940+0x1bf>
ffffffff8000a2ff:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff8000a306:	48 83 c0 01          	add    rax,0x1
ffffffff8000a30a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8000a30e:	e9 14 ff ff ff       	jmp    ffffffff8000a227 <fmt.formatType__anon_2940+0xe7>
ffffffff8000a313:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a31a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll(" }");
ffffffff8000a321:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a324:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff8000a328:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a32b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000a32e:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff8000a335:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000a339:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a33e:	e8 0d 60 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a343:	31 c0                	xor    eax,eax
ffffffff8000a345:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a34c:	5d                   	pop    rbp
ffffffff8000a34d:	c3                   	ret
ffffffff8000a34e:	66 90                	xchg   ax,ax

ffffffff8000a350 <fmt.formatType__anon_2942>:
) @TypeOf(writer).Error!void {
ffffffff8000a350:	55                   	push   rbp
ffffffff8000a351:	48 89 e5             	mov    rbp,rsp
ffffffff8000a354:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000a358:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000a35c:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
ffffffff8000a35f:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a363:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000a36a:	00 
ffffffff8000a36b:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000a372:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000a373:	e8 48 6a 00 00       	call   ffffffff80010dc0 <fmt.formatValue__anon_3182>
ffffffff8000a378:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000a37c:	b0 01                	mov    al,0x1
ffffffff8000a37e:	a8 01                	test   al,0x1
ffffffff8000a380:	75 02                	jne    ffffffff8000a384 <fmt.formatType__anon_2942+0x34>
ffffffff8000a382:	eb 0a                	jmp    ffffffff8000a38e <fmt.formatType__anon_2942+0x3e>
ffffffff8000a384:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a388:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a38c:	5d                   	pop    rbp
ffffffff8000a38d:	c3                   	ret
ffffffff8000a38e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000a392:	e8 79 90 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a397:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a39b:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a39f:	5d                   	pop    rbp
ffffffff8000a3a0:	c3                   	ret
ffffffff8000a3a1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000a3a8:	00 00 00 
ffffffff8000a3ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff8000a3b0 <fmt.formatType__anon_2943>:
) @TypeOf(writer).Error!void {
ffffffff8000a3b0:	55                   	push   rbp
ffffffff8000a3b1:	48 89 e5             	mov    rbp,rsp
ffffffff8000a3b4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000a3b8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000a3bc:	40 88 f0             	mov    al,sil
ffffffff8000a3bf:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000a3c2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a3c6:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000a3cd:	00 
ffffffff8000a3ce:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000a3d5:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000a3d6:	0f b6 f0             	movzx  esi,al
ffffffff8000a3d9:	e8 02 72 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000a3de:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000a3e2:	b0 01                	mov    al,0x1
ffffffff8000a3e4:	a8 01                	test   al,0x1
ffffffff8000a3e6:	75 02                	jne    ffffffff8000a3ea <fmt.formatType__anon_2943+0x3a>
ffffffff8000a3e8:	eb 0a                	jmp    ffffffff8000a3f4 <fmt.formatType__anon_2943+0x44>
ffffffff8000a3ea:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a3ee:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a3f2:	5d                   	pop    rbp
ffffffff8000a3f3:	c3                   	ret
ffffffff8000a3f4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000a3f8:	e8 13 90 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a3fd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a401:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a405:	5d                   	pop    rbp
ffffffff8000a406:	c3                   	ret
ffffffff8000a407:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000a40e:	00 00 

ffffffff8000a410 <fmt.formatType__anon_2944>:
) @TypeOf(writer).Error!void {
ffffffff8000a410:	55                   	push   rbp
ffffffff8000a411:	48 89 e5             	mov    rbp,rsp
ffffffff8000a414:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000a418:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000a41c:	40 88 f0             	mov    al,sil
ffffffff8000a41f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000a422:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a426:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000a42d:	00 
ffffffff8000a42e:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000a435:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000a436:	0f b6 f0             	movzx  esi,al
ffffffff8000a439:	e8 a2 71 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000a43e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000a442:	b0 01                	mov    al,0x1
ffffffff8000a444:	a8 01                	test   al,0x1
ffffffff8000a446:	75 02                	jne    ffffffff8000a44a <fmt.formatType__anon_2944+0x3a>
ffffffff8000a448:	eb 0a                	jmp    ffffffff8000a454 <fmt.formatType__anon_2944+0x44>
ffffffff8000a44a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a44e:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a452:	5d                   	pop    rbp
ffffffff8000a453:	c3                   	ret
ffffffff8000a454:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000a458:	e8 b3 8f ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a45d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a461:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a465:	5d                   	pop    rbp
ffffffff8000a466:	c3                   	ret
ffffffff8000a467:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000a46e:	00 00 

ffffffff8000a470 <fmt.formatType__anon_2945>:
) @TypeOf(writer).Error!void {
ffffffff8000a470:	55                   	push   rbp
ffffffff8000a471:	48 89 e5             	mov    rbp,rsp
ffffffff8000a474:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffffffff8000a47b:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
ffffffff8000a482:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffffffff8000a489:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffffffff8000a490:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff8000a497:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
ffffffff8000a49e:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a4a5:	48 c7 45 88 03 00 00 	mov    QWORD PTR [rbp-0x78],0x3
ffffffff8000a4ac:	00 
ffffffff8000a4ad:	48 c7 45 80 f1 b4 01 	mov    QWORD PTR [rbp-0x80],0xffffffff8001b4f1
ffffffff8000a4b4:	80 
            if (max_depth == 0) {
ffffffff8000a4b5:	49 83 f8 00          	cmp    r8,0x0
ffffffff8000a4b9:	75 3c                	jne    ffffffff8000a4f7 <fmt.formatType__anon_2945+0x87>
ffffffff8000a4bb:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a4c2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                return writer.writeAll("{ ... }");
ffffffff8000a4c9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a4cc:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff8000a4d0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a4d3:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
ffffffff8000a4d6:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8000a4dd:	48 8d 75 98          	lea    rsi,[rbp-0x68]
ffffffff8000a4e1:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000a4e6:	e8 65 5e ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a4eb:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff8000a4ef:	b0 01                	mov    al,0x1
ffffffff8000a4f1:	a8 01                	test   al,0x1
ffffffff8000a4f3:	75 04                	jne    ffffffff8000a4f9 <fmt.formatType__anon_2945+0x89>
ffffffff8000a4f5:	eb 0f                	jmp    ffffffff8000a506 <fmt.formatType__anon_2945+0x96>
ffffffff8000a4f7:	eb 26                	jmp    ffffffff8000a51f <fmt.formatType__anon_2945+0xaf>
ffffffff8000a4f9:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff8000a4fd:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a504:	5d                   	pop    rbp
ffffffff8000a505:	c3                   	ret
ffffffff8000a506:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a50d:	e8 fe 8e ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a512:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff8000a516:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a51d:	5d                   	pop    rbp
ffffffff8000a51e:	c3                   	ret
ffffffff8000a51f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a526:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll("{ ");
ffffffff8000a52d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a530:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff8000a534:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a537:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff8000a53a:	48 c7 c2 57 b6 01 80 	mov    rdx,0xffffffff8001b657
ffffffff8000a541:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff8000a545:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a54a:	e8 01 5e ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a54f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff8000a556:	00 
            for (value, 0..) |elem, i| {
ffffffff8000a557:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000a55b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff8000a562:	48 83 f8 06          	cmp    rax,0x6
ffffffff8000a566:	73 3a                	jae    ffffffff8000a5a2 <fmt.formatType__anon_2945+0x132>
ffffffff8000a568:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff8000a56f:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff8000a576:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff8000a57d:	8a 14 0a             	mov    dl,BYTE PTR [rdx+rcx*1]
ffffffff8000a580:	88 95 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],dl
ffffffff8000a586:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
ffffffff8000a589:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff8000a58d:	48 83 e8 01          	sub    rax,0x1
ffffffff8000a591:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000a595:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff8000a599:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff8000a59c:	84 c0                	test   al,al
ffffffff8000a59e:	74 07                	je     ffffffff8000a5a7 <fmt.formatType__anon_2945+0x137>
ffffffff8000a5a0:	eb 07                	jmp    ffffffff8000a5a9 <fmt.formatType__anon_2945+0x139>
                    try writer.writeAll(", ");
ffffffff8000a5a2:	e9 9c 00 00 00       	jmp    ffffffff8000a643 <fmt.formatType__anon_2945+0x1d3>
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff8000a5a7:	eb 1c                	jmp    ffffffff8000a5c5 <fmt.formatType__anon_2945+0x155>
ffffffff8000a5a9:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000a5b0:	48 c7 c1 e8 c1 01 80 	mov    rcx,0xffffffff8001c1e8
ffffffff8000a5b7:	31 c0                	xor    eax,eax
ffffffff8000a5b9:	89 c2                	mov    edx,eax
ffffffff8000a5bb:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000a5c0:	e8 eb 5b ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000a5c5:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff8000a5cc:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffffffff8000a5d3:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a5da:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [rbp-0xb9]
ffffffff8000a5e0:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
ffffffff8000a5e4:	0f b6 f0             	movzx  esi,al
ffffffff8000a5e7:	e8 c4 fd ff ff       	call   ffffffff8000a3b0 <fmt.formatType__anon_2943>
ffffffff8000a5ec:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
                if (i < value.len - 1) {
ffffffff8000a5f3:	48 83 f8 05          	cmp    rax,0x5
ffffffff8000a5f7:	73 32                	jae    ffffffff8000a62b <fmt.formatType__anon_2945+0x1bb>
ffffffff8000a5f9:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a600:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                    try writer.writeAll(", ");
ffffffff8000a607:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a60a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff8000a60e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a611:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000a614:	48 c7 c2 5a b6 01 80 	mov    rdx,0xffffffff8001b65a
ffffffff8000a61b:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff8000a61f:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a624:	e8 27 5d ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a629:	eb 02                	jmp    ffffffff8000a62d <fmt.formatType__anon_2945+0x1bd>
ffffffff8000a62b:	eb 00                	jmp    ffffffff8000a62d <fmt.formatType__anon_2945+0x1bd>
ffffffff8000a62d:	eb 00                	jmp    ffffffff8000a62f <fmt.formatType__anon_2945+0x1bf>
ffffffff8000a62f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff8000a636:	48 83 c0 01          	add    rax,0x1
ffffffff8000a63a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8000a63e:	e9 14 ff ff ff       	jmp    ffffffff8000a557 <fmt.formatType__anon_2945+0xe7>
ffffffff8000a643:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a64a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll(" }");
ffffffff8000a651:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a654:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff8000a658:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a65b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000a65e:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff8000a665:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000a669:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a66e:	e8 dd 5c ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a673:	31 c0                	xor    eax,eax
ffffffff8000a675:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a67c:	5d                   	pop    rbp
ffffffff8000a67d:	c3                   	ret
ffffffff8000a67e:	66 90                	xchg   ax,ax

ffffffff8000a680 <fmt.formatType__anon_2946>:
) @TypeOf(writer).Error!void {
ffffffff8000a680:	55                   	push   rbp
ffffffff8000a681:	48 89 e5             	mov    rbp,rsp
ffffffff8000a684:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffffffff8000a68b:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
ffffffff8000a692:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffffffff8000a699:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffffffff8000a6a0:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff8000a6a7:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
ffffffff8000a6ae:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a6b5:	48 c7 45 88 03 00 00 	mov    QWORD PTR [rbp-0x78],0x3
ffffffff8000a6bc:	00 
ffffffff8000a6bd:	48 c7 45 80 f1 b4 01 	mov    QWORD PTR [rbp-0x80],0xffffffff8001b4f1
ffffffff8000a6c4:	80 
            if (max_depth == 0) {
ffffffff8000a6c5:	49 83 f8 00          	cmp    r8,0x0
ffffffff8000a6c9:	75 3c                	jne    ffffffff8000a707 <fmt.formatType__anon_2946+0x87>
ffffffff8000a6cb:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a6d2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                return writer.writeAll("{ ... }");
ffffffff8000a6d9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a6dc:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff8000a6e0:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a6e3:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
ffffffff8000a6e6:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8000a6ed:	48 8d 75 98          	lea    rsi,[rbp-0x68]
ffffffff8000a6f1:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000a6f6:	e8 55 5c ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a6fb:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff8000a6ff:	b0 01                	mov    al,0x1
ffffffff8000a701:	a8 01                	test   al,0x1
ffffffff8000a703:	75 04                	jne    ffffffff8000a709 <fmt.formatType__anon_2946+0x89>
ffffffff8000a705:	eb 0f                	jmp    ffffffff8000a716 <fmt.formatType__anon_2946+0x96>
ffffffff8000a707:	eb 26                	jmp    ffffffff8000a72f <fmt.formatType__anon_2946+0xaf>
ffffffff8000a709:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff8000a70d:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a714:	5d                   	pop    rbp
ffffffff8000a715:	c3                   	ret
ffffffff8000a716:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a71d:	e8 ee 8c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a722:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff8000a726:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a72d:	5d                   	pop    rbp
ffffffff8000a72e:	c3                   	ret
ffffffff8000a72f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a736:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll("{ ");
ffffffff8000a73d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a740:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff8000a744:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a747:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff8000a74a:	48 c7 c2 57 b6 01 80 	mov    rdx,0xffffffff8001b657
ffffffff8000a751:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff8000a755:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a75a:	e8 f1 5b ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a75f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff8000a766:	00 
            for (value, 0..) |elem, i| {
ffffffff8000a767:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000a76b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff8000a772:	48 83 f8 08          	cmp    rax,0x8
ffffffff8000a776:	73 3a                	jae    ffffffff8000a7b2 <fmt.formatType__anon_2946+0x132>
ffffffff8000a778:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff8000a77f:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff8000a786:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff8000a78d:	8a 14 0a             	mov    dl,BYTE PTR [rdx+rcx*1]
ffffffff8000a790:	88 95 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],dl
ffffffff8000a796:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
ffffffff8000a799:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff8000a79d:	48 83 e8 01          	sub    rax,0x1
ffffffff8000a7a1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000a7a5:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff8000a7a9:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff8000a7ac:	84 c0                	test   al,al
ffffffff8000a7ae:	74 07                	je     ffffffff8000a7b7 <fmt.formatType__anon_2946+0x137>
ffffffff8000a7b0:	eb 07                	jmp    ffffffff8000a7b9 <fmt.formatType__anon_2946+0x139>
                    try writer.writeAll(", ");
ffffffff8000a7b2:	e9 9c 00 00 00       	jmp    ffffffff8000a853 <fmt.formatType__anon_2946+0x1d3>
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff8000a7b7:	eb 1c                	jmp    ffffffff8000a7d5 <fmt.formatType__anon_2946+0x155>
ffffffff8000a7b9:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000a7c0:	48 c7 c1 f8 c1 01 80 	mov    rcx,0xffffffff8001c1f8
ffffffff8000a7c7:	31 c0                	xor    eax,eax
ffffffff8000a7c9:	89 c2                	mov    edx,eax
ffffffff8000a7cb:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000a7d0:	e8 db 59 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000a7d5:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff8000a7dc:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffffffff8000a7e3:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a7ea:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [rbp-0xb9]
ffffffff8000a7f0:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
ffffffff8000a7f4:	0f b6 f0             	movzx  esi,al
ffffffff8000a7f7:	e8 b4 fb ff ff       	call   ffffffff8000a3b0 <fmt.formatType__anon_2943>
ffffffff8000a7fc:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
                if (i < value.len - 1) {
ffffffff8000a803:	48 83 f8 07          	cmp    rax,0x7
ffffffff8000a807:	73 32                	jae    ffffffff8000a83b <fmt.formatType__anon_2946+0x1bb>
ffffffff8000a809:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a810:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                    try writer.writeAll(", ");
ffffffff8000a817:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a81a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff8000a81e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a821:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000a824:	48 c7 c2 5a b6 01 80 	mov    rdx,0xffffffff8001b65a
ffffffff8000a82b:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff8000a82f:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a834:	e8 17 5b ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a839:	eb 02                	jmp    ffffffff8000a83d <fmt.formatType__anon_2946+0x1bd>
ffffffff8000a83b:	eb 00                	jmp    ffffffff8000a83d <fmt.formatType__anon_2946+0x1bd>
ffffffff8000a83d:	eb 00                	jmp    ffffffff8000a83f <fmt.formatType__anon_2946+0x1bf>
ffffffff8000a83f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff8000a846:	48 83 c0 01          	add    rax,0x1
ffffffff8000a84a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8000a84e:	e9 14 ff ff ff       	jmp    ffffffff8000a767 <fmt.formatType__anon_2946+0xe7>
ffffffff8000a853:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000a85a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll(" }");
ffffffff8000a861:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000a864:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff8000a868:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000a86b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000a86e:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff8000a875:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000a879:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000a87e:	e8 cd 5a ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000a883:	31 c0                	xor    eax,eax
ffffffff8000a885:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8000a88c:	5d                   	pop    rbp
ffffffff8000a88d:	c3                   	ret
ffffffff8000a88e:	66 90                	xchg   ax,ax

ffffffff8000a890 <fmt.formatType__anon_2947>:
) @TypeOf(writer).Error!void {
ffffffff8000a890:	55                   	push   rbp
ffffffff8000a891:	48 89 e5             	mov    rbp,rsp
ffffffff8000a894:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000a898:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000a89c:	40 88 f0             	mov    al,sil
ffffffff8000a89f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000a8a2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a8a6:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000a8ad:	00 
ffffffff8000a8ae:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000a8b5:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000a8b6:	0f b6 f0             	movzx  esi,al
ffffffff8000a8b9:	e8 22 6d 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000a8be:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000a8c2:	b0 01                	mov    al,0x1
ffffffff8000a8c4:	a8 01                	test   al,0x1
ffffffff8000a8c6:	75 02                	jne    ffffffff8000a8ca <fmt.formatType__anon_2947+0x3a>
ffffffff8000a8c8:	eb 0a                	jmp    ffffffff8000a8d4 <fmt.formatType__anon_2947+0x44>
ffffffff8000a8ca:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a8ce:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a8d2:	5d                   	pop    rbp
ffffffff8000a8d3:	c3                   	ret
ffffffff8000a8d4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000a8d8:	e8 33 8b ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a8dd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a8e1:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a8e5:	5d                   	pop    rbp
ffffffff8000a8e6:	c3                   	ret
ffffffff8000a8e7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000a8ee:	00 00 

ffffffff8000a8f0 <fmt.formatType__anon_2948>:
) @TypeOf(writer).Error!void {
ffffffff8000a8f0:	55                   	push   rbp
ffffffff8000a8f1:	48 89 e5             	mov    rbp,rsp
ffffffff8000a8f4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000a8f8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000a8fc:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
ffffffff8000a8ff:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a903:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000a90a:	00 
ffffffff8000a90b:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000a912:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000a913:	e8 a8 64 00 00       	call   ffffffff80010dc0 <fmt.formatValue__anon_3182>
ffffffff8000a918:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000a91c:	b0 01                	mov    al,0x1
ffffffff8000a91e:	a8 01                	test   al,0x1
ffffffff8000a920:	75 02                	jne    ffffffff8000a924 <fmt.formatType__anon_2948+0x34>
ffffffff8000a922:	eb 0a                	jmp    ffffffff8000a92e <fmt.formatType__anon_2948+0x3e>
ffffffff8000a924:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a928:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a92c:	5d                   	pop    rbp
ffffffff8000a92d:	c3                   	ret
ffffffff8000a92e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000a932:	e8 d9 8a ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a937:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a93b:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a93f:	5d                   	pop    rbp
ffffffff8000a940:	c3                   	ret
ffffffff8000a941:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000a948:	00 00 00 
ffffffff8000a94b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff8000a950 <fmt.formatType__anon_2949>:
) @TypeOf(writer).Error!void {
ffffffff8000a950:	55                   	push   rbp
ffffffff8000a951:	48 89 e5             	mov    rbp,rsp
ffffffff8000a954:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000a958:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000a95c:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
ffffffff8000a95f:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000a963:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000a96a:	00 
ffffffff8000a96b:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000a972:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000a973:	e8 48 64 00 00       	call   ffffffff80010dc0 <fmt.formatValue__anon_3182>
ffffffff8000a978:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000a97c:	b0 01                	mov    al,0x1
ffffffff8000a97e:	a8 01                	test   al,0x1
ffffffff8000a980:	75 02                	jne    ffffffff8000a984 <fmt.formatType__anon_2949+0x34>
ffffffff8000a982:	eb 0a                	jmp    ffffffff8000a98e <fmt.formatType__anon_2949+0x3e>
ffffffff8000a984:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a988:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a98c:	5d                   	pop    rbp
ffffffff8000a98d:	c3                   	ret
ffffffff8000a98e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000a992:	e8 79 8a ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000a997:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000a99b:	48 83 c4 30          	add    rsp,0x30
ffffffff8000a99f:	5d                   	pop    rbp
ffffffff8000a9a0:	c3                   	ret
ffffffff8000a9a1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000a9a8:	00 00 00 
ffffffff8000a9ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff8000a9b0 <rtc.RTC.read_register>:
    fn read_register(self: Self, register: u8) u8 {
ffffffff8000a9b0:	55                   	push   rbp
ffffffff8000a9b1:	48 89 e5             	mov    rbp,rsp
ffffffff8000a9b4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000a9b8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000a9bc:	40 88 f0             	mov    al,sil
ffffffff8000a9bf:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
        self.out.write(register);
ffffffff8000a9c2:	8b 0f                	mov    ecx,DWORD PTR [rdi]
ffffffff8000a9c4:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
ffffffff8000a9c7:	48 8d 7d e2          	lea    rdi,[rbp-0x1e]
ffffffff8000a9cb:	0f b6 f0             	movzx  esi,al
ffffffff8000a9ce:	e8 4d a4 ff ff       	call   ffffffff80004e20 <ports.Port(u8).write>
ffffffff8000a9d3:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
        const value_bcd = self.in.read();
ffffffff8000a9d7:	8b 07                	mov    eax,DWORD PTR [rdi]
ffffffff8000a9d9:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000a9dc:	48 8d 7d e8          	lea    rdi,[rbp-0x18]
ffffffff8000a9e0:	e8 ab 6c 00 00       	call   ffffffff80011690 <ports.Port(u8).read>
ffffffff8000a9e5:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
        return (value_bcd & 0x0F) + ((value_bcd / 16) * 10);
ffffffff8000a9e8:	88 c1                	mov    cl,al
ffffffff8000a9ea:	80 e1 0f             	and    cl,0xf
ffffffff8000a9ed:	88 4d de             	mov    BYTE PTR [rbp-0x22],cl
ffffffff8000a9f0:	c0 e8 04             	shr    al,0x4
ffffffff8000a9f3:	0f b6 c8             	movzx  ecx,al
ffffffff8000a9f6:	01 c9                	add    ecx,ecx
ffffffff8000a9f8:	89 c8                	mov    eax,ecx
ffffffff8000a9fa:	8d 04 80             	lea    eax,[rax+rax*4]
ffffffff8000a9fd:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff8000aa00:	c6 45 f1 00          	mov    BYTE PTR [rbp-0xf],0x0
ffffffff8000aa04:	8a 45 f1             	mov    al,BYTE PTR [rbp-0xf]
ffffffff8000aa07:	84 c0                	test   al,al
ffffffff8000aa09:	75 04                	jne    ffffffff8000aa0f <rtc.RTC.read_register+0x5f>
ffffffff8000aa0b:	eb 00                	jmp    ffffffff8000aa0d <rtc.RTC.read_register+0x5d>
ffffffff8000aa0d:	eb 1c                	jmp    ffffffff8000aa2b <rtc.RTC.read_register+0x7b>
ffffffff8000aa0f:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000aa16:	48 c7 c1 08 c2 01 80 	mov    rcx,0xffffffff8001c208
ffffffff8000aa1d:	31 c0                	xor    eax,eax
ffffffff8000aa1f:	89 c2                	mov    edx,eax
ffffffff8000aa21:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000aa26:	e8 85 57 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000aa2b:	8a 45 de             	mov    al,BYTE PTR [rbp-0x22]
ffffffff8000aa2e:	8a 4d f0             	mov    cl,BYTE PTR [rbp-0x10]
ffffffff8000aa31:	00 c8                	add    al,cl
ffffffff8000aa33:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff8000aa36:	0f 92 45 f9          	setb   BYTE PTR [rbp-0x7]
ffffffff8000aa3a:	8a 45 f9             	mov    al,BYTE PTR [rbp-0x7]
ffffffff8000aa3d:	84 c0                	test   al,al
ffffffff8000aa3f:	75 04                	jne    ffffffff8000aa45 <rtc.RTC.read_register+0x95>
ffffffff8000aa41:	eb 00                	jmp    ffffffff8000aa43 <rtc.RTC.read_register+0x93>
ffffffff8000aa43:	eb 1c                	jmp    ffffffff8000aa61 <rtc.RTC.read_register+0xb1>
ffffffff8000aa45:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000aa4c:	48 c7 c1 18 c2 01 80 	mov    rcx,0xffffffff8001c218
ffffffff8000aa53:	31 c0                	xor    eax,eax
ffffffff8000aa55:	89 c2                	mov    edx,eax
ffffffff8000aa57:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000aa5c:	e8 4f 57 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000aa61:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff8000aa64:	48 83 c4 30          	add    rsp,0x30
ffffffff8000aa68:	5d                   	pop    rbp
ffffffff8000aa69:	c3                   	ret
ffffffff8000aa6a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff8000aa70 <fmt.formatType__anon_2992>:
) @TypeOf(writer).Error!void {
ffffffff8000aa70:	55                   	push   rbp
ffffffff8000aa71:	48 89 e5             	mov    rbp,rsp
ffffffff8000aa74:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000aa78:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000aa7c:	40 88 f0             	mov    al,sil
ffffffff8000aa7f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000aa82:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000aa86:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000aa8d:	00 
ffffffff8000aa8e:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000aa95:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000aa96:	0f b6 f0             	movzx  esi,al
ffffffff8000aa99:	e8 42 6b 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000aa9e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000aaa2:	b0 01                	mov    al,0x1
ffffffff8000aaa4:	a8 01                	test   al,0x1
ffffffff8000aaa6:	75 02                	jne    ffffffff8000aaaa <fmt.formatType__anon_2992+0x3a>
ffffffff8000aaa8:	eb 0a                	jmp    ffffffff8000aab4 <fmt.formatType__anon_2992+0x44>
ffffffff8000aaaa:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000aaae:	48 83 c4 30          	add    rsp,0x30
ffffffff8000aab2:	5d                   	pop    rbp
ffffffff8000aab3:	c3                   	ret
ffffffff8000aab4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000aab8:	e8 53 89 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000aabd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000aac1:	48 83 c4 30          	add    rsp,0x30
ffffffff8000aac5:	5d                   	pop    rbp
ffffffff8000aac6:	c3                   	ret
ffffffff8000aac7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000aace:	00 00 

ffffffff8000aad0 <fmt.formatType__anon_2993>:
) @TypeOf(writer).Error!void {
ffffffff8000aad0:	55                   	push   rbp
ffffffff8000aad1:	48 89 e5             	mov    rbp,rsp
ffffffff8000aad4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000aad8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000aadc:	40 88 f0             	mov    al,sil
ffffffff8000aadf:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000aae2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000aae6:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000aaed:	00 
ffffffff8000aaee:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000aaf5:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000aaf6:	0f b6 f0             	movzx  esi,al
ffffffff8000aaf9:	e8 e2 6a 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000aafe:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000ab02:	b0 01                	mov    al,0x1
ffffffff8000ab04:	a8 01                	test   al,0x1
ffffffff8000ab06:	75 02                	jne    ffffffff8000ab0a <fmt.formatType__anon_2993+0x3a>
ffffffff8000ab08:	eb 0a                	jmp    ffffffff8000ab14 <fmt.formatType__anon_2993+0x44>
ffffffff8000ab0a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ab0e:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ab12:	5d                   	pop    rbp
ffffffff8000ab13:	c3                   	ret
ffffffff8000ab14:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000ab18:	e8 f3 88 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000ab1d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ab21:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ab25:	5d                   	pop    rbp
ffffffff8000ab26:	c3                   	ret
ffffffff8000ab27:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000ab2e:	00 00 

ffffffff8000ab30 <fmt.formatType__anon_2994>:
) @TypeOf(writer).Error!void {
ffffffff8000ab30:	55                   	push   rbp
ffffffff8000ab31:	48 89 e5             	mov    rbp,rsp
ffffffff8000ab34:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000ab38:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000ab3c:	40 88 f0             	mov    al,sil
ffffffff8000ab3f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000ab42:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000ab46:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000ab4d:	00 
ffffffff8000ab4e:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000ab55:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000ab56:	0f b6 f0             	movzx  esi,al
ffffffff8000ab59:	e8 82 6a 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000ab5e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000ab62:	b0 01                	mov    al,0x1
ffffffff8000ab64:	a8 01                	test   al,0x1
ffffffff8000ab66:	75 02                	jne    ffffffff8000ab6a <fmt.formatType__anon_2994+0x3a>
ffffffff8000ab68:	eb 0a                	jmp    ffffffff8000ab74 <fmt.formatType__anon_2994+0x44>
ffffffff8000ab6a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ab6e:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ab72:	5d                   	pop    rbp
ffffffff8000ab73:	c3                   	ret
ffffffff8000ab74:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000ab78:	e8 93 88 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000ab7d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ab81:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ab85:	5d                   	pop    rbp
ffffffff8000ab86:	c3                   	ret
ffffffff8000ab87:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000ab8e:	00 00 

ffffffff8000ab90 <fmt.formatType__anon_2995>:
) @TypeOf(writer).Error!void {
ffffffff8000ab90:	55                   	push   rbp
ffffffff8000ab91:	48 89 e5             	mov    rbp,rsp
ffffffff8000ab94:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000ab98:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000ab9c:	40 88 f0             	mov    al,sil
ffffffff8000ab9f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000aba2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000aba6:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000abad:	00 
ffffffff8000abae:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000abb5:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000abb6:	0f b6 f0             	movzx  esi,al
ffffffff8000abb9:	e8 22 6a 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000abbe:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000abc2:	b0 01                	mov    al,0x1
ffffffff8000abc4:	a8 01                	test   al,0x1
ffffffff8000abc6:	75 02                	jne    ffffffff8000abca <fmt.formatType__anon_2995+0x3a>
ffffffff8000abc8:	eb 0a                	jmp    ffffffff8000abd4 <fmt.formatType__anon_2995+0x44>
ffffffff8000abca:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000abce:	48 83 c4 30          	add    rsp,0x30
ffffffff8000abd2:	5d                   	pop    rbp
ffffffff8000abd3:	c3                   	ret
ffffffff8000abd4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000abd8:	e8 33 88 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000abdd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000abe1:	48 83 c4 30          	add    rsp,0x30
ffffffff8000abe5:	5d                   	pop    rbp
ffffffff8000abe6:	c3                   	ret
ffffffff8000abe7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000abee:	00 00 

ffffffff8000abf0 <fmt.formatType__anon_2996>:
) @TypeOf(writer).Error!void {
ffffffff8000abf0:	55                   	push   rbp
ffffffff8000abf1:	48 89 e5             	mov    rbp,rsp
ffffffff8000abf4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000abf8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000abfc:	40 88 f0             	mov    al,sil
ffffffff8000abff:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000ac02:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000ac06:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000ac0d:	00 
ffffffff8000ac0e:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000ac15:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000ac16:	0f b6 f0             	movzx  esi,al
ffffffff8000ac19:	e8 c2 69 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000ac1e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000ac22:	b0 01                	mov    al,0x1
ffffffff8000ac24:	a8 01                	test   al,0x1
ffffffff8000ac26:	75 02                	jne    ffffffff8000ac2a <fmt.formatType__anon_2996+0x3a>
ffffffff8000ac28:	eb 0a                	jmp    ffffffff8000ac34 <fmt.formatType__anon_2996+0x44>
ffffffff8000ac2a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ac2e:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ac32:	5d                   	pop    rbp
ffffffff8000ac33:	c3                   	ret
ffffffff8000ac34:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000ac38:	e8 d3 87 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000ac3d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ac41:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ac45:	5d                   	pop    rbp
ffffffff8000ac46:	c3                   	ret
ffffffff8000ac47:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000ac4e:	00 00 

ffffffff8000ac50 <fmt.formatType__anon_2997>:
) @TypeOf(writer).Error!void {
ffffffff8000ac50:	55                   	push   rbp
ffffffff8000ac51:	48 89 e5             	mov    rbp,rsp
ffffffff8000ac54:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000ac58:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000ac5c:	40 88 f0             	mov    al,sil
ffffffff8000ac5f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000ac62:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000ac66:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000ac6d:	00 
ffffffff8000ac6e:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000ac75:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000ac76:	0f b6 f0             	movzx  esi,al
ffffffff8000ac79:	e8 62 69 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000ac7e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000ac82:	b0 01                	mov    al,0x1
ffffffff8000ac84:	a8 01                	test   al,0x1
ffffffff8000ac86:	75 02                	jne    ffffffff8000ac8a <fmt.formatType__anon_2997+0x3a>
ffffffff8000ac88:	eb 0a                	jmp    ffffffff8000ac94 <fmt.formatType__anon_2997+0x44>
ffffffff8000ac8a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ac8e:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ac92:	5d                   	pop    rbp
ffffffff8000ac93:	c3                   	ret
ffffffff8000ac94:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000ac98:	e8 73 87 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000ac9d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000aca1:	48 83 c4 30          	add    rsp,0x30
ffffffff8000aca5:	5d                   	pop    rbp
ffffffff8000aca6:	c3                   	ret
ffffffff8000aca7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000acae:	00 00 

ffffffff8000acb0 <fmt.formatType__anon_2998>:
) @TypeOf(writer).Error!void {
ffffffff8000acb0:	55                   	push   rbp
ffffffff8000acb1:	48 89 e5             	mov    rbp,rsp
ffffffff8000acb4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000acb8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000acbc:	40 88 f0             	mov    al,sil
ffffffff8000acbf:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff8000acc2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000acc6:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000accd:	00 
ffffffff8000acce:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000acd5:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000acd6:	0f b6 f0             	movzx  esi,al
ffffffff8000acd9:	e8 02 69 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8000acde:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000ace2:	b0 01                	mov    al,0x1
ffffffff8000ace4:	a8 01                	test   al,0x1
ffffffff8000ace6:	75 02                	jne    ffffffff8000acea <fmt.formatType__anon_2998+0x3a>
ffffffff8000ace8:	eb 0a                	jmp    ffffffff8000acf4 <fmt.formatType__anon_2998+0x44>
ffffffff8000acea:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000acee:	48 83 c4 30          	add    rsp,0x30
ffffffff8000acf2:	5d                   	pop    rbp
ffffffff8000acf3:	c3                   	ret
ffffffff8000acf4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000acf8:	e8 13 87 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000acfd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ad01:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ad05:	5d                   	pop    rbp
ffffffff8000ad06:	c3                   	ret
ffffffff8000ad07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000ad0e:	00 00 

ffffffff8000ad10 <fmt.formatAddress__anon_3000>:
pub fn formatAddress(value: anytype, options: FormatOptions, writer: anytype) @TypeOf(writer).Error!void {
ffffffff8000ad10:	55                   	push   rbp
ffffffff8000ad11:	48 89 e5             	mov    rbp,rsp
ffffffff8000ad14:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000ad18:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff8000ad1c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000ad20:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000ad24:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
            try writer.writeAll(@typeName(info.child) ++ "@");
ffffffff8000ad28:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff8000ad2b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000ad2f:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff8000ad32:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000ad35:	48 c7 c2 5e b6 01 80 	mov    rdx,0xffffffff8001b65e
ffffffff8000ad3c:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000ad40:	b9 0a 00 00 00       	mov    ecx,0xa
ffffffff8000ad45:	e8 06 56 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ad4a:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000ad4e:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000ad52:	4c 8b 4d e0          	mov    r9,QWORD PTR [rbp-0x20]
                try formatInt(@ptrToInt(value), 16, .lower, FormatOptions{}, writer);
ffffffff8000ad56:	31 c0                	xor    eax,eax
ffffffff8000ad58:	49 c7 c0 f0 a9 01 80 	mov    r8,0xffffffff8001a9f0
ffffffff8000ad5f:	ba 10 00 00 00       	mov    edx,0x10
ffffffff8000ad64:	31 c9                	xor    ecx,ecx
ffffffff8000ad66:	e8 35 bc ff ff       	call   ffffffff800069a0 <fmt.formatInt__anon_2783>
            return;
ffffffff8000ad6b:	31 c0                	xor    eax,eax
ffffffff8000ad6d:	48 83 c4 30          	add    rsp,0x30
ffffffff8000ad71:	5d                   	pop    rbp
ffffffff8000ad72:	c3                   	ret
ffffffff8000ad73:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000ad7a:	00 00 00 
ffffffff8000ad7d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff8000ad80 <fmt.formatValue__anon_3002>:
) !void {
ffffffff8000ad80:	55                   	push   rbp
ffffffff8000ad81:	48 89 e5             	mov    rbp,rsp
ffffffff8000ad84:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000ad88:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000ad8c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff8000ad90:	e8 2b 00 00 00       	call   ffffffff8000adc0 <fmt.formatIntValue__anon_3003>
ffffffff8000ad95:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000ad99:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000ad9e:	75 0a                	jne    ffffffff8000adaa <fmt.formatValue__anon_3002+0x2a>
ffffffff8000ada0:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ada4:	48 83 c4 20          	add    rsp,0x20
ffffffff8000ada8:	5d                   	pop    rbp
ffffffff8000ada9:	c3                   	ret
ffffffff8000adaa:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff8000adae:	e8 5d 86 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000adb3:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000adb7:	48 83 c4 20          	add    rsp,0x20
ffffffff8000adbb:	5d                   	pop    rbp
ffffffff8000adbc:	c3                   	ret
ffffffff8000adbd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff8000adc0 <fmt.formatIntValue__anon_3003>:
) !void {
ffffffff8000adc0:	55                   	push   rbp
ffffffff8000adc1:	48 89 e5             	mov    rbp,rsp
ffffffff8000adc4:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000adc8:	49 89 c9             	mov    r9,rcx
ffffffff8000adcb:	49 89 d0             	mov    r8,rdx
ffffffff8000adce:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff8000add2:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8000add6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return formatInt(int_value, radix, case, options, writer);
ffffffff8000adda:	31 c0                	xor    eax,eax
ffffffff8000addc:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff8000ade1:	31 c9                	xor    ecx,ecx
ffffffff8000ade3:	e8 28 00 00 00       	call   ffffffff8000ae10 <fmt.formatInt__anon_3006>
ffffffff8000ade8:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000adec:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000adf1:	75 0a                	jne    ffffffff8000adfd <fmt.formatIntValue__anon_3003+0x3d>
ffffffff8000adf3:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000adf7:	48 83 c4 20          	add    rsp,0x20
ffffffff8000adfb:	5d                   	pop    rbp
ffffffff8000adfc:	c3                   	ret
ffffffff8000adfd:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff8000ae01:	e8 0a 86 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000ae06:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000ae0a:	48 83 c4 20          	add    rsp,0x20
ffffffff8000ae0e:	5d                   	pop    rbp
ffffffff8000ae0f:	c3                   	ret

ffffffff8000ae10 <fmt.formatInt__anon_3006>:
) !void {
ffffffff8000ae10:	55                   	push   rbp
ffffffff8000ae11:	48 89 e5             	mov    rbp,rsp
ffffffff8000ae14:	48 81 ec 50 02 00 00 	sub    rsp,0x250
ffffffff8000ae1b:	4c 89 8d 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],r9
ffffffff8000ae22:	4c 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],r8
ffffffff8000ae29:	48 89 b5 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rsi
ffffffff8000ae30:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
ffffffff8000ae37:	88 8d af fe ff ff    	mov    BYTE PTR [rbp-0x151],cl
ffffffff8000ae3d:	88 d0                	mov    al,dl
ffffffff8000ae3f:	88 85 bf fe ff ff    	mov    BYTE PTR [rbp-0x141],al
ffffffff8000ae45:	48 89 b5 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rsi
ffffffff8000ae4c:	88 85 d6 fe ff ff    	mov    BYTE PTR [rbp-0x12a],al
ffffffff8000ae52:	80 e1 01             	and    cl,0x1
ffffffff8000ae55:	88 8d d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],cl
    assert(base >= 2);
ffffffff8000ae5b:	3c 02                	cmp    al,0x2
ffffffff8000ae5d:	0f 93 c0             	setae  al
ffffffff8000ae60:	0f b6 f8             	movzx  edi,al
ffffffff8000ae63:	e8 c8 ad ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000ae68:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8000ae6f:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff8000ae76:	66 c7 85 e6 fe ff ff 	mov    WORD PTR [rbp-0x11a],0x40
ffffffff8000ae7d:	40 00 
    const abs_value = math.absCast(int_value);
ffffffff8000ae7f:	e8 ec 08 00 00       	call   ffffffff8000b770 <math.absCast__anon_3007>
ffffffff8000ae84:	48 89 c1             	mov    rcx,rax
ffffffff8000ae87:	8a 85 bf fe ff ff    	mov    al,BYTE PTR [rbp-0x141]
ffffffff8000ae8d:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
ffffffff8000ae94:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff8000ae9b:	aa aa aa 
ffffffff8000ae9e:	48 89 95 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdx
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff8000aea5:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
ffffffff8000aeac:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
ffffffff8000aeb3:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
ffffffff8000aeba:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffffffff8000aec1:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
ffffffff8000aec8:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
ffffffff8000aecf:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffffffff8000aed6:	48 89 95 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rdx
ffffffff8000aedd:	c6 85 30 ff ff ff aa 	mov    BYTE PTR [rbp-0xd0],0xaa
    var a: MinInt = abs_value;
ffffffff8000aee4:	48 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rcx
    var index: usize = buf.len;
ffffffff8000aeeb:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x41
ffffffff8000aef2:	41 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff8000aef6:	3c 0a                	cmp    al,0xa
ffffffff8000aef8:	75 0f                	jne    ffffffff8000af09 <fmt.formatInt__anon_3006+0xf9>
ffffffff8000aefa:	e8 91 c2 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff8000aeff:	34 ff                	xor    al,0xff
ffffffff8000af01:	88 85 8f fe ff ff    	mov    BYTE PTR [rbp-0x171],al
ffffffff8000af07:	eb 0a                	jmp    ffffffff8000af13 <fmt.formatInt__anon_3006+0x103>
ffffffff8000af09:	31 c0                	xor    eax,eax
ffffffff8000af0b:	88 85 8f fe ff ff    	mov    BYTE PTR [rbp-0x171],al
ffffffff8000af11:	eb 00                	jmp    ffffffff8000af13 <fmt.formatInt__anon_3006+0x103>
ffffffff8000af13:	8a 85 8f fe ff ff    	mov    al,BYTE PTR [rbp-0x171]
ffffffff8000af19:	a8 01                	test   al,0x1
ffffffff8000af1b:	75 02                	jne    ffffffff8000af1f <fmt.formatInt__anon_3006+0x10f>
ffffffff8000af1d:	eb 02                	jmp    ffffffff8000af21 <fmt.formatInt__anon_3006+0x111>
ffffffff8000af1f:	eb 05                	jmp    ffffffff8000af26 <fmt.formatInt__anon_3006+0x116>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff8000af21:	e9 25 04 00 00       	jmp    ffffffff8000b34b <fmt.formatInt__anon_3006+0x53b>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8000af26:	48 83 bd 38 ff ff ff 	cmp    QWORD PTR [rbp-0xc8],0x64
ffffffff8000af2d:	64 
ffffffff8000af2e:	72 25                	jb     ffffffff8000af55 <fmt.formatInt__anon_3006+0x145>
            index -= 2;
ffffffff8000af30:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000af37:	48 83 e8 02          	sub    rax,0x2
ffffffff8000af3b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff8000af42:	0f 92 85 50 ff ff ff 	setb   BYTE PTR [rbp-0xb0]
ffffffff8000af49:	8a 85 50 ff ff ff    	mov    al,BYTE PTR [rbp-0xb0]
ffffffff8000af4f:	84 c0                	test   al,al
ffffffff8000af51:	74 07                	je     ffffffff8000af5a <fmt.formatInt__anon_3006+0x14a>
ffffffff8000af53:	eb 07                	jmp    ffffffff8000af5c <fmt.formatInt__anon_3006+0x14c>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8000af55:	e9 75 01 00 00       	jmp    ffffffff8000b0cf <fmt.formatInt__anon_3006+0x2bf>
            index -= 2;
ffffffff8000af5a:	eb 1c                	jmp    ffffffff8000af78 <fmt.formatInt__anon_3006+0x168>
ffffffff8000af5c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000af63:	48 c7 c1 78 be 01 80 	mov    rcx,0xffffffff8001be78
ffffffff8000af6a:	31 c0                	xor    eax,eax
ffffffff8000af6c:	89 c2                	mov    edx,eax
ffffffff8000af6e:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000af73:	e8 38 52 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000af78:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff8000af7f:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff8000af86:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000af8d:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff8000af94:	48 8d 8d f0 fe ff ff 	lea    rcx,[rbp-0x110]
ffffffff8000af9b:	48 01 c1             	add    rcx,rax
ffffffff8000af9e:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
ffffffff8000afa5:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000afa9:	77 02                	ja     ffffffff8000afad <fmt.formatInt__anon_3006+0x19d>
ffffffff8000afab:	eb 11                	jmp    ffffffff8000afbe <fmt.formatInt__anon_3006+0x1ae>
ffffffff8000afad:	48 8b bd 78 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x188]
ffffffff8000afb4:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000afb9:	e8 52 53 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000afbe:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
ffffffff8000afc5:	b8 41 00 00 00       	mov    eax,0x41
ffffffff8000afca:	48 29 c8             	sub    rax,rcx
ffffffff8000afcd:	48 89 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rax
ffffffff8000afd4:	b0 01                	mov    al,0x1
ffffffff8000afd6:	a8 01                	test   al,0x1
ffffffff8000afd8:	75 02                	jne    ffffffff8000afdc <fmt.formatInt__anon_3006+0x1cc>
ffffffff8000afda:	eb 02                	jmp    ffffffff8000afde <fmt.formatInt__anon_3006+0x1ce>
ffffffff8000afdc:	eb 0d                	jmp    ffffffff8000afeb <fmt.formatInt__anon_3006+0x1db>
ffffffff8000afde:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000afe3:	48 89 f7             	mov    rdi,rsi
ffffffff8000afe6:	e8 e5 51 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000afeb:	48 8b 85 78 fe ff ff 	mov    rax,QWORD PTR [rbp-0x188]
ffffffff8000aff2:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000aff6:	77 02                	ja     ffffffff8000affa <fmt.formatInt__anon_3006+0x1ea>
ffffffff8000aff8:	eb 11                	jmp    ffffffff8000b00b <fmt.formatInt__anon_3006+0x1fb>
ffffffff8000affa:	48 8b bd 78 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x188]
ffffffff8000b001:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b006:	e8 c5 51 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b00b:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff8000b012:	48 8b 8d 70 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x190]
ffffffff8000b019:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
ffffffff8000b020:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
ffffffff8000b027:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff8000b02e:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
ffffffff8000b035:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000b03c:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff8000b043:	b0 01                	mov    al,0x1
ffffffff8000b045:	a8 01                	test   al,0x1
ffffffff8000b047:	75 02                	jne    ffffffff8000b04b <fmt.formatInt__anon_3006+0x23b>
ffffffff8000b049:	eb 02                	jmp    ffffffff8000b04d <fmt.formatInt__anon_3006+0x23d>
ffffffff8000b04b:	eb 10                	jmp    ffffffff8000b05d <fmt.formatInt__anon_3006+0x24d>
ffffffff8000b04d:	31 c0                	xor    eax,eax
ffffffff8000b04f:	31 c0                	xor    eax,eax
ffffffff8000b051:	89 c7                	mov    edi,eax
ffffffff8000b053:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000b058:	e8 b3 52 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000b05d:	48 8b 8d 68 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x198]
ffffffff8000b064:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000b069:	48 39 c8             	cmp    rax,rcx
ffffffff8000b06c:	77 02                	ja     ffffffff8000b070 <fmt.formatInt__anon_3006+0x260>
ffffffff8000b06e:	eb 11                	jmp    ffffffff8000b081 <fmt.formatInt__anon_3006+0x271>
ffffffff8000b070:	48 8b b5 68 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x198]
ffffffff8000b077:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000b07c:	e8 4f 51 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b081:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffffffff8000b088:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff8000b08d:	31 d2                	xor    edx,edx
ffffffff8000b08f:	48 f7 f1             	div    rcx
ffffffff8000b092:	48 89 d6             	mov    rsi,rdx
ffffffff8000b095:	48 8d bd 6e ff ff ff 	lea    rdi,[rbp-0x92]
ffffffff8000b09c:	e8 0f c1 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8000b0a1:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
ffffffff8000b0a8:	66 8b 8d 6e ff ff ff 	mov    cx,WORD PTR [rbp-0x92]
ffffffff8000b0af:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8000b0b2:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
ffffffff8000b0b9:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff8000b0be:	31 d2                	xor    edx,edx
ffffffff8000b0c0:	48 f7 f1             	div    rcx
ffffffff8000b0c3:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
ffffffff8000b0ca:	e9 57 fe ff ff       	jmp    ffffffff8000af26 <fmt.formatInt__anon_3006+0x116>
        if (a < 10) {
ffffffff8000b0cf:	48 83 bd 38 ff ff ff 	cmp    QWORD PTR [rbp-0xc8],0xa
ffffffff8000b0d6:	0a 
ffffffff8000b0d7:	73 25                	jae    ffffffff8000b0fe <fmt.formatInt__anon_3006+0x2ee>
            index -= 1;
ffffffff8000b0d9:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b0e0:	48 83 e8 01          	sub    rax,0x1
ffffffff8000b0e4:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff8000b0eb:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff8000b0f2:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff8000b0f8:	84 c0                	test   al,al
ffffffff8000b0fa:	74 25                	je     ffffffff8000b121 <fmt.formatInt__anon_3006+0x311>
ffffffff8000b0fc:	eb 25                	jmp    ffffffff8000b123 <fmt.formatInt__anon_3006+0x313>
            index -= 2;
ffffffff8000b0fe:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b105:	48 83 e8 02          	sub    rax,0x2
ffffffff8000b109:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000b10d:	0f 92 45 90          	setb   BYTE PTR [rbp-0x70]
ffffffff8000b111:	8a 45 90             	mov    al,BYTE PTR [rbp-0x70]
ffffffff8000b114:	84 c0                	test   al,al
ffffffff8000b116:	0f 84 f4 00 00 00    	je     ffffffff8000b210 <fmt.formatInt__anon_3006+0x400>
ffffffff8000b11c:	e9 f1 00 00 00       	jmp    ffffffff8000b212 <fmt.formatInt__anon_3006+0x402>
            index -= 1;
ffffffff8000b121:	eb 1c                	jmp    ffffffff8000b13f <fmt.formatInt__anon_3006+0x32f>
ffffffff8000b123:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000b12a:	48 c7 c1 88 be 01 80 	mov    rcx,0xffffffff8001be88
ffffffff8000b131:	31 c0                	xor    eax,eax
ffffffff8000b133:	89 c2                	mov    edx,eax
ffffffff8000b135:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b13a:	e8 71 50 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b13f:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff8000b146:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff8000b14d:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b154:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff8000b15b:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b15f:	73 02                	jae    ffffffff8000b163 <fmt.formatInt__anon_3006+0x353>
ffffffff8000b161:	eb 11                	jmp    ffffffff8000b174 <fmt.formatInt__anon_3006+0x364>
ffffffff8000b163:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff8000b16a:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b16f:	e8 5c 50 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b174:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
ffffffff8000b17b:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
ffffffff8000b182:	48 01 c8             	add    rax,rcx
ffffffff8000b185:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff8000b18c:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
ffffffff8000b193:	48 89 8d 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rcx
ffffffff8000b19a:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff8000b19f:	48 29 c8             	sub    rax,rcx
ffffffff8000b1a2:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff8000b1a8:	77 02                	ja     ffffffff8000b1ac <fmt.formatInt__anon_3006+0x39c>
ffffffff8000b1aa:	eb 1c                	jmp    ffffffff8000b1c8 <fmt.formatInt__anon_3006+0x3b8>
ffffffff8000b1ac:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff8000b1b3:	48 c7 c1 98 be 01 80 	mov    rcx,0xffffffff8001be98
ffffffff8000b1ba:	31 c0                	xor    eax,eax
ffffffff8000b1bc:	89 c2                	mov    edx,eax
ffffffff8000b1be:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff8000b1c3:	e8 e8 4f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b1c8:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
ffffffff8000b1cf:	04 30                	add    al,0x30
ffffffff8000b1d1:	88 45 80             	mov    BYTE PTR [rbp-0x80],al
ffffffff8000b1d4:	0f 92 45 81          	setb   BYTE PTR [rbp-0x7f]
ffffffff8000b1d8:	8a 45 81             	mov    al,BYTE PTR [rbp-0x7f]
ffffffff8000b1db:	84 c0                	test   al,al
ffffffff8000b1dd:	75 04                	jne    ffffffff8000b1e3 <fmt.formatInt__anon_3006+0x3d3>
ffffffff8000b1df:	eb 00                	jmp    ffffffff8000b1e1 <fmt.formatInt__anon_3006+0x3d1>
ffffffff8000b1e1:	eb 1c                	jmp    ffffffff8000b1ff <fmt.formatInt__anon_3006+0x3ef>
ffffffff8000b1e3:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000b1ea:	48 c7 c1 a8 be 01 80 	mov    rcx,0xffffffff8001bea8
ffffffff8000b1f1:	31 c0                	xor    eax,eax
ffffffff8000b1f3:	89 c2                	mov    edx,eax
ffffffff8000b1f5:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b1fa:	e8 b1 4f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b1ff:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
ffffffff8000b206:	8a 4d 80             	mov    cl,BYTE PTR [rbp-0x80]
ffffffff8000b209:	88 08                	mov    BYTE PTR [rax],cl
ffffffff8000b20b:	e9 36 01 00 00       	jmp    ffffffff8000b346 <fmt.formatInt__anon_3006+0x536>
            index -= 2;
ffffffff8000b210:	eb 1c                	jmp    ffffffff8000b22e <fmt.formatInt__anon_3006+0x41e>
ffffffff8000b212:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000b219:	48 c7 c1 b8 be 01 80 	mov    rcx,0xffffffff8001beb8
ffffffff8000b220:	31 c0                	xor    eax,eax
ffffffff8000b222:	89 c2                	mov    edx,eax
ffffffff8000b224:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b229:	e8 82 4f ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b22e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff8000b232:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff8000b239:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b240:	48 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rax
ffffffff8000b247:	48 8d 8d f0 fe ff ff 	lea    rcx,[rbp-0x110]
ffffffff8000b24e:	48 01 c1             	add    rcx,rax
ffffffff8000b251:	48 89 8d 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rcx
ffffffff8000b258:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b25c:	77 02                	ja     ffffffff8000b260 <fmt.formatInt__anon_3006+0x450>
ffffffff8000b25e:	eb 11                	jmp    ffffffff8000b271 <fmt.formatInt__anon_3006+0x461>
ffffffff8000b260:	48 8b bd 38 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c8]
ffffffff8000b267:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b26c:	e8 9f 50 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000b271:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
ffffffff8000b278:	b8 41 00 00 00       	mov    eax,0x41
ffffffff8000b27d:	48 29 c8             	sub    rax,rcx
ffffffff8000b280:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
ffffffff8000b287:	b0 01                	mov    al,0x1
ffffffff8000b289:	a8 01                	test   al,0x1
ffffffff8000b28b:	75 02                	jne    ffffffff8000b28f <fmt.formatInt__anon_3006+0x47f>
ffffffff8000b28d:	eb 02                	jmp    ffffffff8000b291 <fmt.formatInt__anon_3006+0x481>
ffffffff8000b28f:	eb 0d                	jmp    ffffffff8000b29e <fmt.formatInt__anon_3006+0x48e>
ffffffff8000b291:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b296:	48 89 f7             	mov    rdi,rsi
ffffffff8000b299:	e8 32 4f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b29e:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
ffffffff8000b2a5:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b2a9:	77 02                	ja     ffffffff8000b2ad <fmt.formatInt__anon_3006+0x49d>
ffffffff8000b2ab:	eb 11                	jmp    ffffffff8000b2be <fmt.formatInt__anon_3006+0x4ae>
ffffffff8000b2ad:	48 8b bd 38 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c8]
ffffffff8000b2b4:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b2b9:	e8 12 4f ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b2be:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
ffffffff8000b2c5:	48 8b 8d 30 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d0]
ffffffff8000b2cc:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
ffffffff8000b2d0:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000b2d4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff8000b2d8:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff8000b2df:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8000b2e3:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
ffffffff8000b2ea:	b0 01                	mov    al,0x1
ffffffff8000b2ec:	a8 01                	test   al,0x1
ffffffff8000b2ee:	75 02                	jne    ffffffff8000b2f2 <fmt.formatInt__anon_3006+0x4e2>
ffffffff8000b2f0:	eb 02                	jmp    ffffffff8000b2f4 <fmt.formatInt__anon_3006+0x4e4>
ffffffff8000b2f2:	eb 10                	jmp    ffffffff8000b304 <fmt.formatInt__anon_3006+0x4f4>
ffffffff8000b2f4:	31 c0                	xor    eax,eax
ffffffff8000b2f6:	31 c0                	xor    eax,eax
ffffffff8000b2f8:	89 c7                	mov    edi,eax
ffffffff8000b2fa:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000b2ff:	e8 0c 50 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000b304:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff8000b30b:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000b310:	48 39 c8             	cmp    rax,rcx
ffffffff8000b313:	77 02                	ja     ffffffff8000b317 <fmt.formatInt__anon_3006+0x507>
ffffffff8000b315:	eb 11                	jmp    ffffffff8000b328 <fmt.formatInt__anon_3006+0x518>
ffffffff8000b317:	48 8b b5 28 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1d8]
ffffffff8000b31e:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000b323:	e8 a8 4e ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b328:	48 8b b5 38 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xc8]
ffffffff8000b32f:	48 8d 7d ae          	lea    rdi,[rbp-0x52]
ffffffff8000b333:	e8 78 be ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8000b338:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
ffffffff8000b33f:	66 8b 4d ae          	mov    cx,WORD PTR [rbp-0x52]
ffffffff8000b343:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff8000b346:	e9 b0 01 00 00       	jmp    ffffffff8000b4fb <fmt.formatInt__anon_3006+0x6eb>
ffffffff8000b34b:	8a 85 bf fe ff ff    	mov    al,BYTE PTR [rbp-0x141]
            const digit = a % base;
ffffffff8000b351:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
ffffffff8000b358:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
ffffffff8000b35f:	0f b6 c0             	movzx  eax,al
ffffffff8000b362:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
ffffffff8000b369:	48 83 f8 00          	cmp    rax,0x0
ffffffff8000b36d:	74 02                	je     ffffffff8000b371 <fmt.formatInt__anon_3006+0x561>
ffffffff8000b36f:	eb 1c                	jmp    ffffffff8000b38d <fmt.formatInt__anon_3006+0x57d>
ffffffff8000b371:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8000b378:	48 c7 c1 c8 be 01 80 	mov    rcx,0xffffffff8001bec8
ffffffff8000b37f:	31 c0                	xor    eax,eax
ffffffff8000b381:	89 c2                	mov    edx,eax
ffffffff8000b383:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b388:	e8 23 4e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b38d:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff8000b394:	48 8b 85 10 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f0]
ffffffff8000b39b:	31 d2                	xor    edx,edx
ffffffff8000b39d:	48 f7 f1             	div    rcx
ffffffff8000b3a0:	48 89 d0             	mov    rax,rdx
ffffffff8000b3a3:	48 89 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rax
ffffffff8000b3aa:	48 89 55 b0          	mov    QWORD PTR [rbp-0x50],rdx
            index -= 1;
ffffffff8000b3ae:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b3b5:	48 83 e8 01          	sub    rax,0x1
ffffffff8000b3b9:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8000b3bd:	0f 92 45 c0          	setb   BYTE PTR [rbp-0x40]
ffffffff8000b3c1:	8a 45 c0             	mov    al,BYTE PTR [rbp-0x40]
ffffffff8000b3c4:	84 c0                	test   al,al
ffffffff8000b3c6:	75 04                	jne    ffffffff8000b3cc <fmt.formatInt__anon_3006+0x5bc>
ffffffff8000b3c8:	eb 00                	jmp    ffffffff8000b3ca <fmt.formatInt__anon_3006+0x5ba>
ffffffff8000b3ca:	eb 1c                	jmp    ffffffff8000b3e8 <fmt.formatInt__anon_3006+0x5d8>
ffffffff8000b3cc:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000b3d3:	48 c7 c1 d8 be 01 80 	mov    rcx,0xffffffff8001bed8
ffffffff8000b3da:	31 c0                	xor    eax,eax
ffffffff8000b3dc:	89 c2                	mov    edx,eax
ffffffff8000b3de:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b3e3:	e8 c8 4d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b3e8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000b3ec:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff8000b3f3:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b3fa:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
ffffffff8000b401:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b405:	73 02                	jae    ffffffff8000b409 <fmt.formatInt__anon_3006+0x5f9>
ffffffff8000b407:	eb 11                	jmp    ffffffff8000b41a <fmt.formatInt__anon_3006+0x60a>
ffffffff8000b409:	48 8b bd 00 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x200]
ffffffff8000b410:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b415:	e8 b6 4d ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b41a:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
ffffffff8000b421:	48 8b 95 00 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x200]
ffffffff8000b428:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
ffffffff8000b42f:	48 01 d0             	add    rax,rdx
ffffffff8000b432:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
ffffffff8000b439:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff8000b43e:	48 29 c8             	sub    rax,rcx
ffffffff8000b441:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff8000b447:	77 02                	ja     ffffffff8000b44b <fmt.formatInt__anon_3006+0x63b>
ffffffff8000b449:	eb 1c                	jmp    ffffffff8000b467 <fmt.formatInt__anon_3006+0x657>
ffffffff8000b44b:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff8000b452:	48 c7 c1 e8 be 01 80 	mov    rcx,0xffffffff8001bee8
ffffffff8000b459:	31 c0                	xor    eax,eax
ffffffff8000b45b:	89 c2                	mov    edx,eax
ffffffff8000b45d:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff8000b462:	e8 49 4d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b467:	8a 85 af fe ff ff    	mov    al,BYTE PTR [rbp-0x151]
ffffffff8000b46d:	48 8b 8d 08 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f8]
ffffffff8000b474:	0f b6 f9             	movzx  edi,cl
ffffffff8000b477:	0f b6 f0             	movzx  esi,al
ffffffff8000b47a:	e8 a1 be ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff8000b47f:	48 8b 8d f8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x208]
ffffffff8000b486:	88 c2                	mov    dl,al
ffffffff8000b488:	8a 85 bf fe ff ff    	mov    al,BYTE PTR [rbp-0x141]
ffffffff8000b48e:	88 11                	mov    BYTE PTR [rcx],dl
            a /= base;
ffffffff8000b490:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
ffffffff8000b497:	48 89 8d e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rcx
ffffffff8000b49e:	0f b6 c0             	movzx  eax,al
ffffffff8000b4a1:	48 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rax
ffffffff8000b4a8:	48 83 f8 00          	cmp    rax,0x0
ffffffff8000b4ac:	74 02                	je     ffffffff8000b4b0 <fmt.formatInt__anon_3006+0x6a0>
ffffffff8000b4ae:	eb 1c                	jmp    ffffffff8000b4cc <fmt.formatInt__anon_3006+0x6bc>
ffffffff8000b4b0:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8000b4b7:	48 c7 c1 f8 be 01 80 	mov    rcx,0xffffffff8001bef8
ffffffff8000b4be:	31 c0                	xor    eax,eax
ffffffff8000b4c0:	89 c2                	mov    edx,eax
ffffffff8000b4c2:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b4c7:	e8 e4 4c ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b4cc:	48 8b 8d f0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x210]
ffffffff8000b4d3:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
ffffffff8000b4da:	31 d2                	xor    edx,edx
ffffffff8000b4dc:	48 f7 f1             	div    rcx
ffffffff8000b4df:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
            if (a == 0) break;
ffffffff8000b4e6:	48 83 bd 38 ff ff ff 	cmp    QWORD PTR [rbp-0xc8],0x0
ffffffff8000b4ed:	00 
ffffffff8000b4ee:	75 02                	jne    ffffffff8000b4f2 <fmt.formatInt__anon_3006+0x6e2>
ffffffff8000b4f0:	eb 07                	jmp    ffffffff8000b4f9 <fmt.formatInt__anon_3006+0x6e9>
ffffffff8000b4f2:	eb 00                	jmp    ffffffff8000b4f4 <fmt.formatInt__anon_3006+0x6e4>
ffffffff8000b4f4:	e9 52 fe ff ff       	jmp    ffffffff8000b34b <fmt.formatInt__anon_3006+0x53b>
ffffffff8000b4f9:	eb 00                	jmp    ffffffff8000b4fb <fmt.formatInt__anon_3006+0x6eb>
ffffffff8000b4fb:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
        if (value < 0) {
ffffffff8000b502:	48 83 f8 00          	cmp    rax,0x0
ffffffff8000b506:	7d 1c                	jge    ffffffff8000b524 <fmt.formatInt__anon_3006+0x714>
            index -= 1;
ffffffff8000b508:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b50f:	48 83 e8 01          	sub    rax,0x1
ffffffff8000b513:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff8000b517:	0f 92 45 d0          	setb   BYTE PTR [rbp-0x30]
ffffffff8000b51b:	8a 45 d0             	mov    al,BYTE PTR [rbp-0x30]
ffffffff8000b51e:	84 c0                	test   al,al
ffffffff8000b520:	74 18                	je     ffffffff8000b53a <fmt.formatInt__anon_3006+0x72a>
ffffffff8000b522:	eb 18                	jmp    ffffffff8000b53c <fmt.formatInt__anon_3006+0x72c>
ffffffff8000b524:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
        } else if (options.width == null or options.width.? == 0) {
ffffffff8000b52b:	80 78 18 00          	cmp    BYTE PTR [rax+0x18],0x0
ffffffff8000b52f:	0f 95 c0             	setne  al
ffffffff8000b532:	34 ff                	xor    al,0xff
ffffffff8000b534:	a8 01                	test   al,0x1
ffffffff8000b536:	75 66                	jne    ffffffff8000b59e <fmt.formatInt__anon_3006+0x78e>
ffffffff8000b538:	eb 6e                	jmp    ffffffff8000b5a8 <fmt.formatInt__anon_3006+0x798>
            index -= 1;
ffffffff8000b53a:	eb 1c                	jmp    ffffffff8000b558 <fmt.formatInt__anon_3006+0x748>
ffffffff8000b53c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000b543:	48 c7 c1 08 bf 01 80 	mov    rcx,0xffffffff8001bf08
ffffffff8000b54a:	31 c0                	xor    eax,eax
ffffffff8000b54c:	89 c2                	mov    edx,eax
ffffffff8000b54e:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b553:	e8 58 4c ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b558:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000b55c:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
            buf[index] = '-';
ffffffff8000b563:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b56a:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
ffffffff8000b571:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b575:	73 02                	jae    ffffffff8000b579 <fmt.formatInt__anon_3006+0x769>
ffffffff8000b577:	eb 11                	jmp    ffffffff8000b58a <fmt.formatInt__anon_3006+0x77a>
ffffffff8000b579:	48 8b bd e0 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x220]
ffffffff8000b580:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b585:	e8 46 4c ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b58a:	48 8b 85 e0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x220]
ffffffff8000b591:	c6 84 05 f0 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x110],0x2d
ffffffff8000b598:	2d 
ffffffff8000b599:	e9 e2 00 00 00       	jmp    ffffffff8000b680 <fmt.formatInt__anon_3006+0x870>
        } else if (options.width == null or options.width.? == 0) {
ffffffff8000b59e:	b0 01                	mov    al,0x1
ffffffff8000b5a0:	88 85 df fd ff ff    	mov    BYTE PTR [rbp-0x221],al
ffffffff8000b5a6:	eb 4d                	jmp    ffffffff8000b5f5 <fmt.formatInt__anon_3006+0x7e5>
ffffffff8000b5a8:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
ffffffff8000b5af:	48 89 c1             	mov    rcx,rax
ffffffff8000b5b2:	48 83 c1 10          	add    rcx,0x10
ffffffff8000b5b6:	48 89 8d d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rcx
ffffffff8000b5bd:	80 78 18 00          	cmp    BYTE PTR [rax+0x18],0x0
ffffffff8000b5c1:	74 02                	je     ffffffff8000b5c5 <fmt.formatInt__anon_3006+0x7b5>
ffffffff8000b5c3:	eb 1c                	jmp    ffffffff8000b5e1 <fmt.formatInt__anon_3006+0x7d1>
ffffffff8000b5c5:	48 c7 c7 84 b3 01 80 	mov    rdi,0xffffffff8001b384
ffffffff8000b5cc:	48 c7 c1 18 bf 01 80 	mov    rcx,0xffffffff8001bf18
ffffffff8000b5d3:	31 c0                	xor    eax,eax
ffffffff8000b5d5:	89 c2                	mov    edx,eax
ffffffff8000b5d7:	be 19 00 00 00       	mov    esi,0x19
ffffffff8000b5dc:	e8 cf 4b ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b5e1:	48 8b 85 d0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x230]
ffffffff8000b5e8:	48 83 38 00          	cmp    QWORD PTR [rax],0x0
ffffffff8000b5ec:	0f 94 c0             	sete   al
ffffffff8000b5ef:	88 85 df fd ff ff    	mov    BYTE PTR [rbp-0x221],al
ffffffff8000b5f5:	8a 85 df fd ff ff    	mov    al,BYTE PTR [rbp-0x221]
ffffffff8000b5fb:	a8 01                	test   al,0x1
ffffffff8000b5fd:	75 02                	jne    ffffffff8000b601 <fmt.formatInt__anon_3006+0x7f1>
ffffffff8000b5ff:	eb 02                	jmp    ffffffff8000b603 <fmt.formatInt__anon_3006+0x7f3>
ffffffff8000b601:	eb 7b                	jmp    ffffffff8000b67e <fmt.formatInt__anon_3006+0x86e>
            index -= 1;
ffffffff8000b603:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b60a:	48 83 e8 01          	sub    rax,0x1
ffffffff8000b60e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000b612:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff8000b616:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff8000b619:	84 c0                	test   al,al
ffffffff8000b61b:	75 04                	jne    ffffffff8000b621 <fmt.formatInt__anon_3006+0x811>
ffffffff8000b61d:	eb 00                	jmp    ffffffff8000b61f <fmt.formatInt__anon_3006+0x80f>
ffffffff8000b61f:	eb 1c                	jmp    ffffffff8000b63d <fmt.formatInt__anon_3006+0x82d>
ffffffff8000b621:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000b628:	48 c7 c1 28 bf 01 80 	mov    rcx,0xffffffff8001bf28
ffffffff8000b62f:	31 c0                	xor    eax,eax
ffffffff8000b631:	89 c2                	mov    edx,eax
ffffffff8000b633:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000b638:	e8 73 4b ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b63d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000b641:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
            buf[index] = '+';
ffffffff8000b648:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b64f:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
ffffffff8000b656:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b65a:	73 02                	jae    ffffffff8000b65e <fmt.formatInt__anon_3006+0x84e>
ffffffff8000b65c:	eb 11                	jmp    ffffffff8000b66f <fmt.formatInt__anon_3006+0x85f>
ffffffff8000b65e:	48 8b bd c8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x238]
ffffffff8000b665:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b66a:	e8 61 4b ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b66f:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffffffff8000b676:	c6 84 05 f0 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x110],0x2b
ffffffff8000b67d:	2b 
ffffffff8000b67e:	eb 00                	jmp    ffffffff8000b680 <fmt.formatInt__anon_3006+0x870>
    return formatBuf(buf[index..], options, writer);
ffffffff8000b680:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff8000b687:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
ffffffff8000b68e:	48 8d 8d f0 fe ff ff 	lea    rcx,[rbp-0x110]
ffffffff8000b695:	48 01 c1             	add    rcx,rax
ffffffff8000b698:	48 89 8d c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],rcx
ffffffff8000b69f:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b6a3:	77 02                	ja     ffffffff8000b6a7 <fmt.formatInt__anon_3006+0x897>
ffffffff8000b6a5:	eb 11                	jmp    ffffffff8000b6b8 <fmt.formatInt__anon_3006+0x8a8>
ffffffff8000b6a7:	48 8b bd b8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x248]
ffffffff8000b6ae:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b6b3:	e8 58 4c ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000b6b8:	48 8b 8d b8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x248]
ffffffff8000b6bf:	b8 41 00 00 00       	mov    eax,0x41
ffffffff8000b6c4:	48 29 c8             	sub    rax,rcx
ffffffff8000b6c7:	48 89 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rax
ffffffff8000b6ce:	b0 01                	mov    al,0x1
ffffffff8000b6d0:	a8 01                	test   al,0x1
ffffffff8000b6d2:	75 02                	jne    ffffffff8000b6d6 <fmt.formatInt__anon_3006+0x8c6>
ffffffff8000b6d4:	eb 02                	jmp    ffffffff8000b6d8 <fmt.formatInt__anon_3006+0x8c8>
ffffffff8000b6d6:	eb 0d                	jmp    ffffffff8000b6e5 <fmt.formatInt__anon_3006+0x8d5>
ffffffff8000b6d8:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b6dd:	48 89 f7             	mov    rdi,rsi
ffffffff8000b6e0:	e8 eb 4a ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b6e5:	48 8b 85 b8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x248]
ffffffff8000b6ec:	48 83 f8 41          	cmp    rax,0x41
ffffffff8000b6f0:	77 02                	ja     ffffffff8000b6f4 <fmt.formatInt__anon_3006+0x8e4>
ffffffff8000b6f2:	eb 11                	jmp    ffffffff8000b705 <fmt.formatInt__anon_3006+0x8f5>
ffffffff8000b6f4:	48 8b bd b8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x248]
ffffffff8000b6fb:	be 41 00 00 00       	mov    esi,0x41
ffffffff8000b700:	e8 cb 4a ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000b705:	4c 8b 85 90 fe ff ff 	mov    r8,QWORD PTR [rbp-0x170]
ffffffff8000b70c:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
ffffffff8000b713:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff8000b71a:	48 8b 85 c0 fd ff ff 	mov    rax,QWORD PTR [rbp-0x240]
ffffffff8000b721:	48 8b 95 b0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x250]
ffffffff8000b728:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8000b72c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000b730:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff8000b734:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000b738:	e8 23 bd ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff8000b73d:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff8000b741:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff8000b746:	75 0d                	jne    ffffffff8000b755 <fmt.formatInt__anon_3006+0x945>
ffffffff8000b748:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8000b74c:	48 81 c4 50 02 00 00 	add    rsp,0x250
ffffffff8000b753:	5d                   	pop    rbp
ffffffff8000b754:	c3                   	ret
ffffffff8000b755:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff8000b75c:	e8 af 7c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000b761:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8000b765:	48 81 c4 50 02 00 00 	add    rsp,0x250
ffffffff8000b76c:	5d                   	pop    rbp
ffffffff8000b76d:	c3                   	ret
ffffffff8000b76e:	66 90                	xchg   ax,ax

ffffffff8000b770 <math.absCast__anon_3007>:
} {
ffffffff8000b770:	55                   	push   rbp
ffffffff8000b771:	48 89 e5             	mov    rbp,rsp
ffffffff8000b774:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000b778:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff8000b77c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
            const Uint = std.meta.Int(.unsigned, int_info.bits);
            if (x < 0) {
ffffffff8000b780:	48 83 ff 00          	cmp    rdi,0x0
ffffffff8000b784:	7d 12                	jge    ffffffff8000b798 <math.absCast__anon_3007+0x28>
ffffffff8000b786:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
                return ~@bitCast(Uint, x +% -1);
ffffffff8000b78a:	48 83 c0 ff          	add    rax,0xffffffffffffffff
ffffffff8000b78e:	48 83 f0 ff          	xor    rax,0xffffffffffffffff
ffffffff8000b792:	48 83 c4 10          	add    rsp,0x10
ffffffff8000b796:	5d                   	pop    rbp
ffffffff8000b797:	c3                   	ret
ffffffff8000b798:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
            } else {
                return @intCast(Uint, x);
ffffffff8000b79c:	48 83 f8 00          	cmp    rax,0x0
ffffffff8000b7a0:	7c 02                	jl     ffffffff8000b7a4 <math.absCast__anon_3007+0x34>
ffffffff8000b7a2:	eb 1c                	jmp    ffffffff8000b7c0 <math.absCast__anon_3007+0x50>
ffffffff8000b7a4:	48 c7 c7 69 b6 01 80 	mov    rdi,0xffffffff8001b669
ffffffff8000b7ab:	48 c7 c1 38 c2 01 80 	mov    rcx,0xffffffff8001c238
ffffffff8000b7b2:	31 c0                	xor    eax,eax
ffffffff8000b7b4:	89 c2                	mov    edx,eax
ffffffff8000b7b6:	be 32 00 00 00       	mov    esi,0x32
ffffffff8000b7bb:	e8 f0 49 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000b7c0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000b7c4:	48 83 c4 10          	add    rsp,0x10
ffffffff8000b7c8:	5d                   	pop    rbp
ffffffff8000b7c9:	c3                   	ret
ffffffff8000b7ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff8000b7d0 <fmt.formatValue__anon_3009>:
) !void {
ffffffff8000b7d0:	55                   	push   rbp
ffffffff8000b7d1:	48 89 e5             	mov    rbp,rsp
ffffffff8000b7d4:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000b7d8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000b7dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff8000b7e0:	e8 2b 00 00 00       	call   ffffffff8000b810 <fmt.formatIntValue__anon_3011>
ffffffff8000b7e5:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000b7e9:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000b7ee:	75 0a                	jne    ffffffff8000b7fa <fmt.formatValue__anon_3009+0x2a>
ffffffff8000b7f0:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000b7f4:	48 83 c4 20          	add    rsp,0x20
ffffffff8000b7f8:	5d                   	pop    rbp
ffffffff8000b7f9:	c3                   	ret
ffffffff8000b7fa:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff8000b7fe:	e8 0d 7c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000b803:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000b807:	48 83 c4 20          	add    rsp,0x20
ffffffff8000b80b:	5d                   	pop    rbp
ffffffff8000b80c:	c3                   	ret
ffffffff8000b80d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff8000b810 <fmt.formatIntValue__anon_3011>:
) !void {
ffffffff8000b810:	55                   	push   rbp
ffffffff8000b811:	48 89 e5             	mov    rbp,rsp
ffffffff8000b814:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000b818:	49 89 c9             	mov    r9,rcx
ffffffff8000b81b:	49 89 d0             	mov    r8,rdx
ffffffff8000b81e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff8000b822:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8000b826:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return formatInt(int_value, radix, case, options, writer);
ffffffff8000b82a:	31 c0                	xor    eax,eax
ffffffff8000b82c:	ba 10 00 00 00       	mov    edx,0x10
ffffffff8000b831:	31 c9                	xor    ecx,ecx
ffffffff8000b833:	e8 c8 cb ff ff       	call   ffffffff80008400 <fmt.formatInt__anon_2871>
ffffffff8000b838:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000b83c:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000b841:	75 0a                	jne    ffffffff8000b84d <fmt.formatIntValue__anon_3011+0x3d>
ffffffff8000b843:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000b847:	48 83 c4 20          	add    rsp,0x20
ffffffff8000b84b:	5d                   	pop    rbp
ffffffff8000b84c:	c3                   	ret
ffffffff8000b84d:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff8000b851:	e8 ba 7b ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000b856:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000b85a:	48 83 c4 20          	add    rsp,0x20
ffffffff8000b85e:	5d                   	pop    rbp
ffffffff8000b85f:	c3                   	ret

ffffffff8000b860 <fmt.bufPrint__anon_3026>:
    NoSpaceLeft,
};

/// print a Formatter string into `buf`. Actually just a thin wrapper around `format` and `fixedBufferStream`.
/// returns a slice of the bytes printed to.
pub fn bufPrint(buf: []u8, comptime fmt: []const u8, args: anytype) BufPrintError![]u8 {
ffffffff8000b860:	55                   	push   rbp
ffffffff8000b861:	48 89 e5             	mov    rbp,rsp
ffffffff8000b864:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffffffff8000b86b:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
ffffffff8000b872:	48 89 d0             	mov    rax,rdx
ffffffff8000b875:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffffffff8000b87c:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
ffffffff8000b883:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
ffffffff8000b88a:	48 89 ca             	mov    rdx,rcx
ffffffff8000b88d:	48 89 c6             	mov    rsi,rax
ffffffff8000b890:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffffffff8000b894:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000b898:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
    var fbs = std.io.fixedBufferStream(buf);
ffffffff8000b89c:	e8 7f 61 00 00       	call   ffffffff80011a20 <io.fixed_buffer_stream.fixedBufferStream__anon_3211>
ffffffff8000b8a1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8000b8a5:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000b8a9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000b8ad:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff8000b8b1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000b8b5:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff8000b8b9:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff8000b8bd:	48 8d 75 98          	lea    rsi,[rbp-0x68]
    try format(fbs.writer(), fmt, args);
ffffffff8000b8c1:	e8 8a 61 00 00       	call   ffffffff80011a50 <io.fixed_buffer_stream.FixedBufferStream([]u8).writer>
ffffffff8000b8c6:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000b8cd:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff8000b8d4:	48 8d 75 c8          	lea    rsi,[rbp-0x38]
ffffffff8000b8d8:	e8 d3 5d 00 00       	call   ffffffff800116b0 <fmt.format__anon_3248>
ffffffff8000b8dd:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
ffffffff8000b8e1:	66 83 f8 00          	cmp    ax,0x0
ffffffff8000b8e5:	74 42                	je     ffffffff8000b929 <fmt.bufPrint__anon_3026+0xc9>
ffffffff8000b8e7:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000b8ee:	66 8b 45 86          	mov    ax,WORD PTR [rbp-0x7a]
ffffffff8000b8f2:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
ffffffff8000b8f6:	e8 15 7b ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000b8fb:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
ffffffff8000b902:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000b909:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000b90d:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000b910:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff8000b914:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff8000b918:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8000b91c:	48 89 51 10          	mov    QWORD PTR [rcx+0x10],rdx
ffffffff8000b920:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff8000b927:	5d                   	pop    rbp
ffffffff8000b928:	c3                   	ret
ffffffff8000b929:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
    return fbs.getWritten();
ffffffff8000b92d:	e8 3e 61 00 00       	call   ffffffff80011a70 <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten>
ffffffff8000b932:	48 89 c1             	mov    rcx,rax
ffffffff8000b935:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000b93c:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
ffffffff8000b942:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff8000b946:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff8000b94a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff8000b94e:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff8000b951:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff8000b955:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
ffffffff8000b959:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffffffff8000b95d:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffffffff8000b961:	66 83 78 10 00       	cmp    WORD PTR [rax+0x10],0x0
ffffffff8000b966:	75 10                	jne    ffffffff8000b978 <fmt.bufPrint__anon_3026+0x118>
ffffffff8000b968:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000b96f:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff8000b976:	5d                   	pop    rbp
ffffffff8000b977:	c3                   	ret
ffffffff8000b978:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000b97f:	e8 8c 7a ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000b984:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000b98b:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff8000b992:	5d                   	pop    rbp
ffffffff8000b993:	c3                   	ret
ffffffff8000b994:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000b99b:	00 00 00 
ffffffff8000b99e:	66 90                	xchg   ax,ax

ffffffff8000b9a0 <mem.copy__anon_3027>:
pub fn copy(comptime T: type, dest: []T, source: []const T) void {
ffffffff8000b9a0:	55                   	push   rbp
ffffffff8000b9a1:	48 89 e5             	mov    rbp,rsp
ffffffff8000b9a4:	48 81 ec 90 00 00 00 	sub    rsp,0x90
ffffffff8000b9ab:	48 89 c8             	mov    rax,rcx
ffffffff8000b9ae:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff8000b9b2:	48 89 d0             	mov    rax,rdx
ffffffff8000b9b5:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000b9b9:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff8000b9bd:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff8000b9c1:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffffffff8000b9c5:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff8000b9c9:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff8000b9d0:	00 
    for (dest[0..source.len], source) |*d, s|
ffffffff8000b9d1:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
ffffffff8000b9d5:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff8000b9d9:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
ffffffff8000b9dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000b9e1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff8000b9e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000b9e9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff8000b9ed:	31 c0                	xor    eax,eax
ffffffff8000b9ef:	48 39 c8             	cmp    rax,rcx
ffffffff8000b9f2:	77 02                	ja     ffffffff8000b9f6 <mem.copy__anon_3027+0x56>
ffffffff8000b9f4:	eb 0f                	jmp    ffffffff8000ba05 <mem.copy__anon_3027+0x65>
ffffffff8000b9f6:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff8000b9fa:	31 c0                	xor    eax,eax
ffffffff8000b9fc:	31 c0                	xor    eax,eax
ffffffff8000b9fe:	89 c7                	mov    edi,eax
ffffffff8000ba00:	e8 0b 49 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000ba05:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8000ba09:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
ffffffff8000ba0d:	48 39 c8             	cmp    rax,rcx
ffffffff8000ba10:	77 02                	ja     ffffffff8000ba14 <mem.copy__anon_3027+0x74>
ffffffff8000ba12:	eb 0d                	jmp    ffffffff8000ba21 <mem.copy__anon_3027+0x81>
ffffffff8000ba14:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff8000ba18:	48 8b 7d a0          	mov    rdi,QWORD PTR [rbp-0x60]
ffffffff8000ba1c:	e8 af 47 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000ba21:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
ffffffff8000ba25:	31 c0                	xor    eax,eax
ffffffff8000ba27:	48 39 c8             	cmp    rax,rcx
ffffffff8000ba2a:	77 02                	ja     ffffffff8000ba2e <mem.copy__anon_3027+0x8e>
ffffffff8000ba2c:	eb 0f                	jmp    ffffffff8000ba3d <mem.copy__anon_3027+0x9d>
ffffffff8000ba2e:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
ffffffff8000ba32:	31 c0                	xor    eax,eax
ffffffff8000ba34:	31 c0                	xor    eax,eax
ffffffff8000ba36:	89 c7                	mov    edi,eax
ffffffff8000ba38:	e8 93 47 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000ba3d:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
ffffffff8000ba41:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffffffff8000ba45:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8000ba49:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff8000ba4d:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
ffffffff8000ba51:	48 39 c8             	cmp    rax,rcx
ffffffff8000ba54:	75 02                	jne    ffffffff8000ba58 <mem.copy__anon_3027+0xb8>
ffffffff8000ba56:	eb 1c                	jmp    ffffffff8000ba74 <mem.copy__anon_3027+0xd4>
ffffffff8000ba58:	48 c7 c7 c4 b6 01 80 	mov    rdi,0xffffffff8001b6c4
ffffffff8000ba5f:	48 c7 c1 48 c2 01 80 	mov    rcx,0xffffffff8001c248
ffffffff8000ba66:	31 c0                	xor    eax,eax
ffffffff8000ba68:	89 c2                	mov    edx,eax
ffffffff8000ba6a:	be 2c 00 00 00       	mov    esi,0x2c
ffffffff8000ba6f:	e8 3c 47 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000ba74:	eb 00                	jmp    ffffffff8000ba76 <mem.copy__anon_3027+0xd6>
ffffffff8000ba76:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff8000ba7a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000ba7e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff8000ba85:	48 39 c8             	cmp    rax,rcx
ffffffff8000ba88:	73 24                	jae    ffffffff8000baae <mem.copy__anon_3027+0x10e>
ffffffff8000ba8a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff8000ba8e:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffffffff8000ba95:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffffffff8000ba99:	48 89 c6             	mov    rsi,rax
ffffffff8000ba9c:	48 01 ce             	add    rsi,rcx
ffffffff8000ba9f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff8000baa3:	8a 14 0a             	mov    dl,BYTE PTR [rdx+rcx*1]
ffffffff8000baa6:	88 55 ff             	mov    BYTE PTR [rbp-0x1],dl
        d.* = s;
ffffffff8000baa9:	88 14 08             	mov    BYTE PTR [rax+rcx*1],dl
ffffffff8000baac:	eb 02                	jmp    ffffffff8000bab0 <mem.copy__anon_3027+0x110>
ffffffff8000baae:	eb 11                	jmp    ffffffff8000bac1 <mem.copy__anon_3027+0x121>
ffffffff8000bab0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff8000bab7:	48 83 c0 01          	add    rax,0x1
ffffffff8000babb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000babf:	eb b5                	jmp    ffffffff8000ba76 <mem.copy__anon_3027+0xd6>
ffffffff8000bac1:	48 81 c4 90 00 00 00 	add    rsp,0x90
ffffffff8000bac8:	5d                   	pop    rbp
ffffffff8000bac9:	c3                   	ret
ffffffff8000baca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff8000bad0 <catcher>:
    asm volatile (
ffffffff8000bad0:	48 89 e7             	mov    rdi,rsp
ffffffff8000bad3:	e8 b8 01 00 00       	call   ffffffff8000bc90 <handler_fn>
ffffffff8000bad8:	58                   	pop    rax
ffffffff8000bad9:	48 cf                	iretq
    unreachable;
ffffffff8000badb:	48 c7 c7 6b b3 01 80 	mov    rdi,0xffffffff8001b36b
ffffffff8000bae2:	48 c7 c1 58 bf 01 80 	mov    rcx,0xffffffff8001bf58
ffffffff8000bae9:	31 c0                	xor    eax,eax
ffffffff8000baeb:	89 c2                	mov    edx,eax
ffffffff8000baed:	be 18 00 00 00       	mov    esi,0x18
ffffffff8000baf2:	e8 b9 46 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000baf7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000bafe:	00 00 

ffffffff8000bb00 <fmt.format__anon_3030>:
) !void {
ffffffff8000bb00:	55                   	push   rbp
ffffffff8000bb01:	48 89 e5             	mov    rbp,rsp
ffffffff8000bb04:	48 83 ec 40          	sub    rsp,0x40
ffffffff8000bb08:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff8000bb0c:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff8000bb10:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000bb14:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff8000bb17:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000bb1b:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff8000bb1e:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff8000bb21:	b0 01                	mov    al,0x1
ffffffff8000bb23:	a8 01                	test   al,0x1
ffffffff8000bb25:	75 02                	jne    ffffffff8000bb29 <fmt.format__anon_3030+0x29>
ffffffff8000bb27:	eb 02                	jmp    ffffffff8000bb2b <fmt.format__anon_3030+0x2b>
ffffffff8000bb29:	eb 10                	jmp    ffffffff8000bb3b <fmt.format__anon_3030+0x3b>
ffffffff8000bb2b:	31 c0                	xor    eax,eax
ffffffff8000bb2d:	31 c0                	xor    eax,eax
ffffffff8000bb2f:	89 c7                	mov    edi,eax
ffffffff8000bb31:	be 0b 00 00 00       	mov    esi,0xb
ffffffff8000bb36:	e8 d5 47 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000bb3b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000bb3f:	48 c7 c2 8e b4 01 80 	mov    rdx,0xffffffff8001b48e
ffffffff8000bb46:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff8000bb4a:	b9 0b 00 00 00       	mov    ecx,0xb
ffffffff8000bb4f:	e8 fc 47 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000bb54:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000bb58:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8000bb5c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff8000bb60:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff8000bb67:	00 
        try formatType(
ffffffff8000bb68:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff8000bb6b:	48 c7 c2 f8 a5 01 80 	mov    rdx,0xffffffff8001a5f8
ffffffff8000bb72:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff8000bb78:	e8 53 00 00 00       	call   ffffffff8000bbd0 <fmt.formatType__anon_3042>
ffffffff8000bb7d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8000bb81:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000bb84:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff8000bb88:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000bb8b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000bb8e:	b0 01                	mov    al,0x1
ffffffff8000bb90:	a8 01                	test   al,0x1
ffffffff8000bb92:	75 02                	jne    ffffffff8000bb96 <fmt.format__anon_3030+0x96>
ffffffff8000bb94:	eb 02                	jmp    ffffffff8000bb98 <fmt.format__anon_3030+0x98>
ffffffff8000bb96:	eb 0f                	jmp    ffffffff8000bba7 <fmt.format__anon_3030+0xa7>
ffffffff8000bb98:	bf 0d 00 00 00       	mov    edi,0xd
ffffffff8000bb9d:	be 0e 00 00 00       	mov    esi,0xe
ffffffff8000bba2:	e8 69 47 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000bba7:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000bbab:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000bbaf:	48 c7 c2 9b b4 01 80 	mov    rdx,0xffffffff8001b49b
ffffffff8000bbb6:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff8000bbbb:	e8 90 47 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff8000bbc0:	31 c0                	xor    eax,eax
ffffffff8000bbc2:	48 83 c4 40          	add    rsp,0x40
ffffffff8000bbc6:	5d                   	pop    rbp
ffffffff8000bbc7:	c3                   	ret
ffffffff8000bbc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000bbcf:	00 

ffffffff8000bbd0 <fmt.formatType__anon_3042>:
) @TypeOf(writer).Error!void {
ffffffff8000bbd0:	55                   	push   rbp
ffffffff8000bbd1:	48 89 e5             	mov    rbp,rsp
ffffffff8000bbd4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000bbd8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000bbdc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000bbe0:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff8000bbe4:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff8000bbeb:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff8000bbee:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000bbf2:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000bbf9:	00 
                    return formatType(value.*, actual_fmt, options, writer, max_depth);
ffffffff8000bbfa:	e8 11 5f 00 00       	call   ffffffff80011b10 <fmt.formatType__anon_3295>
ffffffff8000bbff:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000bc03:	b0 01                	mov    al,0x1
ffffffff8000bc05:	a8 01                	test   al,0x1
ffffffff8000bc07:	75 02                	jne    ffffffff8000bc0b <fmt.formatType__anon_3042+0x3b>
ffffffff8000bc09:	eb 0a                	jmp    ffffffff8000bc15 <fmt.formatType__anon_3042+0x45>
ffffffff8000bc0b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000bc0f:	48 83 c4 30          	add    rsp,0x30
ffffffff8000bc13:	5d                   	pop    rbp
ffffffff8000bc14:	c3                   	ret
ffffffff8000bc15:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000bc19:	e8 f2 77 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000bc1e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000bc22:	48 83 c4 30          	add    rsp,0x30
ffffffff8000bc26:	5d                   	pop    rbp
ffffffff8000bc27:	c3                   	ret
ffffffff8000bc28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000bc2f:	00 

ffffffff8000bc30 <main.debug_print__anon_3029>:
pub fn debug_print(comptime fmt: []const u8, args: anytype) !void {
ffffffff8000bc30:	55                   	push   rbp
ffffffff8000bc31:	48 89 e5             	mov    rbp,rsp
ffffffff8000bc34:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000bc38:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000bc3c:	48 89 fe             	mov    rsi,rdi
ffffffff8000bc3f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    _ = try serial_port.write_message("[KERNEL] ");
ffffffff8000bc43:	48 c7 c2 22 a6 01 80 	mov    rdx,0xffffffff8001a622
ffffffff8000bc4a:	48 c7 c1 cc b1 01 80 	mov    rcx,0xffffffff8001b1cc
ffffffff8000bc51:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff8000bc55:	41 b8 09 00 00 00    	mov    r8d,0x9
ffffffff8000bc5b:	e8 e0 48 ff ff       	call   ffffffff80000540 <ports.SerialPort.write_message>
    try std.fmt.format(serial_port.writer(), fmt, args);
ffffffff8000bc60:	48 c7 c6 2e a6 01 80 	mov    rsi,0xffffffff8001a62e
ffffffff8000bc67:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff8000bc6b:	e8 80 49 ff ff       	call   ffffffff800005f0 <ports.SerialPort.writer>
ffffffff8000bc70:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000bc74:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff8000bc78:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000bc7c:	e8 7f fe ff ff       	call   ffffffff8000bb00 <fmt.format__anon_3030>
ffffffff8000bc81:	31 c0                	xor    eax,eax
ffffffff8000bc83:	48 83 c4 30          	add    rsp,0x30
ffffffff8000bc87:	5d                   	pop    rbp
ffffffff8000bc88:	c3                   	ret
ffffffff8000bc89:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff8000bc90 <handler_fn>:
export fn handler_fn(frame: *Frame) void {
ffffffff8000bc90:	55                   	push   rbp
ffffffff8000bc91:	48 89 e5             	mov    rbp,rsp
ffffffff8000bc94:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffffffff8000bc9b:	48 89 bd d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdi
ffffffff8000bca2:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
ffffffff8000bca9:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
ffffffff8000bcb0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000bcb4:	48 c7 45 f0 20 00 00 	mov    QWORD PTR [rbp-0x10],0x20
ffffffff8000bcbb:	00 
ffffffff8000bcbc:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff8000bcc3:	00 
    try debug_print("Interrupt: {}\n", .{frame});
ffffffff8000bcc4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000bcc8:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff8000bccc:	48 8d 75 f8          	lea    rsi,[rbp-0x8]
ffffffff8000bcd0:	e8 5b ff ff ff       	call   ffffffff8000bc30 <main.debug_print__anon_3029>
ffffffff8000bcd5:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
    while (frame.idx != 3) {
ffffffff8000bcdc:	48 83 38 03          	cmp    QWORD PTR [rax],0x3
ffffffff8000bce0:	74 03                	je     ffffffff8000bce5 <handler_fn+0x55>
        asm volatile ("hlt");
ffffffff8000bce2:	f4                   	hlt
ffffffff8000bce3:	eb 02                	jmp    ffffffff8000bce7 <handler_fn+0x57>
ffffffff8000bce5:	eb 02                	jmp    ffffffff8000bce9 <handler_fn+0x59>
ffffffff8000bce7:	eb ec                	jmp    ffffffff8000bcd5 <handler_fn+0x45>
ffffffff8000bce9:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff8000bcf0:	5d                   	pop    rbp
ffffffff8000bcf1:	c3                   	ret
ffffffff8000bcf2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000bcf9:	00 00 00 
ffffffff8000bcfc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff8000bd00 <idt.generate_trampolines>:
fn generate_trampolines() [handlers_amount]*const Trampoline {
ffffffff8000bd00:	55                   	push   rbp
ffffffff8000bd01:	48 89 e5             	mov    rbp,rsp
ffffffff8000bd04:	b8 10 10 00 00       	mov    eax,0x1010
ffffffff8000bd09:	e8 e2 c0 00 00       	call   ffffffff80017df0 <__zig_probe_stack>
ffffffff8000bd0e:	48 29 c4             	sub    rsp,rax
ffffffff8000bd11:	48 89 bd f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rdi
ffffffff8000bd18:	48 89 bd f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rdi
ffffffff8000bd1f:	48 8d bd 00 f0 ff ff 	lea    rdi,[rbp-0x1000]
ffffffff8000bd26:	be aa 00 00 00       	mov    esi,0xaa
ffffffff8000bd2b:	ba 00 08 00 00       	mov    edx,0x800
    var result: [handlers_amount]*const Trampoline = undefined;
ffffffff8000bd30:	e8 cb c1 00 00       	call   ffffffff80017f00 <memset>
ffffffff8000bd35:	48 8b bd f0 ef ff ff 	mov    rdi,QWORD PTR [rbp-0x1010]
    inline for (0..256) |interruptIdx| {
ffffffff8000bd3c:	48 c7 85 00 f8 ff ff 	mov    QWORD PTR [rbp-0x800],0x0
ffffffff8000bd43:	00 00 00 00 
        result[interruptIdx] = comptime make_trampoline(interruptIdx);
ffffffff8000bd47:	48 c7 85 00 f0 ff ff 	mov    QWORD PTR [rbp-0x1000],0xffffffff8000d330
ffffffff8000bd4e:	30 d3 00 80 
ffffffff8000bd52:	48 c7 85 08 f8 ff ff 	mov    QWORD PTR [rbp-0x7f8],0x1
ffffffff8000bd59:	01 00 00 00 
ffffffff8000bd5d:	48 c7 85 08 f0 ff ff 	mov    QWORD PTR [rbp-0xff8],0xffffffff8000d340
ffffffff8000bd64:	40 d3 00 80 
ffffffff8000bd68:	48 c7 85 10 f8 ff ff 	mov    QWORD PTR [rbp-0x7f0],0x2
ffffffff8000bd6f:	02 00 00 00 
ffffffff8000bd73:	48 c7 85 10 f0 ff ff 	mov    QWORD PTR [rbp-0xff0],0xffffffff8000d350
ffffffff8000bd7a:	50 d3 00 80 
ffffffff8000bd7e:	48 c7 85 18 f8 ff ff 	mov    QWORD PTR [rbp-0x7e8],0x3
ffffffff8000bd85:	03 00 00 00 
ffffffff8000bd89:	48 c7 85 18 f0 ff ff 	mov    QWORD PTR [rbp-0xfe8],0xffffffff8000d360
ffffffff8000bd90:	60 d3 00 80 
ffffffff8000bd94:	48 c7 85 20 f8 ff ff 	mov    QWORD PTR [rbp-0x7e0],0x4
ffffffff8000bd9b:	04 00 00 00 
ffffffff8000bd9f:	48 c7 85 20 f0 ff ff 	mov    QWORD PTR [rbp-0xfe0],0xffffffff8000d370
ffffffff8000bda6:	70 d3 00 80 
ffffffff8000bdaa:	48 c7 85 28 f8 ff ff 	mov    QWORD PTR [rbp-0x7d8],0x5
ffffffff8000bdb1:	05 00 00 00 
ffffffff8000bdb5:	48 c7 85 28 f0 ff ff 	mov    QWORD PTR [rbp-0xfd8],0xffffffff8000d380
ffffffff8000bdbc:	80 d3 00 80 
ffffffff8000bdc0:	48 c7 85 30 f8 ff ff 	mov    QWORD PTR [rbp-0x7d0],0x6
ffffffff8000bdc7:	06 00 00 00 
ffffffff8000bdcb:	48 c7 85 30 f0 ff ff 	mov    QWORD PTR [rbp-0xfd0],0xffffffff8000d390
ffffffff8000bdd2:	90 d3 00 80 
ffffffff8000bdd6:	48 c7 85 38 f8 ff ff 	mov    QWORD PTR [rbp-0x7c8],0x7
ffffffff8000bddd:	07 00 00 00 
ffffffff8000bde1:	48 c7 85 38 f0 ff ff 	mov    QWORD PTR [rbp-0xfc8],0xffffffff8000d3a0
ffffffff8000bde8:	a0 d3 00 80 
ffffffff8000bdec:	48 c7 85 40 f8 ff ff 	mov    QWORD PTR [rbp-0x7c0],0x8
ffffffff8000bdf3:	08 00 00 00 
ffffffff8000bdf7:	48 c7 85 40 f0 ff ff 	mov    QWORD PTR [rbp-0xfc0],0xffffffff8000d3b0
ffffffff8000bdfe:	b0 d3 00 80 
ffffffff8000be02:	48 c7 85 48 f8 ff ff 	mov    QWORD PTR [rbp-0x7b8],0x9
ffffffff8000be09:	09 00 00 00 
ffffffff8000be0d:	48 c7 85 48 f0 ff ff 	mov    QWORD PTR [rbp-0xfb8],0xffffffff8000d3c0
ffffffff8000be14:	c0 d3 00 80 
ffffffff8000be18:	48 c7 85 50 f8 ff ff 	mov    QWORD PTR [rbp-0x7b0],0xa
ffffffff8000be1f:	0a 00 00 00 
ffffffff8000be23:	48 c7 85 50 f0 ff ff 	mov    QWORD PTR [rbp-0xfb0],0xffffffff8000d3d0
ffffffff8000be2a:	d0 d3 00 80 
ffffffff8000be2e:	48 c7 85 58 f8 ff ff 	mov    QWORD PTR [rbp-0x7a8],0xb
ffffffff8000be35:	0b 00 00 00 
ffffffff8000be39:	48 c7 85 58 f0 ff ff 	mov    QWORD PTR [rbp-0xfa8],0xffffffff8000d3e0
ffffffff8000be40:	e0 d3 00 80 
ffffffff8000be44:	48 c7 85 60 f8 ff ff 	mov    QWORD PTR [rbp-0x7a0],0xc
ffffffff8000be4b:	0c 00 00 00 
ffffffff8000be4f:	48 c7 85 60 f0 ff ff 	mov    QWORD PTR [rbp-0xfa0],0xffffffff8000d3f0
ffffffff8000be56:	f0 d3 00 80 
ffffffff8000be5a:	48 c7 85 68 f8 ff ff 	mov    QWORD PTR [rbp-0x798],0xd
ffffffff8000be61:	0d 00 00 00 
ffffffff8000be65:	48 c7 85 68 f0 ff ff 	mov    QWORD PTR [rbp-0xf98],0xffffffff8000d400
ffffffff8000be6c:	00 d4 00 80 
ffffffff8000be70:	48 c7 85 70 f8 ff ff 	mov    QWORD PTR [rbp-0x790],0xe
ffffffff8000be77:	0e 00 00 00 
ffffffff8000be7b:	48 c7 85 70 f0 ff ff 	mov    QWORD PTR [rbp-0xf90],0xffffffff8000d410
ffffffff8000be82:	10 d4 00 80 
ffffffff8000be86:	48 c7 85 78 f8 ff ff 	mov    QWORD PTR [rbp-0x788],0xf
ffffffff8000be8d:	0f 00 00 00 
ffffffff8000be91:	48 c7 85 78 f0 ff ff 	mov    QWORD PTR [rbp-0xf88],0xffffffff8000d420
ffffffff8000be98:	20 d4 00 80 
ffffffff8000be9c:	48 c7 85 80 f8 ff ff 	mov    QWORD PTR [rbp-0x780],0x10
ffffffff8000bea3:	10 00 00 00 
ffffffff8000bea7:	48 c7 85 80 f0 ff ff 	mov    QWORD PTR [rbp-0xf80],0xffffffff8000d430
ffffffff8000beae:	30 d4 00 80 
ffffffff8000beb2:	48 c7 85 88 f8 ff ff 	mov    QWORD PTR [rbp-0x778],0x11
ffffffff8000beb9:	11 00 00 00 
ffffffff8000bebd:	48 c7 85 88 f0 ff ff 	mov    QWORD PTR [rbp-0xf78],0xffffffff8000d440
ffffffff8000bec4:	40 d4 00 80 
ffffffff8000bec8:	48 c7 85 90 f8 ff ff 	mov    QWORD PTR [rbp-0x770],0x12
ffffffff8000becf:	12 00 00 00 
ffffffff8000bed3:	48 c7 85 90 f0 ff ff 	mov    QWORD PTR [rbp-0xf70],0xffffffff8000d450
ffffffff8000beda:	50 d4 00 80 
ffffffff8000bede:	48 c7 85 98 f8 ff ff 	mov    QWORD PTR [rbp-0x768],0x13
ffffffff8000bee5:	13 00 00 00 
ffffffff8000bee9:	48 c7 85 98 f0 ff ff 	mov    QWORD PTR [rbp-0xf68],0xffffffff8000d460
ffffffff8000bef0:	60 d4 00 80 
ffffffff8000bef4:	48 c7 85 a0 f8 ff ff 	mov    QWORD PTR [rbp-0x760],0x14
ffffffff8000befb:	14 00 00 00 
ffffffff8000beff:	48 c7 85 a0 f0 ff ff 	mov    QWORD PTR [rbp-0xf60],0xffffffff8000d470
ffffffff8000bf06:	70 d4 00 80 
ffffffff8000bf0a:	48 c7 85 a8 f8 ff ff 	mov    QWORD PTR [rbp-0x758],0x15
ffffffff8000bf11:	15 00 00 00 
ffffffff8000bf15:	48 c7 85 a8 f0 ff ff 	mov    QWORD PTR [rbp-0xf58],0xffffffff8000d480
ffffffff8000bf1c:	80 d4 00 80 
ffffffff8000bf20:	48 c7 85 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],0x16
ffffffff8000bf27:	16 00 00 00 
ffffffff8000bf2b:	48 c7 85 b0 f0 ff ff 	mov    QWORD PTR [rbp-0xf50],0xffffffff8000d490
ffffffff8000bf32:	90 d4 00 80 
ffffffff8000bf36:	48 c7 85 b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],0x17
ffffffff8000bf3d:	17 00 00 00 
ffffffff8000bf41:	48 c7 85 b8 f0 ff ff 	mov    QWORD PTR [rbp-0xf48],0xffffffff8000d4a0
ffffffff8000bf48:	a0 d4 00 80 
ffffffff8000bf4c:	48 c7 85 c0 f8 ff ff 	mov    QWORD PTR [rbp-0x740],0x18
ffffffff8000bf53:	18 00 00 00 
ffffffff8000bf57:	48 c7 85 c0 f0 ff ff 	mov    QWORD PTR [rbp-0xf40],0xffffffff8000d4b0
ffffffff8000bf5e:	b0 d4 00 80 
ffffffff8000bf62:	48 c7 85 c8 f8 ff ff 	mov    QWORD PTR [rbp-0x738],0x19
ffffffff8000bf69:	19 00 00 00 
ffffffff8000bf6d:	48 c7 85 c8 f0 ff ff 	mov    QWORD PTR [rbp-0xf38],0xffffffff8000d4c0
ffffffff8000bf74:	c0 d4 00 80 
ffffffff8000bf78:	48 c7 85 d0 f8 ff ff 	mov    QWORD PTR [rbp-0x730],0x1a
ffffffff8000bf7f:	1a 00 00 00 
ffffffff8000bf83:	48 c7 85 d0 f0 ff ff 	mov    QWORD PTR [rbp-0xf30],0xffffffff8000d4d0
ffffffff8000bf8a:	d0 d4 00 80 
ffffffff8000bf8e:	48 c7 85 d8 f8 ff ff 	mov    QWORD PTR [rbp-0x728],0x1b
ffffffff8000bf95:	1b 00 00 00 
ffffffff8000bf99:	48 c7 85 d8 f0 ff ff 	mov    QWORD PTR [rbp-0xf28],0xffffffff8000d4e0
ffffffff8000bfa0:	e0 d4 00 80 
ffffffff8000bfa4:	48 c7 85 e0 f8 ff ff 	mov    QWORD PTR [rbp-0x720],0x1c
ffffffff8000bfab:	1c 00 00 00 
ffffffff8000bfaf:	48 c7 85 e0 f0 ff ff 	mov    QWORD PTR [rbp-0xf20],0xffffffff8000d4f0
ffffffff8000bfb6:	f0 d4 00 80 
ffffffff8000bfba:	48 c7 85 e8 f8 ff ff 	mov    QWORD PTR [rbp-0x718],0x1d
ffffffff8000bfc1:	1d 00 00 00 
ffffffff8000bfc5:	48 c7 85 e8 f0 ff ff 	mov    QWORD PTR [rbp-0xf18],0xffffffff8000d500
ffffffff8000bfcc:	00 d5 00 80 
ffffffff8000bfd0:	48 c7 85 f0 f8 ff ff 	mov    QWORD PTR [rbp-0x710],0x1e
ffffffff8000bfd7:	1e 00 00 00 
ffffffff8000bfdb:	48 c7 85 f0 f0 ff ff 	mov    QWORD PTR [rbp-0xf10],0xffffffff8000d510
ffffffff8000bfe2:	10 d5 00 80 
ffffffff8000bfe6:	48 c7 85 f8 f8 ff ff 	mov    QWORD PTR [rbp-0x708],0x1f
ffffffff8000bfed:	1f 00 00 00 
ffffffff8000bff1:	48 c7 85 f8 f0 ff ff 	mov    QWORD PTR [rbp-0xf08],0xffffffff8000d520
ffffffff8000bff8:	20 d5 00 80 
ffffffff8000bffc:	48 c7 85 00 f9 ff ff 	mov    QWORD PTR [rbp-0x700],0x20
ffffffff8000c003:	20 00 00 00 
ffffffff8000c007:	48 c7 85 00 f1 ff ff 	mov    QWORD PTR [rbp-0xf00],0xffffffff8000d530
ffffffff8000c00e:	30 d5 00 80 
ffffffff8000c012:	48 c7 85 08 f9 ff ff 	mov    QWORD PTR [rbp-0x6f8],0x21
ffffffff8000c019:	21 00 00 00 
ffffffff8000c01d:	48 c7 85 08 f1 ff ff 	mov    QWORD PTR [rbp-0xef8],0xffffffff8000d540
ffffffff8000c024:	40 d5 00 80 
ffffffff8000c028:	48 c7 85 10 f9 ff ff 	mov    QWORD PTR [rbp-0x6f0],0x22
ffffffff8000c02f:	22 00 00 00 
ffffffff8000c033:	48 c7 85 10 f1 ff ff 	mov    QWORD PTR [rbp-0xef0],0xffffffff8000d550
ffffffff8000c03a:	50 d5 00 80 
ffffffff8000c03e:	48 c7 85 18 f9 ff ff 	mov    QWORD PTR [rbp-0x6e8],0x23
ffffffff8000c045:	23 00 00 00 
ffffffff8000c049:	48 c7 85 18 f1 ff ff 	mov    QWORD PTR [rbp-0xee8],0xffffffff8000d560
ffffffff8000c050:	60 d5 00 80 
ffffffff8000c054:	48 c7 85 20 f9 ff ff 	mov    QWORD PTR [rbp-0x6e0],0x24
ffffffff8000c05b:	24 00 00 00 
ffffffff8000c05f:	48 c7 85 20 f1 ff ff 	mov    QWORD PTR [rbp-0xee0],0xffffffff8000d570
ffffffff8000c066:	70 d5 00 80 
ffffffff8000c06a:	48 c7 85 28 f9 ff ff 	mov    QWORD PTR [rbp-0x6d8],0x25
ffffffff8000c071:	25 00 00 00 
ffffffff8000c075:	48 c7 85 28 f1 ff ff 	mov    QWORD PTR [rbp-0xed8],0xffffffff8000d580
ffffffff8000c07c:	80 d5 00 80 
ffffffff8000c080:	48 c7 85 30 f9 ff ff 	mov    QWORD PTR [rbp-0x6d0],0x26
ffffffff8000c087:	26 00 00 00 
ffffffff8000c08b:	48 c7 85 30 f1 ff ff 	mov    QWORD PTR [rbp-0xed0],0xffffffff8000d590
ffffffff8000c092:	90 d5 00 80 
ffffffff8000c096:	48 c7 85 38 f9 ff ff 	mov    QWORD PTR [rbp-0x6c8],0x27
ffffffff8000c09d:	27 00 00 00 
ffffffff8000c0a1:	48 c7 85 38 f1 ff ff 	mov    QWORD PTR [rbp-0xec8],0xffffffff8000d5a0
ffffffff8000c0a8:	a0 d5 00 80 
ffffffff8000c0ac:	48 c7 85 40 f9 ff ff 	mov    QWORD PTR [rbp-0x6c0],0x28
ffffffff8000c0b3:	28 00 00 00 
ffffffff8000c0b7:	48 c7 85 40 f1 ff ff 	mov    QWORD PTR [rbp-0xec0],0xffffffff8000d5b0
ffffffff8000c0be:	b0 d5 00 80 
ffffffff8000c0c2:	48 c7 85 48 f9 ff ff 	mov    QWORD PTR [rbp-0x6b8],0x29
ffffffff8000c0c9:	29 00 00 00 
ffffffff8000c0cd:	48 c7 85 48 f1 ff ff 	mov    QWORD PTR [rbp-0xeb8],0xffffffff8000d5c0
ffffffff8000c0d4:	c0 d5 00 80 
ffffffff8000c0d8:	48 c7 85 50 f9 ff ff 	mov    QWORD PTR [rbp-0x6b0],0x2a
ffffffff8000c0df:	2a 00 00 00 
ffffffff8000c0e3:	48 c7 85 50 f1 ff ff 	mov    QWORD PTR [rbp-0xeb0],0xffffffff8000d5d0
ffffffff8000c0ea:	d0 d5 00 80 
ffffffff8000c0ee:	48 c7 85 58 f9 ff ff 	mov    QWORD PTR [rbp-0x6a8],0x2b
ffffffff8000c0f5:	2b 00 00 00 
ffffffff8000c0f9:	48 c7 85 58 f1 ff ff 	mov    QWORD PTR [rbp-0xea8],0xffffffff8000d5e0
ffffffff8000c100:	e0 d5 00 80 
ffffffff8000c104:	48 c7 85 60 f9 ff ff 	mov    QWORD PTR [rbp-0x6a0],0x2c
ffffffff8000c10b:	2c 00 00 00 
ffffffff8000c10f:	48 c7 85 60 f1 ff ff 	mov    QWORD PTR [rbp-0xea0],0xffffffff8000d5f0
ffffffff8000c116:	f0 d5 00 80 
ffffffff8000c11a:	48 c7 85 68 f9 ff ff 	mov    QWORD PTR [rbp-0x698],0x2d
ffffffff8000c121:	2d 00 00 00 
ffffffff8000c125:	48 c7 85 68 f1 ff ff 	mov    QWORD PTR [rbp-0xe98],0xffffffff8000d600
ffffffff8000c12c:	00 d6 00 80 
ffffffff8000c130:	48 c7 85 70 f9 ff ff 	mov    QWORD PTR [rbp-0x690],0x2e
ffffffff8000c137:	2e 00 00 00 
ffffffff8000c13b:	48 c7 85 70 f1 ff ff 	mov    QWORD PTR [rbp-0xe90],0xffffffff8000d610
ffffffff8000c142:	10 d6 00 80 
ffffffff8000c146:	48 c7 85 78 f9 ff ff 	mov    QWORD PTR [rbp-0x688],0x2f
ffffffff8000c14d:	2f 00 00 00 
ffffffff8000c151:	48 c7 85 78 f1 ff ff 	mov    QWORD PTR [rbp-0xe88],0xffffffff8000d620
ffffffff8000c158:	20 d6 00 80 
ffffffff8000c15c:	48 c7 85 80 f9 ff ff 	mov    QWORD PTR [rbp-0x680],0x30
ffffffff8000c163:	30 00 00 00 
ffffffff8000c167:	48 c7 85 80 f1 ff ff 	mov    QWORD PTR [rbp-0xe80],0xffffffff8000d630
ffffffff8000c16e:	30 d6 00 80 
ffffffff8000c172:	48 c7 85 88 f9 ff ff 	mov    QWORD PTR [rbp-0x678],0x31
ffffffff8000c179:	31 00 00 00 
ffffffff8000c17d:	48 c7 85 88 f1 ff ff 	mov    QWORD PTR [rbp-0xe78],0xffffffff8000d640
ffffffff8000c184:	40 d6 00 80 
ffffffff8000c188:	48 c7 85 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],0x32
ffffffff8000c18f:	32 00 00 00 
ffffffff8000c193:	48 c7 85 90 f1 ff ff 	mov    QWORD PTR [rbp-0xe70],0xffffffff8000d650
ffffffff8000c19a:	50 d6 00 80 
ffffffff8000c19e:	48 c7 85 98 f9 ff ff 	mov    QWORD PTR [rbp-0x668],0x33
ffffffff8000c1a5:	33 00 00 00 
ffffffff8000c1a9:	48 c7 85 98 f1 ff ff 	mov    QWORD PTR [rbp-0xe68],0xffffffff8000d660
ffffffff8000c1b0:	60 d6 00 80 
ffffffff8000c1b4:	48 c7 85 a0 f9 ff ff 	mov    QWORD PTR [rbp-0x660],0x34
ffffffff8000c1bb:	34 00 00 00 
ffffffff8000c1bf:	48 c7 85 a0 f1 ff ff 	mov    QWORD PTR [rbp-0xe60],0xffffffff8000d670
ffffffff8000c1c6:	70 d6 00 80 
ffffffff8000c1ca:	48 c7 85 a8 f9 ff ff 	mov    QWORD PTR [rbp-0x658],0x35
ffffffff8000c1d1:	35 00 00 00 
ffffffff8000c1d5:	48 c7 85 a8 f1 ff ff 	mov    QWORD PTR [rbp-0xe58],0xffffffff8000d680
ffffffff8000c1dc:	80 d6 00 80 
ffffffff8000c1e0:	48 c7 85 b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],0x36
ffffffff8000c1e7:	36 00 00 00 
ffffffff8000c1eb:	48 c7 85 b0 f1 ff ff 	mov    QWORD PTR [rbp-0xe50],0xffffffff8000d690
ffffffff8000c1f2:	90 d6 00 80 
ffffffff8000c1f6:	48 c7 85 b8 f9 ff ff 	mov    QWORD PTR [rbp-0x648],0x37
ffffffff8000c1fd:	37 00 00 00 
ffffffff8000c201:	48 c7 85 b8 f1 ff ff 	mov    QWORD PTR [rbp-0xe48],0xffffffff8000d6a0
ffffffff8000c208:	a0 d6 00 80 
ffffffff8000c20c:	48 c7 85 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],0x38
ffffffff8000c213:	38 00 00 00 
ffffffff8000c217:	48 c7 85 c0 f1 ff ff 	mov    QWORD PTR [rbp-0xe40],0xffffffff8000d6b0
ffffffff8000c21e:	b0 d6 00 80 
ffffffff8000c222:	48 c7 85 c8 f9 ff ff 	mov    QWORD PTR [rbp-0x638],0x39
ffffffff8000c229:	39 00 00 00 
ffffffff8000c22d:	48 c7 85 c8 f1 ff ff 	mov    QWORD PTR [rbp-0xe38],0xffffffff8000d6c0
ffffffff8000c234:	c0 d6 00 80 
ffffffff8000c238:	48 c7 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],0x3a
ffffffff8000c23f:	3a 00 00 00 
ffffffff8000c243:	48 c7 85 d0 f1 ff ff 	mov    QWORD PTR [rbp-0xe30],0xffffffff8000d6d0
ffffffff8000c24a:	d0 d6 00 80 
ffffffff8000c24e:	48 c7 85 d8 f9 ff ff 	mov    QWORD PTR [rbp-0x628],0x3b
ffffffff8000c255:	3b 00 00 00 
ffffffff8000c259:	48 c7 85 d8 f1 ff ff 	mov    QWORD PTR [rbp-0xe28],0xffffffff8000d6e0
ffffffff8000c260:	e0 d6 00 80 
ffffffff8000c264:	48 c7 85 e0 f9 ff ff 	mov    QWORD PTR [rbp-0x620],0x3c
ffffffff8000c26b:	3c 00 00 00 
ffffffff8000c26f:	48 c7 85 e0 f1 ff ff 	mov    QWORD PTR [rbp-0xe20],0xffffffff8000d6f0
ffffffff8000c276:	f0 d6 00 80 
ffffffff8000c27a:	48 c7 85 e8 f9 ff ff 	mov    QWORD PTR [rbp-0x618],0x3d
ffffffff8000c281:	3d 00 00 00 
ffffffff8000c285:	48 c7 85 e8 f1 ff ff 	mov    QWORD PTR [rbp-0xe18],0xffffffff8000d700
ffffffff8000c28c:	00 d7 00 80 
ffffffff8000c290:	48 c7 85 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],0x3e
ffffffff8000c297:	3e 00 00 00 
ffffffff8000c29b:	48 c7 85 f0 f1 ff ff 	mov    QWORD PTR [rbp-0xe10],0xffffffff8000d710
ffffffff8000c2a2:	10 d7 00 80 
ffffffff8000c2a6:	48 c7 85 f8 f9 ff ff 	mov    QWORD PTR [rbp-0x608],0x3f
ffffffff8000c2ad:	3f 00 00 00 
ffffffff8000c2b1:	48 c7 85 f8 f1 ff ff 	mov    QWORD PTR [rbp-0xe08],0xffffffff8000d720
ffffffff8000c2b8:	20 d7 00 80 
ffffffff8000c2bc:	48 c7 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],0x40
ffffffff8000c2c3:	40 00 00 00 
ffffffff8000c2c7:	48 c7 85 00 f2 ff ff 	mov    QWORD PTR [rbp-0xe00],0xffffffff8000d730
ffffffff8000c2ce:	30 d7 00 80 
ffffffff8000c2d2:	48 c7 85 08 fa ff ff 	mov    QWORD PTR [rbp-0x5f8],0x41
ffffffff8000c2d9:	41 00 00 00 
ffffffff8000c2dd:	48 c7 85 08 f2 ff ff 	mov    QWORD PTR [rbp-0xdf8],0xffffffff8000d740
ffffffff8000c2e4:	40 d7 00 80 
ffffffff8000c2e8:	48 c7 85 10 fa ff ff 	mov    QWORD PTR [rbp-0x5f0],0x42
ffffffff8000c2ef:	42 00 00 00 
ffffffff8000c2f3:	48 c7 85 10 f2 ff ff 	mov    QWORD PTR [rbp-0xdf0],0xffffffff8000d750
ffffffff8000c2fa:	50 d7 00 80 
ffffffff8000c2fe:	48 c7 85 18 fa ff ff 	mov    QWORD PTR [rbp-0x5e8],0x43
ffffffff8000c305:	43 00 00 00 
ffffffff8000c309:	48 c7 85 18 f2 ff ff 	mov    QWORD PTR [rbp-0xde8],0xffffffff8000d760
ffffffff8000c310:	60 d7 00 80 
ffffffff8000c314:	48 c7 85 20 fa ff ff 	mov    QWORD PTR [rbp-0x5e0],0x44
ffffffff8000c31b:	44 00 00 00 
ffffffff8000c31f:	48 c7 85 20 f2 ff ff 	mov    QWORD PTR [rbp-0xde0],0xffffffff8000d770
ffffffff8000c326:	70 d7 00 80 
ffffffff8000c32a:	48 c7 85 28 fa ff ff 	mov    QWORD PTR [rbp-0x5d8],0x45
ffffffff8000c331:	45 00 00 00 
ffffffff8000c335:	48 c7 85 28 f2 ff ff 	mov    QWORD PTR [rbp-0xdd8],0xffffffff8000d780
ffffffff8000c33c:	80 d7 00 80 
ffffffff8000c340:	48 c7 85 30 fa ff ff 	mov    QWORD PTR [rbp-0x5d0],0x46
ffffffff8000c347:	46 00 00 00 
ffffffff8000c34b:	48 c7 85 30 f2 ff ff 	mov    QWORD PTR [rbp-0xdd0],0xffffffff8000d790
ffffffff8000c352:	90 d7 00 80 
ffffffff8000c356:	48 c7 85 38 fa ff ff 	mov    QWORD PTR [rbp-0x5c8],0x47
ffffffff8000c35d:	47 00 00 00 
ffffffff8000c361:	48 c7 85 38 f2 ff ff 	mov    QWORD PTR [rbp-0xdc8],0xffffffff8000d7a0
ffffffff8000c368:	a0 d7 00 80 
ffffffff8000c36c:	48 c7 85 40 fa ff ff 	mov    QWORD PTR [rbp-0x5c0],0x48
ffffffff8000c373:	48 00 00 00 
ffffffff8000c377:	48 c7 85 40 f2 ff ff 	mov    QWORD PTR [rbp-0xdc0],0xffffffff8000d7b0
ffffffff8000c37e:	b0 d7 00 80 
ffffffff8000c382:	48 c7 85 48 fa ff ff 	mov    QWORD PTR [rbp-0x5b8],0x49
ffffffff8000c389:	49 00 00 00 
ffffffff8000c38d:	48 c7 85 48 f2 ff ff 	mov    QWORD PTR [rbp-0xdb8],0xffffffff8000d7c0
ffffffff8000c394:	c0 d7 00 80 
ffffffff8000c398:	48 c7 85 50 fa ff ff 	mov    QWORD PTR [rbp-0x5b0],0x4a
ffffffff8000c39f:	4a 00 00 00 
ffffffff8000c3a3:	48 c7 85 50 f2 ff ff 	mov    QWORD PTR [rbp-0xdb0],0xffffffff8000d7d0
ffffffff8000c3aa:	d0 d7 00 80 
ffffffff8000c3ae:	48 c7 85 58 fa ff ff 	mov    QWORD PTR [rbp-0x5a8],0x4b
ffffffff8000c3b5:	4b 00 00 00 
ffffffff8000c3b9:	48 c7 85 58 f2 ff ff 	mov    QWORD PTR [rbp-0xda8],0xffffffff8000d7e0
ffffffff8000c3c0:	e0 d7 00 80 
ffffffff8000c3c4:	48 c7 85 60 fa ff ff 	mov    QWORD PTR [rbp-0x5a0],0x4c
ffffffff8000c3cb:	4c 00 00 00 
ffffffff8000c3cf:	48 c7 85 60 f2 ff ff 	mov    QWORD PTR [rbp-0xda0],0xffffffff8000d7f0
ffffffff8000c3d6:	f0 d7 00 80 
ffffffff8000c3da:	48 c7 85 68 fa ff ff 	mov    QWORD PTR [rbp-0x598],0x4d
ffffffff8000c3e1:	4d 00 00 00 
ffffffff8000c3e5:	48 c7 85 68 f2 ff ff 	mov    QWORD PTR [rbp-0xd98],0xffffffff8000d800
ffffffff8000c3ec:	00 d8 00 80 
ffffffff8000c3f0:	48 c7 85 70 fa ff ff 	mov    QWORD PTR [rbp-0x590],0x4e
ffffffff8000c3f7:	4e 00 00 00 
ffffffff8000c3fb:	48 c7 85 70 f2 ff ff 	mov    QWORD PTR [rbp-0xd90],0xffffffff8000d810
ffffffff8000c402:	10 d8 00 80 
ffffffff8000c406:	48 c7 85 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],0x4f
ffffffff8000c40d:	4f 00 00 00 
ffffffff8000c411:	48 c7 85 78 f2 ff ff 	mov    QWORD PTR [rbp-0xd88],0xffffffff8000d820
ffffffff8000c418:	20 d8 00 80 
ffffffff8000c41c:	48 c7 85 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],0x50
ffffffff8000c423:	50 00 00 00 
ffffffff8000c427:	48 c7 85 80 f2 ff ff 	mov    QWORD PTR [rbp-0xd80],0xffffffff8000d830
ffffffff8000c42e:	30 d8 00 80 
ffffffff8000c432:	48 c7 85 88 fa ff ff 	mov    QWORD PTR [rbp-0x578],0x51
ffffffff8000c439:	51 00 00 00 
ffffffff8000c43d:	48 c7 85 88 f2 ff ff 	mov    QWORD PTR [rbp-0xd78],0xffffffff8000d840
ffffffff8000c444:	40 d8 00 80 
ffffffff8000c448:	48 c7 85 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],0x52
ffffffff8000c44f:	52 00 00 00 
ffffffff8000c453:	48 c7 85 90 f2 ff ff 	mov    QWORD PTR [rbp-0xd70],0xffffffff8000d850
ffffffff8000c45a:	50 d8 00 80 
ffffffff8000c45e:	48 c7 85 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],0x53
ffffffff8000c465:	53 00 00 00 
ffffffff8000c469:	48 c7 85 98 f2 ff ff 	mov    QWORD PTR [rbp-0xd68],0xffffffff8000d860
ffffffff8000c470:	60 d8 00 80 
ffffffff8000c474:	48 c7 85 a0 fa ff ff 	mov    QWORD PTR [rbp-0x560],0x54
ffffffff8000c47b:	54 00 00 00 
ffffffff8000c47f:	48 c7 85 a0 f2 ff ff 	mov    QWORD PTR [rbp-0xd60],0xffffffff8000d870
ffffffff8000c486:	70 d8 00 80 
ffffffff8000c48a:	48 c7 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],0x55
ffffffff8000c491:	55 00 00 00 
ffffffff8000c495:	48 c7 85 a8 f2 ff ff 	mov    QWORD PTR [rbp-0xd58],0xffffffff8000d880
ffffffff8000c49c:	80 d8 00 80 
ffffffff8000c4a0:	48 c7 85 b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],0x56
ffffffff8000c4a7:	56 00 00 00 
ffffffff8000c4ab:	48 c7 85 b0 f2 ff ff 	mov    QWORD PTR [rbp-0xd50],0xffffffff8000d890
ffffffff8000c4b2:	90 d8 00 80 
ffffffff8000c4b6:	48 c7 85 b8 fa ff ff 	mov    QWORD PTR [rbp-0x548],0x57
ffffffff8000c4bd:	57 00 00 00 
ffffffff8000c4c1:	48 c7 85 b8 f2 ff ff 	mov    QWORD PTR [rbp-0xd48],0xffffffff8000d8a0
ffffffff8000c4c8:	a0 d8 00 80 
ffffffff8000c4cc:	48 c7 85 c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],0x58
ffffffff8000c4d3:	58 00 00 00 
ffffffff8000c4d7:	48 c7 85 c0 f2 ff ff 	mov    QWORD PTR [rbp-0xd40],0xffffffff8000d8b0
ffffffff8000c4de:	b0 d8 00 80 
ffffffff8000c4e2:	48 c7 85 c8 fa ff ff 	mov    QWORD PTR [rbp-0x538],0x59
ffffffff8000c4e9:	59 00 00 00 
ffffffff8000c4ed:	48 c7 85 c8 f2 ff ff 	mov    QWORD PTR [rbp-0xd38],0xffffffff8000d8c0
ffffffff8000c4f4:	c0 d8 00 80 
ffffffff8000c4f8:	48 c7 85 d0 fa ff ff 	mov    QWORD PTR [rbp-0x530],0x5a
ffffffff8000c4ff:	5a 00 00 00 
ffffffff8000c503:	48 c7 85 d0 f2 ff ff 	mov    QWORD PTR [rbp-0xd30],0xffffffff8000d8d0
ffffffff8000c50a:	d0 d8 00 80 
ffffffff8000c50e:	48 c7 85 d8 fa ff ff 	mov    QWORD PTR [rbp-0x528],0x5b
ffffffff8000c515:	5b 00 00 00 
ffffffff8000c519:	48 c7 85 d8 f2 ff ff 	mov    QWORD PTR [rbp-0xd28],0xffffffff8000d8e0
ffffffff8000c520:	e0 d8 00 80 
ffffffff8000c524:	48 c7 85 e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],0x5c
ffffffff8000c52b:	5c 00 00 00 
ffffffff8000c52f:	48 c7 85 e0 f2 ff ff 	mov    QWORD PTR [rbp-0xd20],0xffffffff8000d8f0
ffffffff8000c536:	f0 d8 00 80 
ffffffff8000c53a:	48 c7 85 e8 fa ff ff 	mov    QWORD PTR [rbp-0x518],0x5d
ffffffff8000c541:	5d 00 00 00 
ffffffff8000c545:	48 c7 85 e8 f2 ff ff 	mov    QWORD PTR [rbp-0xd18],0xffffffff8000d900
ffffffff8000c54c:	00 d9 00 80 
ffffffff8000c550:	48 c7 85 f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],0x5e
ffffffff8000c557:	5e 00 00 00 
ffffffff8000c55b:	48 c7 85 f0 f2 ff ff 	mov    QWORD PTR [rbp-0xd10],0xffffffff8000d910
ffffffff8000c562:	10 d9 00 80 
ffffffff8000c566:	48 c7 85 f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],0x5f
ffffffff8000c56d:	5f 00 00 00 
ffffffff8000c571:	48 c7 85 f8 f2 ff ff 	mov    QWORD PTR [rbp-0xd08],0xffffffff8000d920
ffffffff8000c578:	20 d9 00 80 
ffffffff8000c57c:	48 c7 85 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],0x60
ffffffff8000c583:	60 00 00 00 
ffffffff8000c587:	48 c7 85 00 f3 ff ff 	mov    QWORD PTR [rbp-0xd00],0xffffffff8000d930
ffffffff8000c58e:	30 d9 00 80 
ffffffff8000c592:	48 c7 85 08 fb ff ff 	mov    QWORD PTR [rbp-0x4f8],0x61
ffffffff8000c599:	61 00 00 00 
ffffffff8000c59d:	48 c7 85 08 f3 ff ff 	mov    QWORD PTR [rbp-0xcf8],0xffffffff8000d940
ffffffff8000c5a4:	40 d9 00 80 
ffffffff8000c5a8:	48 c7 85 10 fb ff ff 	mov    QWORD PTR [rbp-0x4f0],0x62
ffffffff8000c5af:	62 00 00 00 
ffffffff8000c5b3:	48 c7 85 10 f3 ff ff 	mov    QWORD PTR [rbp-0xcf0],0xffffffff8000d950
ffffffff8000c5ba:	50 d9 00 80 
ffffffff8000c5be:	48 c7 85 18 fb ff ff 	mov    QWORD PTR [rbp-0x4e8],0x63
ffffffff8000c5c5:	63 00 00 00 
ffffffff8000c5c9:	48 c7 85 18 f3 ff ff 	mov    QWORD PTR [rbp-0xce8],0xffffffff8000d960
ffffffff8000c5d0:	60 d9 00 80 
ffffffff8000c5d4:	48 c7 85 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],0x64
ffffffff8000c5db:	64 00 00 00 
ffffffff8000c5df:	48 c7 85 20 f3 ff ff 	mov    QWORD PTR [rbp-0xce0],0xffffffff8000d970
ffffffff8000c5e6:	70 d9 00 80 
ffffffff8000c5ea:	48 c7 85 28 fb ff ff 	mov    QWORD PTR [rbp-0x4d8],0x65
ffffffff8000c5f1:	65 00 00 00 
ffffffff8000c5f5:	48 c7 85 28 f3 ff ff 	mov    QWORD PTR [rbp-0xcd8],0xffffffff8000d980
ffffffff8000c5fc:	80 d9 00 80 
ffffffff8000c600:	48 c7 85 30 fb ff ff 	mov    QWORD PTR [rbp-0x4d0],0x66
ffffffff8000c607:	66 00 00 00 
ffffffff8000c60b:	48 c7 85 30 f3 ff ff 	mov    QWORD PTR [rbp-0xcd0],0xffffffff8000d990
ffffffff8000c612:	90 d9 00 80 
ffffffff8000c616:	48 c7 85 38 fb ff ff 	mov    QWORD PTR [rbp-0x4c8],0x67
ffffffff8000c61d:	67 00 00 00 
ffffffff8000c621:	48 c7 85 38 f3 ff ff 	mov    QWORD PTR [rbp-0xcc8],0xffffffff8000d9a0
ffffffff8000c628:	a0 d9 00 80 
ffffffff8000c62c:	48 c7 85 40 fb ff ff 	mov    QWORD PTR [rbp-0x4c0],0x68
ffffffff8000c633:	68 00 00 00 
ffffffff8000c637:	48 c7 85 40 f3 ff ff 	mov    QWORD PTR [rbp-0xcc0],0xffffffff8000d9b0
ffffffff8000c63e:	b0 d9 00 80 
ffffffff8000c642:	48 c7 85 48 fb ff ff 	mov    QWORD PTR [rbp-0x4b8],0x69
ffffffff8000c649:	69 00 00 00 
ffffffff8000c64d:	48 c7 85 48 f3 ff ff 	mov    QWORD PTR [rbp-0xcb8],0xffffffff8000d9c0
ffffffff8000c654:	c0 d9 00 80 
ffffffff8000c658:	48 c7 85 50 fb ff ff 	mov    QWORD PTR [rbp-0x4b0],0x6a
ffffffff8000c65f:	6a 00 00 00 
ffffffff8000c663:	48 c7 85 50 f3 ff ff 	mov    QWORD PTR [rbp-0xcb0],0xffffffff8000d9d0
ffffffff8000c66a:	d0 d9 00 80 
ffffffff8000c66e:	48 c7 85 58 fb ff ff 	mov    QWORD PTR [rbp-0x4a8],0x6b
ffffffff8000c675:	6b 00 00 00 
ffffffff8000c679:	48 c7 85 58 f3 ff ff 	mov    QWORD PTR [rbp-0xca8],0xffffffff8000d9e0
ffffffff8000c680:	e0 d9 00 80 
ffffffff8000c684:	48 c7 85 60 fb ff ff 	mov    QWORD PTR [rbp-0x4a0],0x6c
ffffffff8000c68b:	6c 00 00 00 
ffffffff8000c68f:	48 c7 85 60 f3 ff ff 	mov    QWORD PTR [rbp-0xca0],0xffffffff8000d9f0
ffffffff8000c696:	f0 d9 00 80 
ffffffff8000c69a:	48 c7 85 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],0x6d
ffffffff8000c6a1:	6d 00 00 00 
ffffffff8000c6a5:	48 c7 85 68 f3 ff ff 	mov    QWORD PTR [rbp-0xc98],0xffffffff8000da00
ffffffff8000c6ac:	00 da 00 80 
ffffffff8000c6b0:	48 c7 85 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],0x6e
ffffffff8000c6b7:	6e 00 00 00 
ffffffff8000c6bb:	48 c7 85 70 f3 ff ff 	mov    QWORD PTR [rbp-0xc90],0xffffffff8000da10
ffffffff8000c6c2:	10 da 00 80 
ffffffff8000c6c6:	48 c7 85 78 fb ff ff 	mov    QWORD PTR [rbp-0x488],0x6f
ffffffff8000c6cd:	6f 00 00 00 
ffffffff8000c6d1:	48 c7 85 78 f3 ff ff 	mov    QWORD PTR [rbp-0xc88],0xffffffff8000da20
ffffffff8000c6d8:	20 da 00 80 
ffffffff8000c6dc:	48 c7 85 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],0x70
ffffffff8000c6e3:	70 00 00 00 
ffffffff8000c6e7:	48 c7 85 80 f3 ff ff 	mov    QWORD PTR [rbp-0xc80],0xffffffff8000da30
ffffffff8000c6ee:	30 da 00 80 
ffffffff8000c6f2:	48 c7 85 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],0x71
ffffffff8000c6f9:	71 00 00 00 
ffffffff8000c6fd:	48 c7 85 88 f3 ff ff 	mov    QWORD PTR [rbp-0xc78],0xffffffff8000da40
ffffffff8000c704:	40 da 00 80 
ffffffff8000c708:	48 c7 85 90 fb ff ff 	mov    QWORD PTR [rbp-0x470],0x72
ffffffff8000c70f:	72 00 00 00 
ffffffff8000c713:	48 c7 85 90 f3 ff ff 	mov    QWORD PTR [rbp-0xc70],0xffffffff8000da50
ffffffff8000c71a:	50 da 00 80 
ffffffff8000c71e:	48 c7 85 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],0x73
ffffffff8000c725:	73 00 00 00 
ffffffff8000c729:	48 c7 85 98 f3 ff ff 	mov    QWORD PTR [rbp-0xc68],0xffffffff8000da60
ffffffff8000c730:	60 da 00 80 
ffffffff8000c734:	48 c7 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],0x74
ffffffff8000c73b:	74 00 00 00 
ffffffff8000c73f:	48 c7 85 a0 f3 ff ff 	mov    QWORD PTR [rbp-0xc60],0xffffffff8000da70
ffffffff8000c746:	70 da 00 80 
ffffffff8000c74a:	48 c7 85 a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],0x75
ffffffff8000c751:	75 00 00 00 
ffffffff8000c755:	48 c7 85 a8 f3 ff ff 	mov    QWORD PTR [rbp-0xc58],0xffffffff8000da80
ffffffff8000c75c:	80 da 00 80 
ffffffff8000c760:	48 c7 85 b0 fb ff ff 	mov    QWORD PTR [rbp-0x450],0x76
ffffffff8000c767:	76 00 00 00 
ffffffff8000c76b:	48 c7 85 b0 f3 ff ff 	mov    QWORD PTR [rbp-0xc50],0xffffffff8000da90
ffffffff8000c772:	90 da 00 80 
ffffffff8000c776:	48 c7 85 b8 fb ff ff 	mov    QWORD PTR [rbp-0x448],0x77
ffffffff8000c77d:	77 00 00 00 
ffffffff8000c781:	48 c7 85 b8 f3 ff ff 	mov    QWORD PTR [rbp-0xc48],0xffffffff8000daa0
ffffffff8000c788:	a0 da 00 80 
ffffffff8000c78c:	48 c7 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],0x78
ffffffff8000c793:	78 00 00 00 
ffffffff8000c797:	48 c7 85 c0 f3 ff ff 	mov    QWORD PTR [rbp-0xc40],0xffffffff8000dab0
ffffffff8000c79e:	b0 da 00 80 
ffffffff8000c7a2:	48 c7 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],0x79
ffffffff8000c7a9:	79 00 00 00 
ffffffff8000c7ad:	48 c7 85 c8 f3 ff ff 	mov    QWORD PTR [rbp-0xc38],0xffffffff8000dac0
ffffffff8000c7b4:	c0 da 00 80 
ffffffff8000c7b8:	48 c7 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],0x7a
ffffffff8000c7bf:	7a 00 00 00 
ffffffff8000c7c3:	48 c7 85 d0 f3 ff ff 	mov    QWORD PTR [rbp-0xc30],0xffffffff8000dad0
ffffffff8000c7ca:	d0 da 00 80 
ffffffff8000c7ce:	48 c7 85 d8 fb ff ff 	mov    QWORD PTR [rbp-0x428],0x7b
ffffffff8000c7d5:	7b 00 00 00 
ffffffff8000c7d9:	48 c7 85 d8 f3 ff ff 	mov    QWORD PTR [rbp-0xc28],0xffffffff8000dae0
ffffffff8000c7e0:	e0 da 00 80 
ffffffff8000c7e4:	48 c7 85 e0 fb ff ff 	mov    QWORD PTR [rbp-0x420],0x7c
ffffffff8000c7eb:	7c 00 00 00 
ffffffff8000c7ef:	48 c7 85 e0 f3 ff ff 	mov    QWORD PTR [rbp-0xc20],0xffffffff8000daf0
ffffffff8000c7f6:	f0 da 00 80 
ffffffff8000c7fa:	48 c7 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],0x7d
ffffffff8000c801:	7d 00 00 00 
ffffffff8000c805:	48 c7 85 e8 f3 ff ff 	mov    QWORD PTR [rbp-0xc18],0xffffffff8000db00
ffffffff8000c80c:	00 db 00 80 
ffffffff8000c810:	48 c7 85 f0 fb ff ff 	mov    QWORD PTR [rbp-0x410],0x7e
ffffffff8000c817:	7e 00 00 00 
ffffffff8000c81b:	48 c7 85 f0 f3 ff ff 	mov    QWORD PTR [rbp-0xc10],0xffffffff8000db10
ffffffff8000c822:	10 db 00 80 
ffffffff8000c826:	48 c7 85 f8 fb ff ff 	mov    QWORD PTR [rbp-0x408],0x7f
ffffffff8000c82d:	7f 00 00 00 
ffffffff8000c831:	48 c7 85 f8 f3 ff ff 	mov    QWORD PTR [rbp-0xc08],0xffffffff8000db20
ffffffff8000c838:	20 db 00 80 
ffffffff8000c83c:	48 c7 85 00 fc ff ff 	mov    QWORD PTR [rbp-0x400],0x80
ffffffff8000c843:	80 00 00 00 
ffffffff8000c847:	48 c7 85 00 f4 ff ff 	mov    QWORD PTR [rbp-0xc00],0xffffffff8000db30
ffffffff8000c84e:	30 db 00 80 
ffffffff8000c852:	48 c7 85 08 fc ff ff 	mov    QWORD PTR [rbp-0x3f8],0x81
ffffffff8000c859:	81 00 00 00 
ffffffff8000c85d:	48 c7 85 08 f4 ff ff 	mov    QWORD PTR [rbp-0xbf8],0xffffffff8000db40
ffffffff8000c864:	40 db 00 80 
ffffffff8000c868:	48 c7 85 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],0x82
ffffffff8000c86f:	82 00 00 00 
ffffffff8000c873:	48 c7 85 10 f4 ff ff 	mov    QWORD PTR [rbp-0xbf0],0xffffffff8000db50
ffffffff8000c87a:	50 db 00 80 
ffffffff8000c87e:	48 c7 85 18 fc ff ff 	mov    QWORD PTR [rbp-0x3e8],0x83
ffffffff8000c885:	83 00 00 00 
ffffffff8000c889:	48 c7 85 18 f4 ff ff 	mov    QWORD PTR [rbp-0xbe8],0xffffffff8000db60
ffffffff8000c890:	60 db 00 80 
ffffffff8000c894:	48 c7 85 20 fc ff ff 	mov    QWORD PTR [rbp-0x3e0],0x84
ffffffff8000c89b:	84 00 00 00 
ffffffff8000c89f:	48 c7 85 20 f4 ff ff 	mov    QWORD PTR [rbp-0xbe0],0xffffffff8000db70
ffffffff8000c8a6:	70 db 00 80 
ffffffff8000c8aa:	48 c7 85 28 fc ff ff 	mov    QWORD PTR [rbp-0x3d8],0x85
ffffffff8000c8b1:	85 00 00 00 
ffffffff8000c8b5:	48 c7 85 28 f4 ff ff 	mov    QWORD PTR [rbp-0xbd8],0xffffffff8000db80
ffffffff8000c8bc:	80 db 00 80 
ffffffff8000c8c0:	48 c7 85 30 fc ff ff 	mov    QWORD PTR [rbp-0x3d0],0x86
ffffffff8000c8c7:	86 00 00 00 
ffffffff8000c8cb:	48 c7 85 30 f4 ff ff 	mov    QWORD PTR [rbp-0xbd0],0xffffffff8000db90
ffffffff8000c8d2:	90 db 00 80 
ffffffff8000c8d6:	48 c7 85 38 fc ff ff 	mov    QWORD PTR [rbp-0x3c8],0x87
ffffffff8000c8dd:	87 00 00 00 
ffffffff8000c8e1:	48 c7 85 38 f4 ff ff 	mov    QWORD PTR [rbp-0xbc8],0xffffffff8000dba0
ffffffff8000c8e8:	a0 db 00 80 
ffffffff8000c8ec:	48 c7 85 40 fc ff ff 	mov    QWORD PTR [rbp-0x3c0],0x88
ffffffff8000c8f3:	88 00 00 00 
ffffffff8000c8f7:	48 c7 85 40 f4 ff ff 	mov    QWORD PTR [rbp-0xbc0],0xffffffff8000dbb0
ffffffff8000c8fe:	b0 db 00 80 
ffffffff8000c902:	48 c7 85 48 fc ff ff 	mov    QWORD PTR [rbp-0x3b8],0x89
ffffffff8000c909:	89 00 00 00 
ffffffff8000c90d:	48 c7 85 48 f4 ff ff 	mov    QWORD PTR [rbp-0xbb8],0xffffffff8000dbc0
ffffffff8000c914:	c0 db 00 80 
ffffffff8000c918:	48 c7 85 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],0x8a
ffffffff8000c91f:	8a 00 00 00 
ffffffff8000c923:	48 c7 85 50 f4 ff ff 	mov    QWORD PTR [rbp-0xbb0],0xffffffff8000dbd0
ffffffff8000c92a:	d0 db 00 80 
ffffffff8000c92e:	48 c7 85 58 fc ff ff 	mov    QWORD PTR [rbp-0x3a8],0x8b
ffffffff8000c935:	8b 00 00 00 
ffffffff8000c939:	48 c7 85 58 f4 ff ff 	mov    QWORD PTR [rbp-0xba8],0xffffffff8000dbe0
ffffffff8000c940:	e0 db 00 80 
ffffffff8000c944:	48 c7 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],0x8c
ffffffff8000c94b:	8c 00 00 00 
ffffffff8000c94f:	48 c7 85 60 f4 ff ff 	mov    QWORD PTR [rbp-0xba0],0xffffffff8000dbf0
ffffffff8000c956:	f0 db 00 80 
ffffffff8000c95a:	48 c7 85 68 fc ff ff 	mov    QWORD PTR [rbp-0x398],0x8d
ffffffff8000c961:	8d 00 00 00 
ffffffff8000c965:	48 c7 85 68 f4 ff ff 	mov    QWORD PTR [rbp-0xb98],0xffffffff8000dc00
ffffffff8000c96c:	00 dc 00 80 
ffffffff8000c970:	48 c7 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],0x8e
ffffffff8000c977:	8e 00 00 00 
ffffffff8000c97b:	48 c7 85 70 f4 ff ff 	mov    QWORD PTR [rbp-0xb90],0xffffffff8000dc10
ffffffff8000c982:	10 dc 00 80 
ffffffff8000c986:	48 c7 85 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],0x8f
ffffffff8000c98d:	8f 00 00 00 
ffffffff8000c991:	48 c7 85 78 f4 ff ff 	mov    QWORD PTR [rbp-0xb88],0xffffffff8000dc20
ffffffff8000c998:	20 dc 00 80 
ffffffff8000c99c:	48 c7 85 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],0x90
ffffffff8000c9a3:	90 00 00 00 
ffffffff8000c9a7:	48 c7 85 80 f4 ff ff 	mov    QWORD PTR [rbp-0xb80],0xffffffff8000dc30
ffffffff8000c9ae:	30 dc 00 80 
ffffffff8000c9b2:	48 c7 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],0x91
ffffffff8000c9b9:	91 00 00 00 
ffffffff8000c9bd:	48 c7 85 88 f4 ff ff 	mov    QWORD PTR [rbp-0xb78],0xffffffff8000dc40
ffffffff8000c9c4:	40 dc 00 80 
ffffffff8000c9c8:	48 c7 85 90 fc ff ff 	mov    QWORD PTR [rbp-0x370],0x92
ffffffff8000c9cf:	92 00 00 00 
ffffffff8000c9d3:	48 c7 85 90 f4 ff ff 	mov    QWORD PTR [rbp-0xb70],0xffffffff8000dc50
ffffffff8000c9da:	50 dc 00 80 
ffffffff8000c9de:	48 c7 85 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],0x93
ffffffff8000c9e5:	93 00 00 00 
ffffffff8000c9e9:	48 c7 85 98 f4 ff ff 	mov    QWORD PTR [rbp-0xb68],0xffffffff8000dc60
ffffffff8000c9f0:	60 dc 00 80 
ffffffff8000c9f4:	48 c7 85 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],0x94
ffffffff8000c9fb:	94 00 00 00 
ffffffff8000c9ff:	48 c7 85 a0 f4 ff ff 	mov    QWORD PTR [rbp-0xb60],0xffffffff8000dc70
ffffffff8000ca06:	70 dc 00 80 
ffffffff8000ca0a:	48 c7 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],0x95
ffffffff8000ca11:	95 00 00 00 
ffffffff8000ca15:	48 c7 85 a8 f4 ff ff 	mov    QWORD PTR [rbp-0xb58],0xffffffff8000dc80
ffffffff8000ca1c:	80 dc 00 80 
ffffffff8000ca20:	48 c7 85 b0 fc ff ff 	mov    QWORD PTR [rbp-0x350],0x96
ffffffff8000ca27:	96 00 00 00 
ffffffff8000ca2b:	48 c7 85 b0 f4 ff ff 	mov    QWORD PTR [rbp-0xb50],0xffffffff8000dc90
ffffffff8000ca32:	90 dc 00 80 
ffffffff8000ca36:	48 c7 85 b8 fc ff ff 	mov    QWORD PTR [rbp-0x348],0x97
ffffffff8000ca3d:	97 00 00 00 
ffffffff8000ca41:	48 c7 85 b8 f4 ff ff 	mov    QWORD PTR [rbp-0xb48],0xffffffff8000dca0
ffffffff8000ca48:	a0 dc 00 80 
ffffffff8000ca4c:	48 c7 85 c0 fc ff ff 	mov    QWORD PTR [rbp-0x340],0x98
ffffffff8000ca53:	98 00 00 00 
ffffffff8000ca57:	48 c7 85 c0 f4 ff ff 	mov    QWORD PTR [rbp-0xb40],0xffffffff8000dcb0
ffffffff8000ca5e:	b0 dc 00 80 
ffffffff8000ca62:	48 c7 85 c8 fc ff ff 	mov    QWORD PTR [rbp-0x338],0x99
ffffffff8000ca69:	99 00 00 00 
ffffffff8000ca6d:	48 c7 85 c8 f4 ff ff 	mov    QWORD PTR [rbp-0xb38],0xffffffff8000dcc0
ffffffff8000ca74:	c0 dc 00 80 
ffffffff8000ca78:	48 c7 85 d0 fc ff ff 	mov    QWORD PTR [rbp-0x330],0x9a
ffffffff8000ca7f:	9a 00 00 00 
ffffffff8000ca83:	48 c7 85 d0 f4 ff ff 	mov    QWORD PTR [rbp-0xb30],0xffffffff8000dcd0
ffffffff8000ca8a:	d0 dc 00 80 
ffffffff8000ca8e:	48 c7 85 d8 fc ff ff 	mov    QWORD PTR [rbp-0x328],0x9b
ffffffff8000ca95:	9b 00 00 00 
ffffffff8000ca99:	48 c7 85 d8 f4 ff ff 	mov    QWORD PTR [rbp-0xb28],0xffffffff8000dce0
ffffffff8000caa0:	e0 dc 00 80 
ffffffff8000caa4:	48 c7 85 e0 fc ff ff 	mov    QWORD PTR [rbp-0x320],0x9c
ffffffff8000caab:	9c 00 00 00 
ffffffff8000caaf:	48 c7 85 e0 f4 ff ff 	mov    QWORD PTR [rbp-0xb20],0xffffffff8000dcf0
ffffffff8000cab6:	f0 dc 00 80 
ffffffff8000caba:	48 c7 85 e8 fc ff ff 	mov    QWORD PTR [rbp-0x318],0x9d
ffffffff8000cac1:	9d 00 00 00 
ffffffff8000cac5:	48 c7 85 e8 f4 ff ff 	mov    QWORD PTR [rbp-0xb18],0xffffffff8000dd00
ffffffff8000cacc:	00 dd 00 80 
ffffffff8000cad0:	48 c7 85 f0 fc ff ff 	mov    QWORD PTR [rbp-0x310],0x9e
ffffffff8000cad7:	9e 00 00 00 
ffffffff8000cadb:	48 c7 85 f0 f4 ff ff 	mov    QWORD PTR [rbp-0xb10],0xffffffff8000dd10
ffffffff8000cae2:	10 dd 00 80 
ffffffff8000cae6:	48 c7 85 f8 fc ff ff 	mov    QWORD PTR [rbp-0x308],0x9f
ffffffff8000caed:	9f 00 00 00 
ffffffff8000caf1:	48 c7 85 f8 f4 ff ff 	mov    QWORD PTR [rbp-0xb08],0xffffffff8000dd20
ffffffff8000caf8:	20 dd 00 80 
ffffffff8000cafc:	48 c7 85 00 fd ff ff 	mov    QWORD PTR [rbp-0x300],0xa0
ffffffff8000cb03:	a0 00 00 00 
ffffffff8000cb07:	48 c7 85 00 f5 ff ff 	mov    QWORD PTR [rbp-0xb00],0xffffffff8000dd30
ffffffff8000cb0e:	30 dd 00 80 
ffffffff8000cb12:	48 c7 85 08 fd ff ff 	mov    QWORD PTR [rbp-0x2f8],0xa1
ffffffff8000cb19:	a1 00 00 00 
ffffffff8000cb1d:	48 c7 85 08 f5 ff ff 	mov    QWORD PTR [rbp-0xaf8],0xffffffff8000dd40
ffffffff8000cb24:	40 dd 00 80 
ffffffff8000cb28:	48 c7 85 10 fd ff ff 	mov    QWORD PTR [rbp-0x2f0],0xa2
ffffffff8000cb2f:	a2 00 00 00 
ffffffff8000cb33:	48 c7 85 10 f5 ff ff 	mov    QWORD PTR [rbp-0xaf0],0xffffffff8000dd50
ffffffff8000cb3a:	50 dd 00 80 
ffffffff8000cb3e:	48 c7 85 18 fd ff ff 	mov    QWORD PTR [rbp-0x2e8],0xa3
ffffffff8000cb45:	a3 00 00 00 
ffffffff8000cb49:	48 c7 85 18 f5 ff ff 	mov    QWORD PTR [rbp-0xae8],0xffffffff8000dd60
ffffffff8000cb50:	60 dd 00 80 
ffffffff8000cb54:	48 c7 85 20 fd ff ff 	mov    QWORD PTR [rbp-0x2e0],0xa4
ffffffff8000cb5b:	a4 00 00 00 
ffffffff8000cb5f:	48 c7 85 20 f5 ff ff 	mov    QWORD PTR [rbp-0xae0],0xffffffff8000dd70
ffffffff8000cb66:	70 dd 00 80 
ffffffff8000cb6a:	48 c7 85 28 fd ff ff 	mov    QWORD PTR [rbp-0x2d8],0xa5
ffffffff8000cb71:	a5 00 00 00 
ffffffff8000cb75:	48 c7 85 28 f5 ff ff 	mov    QWORD PTR [rbp-0xad8],0xffffffff8000dd80
ffffffff8000cb7c:	80 dd 00 80 
ffffffff8000cb80:	48 c7 85 30 fd ff ff 	mov    QWORD PTR [rbp-0x2d0],0xa6
ffffffff8000cb87:	a6 00 00 00 
ffffffff8000cb8b:	48 c7 85 30 f5 ff ff 	mov    QWORD PTR [rbp-0xad0],0xffffffff8000dd90
ffffffff8000cb92:	90 dd 00 80 
ffffffff8000cb96:	48 c7 85 38 fd ff ff 	mov    QWORD PTR [rbp-0x2c8],0xa7
ffffffff8000cb9d:	a7 00 00 00 
ffffffff8000cba1:	48 c7 85 38 f5 ff ff 	mov    QWORD PTR [rbp-0xac8],0xffffffff8000dda0
ffffffff8000cba8:	a0 dd 00 80 
ffffffff8000cbac:	48 c7 85 40 fd ff ff 	mov    QWORD PTR [rbp-0x2c0],0xa8
ffffffff8000cbb3:	a8 00 00 00 
ffffffff8000cbb7:	48 c7 85 40 f5 ff ff 	mov    QWORD PTR [rbp-0xac0],0xffffffff8000ddb0
ffffffff8000cbbe:	b0 dd 00 80 
ffffffff8000cbc2:	48 c7 85 48 fd ff ff 	mov    QWORD PTR [rbp-0x2b8],0xa9
ffffffff8000cbc9:	a9 00 00 00 
ffffffff8000cbcd:	48 c7 85 48 f5 ff ff 	mov    QWORD PTR [rbp-0xab8],0xffffffff8000ddc0
ffffffff8000cbd4:	c0 dd 00 80 
ffffffff8000cbd8:	48 c7 85 50 fd ff ff 	mov    QWORD PTR [rbp-0x2b0],0xaa
ffffffff8000cbdf:	aa 00 00 00 
ffffffff8000cbe3:	48 c7 85 50 f5 ff ff 	mov    QWORD PTR [rbp-0xab0],0xffffffff8000ddd0
ffffffff8000cbea:	d0 dd 00 80 
ffffffff8000cbee:	48 c7 85 58 fd ff ff 	mov    QWORD PTR [rbp-0x2a8],0xab
ffffffff8000cbf5:	ab 00 00 00 
ffffffff8000cbf9:	48 c7 85 58 f5 ff ff 	mov    QWORD PTR [rbp-0xaa8],0xffffffff8000dde0
ffffffff8000cc00:	e0 dd 00 80 
ffffffff8000cc04:	48 c7 85 60 fd ff ff 	mov    QWORD PTR [rbp-0x2a0],0xac
ffffffff8000cc0b:	ac 00 00 00 
ffffffff8000cc0f:	48 c7 85 60 f5 ff ff 	mov    QWORD PTR [rbp-0xaa0],0xffffffff8000ddf0
ffffffff8000cc16:	f0 dd 00 80 
ffffffff8000cc1a:	48 c7 85 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],0xad
ffffffff8000cc21:	ad 00 00 00 
ffffffff8000cc25:	48 c7 85 68 f5 ff ff 	mov    QWORD PTR [rbp-0xa98],0xffffffff8000de00
ffffffff8000cc2c:	00 de 00 80 
ffffffff8000cc30:	48 c7 85 70 fd ff ff 	mov    QWORD PTR [rbp-0x290],0xae
ffffffff8000cc37:	ae 00 00 00 
ffffffff8000cc3b:	48 c7 85 70 f5 ff ff 	mov    QWORD PTR [rbp-0xa90],0xffffffff8000de10
ffffffff8000cc42:	10 de 00 80 
ffffffff8000cc46:	48 c7 85 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],0xaf
ffffffff8000cc4d:	af 00 00 00 
ffffffff8000cc51:	48 c7 85 78 f5 ff ff 	mov    QWORD PTR [rbp-0xa88],0xffffffff8000de20
ffffffff8000cc58:	20 de 00 80 
ffffffff8000cc5c:	48 c7 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],0xb0
ffffffff8000cc63:	b0 00 00 00 
ffffffff8000cc67:	48 c7 85 80 f5 ff ff 	mov    QWORD PTR [rbp-0xa80],0xffffffff8000de30
ffffffff8000cc6e:	30 de 00 80 
ffffffff8000cc72:	48 c7 85 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],0xb1
ffffffff8000cc79:	b1 00 00 00 
ffffffff8000cc7d:	48 c7 85 88 f5 ff ff 	mov    QWORD PTR [rbp-0xa78],0xffffffff8000de40
ffffffff8000cc84:	40 de 00 80 
ffffffff8000cc88:	48 c7 85 90 fd ff ff 	mov    QWORD PTR [rbp-0x270],0xb2
ffffffff8000cc8f:	b2 00 00 00 
ffffffff8000cc93:	48 c7 85 90 f5 ff ff 	mov    QWORD PTR [rbp-0xa70],0xffffffff8000de50
ffffffff8000cc9a:	50 de 00 80 
ffffffff8000cc9e:	48 c7 85 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],0xb3
ffffffff8000cca5:	b3 00 00 00 
ffffffff8000cca9:	48 c7 85 98 f5 ff ff 	mov    QWORD PTR [rbp-0xa68],0xffffffff8000de60
ffffffff8000ccb0:	60 de 00 80 
ffffffff8000ccb4:	48 c7 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],0xb4
ffffffff8000ccbb:	b4 00 00 00 
ffffffff8000ccbf:	48 c7 85 a0 f5 ff ff 	mov    QWORD PTR [rbp-0xa60],0xffffffff8000de70
ffffffff8000ccc6:	70 de 00 80 
ffffffff8000ccca:	48 c7 85 a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],0xb5
ffffffff8000ccd1:	b5 00 00 00 
ffffffff8000ccd5:	48 c7 85 a8 f5 ff ff 	mov    QWORD PTR [rbp-0xa58],0xffffffff8000de80
ffffffff8000ccdc:	80 de 00 80 
ffffffff8000cce0:	48 c7 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],0xb6
ffffffff8000cce7:	b6 00 00 00 
ffffffff8000cceb:	48 c7 85 b0 f5 ff ff 	mov    QWORD PTR [rbp-0xa50],0xffffffff8000de90
ffffffff8000ccf2:	90 de 00 80 
ffffffff8000ccf6:	48 c7 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],0xb7
ffffffff8000ccfd:	b7 00 00 00 
ffffffff8000cd01:	48 c7 85 b8 f5 ff ff 	mov    QWORD PTR [rbp-0xa48],0xffffffff8000dea0
ffffffff8000cd08:	a0 de 00 80 
ffffffff8000cd0c:	48 c7 85 c0 fd ff ff 	mov    QWORD PTR [rbp-0x240],0xb8
ffffffff8000cd13:	b8 00 00 00 
ffffffff8000cd17:	48 c7 85 c0 f5 ff ff 	mov    QWORD PTR [rbp-0xa40],0xffffffff8000deb0
ffffffff8000cd1e:	b0 de 00 80 
ffffffff8000cd22:	48 c7 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],0xb9
ffffffff8000cd29:	b9 00 00 00 
ffffffff8000cd2d:	48 c7 85 c8 f5 ff ff 	mov    QWORD PTR [rbp-0xa38],0xffffffff8000dec0
ffffffff8000cd34:	c0 de 00 80 
ffffffff8000cd38:	48 c7 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],0xba
ffffffff8000cd3f:	ba 00 00 00 
ffffffff8000cd43:	48 c7 85 d0 f5 ff ff 	mov    QWORD PTR [rbp-0xa30],0xffffffff8000ded0
ffffffff8000cd4a:	d0 de 00 80 
ffffffff8000cd4e:	48 c7 85 d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],0xbb
ffffffff8000cd55:	bb 00 00 00 
ffffffff8000cd59:	48 c7 85 d8 f5 ff ff 	mov    QWORD PTR [rbp-0xa28],0xffffffff8000dee0
ffffffff8000cd60:	e0 de 00 80 
ffffffff8000cd64:	48 c7 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],0xbc
ffffffff8000cd6b:	bc 00 00 00 
ffffffff8000cd6f:	48 c7 85 e0 f5 ff ff 	mov    QWORD PTR [rbp-0xa20],0xffffffff8000def0
ffffffff8000cd76:	f0 de 00 80 
ffffffff8000cd7a:	48 c7 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],0xbd
ffffffff8000cd81:	bd 00 00 00 
ffffffff8000cd85:	48 c7 85 e8 f5 ff ff 	mov    QWORD PTR [rbp-0xa18],0xffffffff8000df00
ffffffff8000cd8c:	00 df 00 80 
ffffffff8000cd90:	48 c7 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],0xbe
ffffffff8000cd97:	be 00 00 00 
ffffffff8000cd9b:	48 c7 85 f0 f5 ff ff 	mov    QWORD PTR [rbp-0xa10],0xffffffff8000df10
ffffffff8000cda2:	10 df 00 80 
ffffffff8000cda6:	48 c7 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],0xbf
ffffffff8000cdad:	bf 00 00 00 
ffffffff8000cdb1:	48 c7 85 f8 f5 ff ff 	mov    QWORD PTR [rbp-0xa08],0xffffffff8000df20
ffffffff8000cdb8:	20 df 00 80 
ffffffff8000cdbc:	48 c7 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],0xc0
ffffffff8000cdc3:	c0 00 00 00 
ffffffff8000cdc7:	48 c7 85 00 f6 ff ff 	mov    QWORD PTR [rbp-0xa00],0xffffffff8000df30
ffffffff8000cdce:	30 df 00 80 
ffffffff8000cdd2:	48 c7 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],0xc1
ffffffff8000cdd9:	c1 00 00 00 
ffffffff8000cddd:	48 c7 85 08 f6 ff ff 	mov    QWORD PTR [rbp-0x9f8],0xffffffff8000df40
ffffffff8000cde4:	40 df 00 80 
ffffffff8000cde8:	48 c7 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],0xc2
ffffffff8000cdef:	c2 00 00 00 
ffffffff8000cdf3:	48 c7 85 10 f6 ff ff 	mov    QWORD PTR [rbp-0x9f0],0xffffffff8000df50
ffffffff8000cdfa:	50 df 00 80 
ffffffff8000cdfe:	48 c7 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],0xc3
ffffffff8000ce05:	c3 00 00 00 
ffffffff8000ce09:	48 c7 85 18 f6 ff ff 	mov    QWORD PTR [rbp-0x9e8],0xffffffff8000df60
ffffffff8000ce10:	60 df 00 80 
ffffffff8000ce14:	48 c7 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],0xc4
ffffffff8000ce1b:	c4 00 00 00 
ffffffff8000ce1f:	48 c7 85 20 f6 ff ff 	mov    QWORD PTR [rbp-0x9e0],0xffffffff8000df70
ffffffff8000ce26:	70 df 00 80 
ffffffff8000ce2a:	48 c7 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],0xc5
ffffffff8000ce31:	c5 00 00 00 
ffffffff8000ce35:	48 c7 85 28 f6 ff ff 	mov    QWORD PTR [rbp-0x9d8],0xffffffff8000df80
ffffffff8000ce3c:	80 df 00 80 
ffffffff8000ce40:	48 c7 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],0xc6
ffffffff8000ce47:	c6 00 00 00 
ffffffff8000ce4b:	48 c7 85 30 f6 ff ff 	mov    QWORD PTR [rbp-0x9d0],0xffffffff8000df90
ffffffff8000ce52:	90 df 00 80 
ffffffff8000ce56:	48 c7 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],0xc7
ffffffff8000ce5d:	c7 00 00 00 
ffffffff8000ce61:	48 c7 85 38 f6 ff ff 	mov    QWORD PTR [rbp-0x9c8],0xffffffff8000dfa0
ffffffff8000ce68:	a0 df 00 80 
ffffffff8000ce6c:	48 c7 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],0xc8
ffffffff8000ce73:	c8 00 00 00 
ffffffff8000ce77:	48 c7 85 40 f6 ff ff 	mov    QWORD PTR [rbp-0x9c0],0xffffffff8000dfb0
ffffffff8000ce7e:	b0 df 00 80 
ffffffff8000ce82:	48 c7 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],0xc9
ffffffff8000ce89:	c9 00 00 00 
ffffffff8000ce8d:	48 c7 85 48 f6 ff ff 	mov    QWORD PTR [rbp-0x9b8],0xffffffff8000dfc0
ffffffff8000ce94:	c0 df 00 80 
ffffffff8000ce98:	48 c7 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],0xca
ffffffff8000ce9f:	ca 00 00 00 
ffffffff8000cea3:	48 c7 85 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],0xffffffff8000dfd0
ffffffff8000ceaa:	d0 df 00 80 
ffffffff8000ceae:	48 c7 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],0xcb
ffffffff8000ceb5:	cb 00 00 00 
ffffffff8000ceb9:	48 c7 85 58 f6 ff ff 	mov    QWORD PTR [rbp-0x9a8],0xffffffff8000dfe0
ffffffff8000cec0:	e0 df 00 80 
ffffffff8000cec4:	48 c7 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],0xcc
ffffffff8000cecb:	cc 00 00 00 
ffffffff8000cecf:	48 c7 85 60 f6 ff ff 	mov    QWORD PTR [rbp-0x9a0],0xffffffff8000dff0
ffffffff8000ced6:	f0 df 00 80 
ffffffff8000ceda:	48 c7 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],0xcd
ffffffff8000cee1:	cd 00 00 00 
ffffffff8000cee5:	48 c7 85 68 f6 ff ff 	mov    QWORD PTR [rbp-0x998],0xffffffff8000e000
ffffffff8000ceec:	00 e0 00 80 
ffffffff8000cef0:	48 c7 85 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],0xce
ffffffff8000cef7:	ce 00 00 00 
ffffffff8000cefb:	48 c7 85 70 f6 ff ff 	mov    QWORD PTR [rbp-0x990],0xffffffff8000e010
ffffffff8000cf02:	10 e0 00 80 
ffffffff8000cf06:	48 c7 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],0xcf
ffffffff8000cf0d:	cf 00 00 00 
ffffffff8000cf11:	48 c7 85 78 f6 ff ff 	mov    QWORD PTR [rbp-0x988],0xffffffff8000e020
ffffffff8000cf18:	20 e0 00 80 
ffffffff8000cf1c:	48 c7 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],0xd0
ffffffff8000cf23:	d0 00 00 00 
ffffffff8000cf27:	48 c7 85 80 f6 ff ff 	mov    QWORD PTR [rbp-0x980],0xffffffff8000e030
ffffffff8000cf2e:	30 e0 00 80 
ffffffff8000cf32:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0xd1
ffffffff8000cf39:	d1 00 00 00 
ffffffff8000cf3d:	48 c7 85 88 f6 ff ff 	mov    QWORD PTR [rbp-0x978],0xffffffff8000e040
ffffffff8000cf44:	40 e0 00 80 
ffffffff8000cf48:	48 c7 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],0xd2
ffffffff8000cf4f:	d2 00 00 00 
ffffffff8000cf53:	48 c7 85 90 f6 ff ff 	mov    QWORD PTR [rbp-0x970],0xffffffff8000e050
ffffffff8000cf5a:	50 e0 00 80 
ffffffff8000cf5e:	48 c7 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],0xd3
ffffffff8000cf65:	d3 00 00 00 
ffffffff8000cf69:	48 c7 85 98 f6 ff ff 	mov    QWORD PTR [rbp-0x968],0xffffffff8000e060
ffffffff8000cf70:	60 e0 00 80 
ffffffff8000cf74:	48 c7 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],0xd4
ffffffff8000cf7b:	d4 00 00 00 
ffffffff8000cf7f:	48 c7 85 a0 f6 ff ff 	mov    QWORD PTR [rbp-0x960],0xffffffff8000e070
ffffffff8000cf86:	70 e0 00 80 
ffffffff8000cf8a:	48 c7 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],0xd5
ffffffff8000cf91:	d5 00 00 00 
ffffffff8000cf95:	48 c7 85 a8 f6 ff ff 	mov    QWORD PTR [rbp-0x958],0xffffffff8000e080
ffffffff8000cf9c:	80 e0 00 80 
ffffffff8000cfa0:	48 c7 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],0xd6
ffffffff8000cfa7:	d6 00 00 00 
ffffffff8000cfab:	48 c7 85 b0 f6 ff ff 	mov    QWORD PTR [rbp-0x950],0xffffffff8000e090
ffffffff8000cfb2:	90 e0 00 80 
ffffffff8000cfb6:	48 c7 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],0xd7
ffffffff8000cfbd:	d7 00 00 00 
ffffffff8000cfc1:	48 c7 85 b8 f6 ff ff 	mov    QWORD PTR [rbp-0x948],0xffffffff8000e0a0
ffffffff8000cfc8:	a0 e0 00 80 
ffffffff8000cfcc:	48 c7 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],0xd8
ffffffff8000cfd3:	d8 00 00 00 
ffffffff8000cfd7:	48 c7 85 c0 f6 ff ff 	mov    QWORD PTR [rbp-0x940],0xffffffff8000e0b0
ffffffff8000cfde:	b0 e0 00 80 
ffffffff8000cfe2:	48 c7 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],0xd9
ffffffff8000cfe9:	d9 00 00 00 
ffffffff8000cfed:	48 c7 85 c8 f6 ff ff 	mov    QWORD PTR [rbp-0x938],0xffffffff8000e0c0
ffffffff8000cff4:	c0 e0 00 80 
ffffffff8000cff8:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0xda
ffffffff8000cfff:	da 00 00 00 
ffffffff8000d003:	48 c7 85 d0 f6 ff ff 	mov    QWORD PTR [rbp-0x930],0xffffffff8000e0d0
ffffffff8000d00a:	d0 e0 00 80 
ffffffff8000d00e:	48 c7 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],0xdb
ffffffff8000d015:	db 00 00 00 
ffffffff8000d019:	48 c7 85 d8 f6 ff ff 	mov    QWORD PTR [rbp-0x928],0xffffffff8000e0e0
ffffffff8000d020:	e0 e0 00 80 
ffffffff8000d024:	48 c7 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],0xdc
ffffffff8000d02b:	dc 00 00 00 
ffffffff8000d02f:	48 c7 85 e0 f6 ff ff 	mov    QWORD PTR [rbp-0x920],0xffffffff8000e0f0
ffffffff8000d036:	f0 e0 00 80 
ffffffff8000d03a:	48 c7 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],0xdd
ffffffff8000d041:	dd 00 00 00 
ffffffff8000d045:	48 c7 85 e8 f6 ff ff 	mov    QWORD PTR [rbp-0x918],0xffffffff8000e100
ffffffff8000d04c:	00 e1 00 80 
ffffffff8000d050:	48 c7 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],0xde
ffffffff8000d057:	de 00 00 00 
ffffffff8000d05b:	48 c7 85 f0 f6 ff ff 	mov    QWORD PTR [rbp-0x910],0xffffffff8000e110
ffffffff8000d062:	10 e1 00 80 
ffffffff8000d066:	48 c7 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],0xdf
ffffffff8000d06d:	df 00 00 00 
ffffffff8000d071:	48 c7 85 f8 f6 ff ff 	mov    QWORD PTR [rbp-0x908],0xffffffff8000e120
ffffffff8000d078:	20 e1 00 80 
ffffffff8000d07c:	48 c7 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],0xe0
ffffffff8000d083:	e0 00 00 00 
ffffffff8000d087:	48 c7 85 00 f7 ff ff 	mov    QWORD PTR [rbp-0x900],0xffffffff8000e130
ffffffff8000d08e:	30 e1 00 80 
ffffffff8000d092:	48 c7 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],0xe1
ffffffff8000d099:	e1 00 00 00 
ffffffff8000d09d:	48 c7 85 08 f7 ff ff 	mov    QWORD PTR [rbp-0x8f8],0xffffffff8000e140
ffffffff8000d0a4:	40 e1 00 80 
ffffffff8000d0a8:	48 c7 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],0xe2
ffffffff8000d0af:	e2 00 00 00 
ffffffff8000d0b3:	48 c7 85 10 f7 ff ff 	mov    QWORD PTR [rbp-0x8f0],0xffffffff8000e150
ffffffff8000d0ba:	50 e1 00 80 
ffffffff8000d0be:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0xe3
ffffffff8000d0c5:	e3 00 00 00 
ffffffff8000d0c9:	48 c7 85 18 f7 ff ff 	mov    QWORD PTR [rbp-0x8e8],0xffffffff8000e160
ffffffff8000d0d0:	60 e1 00 80 
ffffffff8000d0d4:	48 c7 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],0xe4
ffffffff8000d0db:	e4 00 00 00 
ffffffff8000d0df:	48 c7 85 20 f7 ff ff 	mov    QWORD PTR [rbp-0x8e0],0xffffffff8000e170
ffffffff8000d0e6:	70 e1 00 80 
ffffffff8000d0ea:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0xe5
ffffffff8000d0f1:	e5 00 00 00 
ffffffff8000d0f5:	48 c7 85 28 f7 ff ff 	mov    QWORD PTR [rbp-0x8d8],0xffffffff8000e180
ffffffff8000d0fc:	80 e1 00 80 
ffffffff8000d100:	48 c7 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],0xe6
ffffffff8000d107:	e6 00 00 00 
ffffffff8000d10b:	48 c7 85 30 f7 ff ff 	mov    QWORD PTR [rbp-0x8d0],0xffffffff8000e190
ffffffff8000d112:	90 e1 00 80 
ffffffff8000d116:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0xe7
ffffffff8000d11d:	e7 00 00 00 
ffffffff8000d121:	48 c7 85 38 f7 ff ff 	mov    QWORD PTR [rbp-0x8c8],0xffffffff8000e1a0
ffffffff8000d128:	a0 e1 00 80 
ffffffff8000d12c:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0xe8
ffffffff8000d133:	e8 00 00 00 
ffffffff8000d137:	48 c7 85 40 f7 ff ff 	mov    QWORD PTR [rbp-0x8c0],0xffffffff8000e1b0
ffffffff8000d13e:	b0 e1 00 80 
ffffffff8000d142:	48 c7 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],0xe9
ffffffff8000d149:	e9 00 00 00 
ffffffff8000d14d:	48 c7 85 48 f7 ff ff 	mov    QWORD PTR [rbp-0x8b8],0xffffffff8000e1c0
ffffffff8000d154:	c0 e1 00 80 
ffffffff8000d158:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0xea
ffffffff8000d15f:	ea 00 00 00 
ffffffff8000d163:	48 c7 85 50 f7 ff ff 	mov    QWORD PTR [rbp-0x8b0],0xffffffff8000e1d0
ffffffff8000d16a:	d0 e1 00 80 
ffffffff8000d16e:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0xeb
ffffffff8000d175:	eb 00 00 00 
ffffffff8000d179:	48 c7 85 58 f7 ff ff 	mov    QWORD PTR [rbp-0x8a8],0xffffffff8000e1e0
ffffffff8000d180:	e0 e1 00 80 
ffffffff8000d184:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0xec
ffffffff8000d18b:	ec 00 00 00 
ffffffff8000d18f:	48 c7 85 60 f7 ff ff 	mov    QWORD PTR [rbp-0x8a0],0xffffffff8000e1f0
ffffffff8000d196:	f0 e1 00 80 
ffffffff8000d19a:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0xed
ffffffff8000d1a1:	ed 00 00 00 
ffffffff8000d1a5:	48 c7 85 68 f7 ff ff 	mov    QWORD PTR [rbp-0x898],0xffffffff8000e200
ffffffff8000d1ac:	00 e2 00 80 
ffffffff8000d1b0:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0xee
ffffffff8000d1b7:	ee 00 00 00 
ffffffff8000d1bb:	48 c7 85 70 f7 ff ff 	mov    QWORD PTR [rbp-0x890],0xffffffff8000e210
ffffffff8000d1c2:	10 e2 00 80 
ffffffff8000d1c6:	48 c7 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],0xef
ffffffff8000d1cd:	ef 00 00 00 
ffffffff8000d1d1:	48 c7 85 78 f7 ff ff 	mov    QWORD PTR [rbp-0x888],0xffffffff8000e220
ffffffff8000d1d8:	20 e2 00 80 
ffffffff8000d1dc:	48 c7 45 80 f0 00 00 	mov    QWORD PTR [rbp-0x80],0xf0
ffffffff8000d1e3:	00 
ffffffff8000d1e4:	48 c7 85 80 f7 ff ff 	mov    QWORD PTR [rbp-0x880],0xffffffff8000e230
ffffffff8000d1eb:	30 e2 00 80 
ffffffff8000d1ef:	48 c7 45 88 f1 00 00 	mov    QWORD PTR [rbp-0x78],0xf1
ffffffff8000d1f6:	00 
ffffffff8000d1f7:	48 c7 85 88 f7 ff ff 	mov    QWORD PTR [rbp-0x878],0xffffffff8000e240
ffffffff8000d1fe:	40 e2 00 80 
ffffffff8000d202:	48 c7 45 90 f2 00 00 	mov    QWORD PTR [rbp-0x70],0xf2
ffffffff8000d209:	00 
ffffffff8000d20a:	48 c7 85 90 f7 ff ff 	mov    QWORD PTR [rbp-0x870],0xffffffff8000e250
ffffffff8000d211:	50 e2 00 80 
ffffffff8000d215:	48 c7 45 98 f3 00 00 	mov    QWORD PTR [rbp-0x68],0xf3
ffffffff8000d21c:	00 
ffffffff8000d21d:	48 c7 85 98 f7 ff ff 	mov    QWORD PTR [rbp-0x868],0xffffffff8000e260
ffffffff8000d224:	60 e2 00 80 
ffffffff8000d228:	48 c7 45 a0 f4 00 00 	mov    QWORD PTR [rbp-0x60],0xf4
ffffffff8000d22f:	00 
ffffffff8000d230:	48 c7 85 a0 f7 ff ff 	mov    QWORD PTR [rbp-0x860],0xffffffff8000e270
ffffffff8000d237:	70 e2 00 80 
ffffffff8000d23b:	48 c7 45 a8 f5 00 00 	mov    QWORD PTR [rbp-0x58],0xf5
ffffffff8000d242:	00 
ffffffff8000d243:	48 c7 85 a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],0xffffffff8000e280
ffffffff8000d24a:	80 e2 00 80 
ffffffff8000d24e:	48 c7 45 b0 f6 00 00 	mov    QWORD PTR [rbp-0x50],0xf6
ffffffff8000d255:	00 
ffffffff8000d256:	48 c7 85 b0 f7 ff ff 	mov    QWORD PTR [rbp-0x850],0xffffffff8000e290
ffffffff8000d25d:	90 e2 00 80 
ffffffff8000d261:	48 c7 45 b8 f7 00 00 	mov    QWORD PTR [rbp-0x48],0xf7
ffffffff8000d268:	00 
ffffffff8000d269:	48 c7 85 b8 f7 ff ff 	mov    QWORD PTR [rbp-0x848],0xffffffff8000e2a0
ffffffff8000d270:	a0 e2 00 80 
ffffffff8000d274:	48 c7 45 c0 f8 00 00 	mov    QWORD PTR [rbp-0x40],0xf8
ffffffff8000d27b:	00 
ffffffff8000d27c:	48 c7 85 c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],0xffffffff8000e2b0
ffffffff8000d283:	b0 e2 00 80 
ffffffff8000d287:	48 c7 45 c8 f9 00 00 	mov    QWORD PTR [rbp-0x38],0xf9
ffffffff8000d28e:	00 
ffffffff8000d28f:	48 c7 85 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],0xffffffff8000e2c0
ffffffff8000d296:	c0 e2 00 80 
ffffffff8000d29a:	48 c7 45 d0 fa 00 00 	mov    QWORD PTR [rbp-0x30],0xfa
ffffffff8000d2a1:	00 
ffffffff8000d2a2:	48 c7 85 d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],0xffffffff8000e2d0
ffffffff8000d2a9:	d0 e2 00 80 
ffffffff8000d2ad:	48 c7 45 d8 fb 00 00 	mov    QWORD PTR [rbp-0x28],0xfb
ffffffff8000d2b4:	00 
ffffffff8000d2b5:	48 c7 85 d8 f7 ff ff 	mov    QWORD PTR [rbp-0x828],0xffffffff8000e2e0
ffffffff8000d2bc:	e0 e2 00 80 
ffffffff8000d2c0:	48 c7 45 e0 fc 00 00 	mov    QWORD PTR [rbp-0x20],0xfc
ffffffff8000d2c7:	00 
ffffffff8000d2c8:	48 c7 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],0xffffffff8000e2f0
ffffffff8000d2cf:	f0 e2 00 80 
ffffffff8000d2d3:	48 c7 45 e8 fd 00 00 	mov    QWORD PTR [rbp-0x18],0xfd
ffffffff8000d2da:	00 
ffffffff8000d2db:	48 c7 85 e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],0xffffffff8000e300
ffffffff8000d2e2:	00 e3 00 80 
ffffffff8000d2e6:	48 c7 45 f0 fe 00 00 	mov    QWORD PTR [rbp-0x10],0xfe
ffffffff8000d2ed:	00 
ffffffff8000d2ee:	48 c7 85 f0 f7 ff ff 	mov    QWORD PTR [rbp-0x810],0xffffffff8000e310
ffffffff8000d2f5:	10 e3 00 80 
ffffffff8000d2f9:	48 c7 45 f8 ff 00 00 	mov    QWORD PTR [rbp-0x8],0xff
ffffffff8000d300:	00 
ffffffff8000d301:	48 c7 85 f8 f7 ff ff 	mov    QWORD PTR [rbp-0x808],0xffffffff8000e320
ffffffff8000d308:	20 e3 00 80 
ffffffff8000d30c:	48 8d b5 00 f0 ff ff 	lea    rsi,[rbp-0x1000]
ffffffff8000d313:	ba 00 08 00 00       	mov    edx,0x800
    return result;
ffffffff8000d318:	e8 13 ab 00 00       	call   ffffffff80017e30 <memcpy>
ffffffff8000d31d:	48 8b 85 f8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1008]
ffffffff8000d324:	48 81 c4 10 10 00 00 	add    rsp,0x1010
ffffffff8000d32b:	5d                   	pop    rbp
ffffffff8000d32c:	c3                   	ret
ffffffff8000d32d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff8000d330 <idt.make_trampoline__struct_1913.trampoline>:
            asm volatile ("push %[int]\njmp catcher\n"
ffffffff8000d330:	6a 00                	push   0x0
ffffffff8000d332:	e9 99 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d337:	c3                   	ret
ffffffff8000d338:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d33f:	00 

ffffffff8000d340 <idt.make_trampoline__struct_1915.trampoline>:
ffffffff8000d340:	6a 01                	push   0x1
ffffffff8000d342:	e9 89 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d347:	c3                   	ret
ffffffff8000d348:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d34f:	00 

ffffffff8000d350 <idt.make_trampoline__struct_1917.trampoline>:
ffffffff8000d350:	6a 02                	push   0x2
ffffffff8000d352:	e9 79 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d357:	c3                   	ret
ffffffff8000d358:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d35f:	00 

ffffffff8000d360 <idt.make_trampoline__struct_1919.trampoline>:
ffffffff8000d360:	6a 03                	push   0x3
ffffffff8000d362:	e9 69 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d367:	c3                   	ret
ffffffff8000d368:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d36f:	00 

ffffffff8000d370 <idt.make_trampoline__struct_1921.trampoline>:
ffffffff8000d370:	6a 04                	push   0x4
ffffffff8000d372:	e9 59 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d377:	c3                   	ret
ffffffff8000d378:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d37f:	00 

ffffffff8000d380 <idt.make_trampoline__struct_1923.trampoline>:
ffffffff8000d380:	6a 05                	push   0x5
ffffffff8000d382:	e9 49 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d387:	c3                   	ret
ffffffff8000d388:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d38f:	00 

ffffffff8000d390 <idt.make_trampoline__struct_1925.trampoline>:
ffffffff8000d390:	6a 06                	push   0x6
ffffffff8000d392:	e9 39 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d397:	c3                   	ret
ffffffff8000d398:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d39f:	00 

ffffffff8000d3a0 <idt.make_trampoline__struct_1927.trampoline>:
ffffffff8000d3a0:	6a 07                	push   0x7
ffffffff8000d3a2:	e9 29 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d3a7:	c3                   	ret
ffffffff8000d3a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d3af:	00 

ffffffff8000d3b0 <idt.make_trampoline__struct_1929.trampoline>:
ffffffff8000d3b0:	6a 08                	push   0x8
ffffffff8000d3b2:	e9 19 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d3b7:	c3                   	ret
ffffffff8000d3b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d3bf:	00 

ffffffff8000d3c0 <idt.make_trampoline__struct_1931.trampoline>:
ffffffff8000d3c0:	6a 09                	push   0x9
ffffffff8000d3c2:	e9 09 e7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d3c7:	c3                   	ret
ffffffff8000d3c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d3cf:	00 

ffffffff8000d3d0 <idt.make_trampoline__struct_1933.trampoline>:
ffffffff8000d3d0:	6a 0a                	push   0xa
ffffffff8000d3d2:	e9 f9 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d3d7:	c3                   	ret
ffffffff8000d3d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d3df:	00 

ffffffff8000d3e0 <idt.make_trampoline__struct_1935.trampoline>:
ffffffff8000d3e0:	6a 0b                	push   0xb
ffffffff8000d3e2:	e9 e9 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d3e7:	c3                   	ret
ffffffff8000d3e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d3ef:	00 

ffffffff8000d3f0 <idt.make_trampoline__struct_1937.trampoline>:
ffffffff8000d3f0:	6a 0c                	push   0xc
ffffffff8000d3f2:	e9 d9 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d3f7:	c3                   	ret
ffffffff8000d3f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d3ff:	00 

ffffffff8000d400 <idt.make_trampoline__struct_1939.trampoline>:
ffffffff8000d400:	6a 0d                	push   0xd
ffffffff8000d402:	e9 c9 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d407:	c3                   	ret
ffffffff8000d408:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d40f:	00 

ffffffff8000d410 <idt.make_trampoline__struct_1941.trampoline>:
ffffffff8000d410:	6a 0e                	push   0xe
ffffffff8000d412:	e9 b9 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d417:	c3                   	ret
ffffffff8000d418:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d41f:	00 

ffffffff8000d420 <idt.make_trampoline__struct_1943.trampoline>:
ffffffff8000d420:	6a 0f                	push   0xf
ffffffff8000d422:	e9 a9 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d427:	c3                   	ret
ffffffff8000d428:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d42f:	00 

ffffffff8000d430 <idt.make_trampoline__struct_1945.trampoline>:
ffffffff8000d430:	6a 10                	push   0x10
ffffffff8000d432:	e9 99 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d437:	c3                   	ret
ffffffff8000d438:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d43f:	00 

ffffffff8000d440 <idt.make_trampoline__struct_1947.trampoline>:
ffffffff8000d440:	6a 11                	push   0x11
ffffffff8000d442:	e9 89 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d447:	c3                   	ret
ffffffff8000d448:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d44f:	00 

ffffffff8000d450 <idt.make_trampoline__struct_1949.trampoline>:
ffffffff8000d450:	6a 12                	push   0x12
ffffffff8000d452:	e9 79 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d457:	c3                   	ret
ffffffff8000d458:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d45f:	00 

ffffffff8000d460 <idt.make_trampoline__struct_1951.trampoline>:
ffffffff8000d460:	6a 13                	push   0x13
ffffffff8000d462:	e9 69 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d467:	c3                   	ret
ffffffff8000d468:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d46f:	00 

ffffffff8000d470 <idt.make_trampoline__struct_1953.trampoline>:
ffffffff8000d470:	6a 14                	push   0x14
ffffffff8000d472:	e9 59 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d477:	c3                   	ret
ffffffff8000d478:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d47f:	00 

ffffffff8000d480 <idt.make_trampoline__struct_1955.trampoline>:
ffffffff8000d480:	6a 15                	push   0x15
ffffffff8000d482:	e9 49 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d487:	c3                   	ret
ffffffff8000d488:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d48f:	00 

ffffffff8000d490 <idt.make_trampoline__struct_1957.trampoline>:
ffffffff8000d490:	6a 16                	push   0x16
ffffffff8000d492:	e9 39 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d497:	c3                   	ret
ffffffff8000d498:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d49f:	00 

ffffffff8000d4a0 <idt.make_trampoline__struct_1959.trampoline>:
ffffffff8000d4a0:	6a 17                	push   0x17
ffffffff8000d4a2:	e9 29 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d4a7:	c3                   	ret
ffffffff8000d4a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d4af:	00 

ffffffff8000d4b0 <idt.make_trampoline__struct_1961.trampoline>:
ffffffff8000d4b0:	6a 18                	push   0x18
ffffffff8000d4b2:	e9 19 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d4b7:	c3                   	ret
ffffffff8000d4b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d4bf:	00 

ffffffff8000d4c0 <idt.make_trampoline__struct_1963.trampoline>:
ffffffff8000d4c0:	6a 19                	push   0x19
ffffffff8000d4c2:	e9 09 e6 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d4c7:	c3                   	ret
ffffffff8000d4c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d4cf:	00 

ffffffff8000d4d0 <idt.make_trampoline__struct_1965.trampoline>:
ffffffff8000d4d0:	6a 1a                	push   0x1a
ffffffff8000d4d2:	e9 f9 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d4d7:	c3                   	ret
ffffffff8000d4d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d4df:	00 

ffffffff8000d4e0 <idt.make_trampoline__struct_1967.trampoline>:
ffffffff8000d4e0:	6a 1b                	push   0x1b
ffffffff8000d4e2:	e9 e9 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d4e7:	c3                   	ret
ffffffff8000d4e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d4ef:	00 

ffffffff8000d4f0 <idt.make_trampoline__struct_1969.trampoline>:
ffffffff8000d4f0:	6a 1c                	push   0x1c
ffffffff8000d4f2:	e9 d9 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d4f7:	c3                   	ret
ffffffff8000d4f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d4ff:	00 

ffffffff8000d500 <idt.make_trampoline__struct_1971.trampoline>:
ffffffff8000d500:	6a 1d                	push   0x1d
ffffffff8000d502:	e9 c9 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d507:	c3                   	ret
ffffffff8000d508:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d50f:	00 

ffffffff8000d510 <idt.make_trampoline__struct_1973.trampoline>:
ffffffff8000d510:	6a 1e                	push   0x1e
ffffffff8000d512:	e9 b9 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d517:	c3                   	ret
ffffffff8000d518:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d51f:	00 

ffffffff8000d520 <idt.make_trampoline__struct_1975.trampoline>:
ffffffff8000d520:	6a 1f                	push   0x1f
ffffffff8000d522:	e9 a9 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d527:	c3                   	ret
ffffffff8000d528:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d52f:	00 

ffffffff8000d530 <idt.make_trampoline__struct_1977.trampoline>:
ffffffff8000d530:	6a 20                	push   0x20
ffffffff8000d532:	e9 99 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d537:	c3                   	ret
ffffffff8000d538:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d53f:	00 

ffffffff8000d540 <idt.make_trampoline__struct_1979.trampoline>:
ffffffff8000d540:	6a 21                	push   0x21
ffffffff8000d542:	e9 89 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d547:	c3                   	ret
ffffffff8000d548:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d54f:	00 

ffffffff8000d550 <idt.make_trampoline__struct_1981.trampoline>:
ffffffff8000d550:	6a 22                	push   0x22
ffffffff8000d552:	e9 79 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d557:	c3                   	ret
ffffffff8000d558:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d55f:	00 

ffffffff8000d560 <idt.make_trampoline__struct_1983.trampoline>:
ffffffff8000d560:	6a 23                	push   0x23
ffffffff8000d562:	e9 69 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d567:	c3                   	ret
ffffffff8000d568:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d56f:	00 

ffffffff8000d570 <idt.make_trampoline__struct_1985.trampoline>:
ffffffff8000d570:	6a 24                	push   0x24
ffffffff8000d572:	e9 59 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d577:	c3                   	ret
ffffffff8000d578:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d57f:	00 

ffffffff8000d580 <idt.make_trampoline__struct_1987.trampoline>:
ffffffff8000d580:	6a 25                	push   0x25
ffffffff8000d582:	e9 49 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d587:	c3                   	ret
ffffffff8000d588:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d58f:	00 

ffffffff8000d590 <idt.make_trampoline__struct_1989.trampoline>:
ffffffff8000d590:	6a 26                	push   0x26
ffffffff8000d592:	e9 39 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d597:	c3                   	ret
ffffffff8000d598:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d59f:	00 

ffffffff8000d5a0 <idt.make_trampoline__struct_1991.trampoline>:
ffffffff8000d5a0:	6a 27                	push   0x27
ffffffff8000d5a2:	e9 29 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d5a7:	c3                   	ret
ffffffff8000d5a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d5af:	00 

ffffffff8000d5b0 <idt.make_trampoline__struct_1993.trampoline>:
ffffffff8000d5b0:	6a 28                	push   0x28
ffffffff8000d5b2:	e9 19 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d5b7:	c3                   	ret
ffffffff8000d5b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d5bf:	00 

ffffffff8000d5c0 <idt.make_trampoline__struct_1995.trampoline>:
ffffffff8000d5c0:	6a 29                	push   0x29
ffffffff8000d5c2:	e9 09 e5 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d5c7:	c3                   	ret
ffffffff8000d5c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d5cf:	00 

ffffffff8000d5d0 <idt.make_trampoline__struct_1997.trampoline>:
ffffffff8000d5d0:	6a 2a                	push   0x2a
ffffffff8000d5d2:	e9 f9 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d5d7:	c3                   	ret
ffffffff8000d5d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d5df:	00 

ffffffff8000d5e0 <idt.make_trampoline__struct_1999.trampoline>:
ffffffff8000d5e0:	6a 2b                	push   0x2b
ffffffff8000d5e2:	e9 e9 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d5e7:	c3                   	ret
ffffffff8000d5e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d5ef:	00 

ffffffff8000d5f0 <idt.make_trampoline__struct_2001.trampoline>:
ffffffff8000d5f0:	6a 2c                	push   0x2c
ffffffff8000d5f2:	e9 d9 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d5f7:	c3                   	ret
ffffffff8000d5f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d5ff:	00 

ffffffff8000d600 <idt.make_trampoline__struct_2003.trampoline>:
ffffffff8000d600:	6a 2d                	push   0x2d
ffffffff8000d602:	e9 c9 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d607:	c3                   	ret
ffffffff8000d608:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d60f:	00 

ffffffff8000d610 <idt.make_trampoline__struct_2005.trampoline>:
ffffffff8000d610:	6a 2e                	push   0x2e
ffffffff8000d612:	e9 b9 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d617:	c3                   	ret
ffffffff8000d618:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d61f:	00 

ffffffff8000d620 <idt.make_trampoline__struct_2007.trampoline>:
ffffffff8000d620:	6a 2f                	push   0x2f
ffffffff8000d622:	e9 a9 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d627:	c3                   	ret
ffffffff8000d628:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d62f:	00 

ffffffff8000d630 <idt.make_trampoline__struct_2009.trampoline>:
ffffffff8000d630:	6a 30                	push   0x30
ffffffff8000d632:	e9 99 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d637:	c3                   	ret
ffffffff8000d638:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d63f:	00 

ffffffff8000d640 <idt.make_trampoline__struct_2011.trampoline>:
ffffffff8000d640:	6a 31                	push   0x31
ffffffff8000d642:	e9 89 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d647:	c3                   	ret
ffffffff8000d648:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d64f:	00 

ffffffff8000d650 <idt.make_trampoline__struct_2013.trampoline>:
ffffffff8000d650:	6a 32                	push   0x32
ffffffff8000d652:	e9 79 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d657:	c3                   	ret
ffffffff8000d658:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d65f:	00 

ffffffff8000d660 <idt.make_trampoline__struct_2015.trampoline>:
ffffffff8000d660:	6a 33                	push   0x33
ffffffff8000d662:	e9 69 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d667:	c3                   	ret
ffffffff8000d668:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d66f:	00 

ffffffff8000d670 <idt.make_trampoline__struct_2017.trampoline>:
ffffffff8000d670:	6a 34                	push   0x34
ffffffff8000d672:	e9 59 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d677:	c3                   	ret
ffffffff8000d678:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d67f:	00 

ffffffff8000d680 <idt.make_trampoline__struct_2019.trampoline>:
ffffffff8000d680:	6a 35                	push   0x35
ffffffff8000d682:	e9 49 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d687:	c3                   	ret
ffffffff8000d688:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d68f:	00 

ffffffff8000d690 <idt.make_trampoline__struct_2021.trampoline>:
ffffffff8000d690:	6a 36                	push   0x36
ffffffff8000d692:	e9 39 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d697:	c3                   	ret
ffffffff8000d698:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d69f:	00 

ffffffff8000d6a0 <idt.make_trampoline__struct_2023.trampoline>:
ffffffff8000d6a0:	6a 37                	push   0x37
ffffffff8000d6a2:	e9 29 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d6a7:	c3                   	ret
ffffffff8000d6a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d6af:	00 

ffffffff8000d6b0 <idt.make_trampoline__struct_2025.trampoline>:
ffffffff8000d6b0:	6a 38                	push   0x38
ffffffff8000d6b2:	e9 19 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d6b7:	c3                   	ret
ffffffff8000d6b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d6bf:	00 

ffffffff8000d6c0 <idt.make_trampoline__struct_2027.trampoline>:
ffffffff8000d6c0:	6a 39                	push   0x39
ffffffff8000d6c2:	e9 09 e4 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d6c7:	c3                   	ret
ffffffff8000d6c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d6cf:	00 

ffffffff8000d6d0 <idt.make_trampoline__struct_2029.trampoline>:
ffffffff8000d6d0:	6a 3a                	push   0x3a
ffffffff8000d6d2:	e9 f9 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d6d7:	c3                   	ret
ffffffff8000d6d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d6df:	00 

ffffffff8000d6e0 <idt.make_trampoline__struct_2031.trampoline>:
ffffffff8000d6e0:	6a 3b                	push   0x3b
ffffffff8000d6e2:	e9 e9 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d6e7:	c3                   	ret
ffffffff8000d6e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d6ef:	00 

ffffffff8000d6f0 <idt.make_trampoline__struct_2033.trampoline>:
ffffffff8000d6f0:	6a 3c                	push   0x3c
ffffffff8000d6f2:	e9 d9 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d6f7:	c3                   	ret
ffffffff8000d6f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d6ff:	00 

ffffffff8000d700 <idt.make_trampoline__struct_2035.trampoline>:
ffffffff8000d700:	6a 3d                	push   0x3d
ffffffff8000d702:	e9 c9 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d707:	c3                   	ret
ffffffff8000d708:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d70f:	00 

ffffffff8000d710 <idt.make_trampoline__struct_2037.trampoline>:
ffffffff8000d710:	6a 3e                	push   0x3e
ffffffff8000d712:	e9 b9 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d717:	c3                   	ret
ffffffff8000d718:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d71f:	00 

ffffffff8000d720 <idt.make_trampoline__struct_2039.trampoline>:
ffffffff8000d720:	6a 3f                	push   0x3f
ffffffff8000d722:	e9 a9 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d727:	c3                   	ret
ffffffff8000d728:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d72f:	00 

ffffffff8000d730 <idt.make_trampoline__struct_2041.trampoline>:
ffffffff8000d730:	6a 40                	push   0x40
ffffffff8000d732:	e9 99 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d737:	c3                   	ret
ffffffff8000d738:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d73f:	00 

ffffffff8000d740 <idt.make_trampoline__struct_2043.trampoline>:
ffffffff8000d740:	6a 41                	push   0x41
ffffffff8000d742:	e9 89 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d747:	c3                   	ret
ffffffff8000d748:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d74f:	00 

ffffffff8000d750 <idt.make_trampoline__struct_2045.trampoline>:
ffffffff8000d750:	6a 42                	push   0x42
ffffffff8000d752:	e9 79 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d757:	c3                   	ret
ffffffff8000d758:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d75f:	00 

ffffffff8000d760 <idt.make_trampoline__struct_2047.trampoline>:
ffffffff8000d760:	6a 43                	push   0x43
ffffffff8000d762:	e9 69 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d767:	c3                   	ret
ffffffff8000d768:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d76f:	00 

ffffffff8000d770 <idt.make_trampoline__struct_2049.trampoline>:
ffffffff8000d770:	6a 44                	push   0x44
ffffffff8000d772:	e9 59 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d777:	c3                   	ret
ffffffff8000d778:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d77f:	00 

ffffffff8000d780 <idt.make_trampoline__struct_2051.trampoline>:
ffffffff8000d780:	6a 45                	push   0x45
ffffffff8000d782:	e9 49 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d787:	c3                   	ret
ffffffff8000d788:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d78f:	00 

ffffffff8000d790 <idt.make_trampoline__struct_2053.trampoline>:
ffffffff8000d790:	6a 46                	push   0x46
ffffffff8000d792:	e9 39 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d797:	c3                   	ret
ffffffff8000d798:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d79f:	00 

ffffffff8000d7a0 <idt.make_trampoline__struct_2055.trampoline>:
ffffffff8000d7a0:	6a 47                	push   0x47
ffffffff8000d7a2:	e9 29 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d7a7:	c3                   	ret
ffffffff8000d7a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d7af:	00 

ffffffff8000d7b0 <idt.make_trampoline__struct_2057.trampoline>:
ffffffff8000d7b0:	6a 48                	push   0x48
ffffffff8000d7b2:	e9 19 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d7b7:	c3                   	ret
ffffffff8000d7b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d7bf:	00 

ffffffff8000d7c0 <idt.make_trampoline__struct_2059.trampoline>:
ffffffff8000d7c0:	6a 49                	push   0x49
ffffffff8000d7c2:	e9 09 e3 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d7c7:	c3                   	ret
ffffffff8000d7c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d7cf:	00 

ffffffff8000d7d0 <idt.make_trampoline__struct_2061.trampoline>:
ffffffff8000d7d0:	6a 4a                	push   0x4a
ffffffff8000d7d2:	e9 f9 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d7d7:	c3                   	ret
ffffffff8000d7d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d7df:	00 

ffffffff8000d7e0 <idt.make_trampoline__struct_2063.trampoline>:
ffffffff8000d7e0:	6a 4b                	push   0x4b
ffffffff8000d7e2:	e9 e9 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d7e7:	c3                   	ret
ffffffff8000d7e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d7ef:	00 

ffffffff8000d7f0 <idt.make_trampoline__struct_2065.trampoline>:
ffffffff8000d7f0:	6a 4c                	push   0x4c
ffffffff8000d7f2:	e9 d9 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d7f7:	c3                   	ret
ffffffff8000d7f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d7ff:	00 

ffffffff8000d800 <idt.make_trampoline__struct_2067.trampoline>:
ffffffff8000d800:	6a 4d                	push   0x4d
ffffffff8000d802:	e9 c9 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d807:	c3                   	ret
ffffffff8000d808:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d80f:	00 

ffffffff8000d810 <idt.make_trampoline__struct_2069.trampoline>:
ffffffff8000d810:	6a 4e                	push   0x4e
ffffffff8000d812:	e9 b9 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d817:	c3                   	ret
ffffffff8000d818:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d81f:	00 

ffffffff8000d820 <idt.make_trampoline__struct_2071.trampoline>:
ffffffff8000d820:	6a 4f                	push   0x4f
ffffffff8000d822:	e9 a9 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d827:	c3                   	ret
ffffffff8000d828:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d82f:	00 

ffffffff8000d830 <idt.make_trampoline__struct_2073.trampoline>:
ffffffff8000d830:	6a 50                	push   0x50
ffffffff8000d832:	e9 99 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d837:	c3                   	ret
ffffffff8000d838:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d83f:	00 

ffffffff8000d840 <idt.make_trampoline__struct_2075.trampoline>:
ffffffff8000d840:	6a 51                	push   0x51
ffffffff8000d842:	e9 89 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d847:	c3                   	ret
ffffffff8000d848:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d84f:	00 

ffffffff8000d850 <idt.make_trampoline__struct_2077.trampoline>:
ffffffff8000d850:	6a 52                	push   0x52
ffffffff8000d852:	e9 79 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d857:	c3                   	ret
ffffffff8000d858:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d85f:	00 

ffffffff8000d860 <idt.make_trampoline__struct_2079.trampoline>:
ffffffff8000d860:	6a 53                	push   0x53
ffffffff8000d862:	e9 69 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d867:	c3                   	ret
ffffffff8000d868:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d86f:	00 

ffffffff8000d870 <idt.make_trampoline__struct_2081.trampoline>:
ffffffff8000d870:	6a 54                	push   0x54
ffffffff8000d872:	e9 59 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d877:	c3                   	ret
ffffffff8000d878:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d87f:	00 

ffffffff8000d880 <idt.make_trampoline__struct_2083.trampoline>:
ffffffff8000d880:	6a 55                	push   0x55
ffffffff8000d882:	e9 49 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d887:	c3                   	ret
ffffffff8000d888:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d88f:	00 

ffffffff8000d890 <idt.make_trampoline__struct_2085.trampoline>:
ffffffff8000d890:	6a 56                	push   0x56
ffffffff8000d892:	e9 39 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d897:	c3                   	ret
ffffffff8000d898:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d89f:	00 

ffffffff8000d8a0 <idt.make_trampoline__struct_2087.trampoline>:
ffffffff8000d8a0:	6a 57                	push   0x57
ffffffff8000d8a2:	e9 29 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d8a7:	c3                   	ret
ffffffff8000d8a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d8af:	00 

ffffffff8000d8b0 <idt.make_trampoline__struct_2089.trampoline>:
ffffffff8000d8b0:	6a 58                	push   0x58
ffffffff8000d8b2:	e9 19 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d8b7:	c3                   	ret
ffffffff8000d8b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d8bf:	00 

ffffffff8000d8c0 <idt.make_trampoline__struct_2091.trampoline>:
ffffffff8000d8c0:	6a 59                	push   0x59
ffffffff8000d8c2:	e9 09 e2 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d8c7:	c3                   	ret
ffffffff8000d8c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d8cf:	00 

ffffffff8000d8d0 <idt.make_trampoline__struct_2093.trampoline>:
ffffffff8000d8d0:	6a 5a                	push   0x5a
ffffffff8000d8d2:	e9 f9 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d8d7:	c3                   	ret
ffffffff8000d8d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d8df:	00 

ffffffff8000d8e0 <idt.make_trampoline__struct_2095.trampoline>:
ffffffff8000d8e0:	6a 5b                	push   0x5b
ffffffff8000d8e2:	e9 e9 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d8e7:	c3                   	ret
ffffffff8000d8e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d8ef:	00 

ffffffff8000d8f0 <idt.make_trampoline__struct_2097.trampoline>:
ffffffff8000d8f0:	6a 5c                	push   0x5c
ffffffff8000d8f2:	e9 d9 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d8f7:	c3                   	ret
ffffffff8000d8f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d8ff:	00 

ffffffff8000d900 <idt.make_trampoline__struct_2099.trampoline>:
ffffffff8000d900:	6a 5d                	push   0x5d
ffffffff8000d902:	e9 c9 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d907:	c3                   	ret
ffffffff8000d908:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d90f:	00 

ffffffff8000d910 <idt.make_trampoline__struct_2101.trampoline>:
ffffffff8000d910:	6a 5e                	push   0x5e
ffffffff8000d912:	e9 b9 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d917:	c3                   	ret
ffffffff8000d918:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d91f:	00 

ffffffff8000d920 <idt.make_trampoline__struct_2103.trampoline>:
ffffffff8000d920:	6a 5f                	push   0x5f
ffffffff8000d922:	e9 a9 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d927:	c3                   	ret
ffffffff8000d928:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d92f:	00 

ffffffff8000d930 <idt.make_trampoline__struct_2105.trampoline>:
ffffffff8000d930:	6a 60                	push   0x60
ffffffff8000d932:	e9 99 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d937:	c3                   	ret
ffffffff8000d938:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d93f:	00 

ffffffff8000d940 <idt.make_trampoline__struct_2107.trampoline>:
ffffffff8000d940:	6a 61                	push   0x61
ffffffff8000d942:	e9 89 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d947:	c3                   	ret
ffffffff8000d948:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d94f:	00 

ffffffff8000d950 <idt.make_trampoline__struct_2109.trampoline>:
ffffffff8000d950:	6a 62                	push   0x62
ffffffff8000d952:	e9 79 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d957:	c3                   	ret
ffffffff8000d958:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d95f:	00 

ffffffff8000d960 <idt.make_trampoline__struct_2111.trampoline>:
ffffffff8000d960:	6a 63                	push   0x63
ffffffff8000d962:	e9 69 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d967:	c3                   	ret
ffffffff8000d968:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d96f:	00 

ffffffff8000d970 <idt.make_trampoline__struct_2113.trampoline>:
ffffffff8000d970:	6a 64                	push   0x64
ffffffff8000d972:	e9 59 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d977:	c3                   	ret
ffffffff8000d978:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d97f:	00 

ffffffff8000d980 <idt.make_trampoline__struct_2115.trampoline>:
ffffffff8000d980:	6a 65                	push   0x65
ffffffff8000d982:	e9 49 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d987:	c3                   	ret
ffffffff8000d988:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d98f:	00 

ffffffff8000d990 <idt.make_trampoline__struct_2117.trampoline>:
ffffffff8000d990:	6a 66                	push   0x66
ffffffff8000d992:	e9 39 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d997:	c3                   	ret
ffffffff8000d998:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d99f:	00 

ffffffff8000d9a0 <idt.make_trampoline__struct_2119.trampoline>:
ffffffff8000d9a0:	6a 67                	push   0x67
ffffffff8000d9a2:	e9 29 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d9a7:	c3                   	ret
ffffffff8000d9a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d9af:	00 

ffffffff8000d9b0 <idt.make_trampoline__struct_2121.trampoline>:
ffffffff8000d9b0:	6a 68                	push   0x68
ffffffff8000d9b2:	e9 19 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d9b7:	c3                   	ret
ffffffff8000d9b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d9bf:	00 

ffffffff8000d9c0 <idt.make_trampoline__struct_2123.trampoline>:
ffffffff8000d9c0:	6a 69                	push   0x69
ffffffff8000d9c2:	e9 09 e1 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d9c7:	c3                   	ret
ffffffff8000d9c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d9cf:	00 

ffffffff8000d9d0 <idt.make_trampoline__struct_2125.trampoline>:
ffffffff8000d9d0:	6a 6a                	push   0x6a
ffffffff8000d9d2:	e9 f9 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d9d7:	c3                   	ret
ffffffff8000d9d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d9df:	00 

ffffffff8000d9e0 <idt.make_trampoline__struct_2127.trampoline>:
ffffffff8000d9e0:	6a 6b                	push   0x6b
ffffffff8000d9e2:	e9 e9 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d9e7:	c3                   	ret
ffffffff8000d9e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d9ef:	00 

ffffffff8000d9f0 <idt.make_trampoline__struct_2129.trampoline>:
ffffffff8000d9f0:	6a 6c                	push   0x6c
ffffffff8000d9f2:	e9 d9 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000d9f7:	c3                   	ret
ffffffff8000d9f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000d9ff:	00 

ffffffff8000da00 <idt.make_trampoline__struct_2131.trampoline>:
ffffffff8000da00:	6a 6d                	push   0x6d
ffffffff8000da02:	e9 c9 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da07:	c3                   	ret
ffffffff8000da08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da0f:	00 

ffffffff8000da10 <idt.make_trampoline__struct_2133.trampoline>:
ffffffff8000da10:	6a 6e                	push   0x6e
ffffffff8000da12:	e9 b9 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da17:	c3                   	ret
ffffffff8000da18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da1f:	00 

ffffffff8000da20 <idt.make_trampoline__struct_2135.trampoline>:
ffffffff8000da20:	6a 6f                	push   0x6f
ffffffff8000da22:	e9 a9 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da27:	c3                   	ret
ffffffff8000da28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da2f:	00 

ffffffff8000da30 <idt.make_trampoline__struct_2137.trampoline>:
ffffffff8000da30:	6a 70                	push   0x70
ffffffff8000da32:	e9 99 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da37:	c3                   	ret
ffffffff8000da38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da3f:	00 

ffffffff8000da40 <idt.make_trampoline__struct_2139.trampoline>:
ffffffff8000da40:	6a 71                	push   0x71
ffffffff8000da42:	e9 89 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da47:	c3                   	ret
ffffffff8000da48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da4f:	00 

ffffffff8000da50 <idt.make_trampoline__struct_2141.trampoline>:
ffffffff8000da50:	6a 72                	push   0x72
ffffffff8000da52:	e9 79 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da57:	c3                   	ret
ffffffff8000da58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da5f:	00 

ffffffff8000da60 <idt.make_trampoline__struct_2143.trampoline>:
ffffffff8000da60:	6a 73                	push   0x73
ffffffff8000da62:	e9 69 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da67:	c3                   	ret
ffffffff8000da68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da6f:	00 

ffffffff8000da70 <idt.make_trampoline__struct_2145.trampoline>:
ffffffff8000da70:	6a 74                	push   0x74
ffffffff8000da72:	e9 59 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da77:	c3                   	ret
ffffffff8000da78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da7f:	00 

ffffffff8000da80 <idt.make_trampoline__struct_2147.trampoline>:
ffffffff8000da80:	6a 75                	push   0x75
ffffffff8000da82:	e9 49 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da87:	c3                   	ret
ffffffff8000da88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da8f:	00 

ffffffff8000da90 <idt.make_trampoline__struct_2149.trampoline>:
ffffffff8000da90:	6a 76                	push   0x76
ffffffff8000da92:	e9 39 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000da97:	c3                   	ret
ffffffff8000da98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000da9f:	00 

ffffffff8000daa0 <idt.make_trampoline__struct_2151.trampoline>:
ffffffff8000daa0:	6a 77                	push   0x77
ffffffff8000daa2:	e9 29 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000daa7:	c3                   	ret
ffffffff8000daa8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000daaf:	00 

ffffffff8000dab0 <idt.make_trampoline__struct_2153.trampoline>:
ffffffff8000dab0:	6a 78                	push   0x78
ffffffff8000dab2:	e9 19 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dab7:	c3                   	ret
ffffffff8000dab8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dabf:	00 

ffffffff8000dac0 <idt.make_trampoline__struct_2155.trampoline>:
ffffffff8000dac0:	6a 79                	push   0x79
ffffffff8000dac2:	e9 09 e0 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dac7:	c3                   	ret
ffffffff8000dac8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dacf:	00 

ffffffff8000dad0 <idt.make_trampoline__struct_2157.trampoline>:
ffffffff8000dad0:	6a 7a                	push   0x7a
ffffffff8000dad2:	e9 f9 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dad7:	c3                   	ret
ffffffff8000dad8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dadf:	00 

ffffffff8000dae0 <idt.make_trampoline__struct_2159.trampoline>:
ffffffff8000dae0:	6a 7b                	push   0x7b
ffffffff8000dae2:	e9 e9 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dae7:	c3                   	ret
ffffffff8000dae8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000daef:	00 

ffffffff8000daf0 <idt.make_trampoline__struct_2161.trampoline>:
ffffffff8000daf0:	6a 7c                	push   0x7c
ffffffff8000daf2:	e9 d9 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000daf7:	c3                   	ret
ffffffff8000daf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000daff:	00 

ffffffff8000db00 <idt.make_trampoline__struct_2163.trampoline>:
ffffffff8000db00:	6a 7d                	push   0x7d
ffffffff8000db02:	e9 c9 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db07:	c3                   	ret
ffffffff8000db08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db0f:	00 

ffffffff8000db10 <idt.make_trampoline__struct_2165.trampoline>:
ffffffff8000db10:	6a 7e                	push   0x7e
ffffffff8000db12:	e9 b9 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db17:	c3                   	ret
ffffffff8000db18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db1f:	00 

ffffffff8000db20 <idt.make_trampoline__struct_2167.trampoline>:
ffffffff8000db20:	6a 7f                	push   0x7f
ffffffff8000db22:	e9 a9 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db27:	c3                   	ret
ffffffff8000db28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db2f:	00 

ffffffff8000db30 <idt.make_trampoline__struct_2169.trampoline>:
ffffffff8000db30:	6a 80                	push   0xffffffffffffff80
ffffffff8000db32:	e9 99 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db37:	c3                   	ret
ffffffff8000db38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db3f:	00 

ffffffff8000db40 <idt.make_trampoline__struct_2171.trampoline>:
ffffffff8000db40:	6a 81                	push   0xffffffffffffff81
ffffffff8000db42:	e9 89 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db47:	c3                   	ret
ffffffff8000db48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db4f:	00 

ffffffff8000db50 <idt.make_trampoline__struct_2173.trampoline>:
ffffffff8000db50:	6a 82                	push   0xffffffffffffff82
ffffffff8000db52:	e9 79 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db57:	c3                   	ret
ffffffff8000db58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db5f:	00 

ffffffff8000db60 <idt.make_trampoline__struct_2175.trampoline>:
ffffffff8000db60:	6a 83                	push   0xffffffffffffff83
ffffffff8000db62:	e9 69 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db67:	c3                   	ret
ffffffff8000db68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db6f:	00 

ffffffff8000db70 <idt.make_trampoline__struct_2177.trampoline>:
ffffffff8000db70:	6a 84                	push   0xffffffffffffff84
ffffffff8000db72:	e9 59 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db77:	c3                   	ret
ffffffff8000db78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db7f:	00 

ffffffff8000db80 <idt.make_trampoline__struct_2179.trampoline>:
ffffffff8000db80:	6a 85                	push   0xffffffffffffff85
ffffffff8000db82:	e9 49 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db87:	c3                   	ret
ffffffff8000db88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db8f:	00 

ffffffff8000db90 <idt.make_trampoline__struct_2181.trampoline>:
ffffffff8000db90:	6a 86                	push   0xffffffffffffff86
ffffffff8000db92:	e9 39 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000db97:	c3                   	ret
ffffffff8000db98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000db9f:	00 

ffffffff8000dba0 <idt.make_trampoline__struct_2183.trampoline>:
ffffffff8000dba0:	6a 87                	push   0xffffffffffffff87
ffffffff8000dba2:	e9 29 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dba7:	c3                   	ret
ffffffff8000dba8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dbaf:	00 

ffffffff8000dbb0 <idt.make_trampoline__struct_2185.trampoline>:
ffffffff8000dbb0:	6a 88                	push   0xffffffffffffff88
ffffffff8000dbb2:	e9 19 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dbb7:	c3                   	ret
ffffffff8000dbb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dbbf:	00 

ffffffff8000dbc0 <idt.make_trampoline__struct_2187.trampoline>:
ffffffff8000dbc0:	6a 89                	push   0xffffffffffffff89
ffffffff8000dbc2:	e9 09 df ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dbc7:	c3                   	ret
ffffffff8000dbc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dbcf:	00 

ffffffff8000dbd0 <idt.make_trampoline__struct_2189.trampoline>:
ffffffff8000dbd0:	6a 8a                	push   0xffffffffffffff8a
ffffffff8000dbd2:	e9 f9 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dbd7:	c3                   	ret
ffffffff8000dbd8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dbdf:	00 

ffffffff8000dbe0 <idt.make_trampoline__struct_2191.trampoline>:
ffffffff8000dbe0:	6a 8b                	push   0xffffffffffffff8b
ffffffff8000dbe2:	e9 e9 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dbe7:	c3                   	ret
ffffffff8000dbe8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dbef:	00 

ffffffff8000dbf0 <idt.make_trampoline__struct_2193.trampoline>:
ffffffff8000dbf0:	6a 8c                	push   0xffffffffffffff8c
ffffffff8000dbf2:	e9 d9 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dbf7:	c3                   	ret
ffffffff8000dbf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dbff:	00 

ffffffff8000dc00 <idt.make_trampoline__struct_2195.trampoline>:
ffffffff8000dc00:	6a 8d                	push   0xffffffffffffff8d
ffffffff8000dc02:	e9 c9 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc07:	c3                   	ret
ffffffff8000dc08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc0f:	00 

ffffffff8000dc10 <idt.make_trampoline__struct_2197.trampoline>:
ffffffff8000dc10:	6a 8e                	push   0xffffffffffffff8e
ffffffff8000dc12:	e9 b9 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc17:	c3                   	ret
ffffffff8000dc18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc1f:	00 

ffffffff8000dc20 <idt.make_trampoline__struct_2199.trampoline>:
ffffffff8000dc20:	6a 8f                	push   0xffffffffffffff8f
ffffffff8000dc22:	e9 a9 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc27:	c3                   	ret
ffffffff8000dc28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc2f:	00 

ffffffff8000dc30 <idt.make_trampoline__struct_2201.trampoline>:
ffffffff8000dc30:	6a 90                	push   0xffffffffffffff90
ffffffff8000dc32:	e9 99 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc37:	c3                   	ret
ffffffff8000dc38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc3f:	00 

ffffffff8000dc40 <idt.make_trampoline__struct_2203.trampoline>:
ffffffff8000dc40:	6a 91                	push   0xffffffffffffff91
ffffffff8000dc42:	e9 89 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc47:	c3                   	ret
ffffffff8000dc48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc4f:	00 

ffffffff8000dc50 <idt.make_trampoline__struct_2205.trampoline>:
ffffffff8000dc50:	6a 92                	push   0xffffffffffffff92
ffffffff8000dc52:	e9 79 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc57:	c3                   	ret
ffffffff8000dc58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc5f:	00 

ffffffff8000dc60 <idt.make_trampoline__struct_2207.trampoline>:
ffffffff8000dc60:	6a 93                	push   0xffffffffffffff93
ffffffff8000dc62:	e9 69 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc67:	c3                   	ret
ffffffff8000dc68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc6f:	00 

ffffffff8000dc70 <idt.make_trampoline__struct_2209.trampoline>:
ffffffff8000dc70:	6a 94                	push   0xffffffffffffff94
ffffffff8000dc72:	e9 59 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc77:	c3                   	ret
ffffffff8000dc78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc7f:	00 

ffffffff8000dc80 <idt.make_trampoline__struct_2211.trampoline>:
ffffffff8000dc80:	6a 95                	push   0xffffffffffffff95
ffffffff8000dc82:	e9 49 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc87:	c3                   	ret
ffffffff8000dc88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc8f:	00 

ffffffff8000dc90 <idt.make_trampoline__struct_2213.trampoline>:
ffffffff8000dc90:	6a 96                	push   0xffffffffffffff96
ffffffff8000dc92:	e9 39 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dc97:	c3                   	ret
ffffffff8000dc98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dc9f:	00 

ffffffff8000dca0 <idt.make_trampoline__struct_2215.trampoline>:
ffffffff8000dca0:	6a 97                	push   0xffffffffffffff97
ffffffff8000dca2:	e9 29 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dca7:	c3                   	ret
ffffffff8000dca8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dcaf:	00 

ffffffff8000dcb0 <idt.make_trampoline__struct_2217.trampoline>:
ffffffff8000dcb0:	6a 98                	push   0xffffffffffffff98
ffffffff8000dcb2:	e9 19 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dcb7:	c3                   	ret
ffffffff8000dcb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dcbf:	00 

ffffffff8000dcc0 <idt.make_trampoline__struct_2219.trampoline>:
ffffffff8000dcc0:	6a 99                	push   0xffffffffffffff99
ffffffff8000dcc2:	e9 09 de ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dcc7:	c3                   	ret
ffffffff8000dcc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dccf:	00 

ffffffff8000dcd0 <idt.make_trampoline__struct_2221.trampoline>:
ffffffff8000dcd0:	6a 9a                	push   0xffffffffffffff9a
ffffffff8000dcd2:	e9 f9 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dcd7:	c3                   	ret
ffffffff8000dcd8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dcdf:	00 

ffffffff8000dce0 <idt.make_trampoline__struct_2223.trampoline>:
ffffffff8000dce0:	6a 9b                	push   0xffffffffffffff9b
ffffffff8000dce2:	e9 e9 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dce7:	c3                   	ret
ffffffff8000dce8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dcef:	00 

ffffffff8000dcf0 <idt.make_trampoline__struct_2225.trampoline>:
ffffffff8000dcf0:	6a 9c                	push   0xffffffffffffff9c
ffffffff8000dcf2:	e9 d9 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dcf7:	c3                   	ret
ffffffff8000dcf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dcff:	00 

ffffffff8000dd00 <idt.make_trampoline__struct_2227.trampoline>:
ffffffff8000dd00:	6a 9d                	push   0xffffffffffffff9d
ffffffff8000dd02:	e9 c9 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd07:	c3                   	ret
ffffffff8000dd08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd0f:	00 

ffffffff8000dd10 <idt.make_trampoline__struct_2229.trampoline>:
ffffffff8000dd10:	6a 9e                	push   0xffffffffffffff9e
ffffffff8000dd12:	e9 b9 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd17:	c3                   	ret
ffffffff8000dd18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd1f:	00 

ffffffff8000dd20 <idt.make_trampoline__struct_2231.trampoline>:
ffffffff8000dd20:	6a 9f                	push   0xffffffffffffff9f
ffffffff8000dd22:	e9 a9 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd27:	c3                   	ret
ffffffff8000dd28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd2f:	00 

ffffffff8000dd30 <idt.make_trampoline__struct_2233.trampoline>:
ffffffff8000dd30:	6a a0                	push   0xffffffffffffffa0
ffffffff8000dd32:	e9 99 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd37:	c3                   	ret
ffffffff8000dd38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd3f:	00 

ffffffff8000dd40 <idt.make_trampoline__struct_2235.trampoline>:
ffffffff8000dd40:	6a a1                	push   0xffffffffffffffa1
ffffffff8000dd42:	e9 89 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd47:	c3                   	ret
ffffffff8000dd48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd4f:	00 

ffffffff8000dd50 <idt.make_trampoline__struct_2237.trampoline>:
ffffffff8000dd50:	6a a2                	push   0xffffffffffffffa2
ffffffff8000dd52:	e9 79 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd57:	c3                   	ret
ffffffff8000dd58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd5f:	00 

ffffffff8000dd60 <idt.make_trampoline__struct_2239.trampoline>:
ffffffff8000dd60:	6a a3                	push   0xffffffffffffffa3
ffffffff8000dd62:	e9 69 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd67:	c3                   	ret
ffffffff8000dd68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd6f:	00 

ffffffff8000dd70 <idt.make_trampoline__struct_2241.trampoline>:
ffffffff8000dd70:	6a a4                	push   0xffffffffffffffa4
ffffffff8000dd72:	e9 59 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd77:	c3                   	ret
ffffffff8000dd78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd7f:	00 

ffffffff8000dd80 <idt.make_trampoline__struct_2243.trampoline>:
ffffffff8000dd80:	6a a5                	push   0xffffffffffffffa5
ffffffff8000dd82:	e9 49 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd87:	c3                   	ret
ffffffff8000dd88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd8f:	00 

ffffffff8000dd90 <idt.make_trampoline__struct_2245.trampoline>:
ffffffff8000dd90:	6a a6                	push   0xffffffffffffffa6
ffffffff8000dd92:	e9 39 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dd97:	c3                   	ret
ffffffff8000dd98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dd9f:	00 

ffffffff8000dda0 <idt.make_trampoline__struct_2247.trampoline>:
ffffffff8000dda0:	6a a7                	push   0xffffffffffffffa7
ffffffff8000dda2:	e9 29 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dda7:	c3                   	ret
ffffffff8000dda8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000ddaf:	00 

ffffffff8000ddb0 <idt.make_trampoline__struct_2249.trampoline>:
ffffffff8000ddb0:	6a a8                	push   0xffffffffffffffa8
ffffffff8000ddb2:	e9 19 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000ddb7:	c3                   	ret
ffffffff8000ddb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000ddbf:	00 

ffffffff8000ddc0 <idt.make_trampoline__struct_2251.trampoline>:
ffffffff8000ddc0:	6a a9                	push   0xffffffffffffffa9
ffffffff8000ddc2:	e9 09 dd ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000ddc7:	c3                   	ret
ffffffff8000ddc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000ddcf:	00 

ffffffff8000ddd0 <idt.make_trampoline__struct_2253.trampoline>:
ffffffff8000ddd0:	6a aa                	push   0xffffffffffffffaa
ffffffff8000ddd2:	e9 f9 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000ddd7:	c3                   	ret
ffffffff8000ddd8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dddf:	00 

ffffffff8000dde0 <idt.make_trampoline__struct_2255.trampoline>:
ffffffff8000dde0:	6a ab                	push   0xffffffffffffffab
ffffffff8000dde2:	e9 e9 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dde7:	c3                   	ret
ffffffff8000dde8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000ddef:	00 

ffffffff8000ddf0 <idt.make_trampoline__struct_2257.trampoline>:
ffffffff8000ddf0:	6a ac                	push   0xffffffffffffffac
ffffffff8000ddf2:	e9 d9 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000ddf7:	c3                   	ret
ffffffff8000ddf8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000ddff:	00 

ffffffff8000de00 <idt.make_trampoline__struct_2259.trampoline>:
ffffffff8000de00:	6a ad                	push   0xffffffffffffffad
ffffffff8000de02:	e9 c9 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de07:	c3                   	ret
ffffffff8000de08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de0f:	00 

ffffffff8000de10 <idt.make_trampoline__struct_2261.trampoline>:
ffffffff8000de10:	6a ae                	push   0xffffffffffffffae
ffffffff8000de12:	e9 b9 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de17:	c3                   	ret
ffffffff8000de18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de1f:	00 

ffffffff8000de20 <idt.make_trampoline__struct_2263.trampoline>:
ffffffff8000de20:	6a af                	push   0xffffffffffffffaf
ffffffff8000de22:	e9 a9 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de27:	c3                   	ret
ffffffff8000de28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de2f:	00 

ffffffff8000de30 <idt.make_trampoline__struct_2265.trampoline>:
ffffffff8000de30:	6a b0                	push   0xffffffffffffffb0
ffffffff8000de32:	e9 99 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de37:	c3                   	ret
ffffffff8000de38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de3f:	00 

ffffffff8000de40 <idt.make_trampoline__struct_2267.trampoline>:
ffffffff8000de40:	6a b1                	push   0xffffffffffffffb1
ffffffff8000de42:	e9 89 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de47:	c3                   	ret
ffffffff8000de48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de4f:	00 

ffffffff8000de50 <idt.make_trampoline__struct_2269.trampoline>:
ffffffff8000de50:	6a b2                	push   0xffffffffffffffb2
ffffffff8000de52:	e9 79 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de57:	c3                   	ret
ffffffff8000de58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de5f:	00 

ffffffff8000de60 <idt.make_trampoline__struct_2271.trampoline>:
ffffffff8000de60:	6a b3                	push   0xffffffffffffffb3
ffffffff8000de62:	e9 69 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de67:	c3                   	ret
ffffffff8000de68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de6f:	00 

ffffffff8000de70 <idt.make_trampoline__struct_2273.trampoline>:
ffffffff8000de70:	6a b4                	push   0xffffffffffffffb4
ffffffff8000de72:	e9 59 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de77:	c3                   	ret
ffffffff8000de78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de7f:	00 

ffffffff8000de80 <idt.make_trampoline__struct_2275.trampoline>:
ffffffff8000de80:	6a b5                	push   0xffffffffffffffb5
ffffffff8000de82:	e9 49 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de87:	c3                   	ret
ffffffff8000de88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de8f:	00 

ffffffff8000de90 <idt.make_trampoline__struct_2277.trampoline>:
ffffffff8000de90:	6a b6                	push   0xffffffffffffffb6
ffffffff8000de92:	e9 39 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000de97:	c3                   	ret
ffffffff8000de98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000de9f:	00 

ffffffff8000dea0 <idt.make_trampoline__struct_2279.trampoline>:
ffffffff8000dea0:	6a b7                	push   0xffffffffffffffb7
ffffffff8000dea2:	e9 29 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dea7:	c3                   	ret
ffffffff8000dea8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000deaf:	00 

ffffffff8000deb0 <idt.make_trampoline__struct_2281.trampoline>:
ffffffff8000deb0:	6a b8                	push   0xffffffffffffffb8
ffffffff8000deb2:	e9 19 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000deb7:	c3                   	ret
ffffffff8000deb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000debf:	00 

ffffffff8000dec0 <idt.make_trampoline__struct_2283.trampoline>:
ffffffff8000dec0:	6a b9                	push   0xffffffffffffffb9
ffffffff8000dec2:	e9 09 dc ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dec7:	c3                   	ret
ffffffff8000dec8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000decf:	00 

ffffffff8000ded0 <idt.make_trampoline__struct_2285.trampoline>:
ffffffff8000ded0:	6a ba                	push   0xffffffffffffffba
ffffffff8000ded2:	e9 f9 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000ded7:	c3                   	ret
ffffffff8000ded8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dedf:	00 

ffffffff8000dee0 <idt.make_trampoline__struct_2287.trampoline>:
ffffffff8000dee0:	6a bb                	push   0xffffffffffffffbb
ffffffff8000dee2:	e9 e9 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dee7:	c3                   	ret
ffffffff8000dee8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000deef:	00 

ffffffff8000def0 <idt.make_trampoline__struct_2289.trampoline>:
ffffffff8000def0:	6a bc                	push   0xffffffffffffffbc
ffffffff8000def2:	e9 d9 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000def7:	c3                   	ret
ffffffff8000def8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000deff:	00 

ffffffff8000df00 <idt.make_trampoline__struct_2291.trampoline>:
ffffffff8000df00:	6a bd                	push   0xffffffffffffffbd
ffffffff8000df02:	e9 c9 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df07:	c3                   	ret
ffffffff8000df08:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df0f:	00 

ffffffff8000df10 <idt.make_trampoline__struct_2293.trampoline>:
ffffffff8000df10:	6a be                	push   0xffffffffffffffbe
ffffffff8000df12:	e9 b9 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df17:	c3                   	ret
ffffffff8000df18:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df1f:	00 

ffffffff8000df20 <idt.make_trampoline__struct_2295.trampoline>:
ffffffff8000df20:	6a bf                	push   0xffffffffffffffbf
ffffffff8000df22:	e9 a9 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df27:	c3                   	ret
ffffffff8000df28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df2f:	00 

ffffffff8000df30 <idt.make_trampoline__struct_2297.trampoline>:
ffffffff8000df30:	6a c0                	push   0xffffffffffffffc0
ffffffff8000df32:	e9 99 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df37:	c3                   	ret
ffffffff8000df38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df3f:	00 

ffffffff8000df40 <idt.make_trampoline__struct_2299.trampoline>:
ffffffff8000df40:	6a c1                	push   0xffffffffffffffc1
ffffffff8000df42:	e9 89 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df47:	c3                   	ret
ffffffff8000df48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df4f:	00 

ffffffff8000df50 <idt.make_trampoline__struct_2301.trampoline>:
ffffffff8000df50:	6a c2                	push   0xffffffffffffffc2
ffffffff8000df52:	e9 79 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df57:	c3                   	ret
ffffffff8000df58:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df5f:	00 

ffffffff8000df60 <idt.make_trampoline__struct_2303.trampoline>:
ffffffff8000df60:	6a c3                	push   0xffffffffffffffc3
ffffffff8000df62:	e9 69 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df67:	c3                   	ret
ffffffff8000df68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df6f:	00 

ffffffff8000df70 <idt.make_trampoline__struct_2305.trampoline>:
ffffffff8000df70:	6a c4                	push   0xffffffffffffffc4
ffffffff8000df72:	e9 59 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df77:	c3                   	ret
ffffffff8000df78:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df7f:	00 

ffffffff8000df80 <idt.make_trampoline__struct_2307.trampoline>:
ffffffff8000df80:	6a c5                	push   0xffffffffffffffc5
ffffffff8000df82:	e9 49 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df87:	c3                   	ret
ffffffff8000df88:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df8f:	00 

ffffffff8000df90 <idt.make_trampoline__struct_2309.trampoline>:
ffffffff8000df90:	6a c6                	push   0xffffffffffffffc6
ffffffff8000df92:	e9 39 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000df97:	c3                   	ret
ffffffff8000df98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000df9f:	00 

ffffffff8000dfa0 <idt.make_trampoline__struct_2311.trampoline>:
ffffffff8000dfa0:	6a c7                	push   0xffffffffffffffc7
ffffffff8000dfa2:	e9 29 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dfa7:	c3                   	ret
ffffffff8000dfa8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dfaf:	00 

ffffffff8000dfb0 <idt.make_trampoline__struct_2313.trampoline>:
ffffffff8000dfb0:	6a c8                	push   0xffffffffffffffc8
ffffffff8000dfb2:	e9 19 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dfb7:	c3                   	ret
ffffffff8000dfb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dfbf:	00 

ffffffff8000dfc0 <idt.make_trampoline__struct_2315.trampoline>:
ffffffff8000dfc0:	6a c9                	push   0xffffffffffffffc9
ffffffff8000dfc2:	e9 09 db ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dfc7:	c3                   	ret
ffffffff8000dfc8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dfcf:	00 

ffffffff8000dfd0 <idt.make_trampoline__struct_2317.trampoline>:
ffffffff8000dfd0:	6a ca                	push   0xffffffffffffffca
ffffffff8000dfd2:	e9 f9 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dfd7:	c3                   	ret
ffffffff8000dfd8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dfdf:	00 

ffffffff8000dfe0 <idt.make_trampoline__struct_2319.trampoline>:
ffffffff8000dfe0:	6a cb                	push   0xffffffffffffffcb
ffffffff8000dfe2:	e9 e9 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dfe7:	c3                   	ret
ffffffff8000dfe8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dfef:	00 

ffffffff8000dff0 <idt.make_trampoline__struct_2321.trampoline>:
ffffffff8000dff0:	6a cc                	push   0xffffffffffffffcc
ffffffff8000dff2:	e9 d9 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000dff7:	c3                   	ret
ffffffff8000dff8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000dfff:	00 

ffffffff8000e000 <idt.make_trampoline__struct_2323.trampoline>:
ffffffff8000e000:	6a cd                	push   0xffffffffffffffcd
ffffffff8000e002:	e9 c9 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e007:	c3                   	ret
ffffffff8000e008:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e00f:	00 

ffffffff8000e010 <idt.make_trampoline__struct_2325.trampoline>:
ffffffff8000e010:	6a ce                	push   0xffffffffffffffce
ffffffff8000e012:	e9 b9 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e017:	c3                   	ret
ffffffff8000e018:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e01f:	00 

ffffffff8000e020 <idt.make_trampoline__struct_2327.trampoline>:
ffffffff8000e020:	6a cf                	push   0xffffffffffffffcf
ffffffff8000e022:	e9 a9 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e027:	c3                   	ret
ffffffff8000e028:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e02f:	00 

ffffffff8000e030 <idt.make_trampoline__struct_2329.trampoline>:
ffffffff8000e030:	6a d0                	push   0xffffffffffffffd0
ffffffff8000e032:	e9 99 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e037:	c3                   	ret
ffffffff8000e038:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e03f:	00 

ffffffff8000e040 <idt.make_trampoline__struct_2331.trampoline>:
ffffffff8000e040:	6a d1                	push   0xffffffffffffffd1
ffffffff8000e042:	e9 89 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e047:	c3                   	ret
ffffffff8000e048:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e04f:	00 

ffffffff8000e050 <idt.make_trampoline__struct_2333.trampoline>:
ffffffff8000e050:	6a d2                	push   0xffffffffffffffd2
ffffffff8000e052:	e9 79 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e057:	c3                   	ret
ffffffff8000e058:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e05f:	00 

ffffffff8000e060 <idt.make_trampoline__struct_2335.trampoline>:
ffffffff8000e060:	6a d3                	push   0xffffffffffffffd3
ffffffff8000e062:	e9 69 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e067:	c3                   	ret
ffffffff8000e068:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e06f:	00 

ffffffff8000e070 <idt.make_trampoline__struct_2337.trampoline>:
ffffffff8000e070:	6a d4                	push   0xffffffffffffffd4
ffffffff8000e072:	e9 59 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e077:	c3                   	ret
ffffffff8000e078:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e07f:	00 

ffffffff8000e080 <idt.make_trampoline__struct_2339.trampoline>:
ffffffff8000e080:	6a d5                	push   0xffffffffffffffd5
ffffffff8000e082:	e9 49 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e087:	c3                   	ret
ffffffff8000e088:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e08f:	00 

ffffffff8000e090 <idt.make_trampoline__struct_2341.trampoline>:
ffffffff8000e090:	6a d6                	push   0xffffffffffffffd6
ffffffff8000e092:	e9 39 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e097:	c3                   	ret
ffffffff8000e098:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e09f:	00 

ffffffff8000e0a0 <idt.make_trampoline__struct_2343.trampoline>:
ffffffff8000e0a0:	6a d7                	push   0xffffffffffffffd7
ffffffff8000e0a2:	e9 29 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e0a7:	c3                   	ret
ffffffff8000e0a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e0af:	00 

ffffffff8000e0b0 <idt.make_trampoline__struct_2345.trampoline>:
ffffffff8000e0b0:	6a d8                	push   0xffffffffffffffd8
ffffffff8000e0b2:	e9 19 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e0b7:	c3                   	ret
ffffffff8000e0b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e0bf:	00 

ffffffff8000e0c0 <idt.make_trampoline__struct_2347.trampoline>:
ffffffff8000e0c0:	6a d9                	push   0xffffffffffffffd9
ffffffff8000e0c2:	e9 09 da ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e0c7:	c3                   	ret
ffffffff8000e0c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e0cf:	00 

ffffffff8000e0d0 <idt.make_trampoline__struct_2349.trampoline>:
ffffffff8000e0d0:	6a da                	push   0xffffffffffffffda
ffffffff8000e0d2:	e9 f9 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e0d7:	c3                   	ret
ffffffff8000e0d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e0df:	00 

ffffffff8000e0e0 <idt.make_trampoline__struct_2351.trampoline>:
ffffffff8000e0e0:	6a db                	push   0xffffffffffffffdb
ffffffff8000e0e2:	e9 e9 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e0e7:	c3                   	ret
ffffffff8000e0e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e0ef:	00 

ffffffff8000e0f0 <idt.make_trampoline__struct_2353.trampoline>:
ffffffff8000e0f0:	6a dc                	push   0xffffffffffffffdc
ffffffff8000e0f2:	e9 d9 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e0f7:	c3                   	ret
ffffffff8000e0f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e0ff:	00 

ffffffff8000e100 <idt.make_trampoline__struct_2355.trampoline>:
ffffffff8000e100:	6a dd                	push   0xffffffffffffffdd
ffffffff8000e102:	e9 c9 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e107:	c3                   	ret
ffffffff8000e108:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e10f:	00 

ffffffff8000e110 <idt.make_trampoline__struct_2357.trampoline>:
ffffffff8000e110:	6a de                	push   0xffffffffffffffde
ffffffff8000e112:	e9 b9 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e117:	c3                   	ret
ffffffff8000e118:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e11f:	00 

ffffffff8000e120 <idt.make_trampoline__struct_2359.trampoline>:
ffffffff8000e120:	6a df                	push   0xffffffffffffffdf
ffffffff8000e122:	e9 a9 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e127:	c3                   	ret
ffffffff8000e128:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e12f:	00 

ffffffff8000e130 <idt.make_trampoline__struct_2361.trampoline>:
ffffffff8000e130:	6a e0                	push   0xffffffffffffffe0
ffffffff8000e132:	e9 99 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e137:	c3                   	ret
ffffffff8000e138:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e13f:	00 

ffffffff8000e140 <idt.make_trampoline__struct_2363.trampoline>:
ffffffff8000e140:	6a e1                	push   0xffffffffffffffe1
ffffffff8000e142:	e9 89 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e147:	c3                   	ret
ffffffff8000e148:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e14f:	00 

ffffffff8000e150 <idt.make_trampoline__struct_2365.trampoline>:
ffffffff8000e150:	6a e2                	push   0xffffffffffffffe2
ffffffff8000e152:	e9 79 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e157:	c3                   	ret
ffffffff8000e158:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e15f:	00 

ffffffff8000e160 <idt.make_trampoline__struct_2367.trampoline>:
ffffffff8000e160:	6a e3                	push   0xffffffffffffffe3
ffffffff8000e162:	e9 69 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e167:	c3                   	ret
ffffffff8000e168:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e16f:	00 

ffffffff8000e170 <idt.make_trampoline__struct_2369.trampoline>:
ffffffff8000e170:	6a e4                	push   0xffffffffffffffe4
ffffffff8000e172:	e9 59 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e177:	c3                   	ret
ffffffff8000e178:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e17f:	00 

ffffffff8000e180 <idt.make_trampoline__struct_2371.trampoline>:
ffffffff8000e180:	6a e5                	push   0xffffffffffffffe5
ffffffff8000e182:	e9 49 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e187:	c3                   	ret
ffffffff8000e188:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e18f:	00 

ffffffff8000e190 <idt.make_trampoline__struct_2373.trampoline>:
ffffffff8000e190:	6a e6                	push   0xffffffffffffffe6
ffffffff8000e192:	e9 39 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e197:	c3                   	ret
ffffffff8000e198:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e19f:	00 

ffffffff8000e1a0 <idt.make_trampoline__struct_2375.trampoline>:
ffffffff8000e1a0:	6a e7                	push   0xffffffffffffffe7
ffffffff8000e1a2:	e9 29 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e1a7:	c3                   	ret
ffffffff8000e1a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e1af:	00 

ffffffff8000e1b0 <idt.make_trampoline__struct_2377.trampoline>:
ffffffff8000e1b0:	6a e8                	push   0xffffffffffffffe8
ffffffff8000e1b2:	e9 19 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e1b7:	c3                   	ret
ffffffff8000e1b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e1bf:	00 

ffffffff8000e1c0 <idt.make_trampoline__struct_2379.trampoline>:
ffffffff8000e1c0:	6a e9                	push   0xffffffffffffffe9
ffffffff8000e1c2:	e9 09 d9 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e1c7:	c3                   	ret
ffffffff8000e1c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e1cf:	00 

ffffffff8000e1d0 <idt.make_trampoline__struct_2381.trampoline>:
ffffffff8000e1d0:	6a ea                	push   0xffffffffffffffea
ffffffff8000e1d2:	e9 f9 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e1d7:	c3                   	ret
ffffffff8000e1d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e1df:	00 

ffffffff8000e1e0 <idt.make_trampoline__struct_2383.trampoline>:
ffffffff8000e1e0:	6a eb                	push   0xffffffffffffffeb
ffffffff8000e1e2:	e9 e9 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e1e7:	c3                   	ret
ffffffff8000e1e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e1ef:	00 

ffffffff8000e1f0 <idt.make_trampoline__struct_2385.trampoline>:
ffffffff8000e1f0:	6a ec                	push   0xffffffffffffffec
ffffffff8000e1f2:	e9 d9 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e1f7:	c3                   	ret
ffffffff8000e1f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e1ff:	00 

ffffffff8000e200 <idt.make_trampoline__struct_2387.trampoline>:
ffffffff8000e200:	6a ed                	push   0xffffffffffffffed
ffffffff8000e202:	e9 c9 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e207:	c3                   	ret
ffffffff8000e208:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e20f:	00 

ffffffff8000e210 <idt.make_trampoline__struct_2389.trampoline>:
ffffffff8000e210:	6a ee                	push   0xffffffffffffffee
ffffffff8000e212:	e9 b9 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e217:	c3                   	ret
ffffffff8000e218:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e21f:	00 

ffffffff8000e220 <idt.make_trampoline__struct_2391.trampoline>:
ffffffff8000e220:	6a ef                	push   0xffffffffffffffef
ffffffff8000e222:	e9 a9 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e227:	c3                   	ret
ffffffff8000e228:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e22f:	00 

ffffffff8000e230 <idt.make_trampoline__struct_2393.trampoline>:
ffffffff8000e230:	6a f0                	push   0xfffffffffffffff0
ffffffff8000e232:	e9 99 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e237:	c3                   	ret
ffffffff8000e238:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e23f:	00 

ffffffff8000e240 <idt.make_trampoline__struct_2395.trampoline>:
ffffffff8000e240:	6a f1                	push   0xfffffffffffffff1
ffffffff8000e242:	e9 89 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e247:	c3                   	ret
ffffffff8000e248:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e24f:	00 

ffffffff8000e250 <idt.make_trampoline__struct_2397.trampoline>:
ffffffff8000e250:	6a f2                	push   0xfffffffffffffff2
ffffffff8000e252:	e9 79 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e257:	c3                   	ret
ffffffff8000e258:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e25f:	00 

ffffffff8000e260 <idt.make_trampoline__struct_2399.trampoline>:
ffffffff8000e260:	6a f3                	push   0xfffffffffffffff3
ffffffff8000e262:	e9 69 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e267:	c3                   	ret
ffffffff8000e268:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e26f:	00 

ffffffff8000e270 <idt.make_trampoline__struct_2401.trampoline>:
ffffffff8000e270:	6a f4                	push   0xfffffffffffffff4
ffffffff8000e272:	e9 59 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e277:	c3                   	ret
ffffffff8000e278:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e27f:	00 

ffffffff8000e280 <idt.make_trampoline__struct_2403.trampoline>:
ffffffff8000e280:	6a f5                	push   0xfffffffffffffff5
ffffffff8000e282:	e9 49 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e287:	c3                   	ret
ffffffff8000e288:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e28f:	00 

ffffffff8000e290 <idt.make_trampoline__struct_2405.trampoline>:
ffffffff8000e290:	6a f6                	push   0xfffffffffffffff6
ffffffff8000e292:	e9 39 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e297:	c3                   	ret
ffffffff8000e298:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e29f:	00 

ffffffff8000e2a0 <idt.make_trampoline__struct_2407.trampoline>:
ffffffff8000e2a0:	6a f7                	push   0xfffffffffffffff7
ffffffff8000e2a2:	e9 29 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e2a7:	c3                   	ret
ffffffff8000e2a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e2af:	00 

ffffffff8000e2b0 <idt.make_trampoline__struct_2409.trampoline>:
ffffffff8000e2b0:	6a f8                	push   0xfffffffffffffff8
ffffffff8000e2b2:	e9 19 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e2b7:	c3                   	ret
ffffffff8000e2b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e2bf:	00 

ffffffff8000e2c0 <idt.make_trampoline__struct_2411.trampoline>:
ffffffff8000e2c0:	6a f9                	push   0xfffffffffffffff9
ffffffff8000e2c2:	e9 09 d8 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e2c7:	c3                   	ret
ffffffff8000e2c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e2cf:	00 

ffffffff8000e2d0 <idt.make_trampoline__struct_2413.trampoline>:
ffffffff8000e2d0:	6a fa                	push   0xfffffffffffffffa
ffffffff8000e2d2:	e9 f9 d7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e2d7:	c3                   	ret
ffffffff8000e2d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e2df:	00 

ffffffff8000e2e0 <idt.make_trampoline__struct_2415.trampoline>:
ffffffff8000e2e0:	6a fb                	push   0xfffffffffffffffb
ffffffff8000e2e2:	e9 e9 d7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e2e7:	c3                   	ret
ffffffff8000e2e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e2ef:	00 

ffffffff8000e2f0 <idt.make_trampoline__struct_2417.trampoline>:
ffffffff8000e2f0:	6a fc                	push   0xfffffffffffffffc
ffffffff8000e2f2:	e9 d9 d7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e2f7:	c3                   	ret
ffffffff8000e2f8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e2ff:	00 

ffffffff8000e300 <idt.make_trampoline__struct_2419.trampoline>:
ffffffff8000e300:	6a fd                	push   0xfffffffffffffffd
ffffffff8000e302:	e9 c9 d7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e307:	c3                   	ret
ffffffff8000e308:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e30f:	00 

ffffffff8000e310 <idt.make_trampoline__struct_2421.trampoline>:
ffffffff8000e310:	6a fe                	push   0xfffffffffffffffe
ffffffff8000e312:	e9 b9 d7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e317:	c3                   	ret
ffffffff8000e318:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e31f:	00 

ffffffff8000e320 <idt.make_trampoline__struct_2423.trampoline>:
ffffffff8000e320:	6a ff                	push   0xffffffffffffffff
ffffffff8000e322:	e9 a9 d7 ff ff       	jmp    ffffffff8000bad0 <catcher>
ffffffff8000e327:	c3                   	ret
ffffffff8000e328:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000e32f:	00 

ffffffff8000e330 <fmt.formatValue__anon_3048>:
) !void {
ffffffff8000e330:	55                   	push   rbp
ffffffff8000e331:	48 89 e5             	mov    rbp,rsp
ffffffff8000e334:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000e338:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff8000e33c:	40 88 f0             	mov    al,sil
ffffffff8000e33f:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff8000e342:	0f b6 f0             	movzx  esi,al
ffffffff8000e345:	e8 36 00 00 00       	call   ffffffff8000e380 <fmt.formatIntValue__anon_3049>
ffffffff8000e34a:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000e34e:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000e353:	75 0a                	jne    ffffffff8000e35f <fmt.formatValue__anon_3048+0x2f>
ffffffff8000e355:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000e359:	48 83 c4 10          	add    rsp,0x10
ffffffff8000e35d:	5d                   	pop    rbp
ffffffff8000e35e:	c3                   	ret
ffffffff8000e35f:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff8000e363:	e8 a8 50 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000e368:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000e36c:	48 83 c4 10          	add    rsp,0x10
ffffffff8000e370:	5d                   	pop    rbp
ffffffff8000e371:	c3                   	ret
ffffffff8000e372:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000e379:	00 00 00 
ffffffff8000e37c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff8000e380 <fmt.formatIntValue__anon_3049>:
) !void {
ffffffff8000e380:	55                   	push   rbp
ffffffff8000e381:	48 89 e5             	mov    rbp,rsp
ffffffff8000e384:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000e388:	49 89 c9             	mov    r9,rcx
ffffffff8000e38b:	49 89 d0             	mov    r8,rdx
ffffffff8000e38e:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff8000e392:	40 88 f0             	mov    al,sil
ffffffff8000e395:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8000e398:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
    return formatInt(int_value, radix, case, options, writer);
ffffffff8000e39b:	31 c9                	xor    ecx,ecx
ffffffff8000e39d:	0f b6 f0             	movzx  esi,al
ffffffff8000e3a0:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff8000e3a5:	31 c9                	xor    ecx,ecx
ffffffff8000e3a7:	e8 34 00 00 00       	call   ffffffff8000e3e0 <fmt.formatInt__anon_3052>
ffffffff8000e3ac:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000e3b0:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8000e3b5:	75 0a                	jne    ffffffff8000e3c1 <fmt.formatIntValue__anon_3049+0x41>
ffffffff8000e3b7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000e3bb:	48 83 c4 10          	add    rsp,0x10
ffffffff8000e3bf:	5d                   	pop    rbp
ffffffff8000e3c0:	c3                   	ret
ffffffff8000e3c1:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff8000e3c5:	e8 46 50 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000e3ca:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000e3ce:	48 83 c4 10          	add    rsp,0x10
ffffffff8000e3d2:	5d                   	pop    rbp
ffffffff8000e3d3:	c3                   	ret
ffffffff8000e3d4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000e3db:	00 00 00 
ffffffff8000e3de:	66 90                	xchg   ax,ax

ffffffff8000e3e0 <fmt.formatInt__anon_3052>:
) !void {
ffffffff8000e3e0:	55                   	push   rbp
ffffffff8000e3e1:	48 89 e5             	mov    rbp,rsp
ffffffff8000e3e4:	48 81 ec 70 01 00 00 	sub    rsp,0x170
ffffffff8000e3eb:	4c 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],r9
ffffffff8000e3f2:	4c 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r8
ffffffff8000e3f9:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
ffffffff8000e400:	88 8d 4d ff ff ff    	mov    BYTE PTR [rbp-0xb3],cl
ffffffff8000e406:	88 d0                	mov    al,dl
ffffffff8000e408:	88 85 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],al
ffffffff8000e40e:	40 88 f2             	mov    dl,sil
ffffffff8000e411:	88 95 4e ff ff ff    	mov    BYTE PTR [rbp-0xb2],dl
ffffffff8000e417:	88 95 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],dl
ffffffff8000e41d:	88 85 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],al
ffffffff8000e423:	80 e1 01             	and    cl,0x1
ffffffff8000e426:	88 8d 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],cl
    assert(base >= 2);
ffffffff8000e42c:	3c 02                	cmp    al,0x2
ffffffff8000e42e:	0f 93 c0             	setae  al
ffffffff8000e431:	0f b6 f8             	movzx  edi,al
ffffffff8000e434:	e8 f7 77 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000e439:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8000e43f:	88 85 53 ff ff ff    	mov    BYTE PTR [rbp-0xad],al
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff8000e445:	66 c7 85 54 ff ff ff 	mov    WORD PTR [rbp-0xac],0x8
ffffffff8000e44c:	08 00 
    const abs_value = math.absCast(int_value);
ffffffff8000e44e:	0f b6 f8             	movzx  edi,al
ffffffff8000e451:	e8 6a 06 00 00       	call   ffffffff8000eac0 <math.absCast__anon_3054>
ffffffff8000e456:	88 c1                	mov    cl,al
ffffffff8000e458:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
ffffffff8000e45e:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
ffffffff8000e464:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff8000e46b:	aa aa aa 
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff8000e46e:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffffffff8000e475:	c6 85 60 ff ff ff aa 	mov    BYTE PTR [rbp-0xa0],0xaa
    var a: MinInt = abs_value;
ffffffff8000e47c:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
    var index: usize = buf.len;
ffffffff8000e482:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x9
ffffffff8000e489:	09 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff8000e48d:	3c 0a                	cmp    al,0xa
ffffffff8000e48f:	75 0f                	jne    ffffffff8000e4a0 <fmt.formatInt__anon_3052+0xc0>
ffffffff8000e491:	e8 fa 8c ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff8000e496:	34 ff                	xor    al,0xff
ffffffff8000e498:	88 85 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],al
ffffffff8000e49e:	eb 0a                	jmp    ffffffff8000e4aa <fmt.formatInt__anon_3052+0xca>
ffffffff8000e4a0:	31 c0                	xor    eax,eax
ffffffff8000e4a2:	88 85 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],al
ffffffff8000e4a8:	eb 00                	jmp    ffffffff8000e4aa <fmt.formatInt__anon_3052+0xca>
ffffffff8000e4aa:	8a 85 2f ff ff ff    	mov    al,BYTE PTR [rbp-0xd1]
ffffffff8000e4b0:	a8 01                	test   al,0x1
ffffffff8000e4b2:	75 02                	jne    ffffffff8000e4b6 <fmt.formatInt__anon_3052+0xd6>
ffffffff8000e4b4:	eb 02                	jmp    ffffffff8000e4b8 <fmt.formatInt__anon_3052+0xd8>
ffffffff8000e4b6:	eb 05                	jmp    ffffffff8000e4bd <fmt.formatInt__anon_3052+0xdd>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff8000e4b8:	e9 c3 03 00 00       	jmp    ffffffff8000e880 <fmt.formatInt__anon_3052+0x4a0>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8000e4bd:	80 bd 67 ff ff ff 64 	cmp    BYTE PTR [rbp-0x99],0x64
ffffffff8000e4c4:	72 25                	jb     ffffffff8000e4eb <fmt.formatInt__anon_3052+0x10b>
            index -= 2;
ffffffff8000e4c6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e4cd:	48 83 e8 02          	sub    rax,0x2
ffffffff8000e4d1:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff8000e4d8:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff8000e4df:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff8000e4e5:	84 c0                	test   al,al
ffffffff8000e4e7:	74 07                	je     ffffffff8000e4f0 <fmt.formatInt__anon_3052+0x110>
ffffffff8000e4e9:	eb 07                	jmp    ffffffff8000e4f2 <fmt.formatInt__anon_3052+0x112>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8000e4eb:	e9 5e 01 00 00       	jmp    ffffffff8000e64e <fmt.formatInt__anon_3052+0x26e>
            index -= 2;
ffffffff8000e4f0:	eb 1c                	jmp    ffffffff8000e50e <fmt.formatInt__anon_3052+0x12e>
ffffffff8000e4f2:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000e4f9:	48 c7 c1 68 bf 01 80 	mov    rcx,0xffffffff8001bf68
ffffffff8000e500:	31 c0                	xor    eax,eax
ffffffff8000e502:	89 c2                	mov    edx,eax
ffffffff8000e504:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000e509:	e8 a2 1c ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000e50e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff8000e515:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff8000e51c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e523:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff8000e52a:	48 8d 8d 58 ff ff ff 	lea    rcx,[rbp-0xa8]
ffffffff8000e531:	48 01 c1             	add    rcx,rax
ffffffff8000e534:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
ffffffff8000e53b:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000e53f:	77 02                	ja     ffffffff8000e543 <fmt.formatInt__anon_3052+0x163>
ffffffff8000e541:	eb 11                	jmp    ffffffff8000e554 <fmt.formatInt__anon_3052+0x174>
ffffffff8000e543:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8000e54a:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e54f:	e8 bc 1d ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000e554:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff8000e55b:	b8 09 00 00 00       	mov    eax,0x9
ffffffff8000e560:	48 29 c8             	sub    rax,rcx
ffffffff8000e563:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff8000e56a:	b0 01                	mov    al,0x1
ffffffff8000e56c:	a8 01                	test   al,0x1
ffffffff8000e56e:	75 02                	jne    ffffffff8000e572 <fmt.formatInt__anon_3052+0x192>
ffffffff8000e570:	eb 02                	jmp    ffffffff8000e574 <fmt.formatInt__anon_3052+0x194>
ffffffff8000e572:	eb 0d                	jmp    ffffffff8000e581 <fmt.formatInt__anon_3052+0x1a1>
ffffffff8000e574:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e579:	48 89 f7             	mov    rdi,rsi
ffffffff8000e57c:	e8 4f 1c ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e581:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffffffff8000e588:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000e58c:	77 02                	ja     ffffffff8000e590 <fmt.formatInt__anon_3052+0x1b0>
ffffffff8000e58e:	eb 11                	jmp    ffffffff8000e5a1 <fmt.formatInt__anon_3052+0x1c1>
ffffffff8000e590:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8000e597:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e59c:	e8 2f 1c ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e5a1:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff8000e5a8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff8000e5af:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff8000e5b3:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff8000e5b7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff8000e5bb:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff8000e5c2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff8000e5c6:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff8000e5cd:	b0 01                	mov    al,0x1
ffffffff8000e5cf:	a8 01                	test   al,0x1
ffffffff8000e5d1:	75 02                	jne    ffffffff8000e5d5 <fmt.formatInt__anon_3052+0x1f5>
ffffffff8000e5d3:	eb 02                	jmp    ffffffff8000e5d7 <fmt.formatInt__anon_3052+0x1f7>
ffffffff8000e5d5:	eb 10                	jmp    ffffffff8000e5e7 <fmt.formatInt__anon_3052+0x207>
ffffffff8000e5d7:	31 c0                	xor    eax,eax
ffffffff8000e5d9:	31 c0                	xor    eax,eax
ffffffff8000e5db:	89 c7                	mov    edi,eax
ffffffff8000e5dd:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000e5e2:	e8 29 1d ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000e5e7:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
ffffffff8000e5ee:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000e5f3:	48 39 c8             	cmp    rax,rcx
ffffffff8000e5f6:	77 02                	ja     ffffffff8000e5fa <fmt.formatInt__anon_3052+0x21a>
ffffffff8000e5f8:	eb 11                	jmp    ffffffff8000e60b <fmt.formatInt__anon_3052+0x22b>
ffffffff8000e5fa:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
ffffffff8000e601:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000e606:	e8 c5 1b ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e60b:	b1 64                	mov    cl,0x64
ffffffff8000e60d:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff8000e614:	ff 
ffffffff8000e615:	f6 f1                	div    cl
ffffffff8000e617:	66 c1 e8 08          	shr    ax,0x8
ffffffff8000e61b:	0f b6 c0             	movzx  eax,al
ffffffff8000e61e:	89 c6                	mov    esi,eax
ffffffff8000e620:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff8000e624:	e8 87 8b ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8000e629:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff8000e630:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff8000e634:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8000e637:	b1 64                	mov    cl,0x64
ffffffff8000e639:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff8000e640:	ff 
ffffffff8000e641:	f6 f1                	div    cl
ffffffff8000e643:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
ffffffff8000e649:	e9 6f fe ff ff       	jmp    ffffffff8000e4bd <fmt.formatInt__anon_3052+0xdd>
        if (a < 10) {
ffffffff8000e64e:	80 bd 67 ff ff ff 0a 	cmp    BYTE PTR [rbp-0x99],0xa
ffffffff8000e655:	73 1c                	jae    ffffffff8000e673 <fmt.formatInt__anon_3052+0x293>
            index -= 1;
ffffffff8000e657:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e65e:	48 83 e8 01          	sub    rax,0x1
ffffffff8000e662:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000e666:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff8000e66a:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff8000e66d:	84 c0                	test   al,al
ffffffff8000e66f:	74 25                	je     ffffffff8000e696 <fmt.formatInt__anon_3052+0x2b6>
ffffffff8000e671:	eb 25                	jmp    ffffffff8000e698 <fmt.formatInt__anon_3052+0x2b8>
            index -= 2;
ffffffff8000e673:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e67a:	48 83 e8 02          	sub    rax,0x2
ffffffff8000e67e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff8000e682:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff8000e686:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff8000e689:	84 c0                	test   al,al
ffffffff8000e68b:	0f 84 b2 00 00 00    	je     ffffffff8000e743 <fmt.formatInt__anon_3052+0x363>
ffffffff8000e691:	e9 af 00 00 00       	jmp    ffffffff8000e745 <fmt.formatInt__anon_3052+0x365>
            index -= 1;
ffffffff8000e696:	eb 1c                	jmp    ffffffff8000e6b4 <fmt.formatInt__anon_3052+0x2d4>
ffffffff8000e698:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000e69f:	48 c7 c1 78 bf 01 80 	mov    rcx,0xffffffff8001bf78
ffffffff8000e6a6:	31 c0                	xor    eax,eax
ffffffff8000e6a8:	89 c2                	mov    edx,eax
ffffffff8000e6aa:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000e6af:	e8 fc 1a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000e6b4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff8000e6b8:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff8000e6bf:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e6c6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff8000e6cd:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000e6d1:	73 02                	jae    ffffffff8000e6d5 <fmt.formatInt__anon_3052+0x2f5>
ffffffff8000e6d3:	eb 11                	jmp    ffffffff8000e6e6 <fmt.formatInt__anon_3052+0x306>
ffffffff8000e6d5:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
ffffffff8000e6dc:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e6e1:	e8 ea 1a ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e6e6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff8000e6ed:	48 8d 84 05 58 ff ff 	lea    rax,[rbp+rax*1-0xa8]
ffffffff8000e6f4:	ff 
ffffffff8000e6f5:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff8000e6fc:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
ffffffff8000e702:	04 30                	add    al,0x30
ffffffff8000e704:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff8000e707:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff8000e70b:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff8000e70e:	84 c0                	test   al,al
ffffffff8000e710:	75 04                	jne    ffffffff8000e716 <fmt.formatInt__anon_3052+0x336>
ffffffff8000e712:	eb 00                	jmp    ffffffff8000e714 <fmt.formatInt__anon_3052+0x334>
ffffffff8000e714:	eb 1c                	jmp    ffffffff8000e732 <fmt.formatInt__anon_3052+0x352>
ffffffff8000e716:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000e71d:	48 c7 c1 88 bf 01 80 	mov    rcx,0xffffffff8001bf88
ffffffff8000e724:	31 c0                	xor    eax,eax
ffffffff8000e726:	89 c2                	mov    edx,eax
ffffffff8000e728:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000e72d:	e8 7e 1a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000e732:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff8000e739:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff8000e73c:	88 08                	mov    BYTE PTR [rax],cl
ffffffff8000e73e:	e9 38 01 00 00       	jmp    ffffffff8000e87b <fmt.formatInt__anon_3052+0x49b>
            index -= 2;
ffffffff8000e743:	eb 1c                	jmp    ffffffff8000e761 <fmt.formatInt__anon_3052+0x381>
ffffffff8000e745:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000e74c:	48 c7 c1 98 bf 01 80 	mov    rcx,0xffffffff8001bf98
ffffffff8000e753:	31 c0                	xor    eax,eax
ffffffff8000e755:	89 c2                	mov    edx,eax
ffffffff8000e757:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000e75c:	e8 4f 1a ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000e761:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8000e765:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff8000e76c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e773:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff8000e77a:	48 8d 8d 58 ff ff ff 	lea    rcx,[rbp-0xa8]
ffffffff8000e781:	48 01 c1             	add    rcx,rax
ffffffff8000e784:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
ffffffff8000e78b:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000e78f:	77 02                	ja     ffffffff8000e793 <fmt.formatInt__anon_3052+0x3b3>
ffffffff8000e791:	eb 11                	jmp    ffffffff8000e7a4 <fmt.formatInt__anon_3052+0x3c4>
ffffffff8000e793:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
ffffffff8000e79a:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e79f:	e8 6c 1b ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000e7a4:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff8000e7ab:	b8 09 00 00 00       	mov    eax,0x9
ffffffff8000e7b0:	48 29 c8             	sub    rax,rcx
ffffffff8000e7b3:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff8000e7ba:	b0 01                	mov    al,0x1
ffffffff8000e7bc:	a8 01                	test   al,0x1
ffffffff8000e7be:	75 02                	jne    ffffffff8000e7c2 <fmt.formatInt__anon_3052+0x3e2>
ffffffff8000e7c0:	eb 02                	jmp    ffffffff8000e7c4 <fmt.formatInt__anon_3052+0x3e4>
ffffffff8000e7c2:	eb 0d                	jmp    ffffffff8000e7d1 <fmt.formatInt__anon_3052+0x3f1>
ffffffff8000e7c4:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e7c9:	48 89 f7             	mov    rdi,rsi
ffffffff8000e7cc:	e8 ff 19 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e7d1:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffffffff8000e7d8:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000e7dc:	77 02                	ja     ffffffff8000e7e0 <fmt.formatInt__anon_3052+0x400>
ffffffff8000e7de:	eb 11                	jmp    ffffffff8000e7f1 <fmt.formatInt__anon_3052+0x411>
ffffffff8000e7e0:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
ffffffff8000e7e7:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e7ec:	e8 df 19 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e7f1:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffffffff8000e7f8:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff8000e7ff:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff8000e803:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff8000e807:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000e80b:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
ffffffff8000e812:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000e816:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
ffffffff8000e81d:	b0 01                	mov    al,0x1
ffffffff8000e81f:	a8 01                	test   al,0x1
ffffffff8000e821:	75 02                	jne    ffffffff8000e825 <fmt.formatInt__anon_3052+0x445>
ffffffff8000e823:	eb 02                	jmp    ffffffff8000e827 <fmt.formatInt__anon_3052+0x447>
ffffffff8000e825:	eb 10                	jmp    ffffffff8000e837 <fmt.formatInt__anon_3052+0x457>
ffffffff8000e827:	31 c0                	xor    eax,eax
ffffffff8000e829:	31 c0                	xor    eax,eax
ffffffff8000e82b:	89 c7                	mov    edi,eax
ffffffff8000e82d:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000e832:	e8 d9 1a ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000e837:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff8000e83e:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000e843:	48 39 c8             	cmp    rax,rcx
ffffffff8000e846:	77 02                	ja     ffffffff8000e84a <fmt.formatInt__anon_3052+0x46a>
ffffffff8000e848:	eb 11                	jmp    ffffffff8000e85b <fmt.formatInt__anon_3052+0x47b>
ffffffff8000e84a:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
ffffffff8000e851:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000e856:	e8 75 19 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e85b:	0f b6 85 67 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x99]
ffffffff8000e862:	89 c6                	mov    esi,eax
ffffffff8000e864:	48 8d 7d d5          	lea    rdi,[rbp-0x2b]
ffffffff8000e868:	e8 43 89 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8000e86d:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffffffff8000e874:	66 8b 4d d5          	mov    cx,WORD PTR [rbp-0x2b]
ffffffff8000e878:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff8000e87b:	e9 45 01 00 00       	jmp    ffffffff8000e9c5 <fmt.formatInt__anon_3052+0x5e5>
ffffffff8000e880:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
            const digit = a % base;
ffffffff8000e886:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff8000e88c:	88 8d c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],cl
ffffffff8000e892:	3c 00                	cmp    al,0x0
ffffffff8000e894:	74 02                	je     ffffffff8000e898 <fmt.formatInt__anon_3052+0x4b8>
ffffffff8000e896:	eb 1c                	jmp    ffffffff8000e8b4 <fmt.formatInt__anon_3052+0x4d4>
ffffffff8000e898:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8000e89f:	48 c7 c1 a8 bf 01 80 	mov    rcx,0xffffffff8001bfa8
ffffffff8000e8a6:	31 c0                	xor    eax,eax
ffffffff8000e8a8:	89 c2                	mov    edx,eax
ffffffff8000e8aa:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000e8af:	e8 fc 18 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000e8b4:	8a 8d 4f ff ff ff    	mov    cl,BYTE PTR [rbp-0xb1]
ffffffff8000e8ba:	8a 85 c7 fe ff ff    	mov    al,BYTE PTR [rbp-0x139]
ffffffff8000e8c0:	66 0f b6 c0          	movzx  ax,al
ffffffff8000e8c4:	f6 f1                	div    cl
ffffffff8000e8c6:	0f b6 c4             	movzx  eax,ah
ffffffff8000e8c9:	88 85 c6 fe ff ff    	mov    BYTE PTR [rbp-0x13a],al
ffffffff8000e8cf:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            index -= 1;
ffffffff8000e8d2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e8d9:	48 83 e8 01          	sub    rax,0x1
ffffffff8000e8dd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000e8e1:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff8000e8e5:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff8000e8e8:	84 c0                	test   al,al
ffffffff8000e8ea:	75 04                	jne    ffffffff8000e8f0 <fmt.formatInt__anon_3052+0x510>
ffffffff8000e8ec:	eb 00                	jmp    ffffffff8000e8ee <fmt.formatInt__anon_3052+0x50e>
ffffffff8000e8ee:	eb 1c                	jmp    ffffffff8000e90c <fmt.formatInt__anon_3052+0x52c>
ffffffff8000e8f0:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000e8f7:	48 c7 c1 b8 bf 01 80 	mov    rcx,0xffffffff8001bfb8
ffffffff8000e8fe:	31 c0                	xor    eax,eax
ffffffff8000e900:	89 c2                	mov    edx,eax
ffffffff8000e902:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000e907:	e8 a4 18 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000e90c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000e910:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff8000e917:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e91e:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
ffffffff8000e925:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000e929:	73 02                	jae    ffffffff8000e92d <fmt.formatInt__anon_3052+0x54d>
ffffffff8000e92b:	eb 11                	jmp    ffffffff8000e93e <fmt.formatInt__anon_3052+0x55e>
ffffffff8000e92d:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
ffffffff8000e934:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e939:	e8 92 18 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000e93e:	8a 85 4d ff ff ff    	mov    al,BYTE PTR [rbp-0xb3]
ffffffff8000e944:	8a 8d c6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x13a]
ffffffff8000e94a:	0f b6 f9             	movzx  edi,cl
ffffffff8000e94d:	0f b6 f0             	movzx  esi,al
ffffffff8000e950:	e8 cb 89 ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff8000e955:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff8000e95c:	88 c2                	mov    dl,al
ffffffff8000e95e:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
ffffffff8000e964:	88 94 0d 58 ff ff ff 	mov    BYTE PTR [rbp+rcx*1-0xa8],dl
            a /= base;
ffffffff8000e96b:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff8000e971:	88 8d b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],cl
ffffffff8000e977:	3c 00                	cmp    al,0x0
ffffffff8000e979:	74 02                	je     ffffffff8000e97d <fmt.formatInt__anon_3052+0x59d>
ffffffff8000e97b:	eb 1c                	jmp    ffffffff8000e999 <fmt.formatInt__anon_3052+0x5b9>
ffffffff8000e97d:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8000e984:	48 c7 c1 c8 bf 01 80 	mov    rcx,0xffffffff8001bfc8
ffffffff8000e98b:	31 c0                	xor    eax,eax
ffffffff8000e98d:	89 c2                	mov    edx,eax
ffffffff8000e98f:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000e994:	e8 17 18 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000e999:	8a 8d 4f ff ff ff    	mov    cl,BYTE PTR [rbp-0xb1]
ffffffff8000e99f:	8a 85 b7 fe ff ff    	mov    al,BYTE PTR [rbp-0x149]
ffffffff8000e9a5:	66 0f b6 c0          	movzx  ax,al
ffffffff8000e9a9:	f6 f1                	div    cl
ffffffff8000e9ab:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
            if (a == 0) break;
ffffffff8000e9b1:	80 bd 67 ff ff ff 00 	cmp    BYTE PTR [rbp-0x99],0x0
ffffffff8000e9b8:	75 02                	jne    ffffffff8000e9bc <fmt.formatInt__anon_3052+0x5dc>
ffffffff8000e9ba:	eb 07                	jmp    ffffffff8000e9c3 <fmt.formatInt__anon_3052+0x5e3>
ffffffff8000e9bc:	eb 00                	jmp    ffffffff8000e9be <fmt.formatInt__anon_3052+0x5de>
ffffffff8000e9be:	e9 bd fe ff ff       	jmp    ffffffff8000e880 <fmt.formatInt__anon_3052+0x4a0>
ffffffff8000e9c3:	eb 00                	jmp    ffffffff8000e9c5 <fmt.formatInt__anon_3052+0x5e5>
    return formatBuf(buf[index..], options, writer);
ffffffff8000e9c5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000e9cc:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff8000e9d3:	48 8d 8d 58 ff ff ff 	lea    rcx,[rbp-0xa8]
ffffffff8000e9da:	48 01 c1             	add    rcx,rax
ffffffff8000e9dd:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
ffffffff8000e9e4:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000e9e8:	77 02                	ja     ffffffff8000e9ec <fmt.formatInt__anon_3052+0x60c>
ffffffff8000e9ea:	eb 11                	jmp    ffffffff8000e9fd <fmt.formatInt__anon_3052+0x61d>
ffffffff8000e9ec:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff8000e9f3:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000e9f8:	e8 13 19 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8000e9fd:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
ffffffff8000ea04:	b8 09 00 00 00       	mov    eax,0x9
ffffffff8000ea09:	48 29 c8             	sub    rax,rcx
ffffffff8000ea0c:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff8000ea13:	b0 01                	mov    al,0x1
ffffffff8000ea15:	a8 01                	test   al,0x1
ffffffff8000ea17:	75 02                	jne    ffffffff8000ea1b <fmt.formatInt__anon_3052+0x63b>
ffffffff8000ea19:	eb 02                	jmp    ffffffff8000ea1d <fmt.formatInt__anon_3052+0x63d>
ffffffff8000ea1b:	eb 0d                	jmp    ffffffff8000ea2a <fmt.formatInt__anon_3052+0x64a>
ffffffff8000ea1d:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000ea22:	48 89 f7             	mov    rdi,rsi
ffffffff8000ea25:	e8 a6 17 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000ea2a:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
ffffffff8000ea31:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000ea35:	77 02                	ja     ffffffff8000ea39 <fmt.formatInt__anon_3052+0x659>
ffffffff8000ea37:	eb 11                	jmp    ffffffff8000ea4a <fmt.formatInt__anon_3052+0x66a>
ffffffff8000ea39:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff8000ea40:	be 09 00 00 00       	mov    esi,0x9
ffffffff8000ea45:	e8 86 17 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000ea4a:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
ffffffff8000ea51:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
ffffffff8000ea58:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
ffffffff8000ea5f:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffffffff8000ea66:	48 8b 95 98 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x168]
ffffffff8000ea6d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8000ea71:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000ea75:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff8000ea79:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000ea7d:	e8 de 89 ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff8000ea82:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff8000ea86:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff8000ea8b:	75 0d                	jne    ffffffff8000ea9a <fmt.formatInt__anon_3052+0x6ba>
ffffffff8000ea8d:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8000ea91:	48 81 c4 70 01 00 00 	add    rsp,0x170
ffffffff8000ea98:	5d                   	pop    rbp
ffffffff8000ea99:	c3                   	ret
ffffffff8000ea9a:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
ffffffff8000eaa1:	e8 6a 49 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000eaa6:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8000eaaa:	48 81 c4 70 01 00 00 	add    rsp,0x170
ffffffff8000eab1:	5d                   	pop    rbp
ffffffff8000eab2:	c3                   	ret
ffffffff8000eab3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000eaba:	00 00 00 
ffffffff8000eabd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff8000eac0 <math.absCast__anon_3054>:
} {
ffffffff8000eac0:	55                   	push   rbp
ffffffff8000eac1:	48 89 e5             	mov    rbp,rsp
ffffffff8000eac4:	48 83 ec 01          	sub    rsp,0x1
ffffffff8000eac8:	40 88 f8             	mov    al,dil
ffffffff8000eacb:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
            if (int_info.signedness == .unsigned) return x;
ffffffff8000eace:	48 83 c4 01          	add    rsp,0x1
ffffffff8000ead2:	5d                   	pop    rbp
ffffffff8000ead3:	c3                   	ret
ffffffff8000ead4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000eadb:	00 00 00 
ffffffff8000eade:	66 90                	xchg   ax,ax

ffffffff8000eae0 <fmt.formatType__anon_3087>:
) @TypeOf(writer).Error!void {
ffffffff8000eae0:	55                   	push   rbp
ffffffff8000eae1:	48 89 e5             	mov    rbp,rsp
ffffffff8000eae4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000eae8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000eaec:	66 89 f0             	mov    ax,si
ffffffff8000eaef:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
ffffffff8000eaf3:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000eaf7:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000eafe:	00 
ffffffff8000eaff:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000eb06:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000eb07:	66 89 c6             	mov    si,ax
ffffffff8000eb0a:	e8 b1 33 00 00       	call   ffffffff80011ec0 <fmt.formatValue__anon_3297>
ffffffff8000eb0f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000eb13:	b0 01                	mov    al,0x1
ffffffff8000eb15:	a8 01                	test   al,0x1
ffffffff8000eb17:	75 02                	jne    ffffffff8000eb1b <fmt.formatType__anon_3087+0x3b>
ffffffff8000eb19:	eb 0a                	jmp    ffffffff8000eb25 <fmt.formatType__anon_3087+0x45>
ffffffff8000eb1b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000eb1f:	48 83 c4 30          	add    rsp,0x30
ffffffff8000eb23:	5d                   	pop    rbp
ffffffff8000eb24:	c3                   	ret
ffffffff8000eb25:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000eb29:	e8 e2 48 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000eb2e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000eb32:	48 83 c4 30          	add    rsp,0x30
ffffffff8000eb36:	5d                   	pop    rbp
ffffffff8000eb37:	c3                   	ret
ffffffff8000eb38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000eb3f:	00 

ffffffff8000eb40 <fmt.formatType__anon_3088>:
) @TypeOf(writer).Error!void {
ffffffff8000eb40:	55                   	push   rbp
ffffffff8000eb41:	48 89 e5             	mov    rbp,rsp
ffffffff8000eb44:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000eb48:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000eb4c:	66 89 f0             	mov    ax,si
ffffffff8000eb4f:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
ffffffff8000eb53:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000eb57:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000eb5e:	00 
ffffffff8000eb5f:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000eb66:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000eb67:	66 89 c6             	mov    si,ax
ffffffff8000eb6a:	e8 51 33 00 00       	call   ffffffff80011ec0 <fmt.formatValue__anon_3297>
ffffffff8000eb6f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000eb73:	b0 01                	mov    al,0x1
ffffffff8000eb75:	a8 01                	test   al,0x1
ffffffff8000eb77:	75 02                	jne    ffffffff8000eb7b <fmt.formatType__anon_3088+0x3b>
ffffffff8000eb79:	eb 0a                	jmp    ffffffff8000eb85 <fmt.formatType__anon_3088+0x45>
ffffffff8000eb7b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000eb7f:	48 83 c4 30          	add    rsp,0x30
ffffffff8000eb83:	5d                   	pop    rbp
ffffffff8000eb84:	c3                   	ret
ffffffff8000eb85:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000eb89:	e8 82 48 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000eb8e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000eb92:	48 83 c4 30          	add    rsp,0x30
ffffffff8000eb96:	5d                   	pop    rbp
ffffffff8000eb97:	c3                   	ret
ffffffff8000eb98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000eb9f:	00 

ffffffff8000eba0 <fmt.formatType__anon_3089>:
) @TypeOf(writer).Error!void {
ffffffff8000eba0:	55                   	push   rbp
ffffffff8000eba1:	48 89 e5             	mov    rbp,rsp
ffffffff8000eba4:	48 81 ec a0 02 00 00 	sub    rsp,0x2a0
ffffffff8000ebab:	4c 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],r8
ffffffff8000ebb2:	48 89 8d c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rcx
ffffffff8000ebb9:	48 89 95 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rdx
ffffffff8000ebc0:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffffffff8000ebc7:	66 89 f0             	mov    ax,si
ffffffff8000ebca:	66 89 85 e6 fd ff ff 	mov    WORD PTR [rbp-0x21a],ax
ffffffff8000ebd1:	66 89 85 f6 fd ff ff 	mov    WORD PTR [rbp-0x20a],ax
ffffffff8000ebd8:	4c 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],r8
        defaultSpec(@TypeOf(value))
ffffffff8000ebdf:	48 c7 85 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],0x0
ffffffff8000ebe6:	00 00 00 00 
ffffffff8000ebea:	48 c7 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],0xffffffff8001b65d
ffffffff8000ebf1:	5d b6 01 80 
            try writer.writeAll(@typeName(T));
ffffffff8000ebf5:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff8000ebf8:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff8000ebff:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff8000ec02:	89 85 18 fe ff ff    	mov    DWORD PTR [rbp-0x1e8],eax
ffffffff8000ec08:	48 c7 c2 f1 b6 01 80 	mov    rdx,0xffffffff8001b6f1
ffffffff8000ec0f:	48 8d b5 10 fe ff ff 	lea    rsi,[rbp-0x1f0]
ffffffff8000ec16:	b9 10 00 00 00       	mov    ecx,0x10
ffffffff8000ec1b:	e8 30 17 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ec20:	4c 8b 85 e8 fd ff ff 	mov    r8,QWORD PTR [rbp-0x218]
            if (max_depth == 0) {
ffffffff8000ec27:	49 83 f8 00          	cmp    r8,0x0
ffffffff8000ec2b:	75 48                	jne    ffffffff8000ec75 <fmt.formatType__anon_3089+0xd5>
ffffffff8000ec2d:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ec34:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                return writer.writeAll("{ ... }");
ffffffff8000ec3b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000ec3e:	48 89 8d 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rcx
ffffffff8000ec45:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000ec48:	89 85 28 fe ff ff    	mov    DWORD PTR [rbp-0x1d8],eax
ffffffff8000ec4e:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8000ec55:	48 8d b5 20 fe ff ff 	lea    rsi,[rbp-0x1e0]
ffffffff8000ec5c:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000ec61:	e8 ea 16 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ec66:	66 89 85 1e fe ff ff 	mov    WORD PTR [rbp-0x1e2],ax
ffffffff8000ec6d:	b0 01                	mov    al,0x1
ffffffff8000ec6f:	a8 01                	test   al,0x1
ffffffff8000ec71:	75 04                	jne    ffffffff8000ec77 <fmt.formatType__anon_3089+0xd7>
ffffffff8000ec73:	eb 12                	jmp    ffffffff8000ec87 <fmt.formatType__anon_3089+0xe7>
ffffffff8000ec75:	eb 2c                	jmp    ffffffff8000eca3 <fmt.formatType__anon_3089+0x103>
ffffffff8000ec77:	66 8b 85 1e fe ff ff 	mov    ax,WORD PTR [rbp-0x1e2]
ffffffff8000ec7e:	48 81 c4 a0 02 00 00 	add    rsp,0x2a0
ffffffff8000ec85:	5d                   	pop    rbp
ffffffff8000ec86:	c3                   	ret
ffffffff8000ec87:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ec8e:	e8 7d 47 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000ec93:	66 8b 85 1e fe ff ff 	mov    ax,WORD PTR [rbp-0x1e2]
ffffffff8000ec9a:	48 81 c4 a0 02 00 00 	add    rsp,0x2a0
ffffffff8000eca1:	5d                   	pop    rbp
ffffffff8000eca2:	c3                   	ret
ffffffff8000eca3:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ecaa:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
            try writer.writeAll("{");
ffffffff8000ecb1:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000ecb4:	89 8d 38 fe ff ff    	mov    DWORD PTR [rbp-0x1c8],ecx
ffffffff8000ecba:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000ecbd:	48 89 85 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rax
ffffffff8000ecc4:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff8000eccb:	48 8d b5 30 fe ff ff 	lea    rsi,[rbp-0x1d0]
ffffffff8000ecd2:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff8000ecd7:	e8 74 16 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ecdc:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ece3:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
            inline for (info.fields, 0..) |f, i| {
ffffffff8000ecea:	48 c7 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],0x0
ffffffff8000ecf1:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff8000ecf5:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000ecf8:	89 8d 50 fe ff ff    	mov    DWORD PTR [rbp-0x1b0],ecx
ffffffff8000ecfe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000ed01:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff8000ed08:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff8000ed0f:	48 8d b5 48 fe ff ff 	lea    rsi,[rbp-0x1b8]
ffffffff8000ed16:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000ed1b:	e8 30 16 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ed20:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ed27:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(f.name);
ffffffff8000ed2e:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000ed31:	89 8d 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],ecx
ffffffff8000ed37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000ed3a:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff8000ed41:	48 c7 c2 02 b7 01 80 	mov    rdx,0xffffffff8001b702
ffffffff8000ed48:	48 8d b5 58 fe ff ff 	lea    rsi,[rbp-0x1a8]
ffffffff8000ed4f:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000ed54:	48 89 8d b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rcx
ffffffff8000ed5b:	e8 f0 15 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ed60:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ed67:	48 8b 8d b8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x248]
ffffffff8000ed6e:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(" = ");
ffffffff8000ed75:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000ed78:	89 95 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],edx
ffffffff8000ed7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000ed81:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff8000ed88:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000ed8f:	48 8d b5 68 fe ff ff 	lea    rsi,[rbp-0x198]
ffffffff8000ed96:	e8 b5 15 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ed9b:	66 8b 8d e6 fd ff ff 	mov    cx,WORD PTR [rbp-0x21a]
ffffffff8000eda2:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
ffffffff8000eda9:	88 8d c7 fd ff ff    	mov    BYTE PTR [rbp-0x239],cl
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000edaf:	48 83 e8 01          	sub    rax,0x1
ffffffff8000edb3:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff8000edba:	0f 92 85 80 fe ff ff 	setb   BYTE PTR [rbp-0x180]
ffffffff8000edc1:	8a 85 80 fe ff ff    	mov    al,BYTE PTR [rbp-0x180]
ffffffff8000edc7:	84 c0                	test   al,al
ffffffff8000edc9:	75 04                	jne    ffffffff8000edcf <fmt.formatType__anon_3089+0x22f>
ffffffff8000edcb:	eb 00                	jmp    ffffffff8000edcd <fmt.formatType__anon_3089+0x22d>
ffffffff8000edcd:	eb 1c                	jmp    ffffffff8000edeb <fmt.formatType__anon_3089+0x24b>
ffffffff8000edcf:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000edd6:	48 c7 c1 f8 c2 01 80 	mov    rcx,0xffffffff8001c2f8
ffffffff8000eddd:	31 c0                	xor    eax,eax
ffffffff8000eddf:	89 c2                	mov    edx,eax
ffffffff8000ede1:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000ede6:	e8 c5 13 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000edeb:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000edf2:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
ffffffff8000edf9:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
ffffffff8000ee00:	8a 85 c7 fd ff ff    	mov    al,BYTE PTR [rbp-0x239]
ffffffff8000ee06:	4c 8b 85 78 fe ff ff 	mov    r8,QWORD PTR [rbp-0x188]
ffffffff8000ee0d:	0f b6 f0             	movzx  esi,al
ffffffff8000ee10:	e8 0b 39 00 00       	call   ffffffff80012720 <fmt.formatType__anon_3350>
ffffffff8000ee15:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ee1c:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffffffff8000ee23:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x1
ffffffff8000ee2a:	01 00 00 00 
                    try writer.writeAll(", .");
ffffffff8000ee2e:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000ee31:	89 8d 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],ecx
ffffffff8000ee37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000ee3a:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff8000ee41:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000ee48:	48 8d b5 90 fe ff ff 	lea    rsi,[rbp-0x170]
ffffffff8000ee4f:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000ee54:	48 89 8d a8 fd ff ff 	mov    QWORD PTR [rbp-0x258],rcx
ffffffff8000ee5b:	e8 f0 14 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ee60:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ee67:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(f.name);
ffffffff8000ee6e:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000ee71:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
ffffffff8000ee77:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000ee7a:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff8000ee81:	48 c7 c2 06 b7 01 80 	mov    rdx,0xffffffff8001b706
ffffffff8000ee88:	48 8d b5 a0 fe ff ff 	lea    rsi,[rbp-0x160]
ffffffff8000ee8f:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff8000ee94:	e8 b7 14 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ee99:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000eea0:	48 8b 8d a8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x258]
ffffffff8000eea7:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(" = ");
ffffffff8000eeae:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000eeb1:	89 95 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],edx
ffffffff8000eeb7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000eeba:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff8000eec1:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000eec8:	48 8d b5 b0 fe ff ff 	lea    rsi,[rbp-0x150]
ffffffff8000eecf:	e8 7c 14 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000eed4:	66 8b 95 e6 fd ff ff 	mov    dx,WORD PTR [rbp-0x21a]
ffffffff8000eedb:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000eee2:	66 89 d1             	mov    cx,dx
ffffffff8000eee5:	c1 e9 03             	shr    ecx,0x3
ffffffff8000eee8:	88 8d b7 fd ff ff    	mov    BYTE PTR [rbp-0x249],cl
ffffffff8000eeee:	48 83 e8 01          	sub    rax,0x1
ffffffff8000eef2:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff8000eef9:	0f 92 85 c8 fe ff ff 	setb   BYTE PTR [rbp-0x138]
ffffffff8000ef00:	8a 85 c8 fe ff ff    	mov    al,BYTE PTR [rbp-0x138]
ffffffff8000ef06:	84 c0                	test   al,al
ffffffff8000ef08:	75 04                	jne    ffffffff8000ef0e <fmt.formatType__anon_3089+0x36e>
ffffffff8000ef0a:	eb 00                	jmp    ffffffff8000ef0c <fmt.formatType__anon_3089+0x36c>
ffffffff8000ef0c:	eb 1c                	jmp    ffffffff8000ef2a <fmt.formatType__anon_3089+0x38a>
ffffffff8000ef0e:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000ef15:	48 c7 c1 08 c3 01 80 	mov    rcx,0xffffffff8001c308
ffffffff8000ef1c:	31 c0                	xor    eax,eax
ffffffff8000ef1e:	89 c2                	mov    edx,eax
ffffffff8000ef20:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000ef25:	e8 86 12 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000ef2a:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ef31:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
ffffffff8000ef38:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
ffffffff8000ef3f:	8a 85 b7 fd ff ff    	mov    al,BYTE PTR [rbp-0x249]
ffffffff8000ef45:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
ffffffff8000ef4c:	0f b6 f0             	movzx  esi,al
ffffffff8000ef4f:	e8 2c 38 00 00       	call   ffffffff80012780 <fmt.formatType__anon_3351>
ffffffff8000ef54:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000ef5b:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffffffff8000ef62:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x2
ffffffff8000ef69:	02 00 00 00 
                    try writer.writeAll(", .");
ffffffff8000ef6d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000ef70:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
ffffffff8000ef76:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000ef79:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff8000ef80:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000ef87:	48 8d b5 d8 fe ff ff 	lea    rsi,[rbp-0x128]
ffffffff8000ef8e:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000ef93:	48 89 8d 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],rcx
ffffffff8000ef9a:	e8 b1 13 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000ef9f:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000efa6:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(f.name);
ffffffff8000efad:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000efb0:	89 8d f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],ecx
ffffffff8000efb6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000efb9:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff8000efc0:	48 c7 c2 10 b7 01 80 	mov    rdx,0xffffffff8001b710
ffffffff8000efc7:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
ffffffff8000efce:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff8000efd3:	e8 78 13 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000efd8:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000efdf:	48 8b 8d 98 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x268]
ffffffff8000efe6:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(" = ");
ffffffff8000efed:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000eff0:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffffffff8000eff6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000eff9:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff8000f000:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000f007:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
ffffffff8000f00e:	e8 3d 13 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f013:	66 8b 95 e6 fd ff ff 	mov    dx,WORD PTR [rbp-0x21a]
ffffffff8000f01a:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000f021:	66 89 d1             	mov    cx,dx
ffffffff8000f024:	c1 e9 08             	shr    ecx,0x8
ffffffff8000f027:	88 8d a7 fd ff ff    	mov    BYTE PTR [rbp-0x259],cl
ffffffff8000f02d:	48 83 e8 01          	sub    rax,0x1
ffffffff8000f031:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff8000f038:	0f 92 85 10 ff ff ff 	setb   BYTE PTR [rbp-0xf0]
ffffffff8000f03f:	8a 85 10 ff ff ff    	mov    al,BYTE PTR [rbp-0xf0]
ffffffff8000f045:	84 c0                	test   al,al
ffffffff8000f047:	75 04                	jne    ffffffff8000f04d <fmt.formatType__anon_3089+0x4ad>
ffffffff8000f049:	eb 00                	jmp    ffffffff8000f04b <fmt.formatType__anon_3089+0x4ab>
ffffffff8000f04b:	eb 1c                	jmp    ffffffff8000f069 <fmt.formatType__anon_3089+0x4c9>
ffffffff8000f04d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000f054:	48 c7 c1 18 c3 01 80 	mov    rcx,0xffffffff8001c318
ffffffff8000f05b:	31 c0                	xor    eax,eax
ffffffff8000f05d:	89 c2                	mov    edx,eax
ffffffff8000f05f:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000f064:	e8 47 11 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000f069:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f070:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
ffffffff8000f077:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
ffffffff8000f07e:	8a 85 a7 fd ff ff    	mov    al,BYTE PTR [rbp-0x259]
ffffffff8000f084:	4c 8b 85 08 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf8]
ffffffff8000f08b:	0f b6 f0             	movzx  esi,al
ffffffff8000f08e:	e8 4d 37 00 00       	call   ffffffff800127e0 <fmt.formatType__anon_3352>
ffffffff8000f093:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f09a:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffffffff8000f0a1:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x3
ffffffff8000f0a8:	03 00 00 00 
                    try writer.writeAll(", .");
ffffffff8000f0ac:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000f0af:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
ffffffff8000f0b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f0b8:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff8000f0bf:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000f0c6:	48 8d b5 20 ff ff ff 	lea    rsi,[rbp-0xe0]
ffffffff8000f0cd:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000f0d2:	48 89 8d 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rcx
ffffffff8000f0d9:	e8 72 12 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f0de:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f0e5:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(f.name);
ffffffff8000f0ec:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000f0ef:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
ffffffff8000f0f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f0f8:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff8000f0ff:	48 c7 c2 1a b7 01 80 	mov    rdx,0xffffffff8001b71a
ffffffff8000f106:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff8000f10d:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff8000f112:	e8 39 12 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f117:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f11e:	48 8b 8d 88 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x278]
ffffffff8000f125:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(" = ");
ffffffff8000f12c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000f12f:	89 95 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],edx
ffffffff8000f135:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f138:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffffffff8000f13f:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000f146:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff8000f14d:	e8 fe 11 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f152:	66 8b 8d e6 fd ff ff 	mov    cx,WORD PTR [rbp-0x21a]
ffffffff8000f159:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000f160:	0f b7 c9             	movzx  ecx,cx
ffffffff8000f163:	c1 e9 0c             	shr    ecx,0xc
ffffffff8000f166:	88 8d 97 fd ff ff    	mov    BYTE PTR [rbp-0x269],cl
ffffffff8000f16c:	48 83 e8 01          	sub    rax,0x1
ffffffff8000f170:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff8000f177:	0f 92 85 58 ff ff ff 	setb   BYTE PTR [rbp-0xa8]
ffffffff8000f17e:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [rbp-0xa8]
ffffffff8000f184:	84 c0                	test   al,al
ffffffff8000f186:	75 04                	jne    ffffffff8000f18c <fmt.formatType__anon_3089+0x5ec>
ffffffff8000f188:	eb 00                	jmp    ffffffff8000f18a <fmt.formatType__anon_3089+0x5ea>
ffffffff8000f18a:	eb 1c                	jmp    ffffffff8000f1a8 <fmt.formatType__anon_3089+0x608>
ffffffff8000f18c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000f193:	48 c7 c1 28 c3 01 80 	mov    rcx,0xffffffff8001c328
ffffffff8000f19a:	31 c0                	xor    eax,eax
ffffffff8000f19c:	89 c2                	mov    edx,eax
ffffffff8000f19e:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000f1a3:	e8 08 10 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000f1a8:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f1af:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
ffffffff8000f1b6:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
ffffffff8000f1bd:	8a 85 97 fd ff ff    	mov    al,BYTE PTR [rbp-0x269]
ffffffff8000f1c3:	4c 8b 85 50 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb0]
ffffffff8000f1ca:	0f b6 f0             	movzx  esi,al
ffffffff8000f1cd:	e8 6e 36 00 00       	call   ffffffff80012840 <fmt.formatType__anon_3353>
ffffffff8000f1d2:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f1d9:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffffffff8000f1e0:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x4
ffffffff8000f1e7:	04 00 00 00 
                    try writer.writeAll(", .");
ffffffff8000f1eb:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000f1ee:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff8000f1f4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f1f7:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff8000f1fe:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000f205:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff8000f20c:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000f211:	48 89 8d 78 fd ff ff 	mov    QWORD PTR [rbp-0x288],rcx
ffffffff8000f218:	e8 33 11 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f21d:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f224:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(f.name);
ffffffff8000f22b:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000f22e:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff8000f231:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f234:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff8000f23b:	48 c7 c2 24 b7 01 80 	mov    rdx,0xffffffff8001b724
ffffffff8000f242:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff8000f249:	b9 0f 00 00 00       	mov    ecx,0xf
ffffffff8000f24e:	e8 fd 10 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f253:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f25a:	48 8b 8d 78 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x288]
ffffffff8000f261:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(" = ");
ffffffff8000f268:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000f26b:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
ffffffff8000f26e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f271:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000f275:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000f27c:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff8000f280:	e8 cb 10 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f285:	66 8b 8d e6 fd ff ff 	mov    cx,WORD PTR [rbp-0x21a]
ffffffff8000f28c:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000f293:	0f b7 c9             	movzx  ecx,cx
ffffffff8000f296:	c1 e9 0d             	shr    ecx,0xd
ffffffff8000f299:	88 8d 87 fd ff ff    	mov    BYTE PTR [rbp-0x279],cl
ffffffff8000f29f:	48 83 e8 01          	sub    rax,0x1
ffffffff8000f2a3:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000f2a7:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff8000f2ab:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff8000f2ae:	84 c0                	test   al,al
ffffffff8000f2b0:	75 04                	jne    ffffffff8000f2b6 <fmt.formatType__anon_3089+0x716>
ffffffff8000f2b2:	eb 00                	jmp    ffffffff8000f2b4 <fmt.formatType__anon_3089+0x714>
ffffffff8000f2b4:	eb 1c                	jmp    ffffffff8000f2d2 <fmt.formatType__anon_3089+0x732>
ffffffff8000f2b6:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000f2bd:	48 c7 c1 38 c3 01 80 	mov    rcx,0xffffffff8001c338
ffffffff8000f2c4:	31 c0                	xor    eax,eax
ffffffff8000f2c6:	89 c2                	mov    edx,eax
ffffffff8000f2c8:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000f2cd:	e8 de 0e ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000f2d2:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f2d9:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
ffffffff8000f2e0:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
ffffffff8000f2e7:	8a 85 87 fd ff ff    	mov    al,BYTE PTR [rbp-0x279]
ffffffff8000f2ed:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff8000f2f1:	0f b6 f0             	movzx  esi,al
ffffffff8000f2f4:	e8 a7 35 00 00       	call   ffffffff800128a0 <fmt.formatType__anon_3354>
ffffffff8000f2f9:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f300:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
ffffffff8000f307:	48 c7 45 a8 05 00 00 	mov    QWORD PTR [rbp-0x58],0x5
ffffffff8000f30e:	00 
                    try writer.writeAll(", .");
ffffffff8000f30f:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000f312:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff8000f315:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f318:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff8000f31c:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8000f323:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff8000f327:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000f32c:	48 89 8d 68 fd ff ff 	mov    QWORD PTR [rbp-0x298],rcx
ffffffff8000f333:	e8 18 10 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f338:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f33f:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(f.name);
ffffffff8000f346:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8000f349:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff8000f34c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f34f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff8000f353:	48 c7 c2 34 b7 01 80 	mov    rdx,0xffffffff8001b734
ffffffff8000f35a:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff8000f35e:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8000f363:	e8 e8 0f ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f368:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f36f:	48 8b 8d 68 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x298]
ffffffff8000f376:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
                try writer.writeAll(" = ");
ffffffff8000f37d:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000f380:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff8000f383:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000f386:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8000f38a:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff8000f391:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff8000f395:	e8 b6 0f ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f39a:	66 8b 8d e6 fd ff ff 	mov    cx,WORD PTR [rbp-0x21a]
ffffffff8000f3a1:	48 8b 85 e8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x218]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8000f3a8:	0f b7 c9             	movzx  ecx,cx
ffffffff8000f3ab:	c1 e9 0f             	shr    ecx,0xf
ffffffff8000f3ae:	88 8d 77 fd ff ff    	mov    BYTE PTR [rbp-0x289],cl
ffffffff8000f3b4:	48 83 e8 01          	sub    rax,0x1
ffffffff8000f3b8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8000f3bc:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff8000f3c0:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff8000f3c3:	84 c0                	test   al,al
ffffffff8000f3c5:	75 04                	jne    ffffffff8000f3cb <fmt.formatType__anon_3089+0x82b>
ffffffff8000f3c7:	eb 00                	jmp    ffffffff8000f3c9 <fmt.formatType__anon_3089+0x829>
ffffffff8000f3c9:	eb 1c                	jmp    ffffffff8000f3e7 <fmt.formatType__anon_3089+0x847>
ffffffff8000f3cb:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8000f3d2:	48 c7 c1 48 c3 01 80 	mov    rcx,0xffffffff8001c348
ffffffff8000f3d9:	31 c0                	xor    eax,eax
ffffffff8000f3db:	89 c2                	mov    edx,eax
ffffffff8000f3dd:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000f3e2:	e8 c9 0d ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000f3e7:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f3ee:	48 8b 8d c8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x238]
ffffffff8000f3f5:	48 8b 95 d0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x230]
ffffffff8000f3fc:	8a 85 77 fd ff ff    	mov    al,BYTE PTR [rbp-0x289]
ffffffff8000f402:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff8000f406:	0f b6 f0             	movzx  esi,al
ffffffff8000f409:	e8 f2 34 00 00       	call   ffffffff80012900 <fmt.formatType__anon_3355>
ffffffff8000f40e:	48 8b bd d8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x228]
ffffffff8000f415:	48 8b 85 c8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x238]
            try writer.writeAll(" }");
ffffffff8000f41c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8000f41f:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff8000f423:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000f426:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000f429:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff8000f430:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000f434:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8000f439:	e8 12 0f ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8000f43e:	31 c0                	xor    eax,eax
ffffffff8000f440:	48 81 c4 a0 02 00 00 	add    rsp,0x2a0
ffffffff8000f447:	5d                   	pop    rbp
ffffffff8000f448:	c3                   	ret
ffffffff8000f449:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff8000f450 <fmt.formatType__anon_3090>:
) @TypeOf(writer).Error!void {
ffffffff8000f450:	55                   	push   rbp
ffffffff8000f451:	48 89 e5             	mov    rbp,rsp
ffffffff8000f454:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000f458:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000f45c:	66 89 f0             	mov    ax,si
ffffffff8000f45f:	66 89 45 de          	mov    WORD PTR [rbp-0x22],ax
ffffffff8000f463:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000f467:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000f46e:	00 
ffffffff8000f46f:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000f476:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000f477:	66 89 c6             	mov    si,ax
ffffffff8000f47a:	e8 41 2a 00 00       	call   ffffffff80011ec0 <fmt.formatValue__anon_3297>
ffffffff8000f47f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000f483:	b0 01                	mov    al,0x1
ffffffff8000f485:	a8 01                	test   al,0x1
ffffffff8000f487:	75 02                	jne    ffffffff8000f48b <fmt.formatType__anon_3090+0x3b>
ffffffff8000f489:	eb 0a                	jmp    ffffffff8000f495 <fmt.formatType__anon_3090+0x45>
ffffffff8000f48b:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000f48f:	48 83 c4 30          	add    rsp,0x30
ffffffff8000f493:	5d                   	pop    rbp
ffffffff8000f494:	c3                   	ret
ffffffff8000f495:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000f499:	e8 72 3f ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f49e:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000f4a2:	48 83 c4 30          	add    rsp,0x30
ffffffff8000f4a6:	5d                   	pop    rbp
ffffffff8000f4a7:	c3                   	ret
ffffffff8000f4a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000f4af:	00 

ffffffff8000f4b0 <fmt.formatType__anon_3091>:
) @TypeOf(writer).Error!void {
ffffffff8000f4b0:	55                   	push   rbp
ffffffff8000f4b1:	48 89 e5             	mov    rbp,rsp
ffffffff8000f4b4:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000f4b8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000f4bc:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
ffffffff8000f4bf:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000f4c3:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000f4ca:	00 
ffffffff8000f4cb:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000f4d2:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000f4d3:	e8 e8 18 00 00       	call   ffffffff80010dc0 <fmt.formatValue__anon_3182>
ffffffff8000f4d8:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000f4dc:	b0 01                	mov    al,0x1
ffffffff8000f4de:	a8 01                	test   al,0x1
ffffffff8000f4e0:	75 02                	jne    ffffffff8000f4e4 <fmt.formatType__anon_3091+0x34>
ffffffff8000f4e2:	eb 0a                	jmp    ffffffff8000f4ee <fmt.formatType__anon_3091+0x3e>
ffffffff8000f4e4:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000f4e8:	48 83 c4 30          	add    rsp,0x30
ffffffff8000f4ec:	5d                   	pop    rbp
ffffffff8000f4ed:	c3                   	ret
ffffffff8000f4ee:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000f4f2:	e8 19 3f ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f4f7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000f4fb:	48 83 c4 30          	add    rsp,0x30
ffffffff8000f4ff:	5d                   	pop    rbp
ffffffff8000f500:	c3                   	ret
ffffffff8000f501:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000f508:	00 00 00 
ffffffff8000f50b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff8000f510 <fmt.formatType__anon_3092>:
) @TypeOf(writer).Error!void {
ffffffff8000f510:	55                   	push   rbp
ffffffff8000f511:	48 89 e5             	mov    rbp,rsp
ffffffff8000f514:	48 83 ec 30          	sub    rsp,0x30
ffffffff8000f518:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8000f51c:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
ffffffff8000f51f:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8000f523:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8000f52a:	00 
ffffffff8000f52b:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8000f532:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8000f533:	e8 88 18 00 00       	call   ffffffff80010dc0 <fmt.formatValue__anon_3182>
ffffffff8000f538:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000f53c:	b0 01                	mov    al,0x1
ffffffff8000f53e:	a8 01                	test   al,0x1
ffffffff8000f540:	75 02                	jne    ffffffff8000f544 <fmt.formatType__anon_3092+0x34>
ffffffff8000f542:	eb 0a                	jmp    ffffffff8000f54e <fmt.formatType__anon_3092+0x3e>
ffffffff8000f544:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000f548:	48 83 c4 30          	add    rsp,0x30
ffffffff8000f54c:	5d                   	pop    rbp
ffffffff8000f54d:	c3                   	ret
ffffffff8000f54e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8000f552:	e8 b9 3e ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f557:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8000f55b:	48 83 c4 30          	add    rsp,0x30
ffffffff8000f55f:	5d                   	pop    rbp
ffffffff8000f560:	c3                   	ret
ffffffff8000f561:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000f568:	00 00 00 
ffffffff8000f56b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff8000f570 <fmt.bufPrint__anon_3093>:
pub fn bufPrint(buf: []u8, comptime fmt: []const u8, args: anytype) BufPrintError![]u8 {
ffffffff8000f570:	55                   	push   rbp
ffffffff8000f571:	48 89 e5             	mov    rbp,rsp
ffffffff8000f574:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffffffff8000f57b:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
ffffffff8000f582:	48 89 d0             	mov    rax,rdx
ffffffff8000f585:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffffffff8000f58c:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
ffffffff8000f593:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
ffffffff8000f59a:	48 89 ca             	mov    rdx,rcx
ffffffff8000f59d:	48 89 c6             	mov    rsi,rax
ffffffff8000f5a0:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffffffff8000f5a4:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff8000f5a8:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
    var fbs = std.io.fixedBufferStream(buf);
ffffffff8000f5ac:	e8 6f 24 00 00       	call   ffffffff80011a20 <io.fixed_buffer_stream.fixedBufferStream__anon_3211>
ffffffff8000f5b1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8000f5b5:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8000f5b9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000f5bd:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff8000f5c1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000f5c5:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff8000f5c9:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff8000f5cd:	48 8d 75 98          	lea    rsi,[rbp-0x68]
    try format(fbs.writer(), fmt, args);
ffffffff8000f5d1:	e8 7a 24 00 00       	call   ffffffff80011a50 <io.fixed_buffer_stream.FixedBufferStream([]u8).writer>
ffffffff8000f5d6:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000f5dd:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff8000f5e4:	48 8d 75 c8          	lea    rsi,[rbp-0x38]
ffffffff8000f5e8:	e8 c3 33 00 00       	call   ffffffff800129b0 <fmt.format__anon_3356>
ffffffff8000f5ed:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
ffffffff8000f5f1:	66 83 f8 00          	cmp    ax,0x0
ffffffff8000f5f5:	74 42                	je     ffffffff8000f639 <fmt.bufPrint__anon_3093+0xc9>
ffffffff8000f5f7:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000f5fe:	66 8b 45 86          	mov    ax,WORD PTR [rbp-0x7a]
ffffffff8000f602:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
ffffffff8000f606:	e8 05 3e ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f60b:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
ffffffff8000f612:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000f619:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000f61d:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000f620:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff8000f624:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff8000f628:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8000f62c:	48 89 51 10          	mov    QWORD PTR [rcx+0x10],rdx
ffffffff8000f630:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff8000f637:	5d                   	pop    rbp
ffffffff8000f638:	c3                   	ret
ffffffff8000f639:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
    return fbs.getWritten();
ffffffff8000f63d:	e8 2e 24 00 00       	call   ffffffff80011a70 <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten>
ffffffff8000f642:	48 89 c1             	mov    rcx,rax
ffffffff8000f645:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8000f64c:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
ffffffff8000f652:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff8000f656:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff8000f65a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff8000f65e:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff8000f661:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff8000f665:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
ffffffff8000f669:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffffffff8000f66d:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffffffff8000f671:	66 83 78 10 00       	cmp    WORD PTR [rax+0x10],0x0
ffffffff8000f676:	75 10                	jne    ffffffff8000f688 <fmt.bufPrint__anon_3093+0x118>
ffffffff8000f678:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000f67f:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff8000f686:	5d                   	pop    rbp
ffffffff8000f687:	c3                   	ret
ffffffff8000f688:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8000f68f:	e8 7c 3d ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f694:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8000f69b:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff8000f6a2:	5d                   	pop    rbp
ffffffff8000f6a3:	c3                   	ret
ffffffff8000f6a4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000f6ab:	00 00 00 
ffffffff8000f6ae:	66 90                	xchg   ax,ax

ffffffff8000f6b0 <mem.len__anon_3095>:
pub fn len(value: anytype) usize {
ffffffff8000f6b0:	55                   	push   rbp
ffffffff8000f6b1:	48 89 e5             	mov    rbp,rsp
ffffffff8000f6b4:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000f6b8:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
                const sentinel_ptr = info.sentinel orelse
ffffffff8000f6bc:	48 c7 45 e8 98 ad 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001ad98
ffffffff8000f6c3:	80 
                const sentinel = @ptrCast(*align(1) const info.child, sentinel_ptr).*;
ffffffff8000f6c4:	c6 45 f7 00          	mov    BYTE PTR [rbp-0x9],0x0
                return indexOfSentinel(info.child, sentinel, value);
ffffffff8000f6c8:	e8 43 34 00 00       	call   ffffffff80012b10 <mem.indexOfSentinel__anon_3376>
ffffffff8000f6cd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000f6d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000f6d5:	48 83 c4 20          	add    rsp,0x20
ffffffff8000f6d9:	5d                   	pop    rbp
ffffffff8000f6da:	c3                   	ret
ffffffff8000f6db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff8000f6e0 <builtin.panicSentinelMismatch__anon_3097>:
pub fn panicSentinelMismatch(expected: anytype, actual: @TypeOf(expected)) noreturn {
ffffffff8000f6e0:	55                   	push   rbp
ffffffff8000f6e1:	48 89 e5             	mov    rbp,rsp
ffffffff8000f6e4:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000f6e8:	40 88 f1             	mov    cl,sil
ffffffff8000f6eb:	40 88 fa             	mov    dl,dil
ffffffff8000f6ee:	88 55 e6             	mov    BYTE PTR [rbp-0x1a],dl
ffffffff8000f6f1:	88 4d e7             	mov    BYTE PTR [rbp-0x19],cl
    std.debug.panicExtra(null, @returnAddress(), "sentinel mismatch: expected {any}, found {any}", .{ expected, actual });
ffffffff8000f6f4:	48 8b 45 08          	mov    rax,QWORD PTR [rbp+0x8]
ffffffff8000f6f8:	88 55 e8             	mov    BYTE PTR [rbp-0x18],dl
ffffffff8000f6fb:	88 4d e9             	mov    BYTE PTR [rbp-0x17],cl
ffffffff8000f6fe:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000f702:	c6 45 f8 01          	mov    BYTE PTR [rbp-0x8],0x1
ffffffff8000f706:	31 c0                	xor    eax,eax
ffffffff8000f708:	31 c0                	xor    eax,eax
ffffffff8000f70a:	89 c7                	mov    edi,eax
ffffffff8000f70c:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8000f710:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
ffffffff8000f714:	e8 77 34 00 00       	call   ffffffff80012b90 <debug.panicExtra__anon_3378>
ffffffff8000f719:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff8000f720 <unicode.utf8Decode2>:
pub fn utf8Decode2(bytes: []const u8) Utf8Decode2Error!u21 {
ffffffff8000f720:	55                   	push   rbp
ffffffff8000f721:	48 89 e5             	mov    rbp,rsp
ffffffff8000f724:	48 83 ec 50          	sub    rsp,0x50
ffffffff8000f728:	48 89 c8             	mov    rax,rcx
ffffffff8000f72b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
ffffffff8000f72f:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff8000f733:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff8000f737:	48 89 c1             	mov    rcx,rax
ffffffff8000f73a:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff8000f73e:	48 89 d6             	mov    rsi,rdx
ffffffff8000f741:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff8000f745:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000f749:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    assert(bytes.len == 2);
ffffffff8000f74d:	48 83 f9 02          	cmp    rcx,0x2
ffffffff8000f751:	0f 94 c0             	sete   al
ffffffff8000f754:	0f b6 f8             	movzx  edi,al
ffffffff8000f757:	e8 d4 64 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000f75c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    assert(bytes[0] & 0b11100000 == 0b11000000);
ffffffff8000f760:	31 c0                	xor    eax,eax
ffffffff8000f762:	48 39 c8             	cmp    rax,rcx
ffffffff8000f765:	73 02                	jae    ffffffff8000f769 <unicode.utf8Decode2+0x49>
ffffffff8000f767:	eb 0f                	jmp    ffffffff8000f778 <unicode.utf8Decode2+0x58>
ffffffff8000f769:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000f76d:	31 c0                	xor    eax,eax
ffffffff8000f76f:	31 c0                	xor    eax,eax
ffffffff8000f771:	89 c7                	mov    edi,eax
ffffffff8000f773:	e8 58 0a ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000f778:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000f77c:	8a 00                	mov    al,BYTE PTR [rax]
ffffffff8000f77e:	24 e0                	and    al,0xe0
ffffffff8000f780:	3c c0                	cmp    al,0xc0
ffffffff8000f782:	0f 94 c0             	sete   al
ffffffff8000f785:	0f b6 f8             	movzx  edi,al
ffffffff8000f788:	e8 a3 64 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000f78d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    var value: u21 = bytes[0] & 0b00011111;
ffffffff8000f791:	31 c0                	xor    eax,eax
ffffffff8000f793:	48 39 c8             	cmp    rax,rcx
ffffffff8000f796:	73 02                	jae    ffffffff8000f79a <unicode.utf8Decode2+0x7a>
ffffffff8000f798:	eb 0f                	jmp    ffffffff8000f7a9 <unicode.utf8Decode2+0x89>
ffffffff8000f79a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000f79e:	31 c0                	xor    eax,eax
ffffffff8000f7a0:	31 c0                	xor    eax,eax
ffffffff8000f7a2:	89 c7                	mov    edi,eax
ffffffff8000f7a4:	e8 27 0a ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000f7a9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000f7ad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000f7b1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8000f7b4:	83 e0 1f             	and    eax,0x1f
ffffffff8000f7b7:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
ffffffff8000f7bb:	c6 45 f6 00          	mov    BYTE PTR [rbp-0xa],0x0
    if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
ffffffff8000f7bf:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000f7c4:	48 39 c8             	cmp    rax,rcx
ffffffff8000f7c7:	73 02                	jae    ffffffff8000f7cb <unicode.utf8Decode2+0xab>
ffffffff8000f7c9:	eb 0e                	jmp    ffffffff8000f7d9 <unicode.utf8Decode2+0xb9>
ffffffff8000f7cb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000f7cf:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000f7d4:	e8 f7 09 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000f7d9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000f7dd:	8a 40 01             	mov    al,BYTE PTR [rax+0x1]
ffffffff8000f7e0:	24 c0                	and    al,0xc0
ffffffff8000f7e2:	3c 80                	cmp    al,0x80
ffffffff8000f7e4:	74 24                	je     ffffffff8000f80a <unicode.utf8Decode2+0xea>
ffffffff8000f7e6:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000f7ea:	e8 21 3c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f7ef:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000f7f3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000f7f7:	48 ba 00 00 00 00 05 	movabs rdx,0x500000000
ffffffff8000f7fe:	00 00 00 
ffffffff8000f801:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000f804:	48 83 c4 50          	add    rsp,0x50
ffffffff8000f808:	5d                   	pop    rbp
ffffffff8000f809:	c3                   	ret
ffffffff8000f80a:	eb 00                	jmp    ffffffff8000f80c <unicode.utf8Decode2+0xec>
    value <<= 6;
ffffffff8000f80c:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000f810:	c1 e1 10             	shl    ecx,0x10
ffffffff8000f813:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000f817:	09 c8                	or     eax,ecx
ffffffff8000f819:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
ffffffff8000f81c:	b0 01                	mov    al,0x1
ffffffff8000f81e:	a8 01                	test   al,0x1
ffffffff8000f820:	75 02                	jne    ffffffff8000f824 <unicode.utf8Decode2+0x104>
ffffffff8000f822:	eb 02                	jmp    ffffffff8000f826 <unicode.utf8Decode2+0x106>
ffffffff8000f824:	eb 1c                	jmp    ffffffff8000f842 <unicode.utf8Decode2+0x122>
ffffffff8000f826:	48 c7 c7 69 b7 01 80 	mov    rdi,0xffffffff8001b769
ffffffff8000f82d:	48 c7 c1 58 c3 01 80 	mov    rcx,0xffffffff8001c358
ffffffff8000f834:	31 c0                	xor    eax,eax
ffffffff8000f836:	89 c2                	mov    edx,eax
ffffffff8000f838:	be 2a 00 00 00       	mov    esi,0x2a
ffffffff8000f83d:	e8 6e 09 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000f842:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000f846:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffffffff8000f849:	89 c2                	mov    edx,eax
ffffffff8000f84b:	c1 e2 06             	shl    edx,0x6
ffffffff8000f84e:	66 89 55 f4          	mov    WORD PTR [rbp-0xc],dx
ffffffff8000f852:	c1 e8 0a             	shr    eax,0xa
ffffffff8000f855:	83 e0 1f             	and    eax,0x1f
ffffffff8000f858:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    value |= bytes[1] & 0b00111111;
ffffffff8000f85b:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000f85f:	c1 e2 10             	shl    edx,0x10
ffffffff8000f862:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000f866:	09 d0                	or     eax,edx
ffffffff8000f868:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff8000f86b:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000f870:	48 39 c8             	cmp    rax,rcx
ffffffff8000f873:	73 02                	jae    ffffffff8000f877 <unicode.utf8Decode2+0x157>
ffffffff8000f875:	eb 0e                	jmp    ffffffff8000f885 <unicode.utf8Decode2+0x165>
ffffffff8000f877:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000f87b:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000f880:	e8 4b 09 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000f885:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
ffffffff8000f888:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000f88c:	0f b6 50 01          	movzx  edx,BYTE PTR [rax+0x1]
ffffffff8000f890:	83 e2 3f             	and    edx,0x3f
ffffffff8000f893:	89 c8                	mov    eax,ecx
ffffffff8000f895:	09 d0                	or     eax,edx
ffffffff8000f897:	c1 e9 10             	shr    ecx,0x10
ffffffff8000f89a:	83 e1 1f             	and    ecx,0x1f
ffffffff8000f89d:	88 4d f6             	mov    BYTE PTR [rbp-0xa],cl
ffffffff8000f8a0:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    if (value < 0x80) return error.Utf8OverlongEncoding;
ffffffff8000f8a4:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000f8a8:	c1 e1 10             	shl    ecx,0x10
ffffffff8000f8ab:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000f8af:	09 c8                	or     eax,ecx
ffffffff8000f8b1:	83 e8 7f             	sub    eax,0x7f
ffffffff8000f8b4:	77 26                	ja     ffffffff8000f8dc <unicode.utf8Decode2+0x1bc>
ffffffff8000f8b6:	eb 00                	jmp    ffffffff8000f8b8 <unicode.utf8Decode2+0x198>
ffffffff8000f8b8:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000f8bc:	e8 4f 3b ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f8c1:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000f8c5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000f8c9:	48 ba 00 00 00 00 06 	movabs rdx,0x600000000
ffffffff8000f8d0:	00 00 00 
ffffffff8000f8d3:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000f8d6:	48 83 c4 50          	add    rsp,0x50
ffffffff8000f8da:	5d                   	pop    rbp
ffffffff8000f8db:	c3                   	ret
ffffffff8000f8dc:	eb 00                	jmp    ffffffff8000f8de <unicode.utf8Decode2+0x1be>
ffffffff8000f8de:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000f8e2:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    return value;
ffffffff8000f8e6:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000f8ea:	0f b7 75 f4          	movzx  esi,WORD PTR [rbp-0xc]
ffffffff8000f8ee:	66 c7 45 fc 00 00    	mov    WORD PTR [rbp-0x4],0x0
ffffffff8000f8f4:	66 89 75 f8          	mov    WORD PTR [rbp-0x8],si
ffffffff8000f8f8:	83 e2 1f             	and    edx,0x1f
ffffffff8000f8fb:	88 55 fa             	mov    BYTE PTR [rbp-0x6],dl
ffffffff8000f8fe:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000f902:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000f905:	48 83 c4 50          	add    rsp,0x50
ffffffff8000f909:	5d                   	pop    rbp
ffffffff8000f90a:	c3                   	ret
ffffffff8000f90b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff8000f910 <unicode.utf8Decode3>:
pub fn utf8Decode3(bytes: []const u8) Utf8Decode3Error!u21 {
ffffffff8000f910:	55                   	push   rbp
ffffffff8000f911:	48 89 e5             	mov    rbp,rsp
ffffffff8000f914:	48 83 ec 60          	sub    rsp,0x60
ffffffff8000f918:	48 89 c8             	mov    rax,rcx
ffffffff8000f91b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
ffffffff8000f91f:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff8000f923:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff8000f927:	48 89 c1             	mov    rcx,rax
ffffffff8000f92a:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff8000f92e:	48 89 d6             	mov    rsi,rdx
ffffffff8000f931:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff8000f935:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000f939:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    assert(bytes.len == 3);
ffffffff8000f93d:	48 83 f9 03          	cmp    rcx,0x3
ffffffff8000f941:	0f 94 c0             	sete   al
ffffffff8000f944:	0f b6 f8             	movzx  edi,al
ffffffff8000f947:	e8 e4 62 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000f94c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    assert(bytes[0] & 0b11110000 == 0b11100000);
ffffffff8000f950:	31 c0                	xor    eax,eax
ffffffff8000f952:	48 39 c8             	cmp    rax,rcx
ffffffff8000f955:	73 02                	jae    ffffffff8000f959 <unicode.utf8Decode3+0x49>
ffffffff8000f957:	eb 0f                	jmp    ffffffff8000f968 <unicode.utf8Decode3+0x58>
ffffffff8000f959:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000f95d:	31 c0                	xor    eax,eax
ffffffff8000f95f:	31 c0                	xor    eax,eax
ffffffff8000f961:	89 c7                	mov    edi,eax
ffffffff8000f963:	e8 68 08 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000f968:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000f96c:	8a 00                	mov    al,BYTE PTR [rax]
ffffffff8000f96e:	24 f0                	and    al,0xf0
ffffffff8000f970:	3c e0                	cmp    al,0xe0
ffffffff8000f972:	0f 94 c0             	sete   al
ffffffff8000f975:	0f b6 f8             	movzx  edi,al
ffffffff8000f978:	e8 b3 62 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000f97d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    var value: u21 = bytes[0] & 0b00001111;
ffffffff8000f981:	31 c0                	xor    eax,eax
ffffffff8000f983:	48 39 c8             	cmp    rax,rcx
ffffffff8000f986:	73 02                	jae    ffffffff8000f98a <unicode.utf8Decode3+0x7a>
ffffffff8000f988:	eb 0f                	jmp    ffffffff8000f999 <unicode.utf8Decode3+0x89>
ffffffff8000f98a:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000f98e:	31 c0                	xor    eax,eax
ffffffff8000f990:	31 c0                	xor    eax,eax
ffffffff8000f992:	89 c7                	mov    edi,eax
ffffffff8000f994:	e8 37 08 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000f999:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000f99d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000f9a1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8000f9a4:	83 e0 0f             	and    eax,0xf
ffffffff8000f9a7:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
ffffffff8000f9ab:	c6 45 f6 00          	mov    BYTE PTR [rbp-0xa],0x0
    if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
ffffffff8000f9af:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000f9b4:	48 39 c8             	cmp    rax,rcx
ffffffff8000f9b7:	73 02                	jae    ffffffff8000f9bb <unicode.utf8Decode3+0xab>
ffffffff8000f9b9:	eb 0e                	jmp    ffffffff8000f9c9 <unicode.utf8Decode3+0xb9>
ffffffff8000f9bb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000f9bf:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000f9c4:	e8 07 08 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000f9c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000f9cd:	8a 40 01             	mov    al,BYTE PTR [rax+0x1]
ffffffff8000f9d0:	24 c0                	and    al,0xc0
ffffffff8000f9d2:	3c 80                	cmp    al,0x80
ffffffff8000f9d4:	74 24                	je     ffffffff8000f9fa <unicode.utf8Decode3+0xea>
ffffffff8000f9d6:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000f9da:	e8 31 3a ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000f9df:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000f9e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000f9e7:	48 ba 00 00 00 00 05 	movabs rdx,0x500000000
ffffffff8000f9ee:	00 00 00 
ffffffff8000f9f1:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000f9f4:	48 83 c4 60          	add    rsp,0x60
ffffffff8000f9f8:	5d                   	pop    rbp
ffffffff8000f9f9:	c3                   	ret
ffffffff8000f9fa:	eb 00                	jmp    ffffffff8000f9fc <unicode.utf8Decode3+0xec>
    value <<= 6;
ffffffff8000f9fc:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000fa00:	c1 e1 10             	shl    ecx,0x10
ffffffff8000fa03:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fa07:	09 c8                	or     eax,ecx
ffffffff8000fa09:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
ffffffff8000fa0c:	b0 01                	mov    al,0x1
ffffffff8000fa0e:	a8 01                	test   al,0x1
ffffffff8000fa10:	75 02                	jne    ffffffff8000fa14 <unicode.utf8Decode3+0x104>
ffffffff8000fa12:	eb 02                	jmp    ffffffff8000fa16 <unicode.utf8Decode3+0x106>
ffffffff8000fa14:	eb 1c                	jmp    ffffffff8000fa32 <unicode.utf8Decode3+0x122>
ffffffff8000fa16:	48 c7 c7 69 b7 01 80 	mov    rdi,0xffffffff8001b769
ffffffff8000fa1d:	48 c7 c1 68 c3 01 80 	mov    rcx,0xffffffff8001c368
ffffffff8000fa24:	31 c0                	xor    eax,eax
ffffffff8000fa26:	89 c2                	mov    edx,eax
ffffffff8000fa28:	be 2a 00 00 00       	mov    esi,0x2a
ffffffff8000fa2d:	e8 7e 07 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000fa32:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fa36:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffffffff8000fa39:	89 c2                	mov    edx,eax
ffffffff8000fa3b:	c1 e2 06             	shl    edx,0x6
ffffffff8000fa3e:	66 89 55 f4          	mov    WORD PTR [rbp-0xc],dx
ffffffff8000fa42:	c1 e8 0a             	shr    eax,0xa
ffffffff8000fa45:	83 e0 1f             	and    eax,0x1f
ffffffff8000fa48:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    value |= bytes[1] & 0b00111111;
ffffffff8000fa4b:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000fa4f:	c1 e2 10             	shl    edx,0x10
ffffffff8000fa52:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fa56:	09 d0                	or     eax,edx
ffffffff8000fa58:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff8000fa5b:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000fa60:	48 39 c8             	cmp    rax,rcx
ffffffff8000fa63:	73 02                	jae    ffffffff8000fa67 <unicode.utf8Decode3+0x157>
ffffffff8000fa65:	eb 0e                	jmp    ffffffff8000fa75 <unicode.utf8Decode3+0x165>
ffffffff8000fa67:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fa6b:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000fa70:	e8 5b 07 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fa75:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fa79:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
ffffffff8000fa7c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fa80:	0f b6 70 01          	movzx  esi,BYTE PTR [rax+0x1]
ffffffff8000fa84:	83 e6 3f             	and    esi,0x3f
ffffffff8000fa87:	89 d0                	mov    eax,edx
ffffffff8000fa89:	09 f0                	or     eax,esi
ffffffff8000fa8b:	c1 ea 10             	shr    edx,0x10
ffffffff8000fa8e:	83 e2 1f             	and    edx,0x1f
ffffffff8000fa91:	88 55 f6             	mov    BYTE PTR [rbp-0xa],dl
ffffffff8000fa94:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
ffffffff8000fa98:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000fa9d:	48 39 c8             	cmp    rax,rcx
ffffffff8000faa0:	73 02                	jae    ffffffff8000faa4 <unicode.utf8Decode3+0x194>
ffffffff8000faa2:	eb 0e                	jmp    ffffffff8000fab2 <unicode.utf8Decode3+0x1a2>
ffffffff8000faa4:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000faa8:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000faad:	e8 1e 07 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fab2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fab6:	8a 40 02             	mov    al,BYTE PTR [rax+0x2]
ffffffff8000fab9:	24 c0                	and    al,0xc0
ffffffff8000fabb:	3c 80                	cmp    al,0x80
ffffffff8000fabd:	74 24                	je     ffffffff8000fae3 <unicode.utf8Decode3+0x1d3>
ffffffff8000fabf:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000fac3:	e8 48 39 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000fac8:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000facc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000fad0:	48 ba 00 00 00 00 05 	movabs rdx,0x500000000
ffffffff8000fad7:	00 00 00 
ffffffff8000fada:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000fadd:	48 83 c4 60          	add    rsp,0x60
ffffffff8000fae1:	5d                   	pop    rbp
ffffffff8000fae2:	c3                   	ret
ffffffff8000fae3:	eb 00                	jmp    ffffffff8000fae5 <unicode.utf8Decode3+0x1d5>
    value <<= 6;
ffffffff8000fae5:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000fae9:	c1 e1 10             	shl    ecx,0x10
ffffffff8000faec:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000faf0:	09 c8                	or     eax,ecx
ffffffff8000faf2:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
ffffffff8000faf5:	b0 01                	mov    al,0x1
ffffffff8000faf7:	a8 01                	test   al,0x1
ffffffff8000faf9:	75 02                	jne    ffffffff8000fafd <unicode.utf8Decode3+0x1ed>
ffffffff8000fafb:	eb 02                	jmp    ffffffff8000faff <unicode.utf8Decode3+0x1ef>
ffffffff8000fafd:	eb 1c                	jmp    ffffffff8000fb1b <unicode.utf8Decode3+0x20b>
ffffffff8000faff:	48 c7 c7 69 b7 01 80 	mov    rdi,0xffffffff8001b769
ffffffff8000fb06:	48 c7 c1 78 c3 01 80 	mov    rcx,0xffffffff8001c378
ffffffff8000fb0d:	31 c0                	xor    eax,eax
ffffffff8000fb0f:	89 c2                	mov    edx,eax
ffffffff8000fb11:	be 2a 00 00 00       	mov    esi,0x2a
ffffffff8000fb16:	e8 95 06 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000fb1b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fb1f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffffffff8000fb22:	89 c2                	mov    edx,eax
ffffffff8000fb24:	c1 e2 06             	shl    edx,0x6
ffffffff8000fb27:	66 89 55 f4          	mov    WORD PTR [rbp-0xc],dx
ffffffff8000fb2b:	c1 e8 0a             	shr    eax,0xa
ffffffff8000fb2e:	83 e0 1f             	and    eax,0x1f
ffffffff8000fb31:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    value |= bytes[2] & 0b00111111;
ffffffff8000fb34:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000fb38:	c1 e2 10             	shl    edx,0x10
ffffffff8000fb3b:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fb3f:	09 d0                	or     eax,edx
ffffffff8000fb41:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
ffffffff8000fb44:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000fb49:	48 39 c8             	cmp    rax,rcx
ffffffff8000fb4c:	73 02                	jae    ffffffff8000fb50 <unicode.utf8Decode3+0x240>
ffffffff8000fb4e:	eb 0e                	jmp    ffffffff8000fb5e <unicode.utf8Decode3+0x24e>
ffffffff8000fb50:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fb54:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000fb59:	e8 72 06 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fb5e:	8b 4d a8             	mov    ecx,DWORD PTR [rbp-0x58]
ffffffff8000fb61:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fb65:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
ffffffff8000fb69:	83 e2 3f             	and    edx,0x3f
ffffffff8000fb6c:	89 c8                	mov    eax,ecx
ffffffff8000fb6e:	09 d0                	or     eax,edx
ffffffff8000fb70:	c1 e9 10             	shr    ecx,0x10
ffffffff8000fb73:	83 e1 1f             	and    ecx,0x1f
ffffffff8000fb76:	88 4d f6             	mov    BYTE PTR [rbp-0xa],cl
ffffffff8000fb79:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    if (value < 0x800) return error.Utf8OverlongEncoding;
ffffffff8000fb7d:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000fb81:	c1 e1 10             	shl    ecx,0x10
ffffffff8000fb84:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fb88:	09 c8                	or     eax,ecx
ffffffff8000fb8a:	2d ff 07 00 00       	sub    eax,0x7ff
ffffffff8000fb8f:	77 26                	ja     ffffffff8000fbb7 <unicode.utf8Decode3+0x2a7>
ffffffff8000fb91:	eb 00                	jmp    ffffffff8000fb93 <unicode.utf8Decode3+0x283>
ffffffff8000fb93:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000fb97:	e8 74 38 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000fb9c:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000fba0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000fba4:	48 ba 00 00 00 00 06 	movabs rdx,0x600000000
ffffffff8000fbab:	00 00 00 
ffffffff8000fbae:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000fbb1:	48 83 c4 60          	add    rsp,0x60
ffffffff8000fbb5:	5d                   	pop    rbp
ffffffff8000fbb6:	c3                   	ret
ffffffff8000fbb7:	eb 00                	jmp    ffffffff8000fbb9 <unicode.utf8Decode3+0x2a9>
    if (0xd800 <= value and value <= 0xdfff) return error.Utf8EncodesSurrogateHalf;
ffffffff8000fbb9:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000fbbd:	c1 e1 10             	shl    ecx,0x10
ffffffff8000fbc0:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fbc4:	09 c8                	or     eax,ecx
ffffffff8000fbc6:	2d 00 d8 00 00       	sub    eax,0xd800
ffffffff8000fbcb:	72 1c                	jb     ffffffff8000fbe9 <unicode.utf8Decode3+0x2d9>
ffffffff8000fbcd:	eb 00                	jmp    ffffffff8000fbcf <unicode.utf8Decode3+0x2bf>
ffffffff8000fbcf:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000fbd3:	c1 e1 10             	shl    ecx,0x10
ffffffff8000fbd6:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fbda:	09 c8                	or     eax,ecx
ffffffff8000fbdc:	2d 00 e0 00 00       	sub    eax,0xe000
ffffffff8000fbe1:	0f 92 c0             	setb   al
ffffffff8000fbe4:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
ffffffff8000fbe7:	eb 07                	jmp    ffffffff8000fbf0 <unicode.utf8Decode3+0x2e0>
ffffffff8000fbe9:	31 c0                	xor    eax,eax
ffffffff8000fbeb:	88 45 a7             	mov    BYTE PTR [rbp-0x59],al
ffffffff8000fbee:	eb 00                	jmp    ffffffff8000fbf0 <unicode.utf8Decode3+0x2e0>
ffffffff8000fbf0:	8a 45 a7             	mov    al,BYTE PTR [rbp-0x59]
ffffffff8000fbf3:	a8 01                	test   al,0x1
ffffffff8000fbf5:	75 02                	jne    ffffffff8000fbf9 <unicode.utf8Decode3+0x2e9>
ffffffff8000fbf7:	eb 24                	jmp    ffffffff8000fc1d <unicode.utf8Decode3+0x30d>
ffffffff8000fbf9:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000fbfd:	e8 0e 38 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000fc02:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000fc06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000fc0a:	48 ba 00 00 00 00 07 	movabs rdx,0x700000000
ffffffff8000fc11:	00 00 00 
ffffffff8000fc14:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000fc17:	48 83 c4 60          	add    rsp,0x60
ffffffff8000fc1b:	5d                   	pop    rbp
ffffffff8000fc1c:	c3                   	ret
ffffffff8000fc1d:	eb 00                	jmp    ffffffff8000fc1f <unicode.utf8Decode3+0x30f>
ffffffff8000fc1f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000fc23:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    return value;
ffffffff8000fc27:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000fc2b:	0f b7 75 f4          	movzx  esi,WORD PTR [rbp-0xc]
ffffffff8000fc2f:	66 c7 45 fc 00 00    	mov    WORD PTR [rbp-0x4],0x0
ffffffff8000fc35:	66 89 75 f8          	mov    WORD PTR [rbp-0x8],si
ffffffff8000fc39:	83 e2 1f             	and    edx,0x1f
ffffffff8000fc3c:	88 55 fa             	mov    BYTE PTR [rbp-0x6],dl
ffffffff8000fc3f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000fc43:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000fc46:	48 83 c4 60          	add    rsp,0x60
ffffffff8000fc4a:	5d                   	pop    rbp
ffffffff8000fc4b:	c3                   	ret
ffffffff8000fc4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff8000fc50 <unicode.utf8Decode4>:
pub fn utf8Decode4(bytes: []const u8) Utf8Decode4Error!u21 {
ffffffff8000fc50:	55                   	push   rbp
ffffffff8000fc51:	48 89 e5             	mov    rbp,rsp
ffffffff8000fc54:	48 83 ec 60          	sub    rsp,0x60
ffffffff8000fc58:	48 89 c8             	mov    rax,rcx
ffffffff8000fc5b:	48 89 75 b8          	mov    QWORD PTR [rbp-0x48],rsi
ffffffff8000fc5f:	48 89 7d c0          	mov    QWORD PTR [rbp-0x40],rdi
ffffffff8000fc63:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff8000fc67:	48 89 c1             	mov    rcx,rax
ffffffff8000fc6a:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff8000fc6e:	48 89 d6             	mov    rsi,rdx
ffffffff8000fc71:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff8000fc75:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000fc79:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
    assert(bytes.len == 4);
ffffffff8000fc7d:	48 83 f9 04          	cmp    rcx,0x4
ffffffff8000fc81:	0f 94 c0             	sete   al
ffffffff8000fc84:	0f b6 f8             	movzx  edi,al
ffffffff8000fc87:	e8 a4 5f ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000fc8c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    assert(bytes[0] & 0b11111000 == 0b11110000);
ffffffff8000fc90:	31 c0                	xor    eax,eax
ffffffff8000fc92:	48 39 c8             	cmp    rax,rcx
ffffffff8000fc95:	73 02                	jae    ffffffff8000fc99 <unicode.utf8Decode4+0x49>
ffffffff8000fc97:	eb 0f                	jmp    ffffffff8000fca8 <unicode.utf8Decode4+0x58>
ffffffff8000fc99:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fc9d:	31 c0                	xor    eax,eax
ffffffff8000fc9f:	31 c0                	xor    eax,eax
ffffffff8000fca1:	89 c7                	mov    edi,eax
ffffffff8000fca3:	e8 28 05 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fca8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fcac:	8a 00                	mov    al,BYTE PTR [rax]
ffffffff8000fcae:	24 f8                	and    al,0xf8
ffffffff8000fcb0:	3c f0                	cmp    al,0xf0
ffffffff8000fcb2:	0f 94 c0             	sete   al
ffffffff8000fcb5:	0f b6 f8             	movzx  edi,al
ffffffff8000fcb8:	e8 73 5f ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff8000fcbd:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    var value: u21 = bytes[0] & 0b00000111;
ffffffff8000fcc1:	31 c0                	xor    eax,eax
ffffffff8000fcc3:	48 39 c8             	cmp    rax,rcx
ffffffff8000fcc6:	73 02                	jae    ffffffff8000fcca <unicode.utf8Decode4+0x7a>
ffffffff8000fcc8:	eb 0f                	jmp    ffffffff8000fcd9 <unicode.utf8Decode4+0x89>
ffffffff8000fcca:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fcce:	31 c0                	xor    eax,eax
ffffffff8000fcd0:	31 c0                	xor    eax,eax
ffffffff8000fcd2:	89 c7                	mov    edi,eax
ffffffff8000fcd4:	e8 f7 04 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fcd9:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fcdd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fce1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8000fce4:	83 e0 07             	and    eax,0x7
ffffffff8000fce7:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
ffffffff8000fceb:	c6 45 f6 00          	mov    BYTE PTR [rbp-0xa],0x0
    if (bytes[1] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
ffffffff8000fcef:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000fcf4:	48 39 c8             	cmp    rax,rcx
ffffffff8000fcf7:	73 02                	jae    ffffffff8000fcfb <unicode.utf8Decode4+0xab>
ffffffff8000fcf9:	eb 0e                	jmp    ffffffff8000fd09 <unicode.utf8Decode4+0xb9>
ffffffff8000fcfb:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fcff:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000fd04:	e8 c7 04 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fd09:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fd0d:	8a 40 01             	mov    al,BYTE PTR [rax+0x1]
ffffffff8000fd10:	24 c0                	and    al,0xc0
ffffffff8000fd12:	3c 80                	cmp    al,0x80
ffffffff8000fd14:	74 24                	je     ffffffff8000fd3a <unicode.utf8Decode4+0xea>
ffffffff8000fd16:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000fd1a:	e8 f1 36 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000fd1f:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000fd23:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000fd27:	48 ba 00 00 00 00 05 	movabs rdx,0x500000000
ffffffff8000fd2e:	00 00 00 
ffffffff8000fd31:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000fd34:	48 83 c4 60          	add    rsp,0x60
ffffffff8000fd38:	5d                   	pop    rbp
ffffffff8000fd39:	c3                   	ret
ffffffff8000fd3a:	eb 00                	jmp    ffffffff8000fd3c <unicode.utf8Decode4+0xec>
    value <<= 6;
ffffffff8000fd3c:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000fd40:	c1 e1 10             	shl    ecx,0x10
ffffffff8000fd43:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fd47:	09 c8                	or     eax,ecx
ffffffff8000fd49:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
ffffffff8000fd4c:	b0 01                	mov    al,0x1
ffffffff8000fd4e:	a8 01                	test   al,0x1
ffffffff8000fd50:	75 02                	jne    ffffffff8000fd54 <unicode.utf8Decode4+0x104>
ffffffff8000fd52:	eb 02                	jmp    ffffffff8000fd56 <unicode.utf8Decode4+0x106>
ffffffff8000fd54:	eb 1c                	jmp    ffffffff8000fd72 <unicode.utf8Decode4+0x122>
ffffffff8000fd56:	48 c7 c7 69 b7 01 80 	mov    rdi,0xffffffff8001b769
ffffffff8000fd5d:	48 c7 c1 88 c3 01 80 	mov    rcx,0xffffffff8001c388
ffffffff8000fd64:	31 c0                	xor    eax,eax
ffffffff8000fd66:	89 c2                	mov    edx,eax
ffffffff8000fd68:	be 2a 00 00 00       	mov    esi,0x2a
ffffffff8000fd6d:	e8 3e 04 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000fd72:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fd76:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
ffffffff8000fd79:	89 c2                	mov    edx,eax
ffffffff8000fd7b:	c1 e2 06             	shl    edx,0x6
ffffffff8000fd7e:	66 89 55 f4          	mov    WORD PTR [rbp-0xc],dx
ffffffff8000fd82:	c1 e8 0a             	shr    eax,0xa
ffffffff8000fd85:	83 e0 1f             	and    eax,0x1f
ffffffff8000fd88:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    value |= bytes[1] & 0b00111111;
ffffffff8000fd8b:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000fd8f:	c1 e2 10             	shl    edx,0x10
ffffffff8000fd92:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fd96:	09 d0                	or     eax,edx
ffffffff8000fd98:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff8000fd9b:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000fda0:	48 39 c8             	cmp    rax,rcx
ffffffff8000fda3:	73 02                	jae    ffffffff8000fda7 <unicode.utf8Decode4+0x157>
ffffffff8000fda5:	eb 0e                	jmp    ffffffff8000fdb5 <unicode.utf8Decode4+0x165>
ffffffff8000fda7:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fdab:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000fdb0:	e8 1b 04 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fdb5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fdb9:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
ffffffff8000fdbc:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fdc0:	0f b6 70 01          	movzx  esi,BYTE PTR [rax+0x1]
ffffffff8000fdc4:	83 e6 3f             	and    esi,0x3f
ffffffff8000fdc7:	89 d0                	mov    eax,edx
ffffffff8000fdc9:	09 f0                	or     eax,esi
ffffffff8000fdcb:	c1 ea 10             	shr    edx,0x10
ffffffff8000fdce:	83 e2 1f             	and    edx,0x1f
ffffffff8000fdd1:	88 55 f6             	mov    BYTE PTR [rbp-0xa],dl
ffffffff8000fdd4:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    if (bytes[2] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
ffffffff8000fdd8:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000fddd:	48 39 c8             	cmp    rax,rcx
ffffffff8000fde0:	73 02                	jae    ffffffff8000fde4 <unicode.utf8Decode4+0x194>
ffffffff8000fde2:	eb 0e                	jmp    ffffffff8000fdf2 <unicode.utf8Decode4+0x1a2>
ffffffff8000fde4:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fde8:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000fded:	e8 de 03 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fdf2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fdf6:	8a 40 02             	mov    al,BYTE PTR [rax+0x2]
ffffffff8000fdf9:	24 c0                	and    al,0xc0
ffffffff8000fdfb:	3c 80                	cmp    al,0x80
ffffffff8000fdfd:	74 24                	je     ffffffff8000fe23 <unicode.utf8Decode4+0x1d3>
ffffffff8000fdff:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000fe03:	e8 08 36 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000fe08:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000fe0c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000fe10:	48 ba 00 00 00 00 05 	movabs rdx,0x500000000
ffffffff8000fe17:	00 00 00 
ffffffff8000fe1a:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000fe1d:	48 83 c4 60          	add    rsp,0x60
ffffffff8000fe21:	5d                   	pop    rbp
ffffffff8000fe22:	c3                   	ret
ffffffff8000fe23:	eb 00                	jmp    ffffffff8000fe25 <unicode.utf8Decode4+0x1d5>
    value <<= 6;
ffffffff8000fe25:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000fe29:	c1 e1 10             	shl    ecx,0x10
ffffffff8000fe2c:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fe30:	09 c8                	or     eax,ecx
ffffffff8000fe32:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
ffffffff8000fe35:	b0 01                	mov    al,0x1
ffffffff8000fe37:	a8 01                	test   al,0x1
ffffffff8000fe39:	75 02                	jne    ffffffff8000fe3d <unicode.utf8Decode4+0x1ed>
ffffffff8000fe3b:	eb 02                	jmp    ffffffff8000fe3f <unicode.utf8Decode4+0x1ef>
ffffffff8000fe3d:	eb 1c                	jmp    ffffffff8000fe5b <unicode.utf8Decode4+0x20b>
ffffffff8000fe3f:	48 c7 c7 69 b7 01 80 	mov    rdi,0xffffffff8001b769
ffffffff8000fe46:	48 c7 c1 98 c3 01 80 	mov    rcx,0xffffffff8001c398
ffffffff8000fe4d:	31 c0                	xor    eax,eax
ffffffff8000fe4f:	89 c2                	mov    edx,eax
ffffffff8000fe51:	be 2a 00 00 00       	mov    esi,0x2a
ffffffff8000fe56:	e8 55 03 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000fe5b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fe5f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
ffffffff8000fe62:	89 c2                	mov    edx,eax
ffffffff8000fe64:	c1 e2 06             	shl    edx,0x6
ffffffff8000fe67:	66 89 55 f4          	mov    WORD PTR [rbp-0xc],dx
ffffffff8000fe6b:	c1 e8 0a             	shr    eax,0xa
ffffffff8000fe6e:	83 e0 1f             	and    eax,0x1f
ffffffff8000fe71:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    value |= bytes[2] & 0b00111111;
ffffffff8000fe74:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000fe78:	c1 e2 10             	shl    edx,0x10
ffffffff8000fe7b:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000fe7f:	09 d0                	or     eax,edx
ffffffff8000fe81:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
ffffffff8000fe84:	b8 02 00 00 00       	mov    eax,0x2
ffffffff8000fe89:	48 39 c8             	cmp    rax,rcx
ffffffff8000fe8c:	73 02                	jae    ffffffff8000fe90 <unicode.utf8Decode4+0x240>
ffffffff8000fe8e:	eb 0e                	jmp    ffffffff8000fe9e <unicode.utf8Decode4+0x24e>
ffffffff8000fe90:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fe94:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000fe99:	e8 32 03 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fe9e:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000fea2:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
ffffffff8000fea5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fea9:	0f b6 70 02          	movzx  esi,BYTE PTR [rax+0x2]
ffffffff8000fead:	83 e6 3f             	and    esi,0x3f
ffffffff8000feb0:	89 d0                	mov    eax,edx
ffffffff8000feb2:	09 f0                	or     eax,esi
ffffffff8000feb4:	c1 ea 10             	shr    edx,0x10
ffffffff8000feb7:	83 e2 1f             	and    edx,0x1f
ffffffff8000feba:	88 55 f6             	mov    BYTE PTR [rbp-0xa],dl
ffffffff8000febd:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    if (bytes[3] & 0b11000000 != 0b10000000) return error.Utf8ExpectedContinuation;
ffffffff8000fec1:	b8 03 00 00 00       	mov    eax,0x3
ffffffff8000fec6:	48 39 c8             	cmp    rax,rcx
ffffffff8000fec9:	73 02                	jae    ffffffff8000fecd <unicode.utf8Decode4+0x27d>
ffffffff8000fecb:	eb 0e                	jmp    ffffffff8000fedb <unicode.utf8Decode4+0x28b>
ffffffff8000fecd:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000fed1:	bf 03 00 00 00       	mov    edi,0x3
ffffffff8000fed6:	e8 f5 02 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000fedb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000fedf:	8a 40 03             	mov    al,BYTE PTR [rax+0x3]
ffffffff8000fee2:	24 c0                	and    al,0xc0
ffffffff8000fee4:	3c 80                	cmp    al,0x80
ffffffff8000fee6:	74 24                	je     ffffffff8000ff0c <unicode.utf8Decode4+0x2bc>
ffffffff8000fee8:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000feec:	e8 1f 35 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000fef1:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000fef5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000fef9:	48 ba 00 00 00 00 05 	movabs rdx,0x500000000
ffffffff8000ff00:	00 00 00 
ffffffff8000ff03:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000ff06:	48 83 c4 60          	add    rsp,0x60
ffffffff8000ff0a:	5d                   	pop    rbp
ffffffff8000ff0b:	c3                   	ret
ffffffff8000ff0c:	eb 00                	jmp    ffffffff8000ff0e <unicode.utf8Decode4+0x2be>
    value <<= 6;
ffffffff8000ff0e:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000ff12:	c1 e1 10             	shl    ecx,0x10
ffffffff8000ff15:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000ff19:	09 c8                	or     eax,ecx
ffffffff8000ff1b:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
ffffffff8000ff1e:	b0 01                	mov    al,0x1
ffffffff8000ff20:	a8 01                	test   al,0x1
ffffffff8000ff22:	75 02                	jne    ffffffff8000ff26 <unicode.utf8Decode4+0x2d6>
ffffffff8000ff24:	eb 02                	jmp    ffffffff8000ff28 <unicode.utf8Decode4+0x2d8>
ffffffff8000ff26:	eb 1c                	jmp    ffffffff8000ff44 <unicode.utf8Decode4+0x2f4>
ffffffff8000ff28:	48 c7 c7 69 b7 01 80 	mov    rdi,0xffffffff8001b769
ffffffff8000ff2f:	48 c7 c1 a8 c3 01 80 	mov    rcx,0xffffffff8001c3a8
ffffffff8000ff36:	31 c0                	xor    eax,eax
ffffffff8000ff38:	89 c2                	mov    edx,eax
ffffffff8000ff3a:	be 2a 00 00 00       	mov    esi,0x2a
ffffffff8000ff3f:	e8 6c 02 ff ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8000ff44:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8000ff48:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffffffff8000ff4b:	89 c2                	mov    edx,eax
ffffffff8000ff4d:	c1 e2 06             	shl    edx,0x6
ffffffff8000ff50:	66 89 55 f4          	mov    WORD PTR [rbp-0xc],dx
ffffffff8000ff54:	c1 e8 0a             	shr    eax,0xa
ffffffff8000ff57:	83 e0 1f             	and    eax,0x1f
ffffffff8000ff5a:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
    value |= bytes[3] & 0b00111111;
ffffffff8000ff5d:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8000ff61:	c1 e2 10             	shl    edx,0x10
ffffffff8000ff64:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000ff68:	09 d0                	or     eax,edx
ffffffff8000ff6a:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
ffffffff8000ff6d:	b8 03 00 00 00       	mov    eax,0x3
ffffffff8000ff72:	48 39 c8             	cmp    rax,rcx
ffffffff8000ff75:	73 02                	jae    ffffffff8000ff79 <unicode.utf8Decode4+0x329>
ffffffff8000ff77:	eb 0e                	jmp    ffffffff8000ff87 <unicode.utf8Decode4+0x337>
ffffffff8000ff79:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
ffffffff8000ff7d:	bf 03 00 00 00       	mov    edi,0x3
ffffffff8000ff82:	e8 49 02 ff ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8000ff87:	8b 4d a0             	mov    ecx,DWORD PTR [rbp-0x60]
ffffffff8000ff8a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000ff8e:	0f b6 50 03          	movzx  edx,BYTE PTR [rax+0x3]
ffffffff8000ff92:	83 e2 3f             	and    edx,0x3f
ffffffff8000ff95:	89 c8                	mov    eax,ecx
ffffffff8000ff97:	09 d0                	or     eax,edx
ffffffff8000ff99:	c1 e9 10             	shr    ecx,0x10
ffffffff8000ff9c:	83 e1 1f             	and    ecx,0x1f
ffffffff8000ff9f:	88 4d f6             	mov    BYTE PTR [rbp-0xa],cl
ffffffff8000ffa2:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
    if (value < 0x10000) return error.Utf8OverlongEncoding;
ffffffff8000ffa6:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000ffaa:	c1 e1 10             	shl    ecx,0x10
ffffffff8000ffad:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000ffb1:	09 c8                	or     eax,ecx
ffffffff8000ffb3:	2d ff ff 00 00       	sub    eax,0xffff
ffffffff8000ffb8:	77 26                	ja     ffffffff8000ffe0 <unicode.utf8Decode4+0x390>
ffffffff8000ffba:	eb 00                	jmp    ffffffff8000ffbc <unicode.utf8Decode4+0x36c>
ffffffff8000ffbc:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000ffc0:	e8 4b 34 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8000ffc5:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff8000ffc9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000ffcd:	48 ba 00 00 00 00 06 	movabs rdx,0x600000000
ffffffff8000ffd4:	00 00 00 
ffffffff8000ffd7:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff8000ffda:	48 83 c4 60          	add    rsp,0x60
ffffffff8000ffde:	5d                   	pop    rbp
ffffffff8000ffdf:	c3                   	ret
ffffffff8000ffe0:	eb 00                	jmp    ffffffff8000ffe2 <unicode.utf8Decode4+0x392>
    if (value > 0x10FFFF) return error.Utf8CodepointTooLarge;
ffffffff8000ffe2:	0f b6 4d f6          	movzx  ecx,BYTE PTR [rbp-0xa]
ffffffff8000ffe6:	c1 e1 10             	shl    ecx,0x10
ffffffff8000ffe9:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff8000ffed:	09 c8                	or     eax,ecx
ffffffff8000ffef:	2d 00 00 11 00       	sub    eax,0x110000
ffffffff8000fff4:	72 26                	jb     ffffffff8001001c <unicode.utf8Decode4+0x3cc>
ffffffff8000fff6:	eb 00                	jmp    ffffffff8000fff8 <unicode.utf8Decode4+0x3a8>
ffffffff8000fff8:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
ffffffff8000fffc:	e8 0f 34 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010001:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
ffffffff80010005:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80010009:	48 ba 00 00 00 00 08 	movabs rdx,0x800000000
ffffffff80010010:	00 00 00 
ffffffff80010013:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff80010016:	48 83 c4 60          	add    rsp,0x60
ffffffff8001001a:	5d                   	pop    rbp
ffffffff8001001b:	c3                   	ret
ffffffff8001001c:	eb 00                	jmp    ffffffff8001001e <unicode.utf8Decode4+0x3ce>
ffffffff8001001e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80010022:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    return value;
ffffffff80010026:	0f b6 55 f6          	movzx  edx,BYTE PTR [rbp-0xa]
ffffffff8001002a:	0f b7 75 f4          	movzx  esi,WORD PTR [rbp-0xc]
ffffffff8001002e:	66 c7 45 fc 00 00    	mov    WORD PTR [rbp-0x4],0x0
ffffffff80010034:	66 89 75 f8          	mov    WORD PTR [rbp-0x8],si
ffffffff80010038:	83 e2 1f             	and    edx,0x1f
ffffffff8001003b:	88 55 fa             	mov    BYTE PTR [rbp-0x6],dl
ffffffff8001003e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80010042:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff80010045:	48 83 c4 60          	add    rsp,0x60
ffffffff80010049:	5d                   	pop    rbp
ffffffff8001004a:	c3                   	ret
ffffffff8001004b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80010050 <mem.set__anon_3114>:
pub fn set(comptime T: type, dest: []T, value: T) void {
ffffffff80010050:	55                   	push   rbp
ffffffff80010051:	48 89 e5             	mov    rbp,rsp
ffffffff80010054:	48 83 ec 48          	sub    rsp,0x48
ffffffff80010058:	88 d0                	mov    al,dl
ffffffff8001005a:	88 45 c7             	mov    BYTE PTR [rbp-0x39],al
ffffffff8001005d:	48 89 f1             	mov    rcx,rsi
ffffffff80010060:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80010064:	48 89 f9             	mov    rcx,rdi
ffffffff80010067:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffffffff8001006b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff8001006f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80010073:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff80010076:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8001007d:	00 
ffffffff8001007e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    for (dest) |*d|
ffffffff80010082:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80010086:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8001008a:	48 39 c8             	cmp    rax,rcx
ffffffff8001008d:	73 1a                	jae    ffffffff800100a9 <mem.set__anon_3114+0x59>
ffffffff8001008f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80010093:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80010097:	8a 55 c7             	mov    dl,BYTE PTR [rbp-0x39]
ffffffff8001009a:	48 89 c6             	mov    rsi,rax
ffffffff8001009d:	48 01 ce             	add    rsi,rcx
ffffffff800100a0:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
        d.* = value;
ffffffff800100a4:	88 14 08             	mov    BYTE PTR [rax+rcx*1],dl
ffffffff800100a7:	eb 02                	jmp    ffffffff800100ab <mem.set__anon_3114+0x5b>
ffffffff800100a9:	eb 0e                	jmp    ffffffff800100b9 <mem.set__anon_3114+0x69>
ffffffff800100ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800100af:	48 83 c0 01          	add    rax,0x1
ffffffff800100b3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800100b7:	eb c5                	jmp    ffffffff8001007e <mem.set__anon_3114+0x2e>
ffffffff800100b9:	48 83 c4 48          	add    rsp,0x48
ffffffff800100bd:	5d                   	pop    rbp
ffffffff800100be:	c3                   	ret
ffffffff800100bf:	90                   	nop

ffffffff800100c0 <math.min__anon_3115>:
pub fn min(x: anytype, y: anytype) Min(@TypeOf(x), @TypeOf(y)) {
ffffffff800100c0:	55                   	push   rbp
ffffffff800100c1:	48 89 e5             	mov    rbp,rsp
ffffffff800100c4:	48 83 ec 20          	sub    rsp,0x20
ffffffff800100c8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800100cc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800100d0:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff800100d4:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
    if (x < y) {
ffffffff800100d8:	48 39 f7             	cmp    rdi,rsi
ffffffff800100db:	73 0a                	jae    ffffffff800100e7 <math.min__anon_3115+0x27>
ffffffff800100dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
            .Int => return @intCast(Result, x),
ffffffff800100e1:	48 83 c4 20          	add    rsp,0x20
ffffffff800100e5:	5d                   	pop    rbp
ffffffff800100e6:	c3                   	ret
ffffffff800100e7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
            .Int => return @intCast(Result, y),
ffffffff800100eb:	48 83 c4 20          	add    rsp,0x20
ffffffff800100ef:	5d                   	pop    rbp
ffffffff800100f0:	c3                   	ret
ffffffff800100f1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800100f8:	00 00 00 
ffffffff800100fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80010100 <fmt.format__anon_3120>:
) !void {
ffffffff80010100:	55                   	push   rbp
ffffffff80010101:	48 89 e5             	mov    rbp,rsp
ffffffff80010104:	48 83 ec 40          	sub    rsp,0x40
ffffffff80010108:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff8001010c:	48 89 f1             	mov    rcx,rsi
ffffffff8001010f:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80010113:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80010117:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff8001011e:	00 
            std.options.fmt_max_depth,
ffffffff8001011f:	48 c7 c6 be b5 01 80 	mov    rsi,0xffffffff8001b5be
ffffffff80010126:	48 c7 c2 08 a8 01 80 	mov    rdx,0xffffffff8001a808
ffffffff8001012d:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80010133:	e8 78 00 00 00       	call   ffffffff800101b0 <fmt.formatType__anon_3133>
ffffffff80010138:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff8001013c:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff8001013f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80010143:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80010146:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80010149:	b0 01                	mov    al,0x1
ffffffff8001014b:	a8 01                	test   al,0x1
ffffffff8001014d:	75 02                	jne    ffffffff80010151 <fmt.format__anon_3120+0x51>
ffffffff8001014f:	eb 02                	jmp    ffffffff80010153 <fmt.format__anon_3120+0x53>
ffffffff80010151:	eb 0f                	jmp    ffffffff80010162 <fmt.format__anon_3120+0x62>
ffffffff80010153:	bf 03 00 00 00       	mov    edi,0x3
ffffffff80010158:	be 04 00 00 00       	mov    esi,0x4
ffffffff8001015d:	e8 ae 01 ff ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80010162:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80010166:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff8001016a:	48 c7 c2 cb b5 01 80 	mov    rdx,0xffffffff8001b5cb
ffffffff80010171:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80010176:	e8 d5 01 ff ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8001017b:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff8001017f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80010183:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80010187:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
ffffffff8001018e:	00 
        try formatType(
ffffffff8001018f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff80010192:	48 c7 c2 98 a8 01 80 	mov    rdx,0xffffffff8001a898
ffffffff80010199:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff8001019f:	e8 6c 00 00 00       	call   ffffffff80010210 <fmt.formatType__anon_3140>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800101a4:	31 c0                	xor    eax,eax
ffffffff800101a6:	48 83 c4 40          	add    rsp,0x40
ffffffff800101aa:	5d                   	pop    rbp
ffffffff800101ab:	c3                   	ret
ffffffff800101ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800101b0 <fmt.formatType__anon_3133>:
) @TypeOf(writer).Error!void {
ffffffff800101b0:	55                   	push   rbp
ffffffff800101b1:	48 89 e5             	mov    rbp,rsp
ffffffff800101b4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800101b8:	4c 89 c0             	mov    rax,r8
ffffffff800101bb:	49 89 c8             	mov    r8,rcx
ffffffff800101be:	48 89 d1             	mov    rcx,rdx
ffffffff800101c1:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800101c5:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800101c9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff800101cd:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
ffffffff800101d4:	00 
ffffffff800101d5:	48 c7 45 e8 d9 90 01 	mov    QWORD PTR [rbp-0x18],0xffffffff800190d9
ffffffff800101dc:	80 
ffffffff800101dd:	ba 09 00 00 00       	mov    edx,0x9
                                return formatBuf(value, options, writer);
ffffffff800101e2:	e8 79 72 ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800101e7:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800101eb:	b0 01                	mov    al,0x1
ffffffff800101ed:	a8 01                	test   al,0x1
ffffffff800101ef:	75 02                	jne    ffffffff800101f3 <fmt.formatType__anon_3133+0x43>
ffffffff800101f1:	eb 0a                	jmp    ffffffff800101fd <fmt.formatType__anon_3133+0x4d>
ffffffff800101f3:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800101f7:	48 83 c4 30          	add    rsp,0x30
ffffffff800101fb:	5d                   	pop    rbp
ffffffff800101fc:	c3                   	ret
ffffffff800101fd:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80010201:	e8 0a 32 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010206:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001020a:	48 83 c4 30          	add    rsp,0x30
ffffffff8001020e:	5d                   	pop    rbp
ffffffff8001020f:	c3                   	ret

ffffffff80010210 <fmt.formatType__anon_3140>:
) @TypeOf(writer).Error!void {
ffffffff80010210:	55                   	push   rbp
ffffffff80010211:	48 89 e5             	mov    rbp,rsp
ffffffff80010214:	48 83 ec 30          	sub    rsp,0x30
ffffffff80010218:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001021c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80010220:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80010224:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
ffffffff8001022b:	00 
ffffffff8001022c:	48 c7 45 e8 39 a0 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001a039
ffffffff80010233:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80010234:	e8 27 2b 00 00       	call   ffffffff80012d60 <fmt.formatValue__anon_3382>
ffffffff80010239:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001023d:	b0 01                	mov    al,0x1
ffffffff8001023f:	a8 01                	test   al,0x1
ffffffff80010241:	75 02                	jne    ffffffff80010245 <fmt.formatType__anon_3140+0x35>
ffffffff80010243:	eb 0a                	jmp    ffffffff8001024f <fmt.formatType__anon_3140+0x3f>
ffffffff80010245:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010249:	48 83 c4 30          	add    rsp,0x30
ffffffff8001024d:	5d                   	pop    rbp
ffffffff8001024e:	c3                   	ret
ffffffff8001024f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80010253:	e8 b8 31 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010258:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001025c:	48 83 c4 30          	add    rsp,0x30
ffffffff80010260:	5d                   	pop    rbp
ffffffff80010261:	c3                   	ret
ffffffff80010262:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80010269:	00 00 00 
ffffffff8001026c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80010270 <fmt.formatType__anon_3152>:
) @TypeOf(writer).Error!void {
ffffffff80010270:	55                   	push   rbp
ffffffff80010271:	48 89 e5             	mov    rbp,rsp
ffffffff80010274:	48 83 ec 30          	sub    rsp,0x30
ffffffff80010278:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001027c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80010280:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80010284:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8001028b:	00 
ffffffff8001028c:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80010293:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80010294:	e8 57 2b 00 00       	call   ffffffff80012df0 <fmt.formatValue__anon_3386>
ffffffff80010299:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001029d:	b0 01                	mov    al,0x1
ffffffff8001029f:	a8 01                	test   al,0x1
ffffffff800102a1:	75 02                	jne    ffffffff800102a5 <fmt.formatType__anon_3152+0x35>
ffffffff800102a3:	eb 0a                	jmp    ffffffff800102af <fmt.formatType__anon_3152+0x3f>
ffffffff800102a5:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800102a9:	48 83 c4 30          	add    rsp,0x30
ffffffff800102ad:	5d                   	pop    rbp
ffffffff800102ae:	c3                   	ret
ffffffff800102af:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800102b3:	e8 58 31 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800102b8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800102bc:	48 83 c4 30          	add    rsp,0x30
ffffffff800102c0:	5d                   	pop    rbp
ffffffff800102c1:	c3                   	ret
ffffffff800102c2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800102c9:	00 00 00 
ffffffff800102cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800102d0 <fmt.formatType__anon_3153>:
) @TypeOf(writer).Error!void {
ffffffff800102d0:	55                   	push   rbp
ffffffff800102d1:	48 89 e5             	mov    rbp,rsp
ffffffff800102d4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800102d8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff800102dc:	48 89 f0             	mov    rax,rsi
ffffffff800102df:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
ffffffff800102e3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff800102e7:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800102eb:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
        defaultSpec(@TypeOf(value))
ffffffff800102ef:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800102f6:	00 
ffffffff800102f7:	48 c7 45 e0 5d b6 01 	mov    QWORD PTR [rbp-0x20],0xffffffff8001b65d
ffffffff800102fe:	80 
                else => return format(writer, "{s}@{x}", .{ @typeName(ptr_info.child), @ptrToInt(value) }),
ffffffff800102ff:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80010303:	48 8d 55 f8          	lea    rdx,[rbp-0x8]
ffffffff80010307:	e8 74 2b 00 00       	call   ffffffff80012e80 <fmt.format__anon_3393>
ffffffff8001030c:	66 89 45 f6          	mov    WORD PTR [rbp-0xa],ax
ffffffff80010310:	b0 01                	mov    al,0x1
ffffffff80010312:	a8 01                	test   al,0x1
ffffffff80010314:	75 02                	jne    ffffffff80010318 <fmt.formatType__anon_3153+0x48>
ffffffff80010316:	eb 0a                	jmp    ffffffff80010322 <fmt.formatType__anon_3153+0x52>
ffffffff80010318:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff8001031c:	48 83 c4 40          	add    rsp,0x40
ffffffff80010320:	5d                   	pop    rbp
ffffffff80010321:	c3                   	ret
ffffffff80010322:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffffffff80010326:	e8 e5 30 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001032b:	66 8b 45 f6          	mov    ax,WORD PTR [rbp-0xa]
ffffffff8001032f:	48 83 c4 40          	add    rsp,0x40
ffffffff80010333:	5d                   	pop    rbp
ffffffff80010334:	c3                   	ret
ffffffff80010335:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8001033c:	00 00 00 
ffffffff8001033f:	90                   	nop

ffffffff80010340 <fmt.formatType__anon_3173>:
) @TypeOf(writer).Error!void {
ffffffff80010340:	55                   	push   rbp
ffffffff80010341:	48 89 e5             	mov    rbp,rsp
ffffffff80010344:	48 81 ec 30 02 00 00 	sub    rsp,0x230
ffffffff8001034b:	4c 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],r8
ffffffff80010352:	48 89 8d 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rcx
ffffffff80010359:	48 89 95 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rdx
ffffffff80010360:	48 89 b5 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rsi
ffffffff80010367:	48 89 bd 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rdi
ffffffff8001036e:	4c 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],r8
        defaultSpec(@TypeOf(value))
ffffffff80010375:	48 c7 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],0x0
ffffffff8001037c:	00 00 00 00 
ffffffff80010380:	48 c7 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],0xffffffff8001b65d
ffffffff80010387:	5d b6 01 80 
            try writer.writeAll(@typeName(T));
ffffffff8001038b:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff8001038e:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80010395:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff80010398:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
ffffffff8001039e:	48 c7 c2 9e b7 01 80 	mov    rdx,0xffffffff8001b79e
ffffffff800103a5:	48 8d b5 58 fe ff ff 	lea    rsi,[rbp-0x1a8]
ffffffff800103ac:	b9 1a 00 00 00       	mov    ecx,0x1a
ffffffff800103b1:	e8 9a ff fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800103b6:	4c 8b 85 38 fe ff ff 	mov    r8,QWORD PTR [rbp-0x1c8]
            if (max_depth == 0) {
ffffffff800103bd:	49 83 f8 00          	cmp    r8,0x0
ffffffff800103c1:	75 48                	jne    ffffffff8001040b <fmt.formatType__anon_3173+0xcb>
ffffffff800103c3:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800103ca:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                return writer.writeAll("{ ... }");
ffffffff800103d1:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800103d4:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
ffffffff800103db:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800103de:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
ffffffff800103e4:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff800103eb:	48 8d b5 68 fe ff ff 	lea    rsi,[rbp-0x198]
ffffffff800103f2:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff800103f7:	e8 54 ff fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800103fc:	66 89 85 66 fe ff ff 	mov    WORD PTR [rbp-0x19a],ax
ffffffff80010403:	b0 01                	mov    al,0x1
ffffffff80010405:	a8 01                	test   al,0x1
ffffffff80010407:	75 04                	jne    ffffffff8001040d <fmt.formatType__anon_3173+0xcd>
ffffffff80010409:	eb 12                	jmp    ffffffff8001041d <fmt.formatType__anon_3173+0xdd>
ffffffff8001040b:	eb 2c                	jmp    ffffffff80010439 <fmt.formatType__anon_3173+0xf9>
ffffffff8001040d:	66 8b 85 66 fe ff ff 	mov    ax,WORD PTR [rbp-0x19a]
ffffffff80010414:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffffffff8001041b:	5d                   	pop    rbp
ffffffff8001041c:	c3                   	ret
ffffffff8001041d:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010424:	e8 e7 2f ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010429:	66 8b 85 66 fe ff ff 	mov    ax,WORD PTR [rbp-0x19a]
ffffffff80010430:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffffffff80010437:	5d                   	pop    rbp
ffffffff80010438:	c3                   	ret
ffffffff80010439:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010440:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
            try writer.writeAll("{");
ffffffff80010447:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8001044a:	89 8d 80 fe ff ff    	mov    DWORD PTR [rbp-0x180],ecx
ffffffff80010450:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010453:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff8001045a:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff80010461:	48 8d b5 78 fe ff ff 	lea    rsi,[rbp-0x188]
ffffffff80010468:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff8001046d:	e8 de fe fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010472:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010479:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
            inline for (info.fields, 0..) |f, i| {
ffffffff80010480:	48 c7 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],0x0
ffffffff80010487:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff8001048b:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8001048e:	89 8d 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],ecx
ffffffff80010494:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010497:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff8001049e:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff800104a5:	48 8d b5 90 fe ff ff 	lea    rsi,[rbp-0x170]
ffffffff800104ac:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800104b1:	e8 9a fe fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800104b6:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800104bd:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff800104c4:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800104c7:	89 8d a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],ecx
ffffffff800104cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800104d0:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff800104d7:	48 c7 c2 b9 b7 01 80 	mov    rdx,0xffffffff8001b7b9
ffffffff800104de:	48 8d b5 a0 fe ff ff 	lea    rsi,[rbp-0x160]
ffffffff800104e5:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff800104ea:	e8 61 fe fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800104ef:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800104f6:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff800104fd:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80010500:	89 8d b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],ecx
ffffffff80010506:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010509:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80010510:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80010517:	48 8d b5 b0 fe ff ff 	lea    rsi,[rbp-0x150]
ffffffff8001051e:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80010523:	e8 28 fe fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010528:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff8001052f:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
ffffffff80010536:	48 89 8d 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rcx
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8001053d:	48 83 e8 01          	sub    rax,0x1
ffffffff80010541:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff80010548:	0f 92 85 c8 fe ff ff 	setb   BYTE PTR [rbp-0x138]
ffffffff8001054f:	8a 85 c8 fe ff ff    	mov    al,BYTE PTR [rbp-0x138]
ffffffff80010555:	84 c0                	test   al,al
ffffffff80010557:	75 04                	jne    ffffffff8001055d <fmt.formatType__anon_3173+0x21d>
ffffffff80010559:	eb 00                	jmp    ffffffff8001055b <fmt.formatType__anon_3173+0x21b>
ffffffff8001055b:	eb 1c                	jmp    ffffffff80010579 <fmt.formatType__anon_3173+0x239>
ffffffff8001055d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80010564:	48 c7 c1 d8 c3 01 80 	mov    rcx,0xffffffff8001c3d8
ffffffff8001056b:	31 c0                	xor    eax,eax
ffffffff8001056d:	89 c2                	mov    edx,eax
ffffffff8001056f:	be 10 00 00 00       	mov    esi,0x10
ffffffff80010574:	e8 37 fc fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80010579:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010580:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80010587:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff8001058e:	48 8b b5 10 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1f0]
ffffffff80010595:	4c 8b 85 c0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x140]
ffffffff8001059c:	e8 8f 29 00 00       	call   ffffffff80012f30 <fmt.formatType__anon_3436>
ffffffff800105a1:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800105a8:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff800105af:	48 c7 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],0x1
ffffffff800105b6:	01 00 00 00 
                    try writer.writeAll(", .");
ffffffff800105ba:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800105bd:	89 8d e0 fe ff ff    	mov    DWORD PTR [rbp-0x120],ecx
ffffffff800105c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800105c6:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff800105cd:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff800105d4:	48 8d b5 d8 fe ff ff 	lea    rsi,[rbp-0x128]
ffffffff800105db:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800105e0:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
ffffffff800105e7:	e8 64 fd fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800105ec:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800105f3:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff800105fa:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800105fd:	89 8d f0 fe ff ff    	mov    DWORD PTR [rbp-0x110],ecx
ffffffff80010603:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010606:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff8001060d:	48 c7 c2 c3 b7 01 80 	mov    rdx,0xffffffff8001b7c3
ffffffff80010614:	48 8d b5 e8 fe ff ff 	lea    rsi,[rbp-0x118]
ffffffff8001061b:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80010620:	e8 2b fd fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010625:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8001062c:	48 8b 8d 00 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x200]
ffffffff80010633:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff8001063a:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8001063d:	89 95 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],edx
ffffffff80010643:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010646:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff8001064d:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80010654:	48 8d b5 f8 fe ff ff 	lea    rsi,[rbp-0x108]
ffffffff8001065b:	e8 f0 fc fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010660:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80010667:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff8001066e:	8a 49 08             	mov    cl,BYTE PTR [rcx+0x8]
ffffffff80010671:	88 8d 0f fe ff ff    	mov    BYTE PTR [rbp-0x1f1],cl
ffffffff80010677:	48 83 e8 01          	sub    rax,0x1
ffffffff8001067b:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80010682:	0f 92 85 10 ff ff ff 	setb   BYTE PTR [rbp-0xf0]
ffffffff80010689:	8a 85 10 ff ff ff    	mov    al,BYTE PTR [rbp-0xf0]
ffffffff8001068f:	84 c0                	test   al,al
ffffffff80010691:	75 04                	jne    ffffffff80010697 <fmt.formatType__anon_3173+0x357>
ffffffff80010693:	eb 00                	jmp    ffffffff80010695 <fmt.formatType__anon_3173+0x355>
ffffffff80010695:	eb 1c                	jmp    ffffffff800106b3 <fmt.formatType__anon_3173+0x373>
ffffffff80010697:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001069e:	48 c7 c1 e8 c3 01 80 	mov    rcx,0xffffffff8001c3e8
ffffffff800106a5:	31 c0                	xor    eax,eax
ffffffff800106a7:	89 c2                	mov    edx,eax
ffffffff800106a9:	be 10 00 00 00       	mov    esi,0x10
ffffffff800106ae:	e8 fd fa fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800106b3:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800106ba:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff800106c1:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff800106c8:	8a 85 0f fe ff ff    	mov    al,BYTE PTR [rbp-0x1f1]
ffffffff800106ce:	4c 8b 85 08 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf8]
ffffffff800106d5:	0f b6 f0             	movzx  esi,al
ffffffff800106d8:	e8 63 2a 00 00       	call   ffffffff80013140 <fmt.formatType__anon_3437>
ffffffff800106dd:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800106e4:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff800106eb:	48 c7 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],0x2
ffffffff800106f2:	02 00 00 00 
                    try writer.writeAll(", .");
ffffffff800106f6:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff800106f9:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
ffffffff800106ff:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010702:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80010709:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80010710:	48 8d b5 20 ff ff ff 	lea    rsi,[rbp-0xe0]
ffffffff80010717:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8001071c:	48 89 8d f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rcx
ffffffff80010723:	e8 28 fc fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010728:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8001072f:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff80010736:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80010739:	89 8d 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],ecx
ffffffff8001073f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010742:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff80010749:	48 c7 c2 cc b7 01 80 	mov    rdx,0xffffffff8001b7cc
ffffffff80010750:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff80010757:	b9 05 00 00 00       	mov    ecx,0x5
ffffffff8001075c:	e8 ef fb fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010761:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010768:	48 8b 8d f0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x210]
ffffffff8001076f:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff80010776:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80010779:	89 95 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],edx
ffffffff8001077f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010782:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffffffff80010789:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80010790:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff80010797:	e8 b4 fb fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8001079c:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff800107a3:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff800107aa:	48 83 c1 09          	add    rcx,0x9
ffffffff800107ae:	48 89 8d f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rcx
ffffffff800107b5:	48 83 e8 01          	sub    rax,0x1
ffffffff800107b9:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff800107c0:	0f 92 85 58 ff ff ff 	setb   BYTE PTR [rbp-0xa8]
ffffffff800107c7:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [rbp-0xa8]
ffffffff800107cd:	84 c0                	test   al,al
ffffffff800107cf:	75 04                	jne    ffffffff800107d5 <fmt.formatType__anon_3173+0x495>
ffffffff800107d1:	eb 00                	jmp    ffffffff800107d3 <fmt.formatType__anon_3173+0x493>
ffffffff800107d3:	eb 1c                	jmp    ffffffff800107f1 <fmt.formatType__anon_3173+0x4b1>
ffffffff800107d5:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800107dc:	48 c7 c1 f8 c3 01 80 	mov    rcx,0xffffffff8001c3f8
ffffffff800107e3:	31 c0                	xor    eax,eax
ffffffff800107e5:	89 c2                	mov    edx,eax
ffffffff800107e7:	be 10 00 00 00       	mov    esi,0x10
ffffffff800107ec:	e8 bf f9 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800107f1:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800107f8:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff800107ff:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80010806:	48 8b b5 f8 fd ff ff 	mov    rsi,QWORD PTR [rbp-0x208]
ffffffff8001080d:	4c 8b 85 50 ff ff ff 	mov    r8,QWORD PTR [rbp-0xb0]
ffffffff80010814:	e8 87 29 00 00       	call   ffffffff800131a0 <fmt.formatType__anon_3438>
ffffffff80010819:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010820:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff80010827:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x3
ffffffff8001082e:	03 00 00 00 
                    try writer.writeAll(", .");
ffffffff80010832:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80010835:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff8001083b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8001083e:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff80010845:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff8001084c:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff80010853:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80010858:	48 89 8d e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rcx
ffffffff8001085f:	e8 ec fa fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010864:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8001086b:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff80010872:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80010875:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff80010878:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8001087b:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80010882:	48 c7 c2 d2 b7 01 80 	mov    rdx,0xffffffff8001b7d2
ffffffff80010889:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff80010890:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80010895:	e8 b6 fa fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8001089a:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800108a1:	48 8b 8d e0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x220]
ffffffff800108a8:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff800108af:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800108b2:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
ffffffff800108b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800108b8:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff800108bc:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff800108c3:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff800108c7:	e8 84 fa fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800108cc:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff800108d3:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff800108da:	8a 49 0f             	mov    cl,BYTE PTR [rcx+0xf]
ffffffff800108dd:	88 8d ef fd ff ff    	mov    BYTE PTR [rbp-0x211],cl
ffffffff800108e3:	48 83 e8 01          	sub    rax,0x1
ffffffff800108e7:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff800108eb:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff800108ef:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff800108f2:	84 c0                	test   al,al
ffffffff800108f4:	75 04                	jne    ffffffff800108fa <fmt.formatType__anon_3173+0x5ba>
ffffffff800108f6:	eb 00                	jmp    ffffffff800108f8 <fmt.formatType__anon_3173+0x5b8>
ffffffff800108f8:	eb 1c                	jmp    ffffffff80010916 <fmt.formatType__anon_3173+0x5d6>
ffffffff800108fa:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80010901:	48 c7 c1 08 c4 01 80 	mov    rcx,0xffffffff8001c408
ffffffff80010908:	31 c0                	xor    eax,eax
ffffffff8001090a:	89 c2                	mov    edx,eax
ffffffff8001090c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80010911:	e8 9a f8 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80010916:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff8001091d:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80010924:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff8001092b:	8a 85 ef fd ff ff    	mov    al,BYTE PTR [rbp-0x211]
ffffffff80010931:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff80010935:	0f b6 f0             	movzx  esi,al
ffffffff80010938:	e8 73 2a 00 00       	call   ffffffff800133b0 <fmt.formatType__anon_3439>
ffffffff8001093d:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010944:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
ffffffff8001094b:	48 c7 45 a8 04 00 00 	mov    QWORD PTR [rbp-0x58],0x4
ffffffff80010952:	00 
                    try writer.writeAll(", .");
ffffffff80010953:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80010956:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff80010959:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8001095c:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80010960:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80010967:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff8001096b:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80010970:	48 89 8d d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rcx
ffffffff80010977:	e8 d4 f9 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8001097c:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010983:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(f.name);
ffffffff8001098a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff8001098d:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff80010990:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80010993:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80010997:	48 c7 c2 db b7 01 80 	mov    rdx,0xffffffff8001b7db
ffffffff8001099e:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff800109a2:	b9 0c 00 00 00       	mov    ecx,0xc
ffffffff800109a7:	e8 a4 f9 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800109ac:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff800109b3:	48 8b 8d d0 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x230]
ffffffff800109ba:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
                try writer.writeAll(" = ");
ffffffff800109c1:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800109c4:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff800109c7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800109ca:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800109ce:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff800109d5:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff800109d9:	e8 72 f9 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800109de:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff800109e5:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff800109ec:	8b 49 10             	mov    ecx,DWORD PTR [rcx+0x10]
ffffffff800109ef:	89 8d dc fd ff ff    	mov    DWORD PTR [rbp-0x224],ecx
ffffffff800109f5:	48 83 e8 01          	sub    rax,0x1
ffffffff800109f9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800109fd:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff80010a01:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff80010a04:	84 c0                	test   al,al
ffffffff80010a06:	75 04                	jne    ffffffff80010a0c <fmt.formatType__anon_3173+0x6cc>
ffffffff80010a08:	eb 00                	jmp    ffffffff80010a0a <fmt.formatType__anon_3173+0x6ca>
ffffffff80010a0a:	eb 1c                	jmp    ffffffff80010a28 <fmt.formatType__anon_3173+0x6e8>
ffffffff80010a0c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80010a13:	48 c7 c1 18 c4 01 80 	mov    rcx,0xffffffff8001c418
ffffffff80010a1a:	31 c0                	xor    eax,eax
ffffffff80010a1c:	89 c2                	mov    edx,eax
ffffffff80010a1e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80010a23:	e8 88 f7 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80010a28:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010a2f:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff80010a36:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80010a3d:	8b b5 dc fd ff ff    	mov    esi,DWORD PTR [rbp-0x224]
ffffffff80010a43:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff80010a47:	e8 c4 29 00 00       	call   ffffffff80013410 <fmt.formatType__anon_3440>
ffffffff80010a4c:	48 8b bd 30 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1d0]
ffffffff80010a53:	48 8b 85 18 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e8]
            try writer.writeAll(" }");
ffffffff80010a5a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80010a5d:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80010a61:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80010a64:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80010a67:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff80010a6e:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80010a72:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80010a77:	e8 d4 f8 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010a7c:	31 c0                	xor    eax,eax
ffffffff80010a7e:	48 81 c4 30 02 00 00 	add    rsp,0x230
ffffffff80010a85:	5d                   	pop    rbp
ffffffff80010a86:	c3                   	ret
ffffffff80010a87:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80010a8e:	00 00 

ffffffff80010a90 <fmt.formatType__anon_3174>:
) @TypeOf(writer).Error!void {
ffffffff80010a90:	55                   	push   rbp
ffffffff80010a91:	48 89 e5             	mov    rbp,rsp
ffffffff80010a94:	48 83 ec 30          	sub    rsp,0x30
ffffffff80010a98:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80010a9c:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
ffffffff80010a9f:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80010aa3:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80010aaa:	00 
ffffffff80010aab:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80010ab2:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80010ab3:	e8 08 03 00 00       	call   ffffffff80010dc0 <fmt.formatValue__anon_3182>
ffffffff80010ab8:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80010abc:	b0 01                	mov    al,0x1
ffffffff80010abe:	a8 01                	test   al,0x1
ffffffff80010ac0:	75 02                	jne    ffffffff80010ac4 <fmt.formatType__anon_3174+0x34>
ffffffff80010ac2:	eb 0a                	jmp    ffffffff80010ace <fmt.formatType__anon_3174+0x3e>
ffffffff80010ac4:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010ac8:	48 83 c4 30          	add    rsp,0x30
ffffffff80010acc:	5d                   	pop    rbp
ffffffff80010acd:	c3                   	ret
ffffffff80010ace:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80010ad2:	e8 39 29 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010ad7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010adb:	48 83 c4 30          	add    rsp,0x30
ffffffff80010adf:	5d                   	pop    rbp
ffffffff80010ae0:	c3                   	ret
ffffffff80010ae1:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80010ae8:	00 00 00 
ffffffff80010aeb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80010af0 <fmt.formatType__anon_3175>:
) @TypeOf(writer).Error!void {
ffffffff80010af0:	55                   	push   rbp
ffffffff80010af1:	48 89 e5             	mov    rbp,rsp
ffffffff80010af4:	48 83 ec 30          	sub    rsp,0x30
ffffffff80010af8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80010afc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80010b00:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80010b04:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80010b0b:	00 
ffffffff80010b0c:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80010b13:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80010b14:	e8 d7 22 00 00       	call   ffffffff80012df0 <fmt.formatValue__anon_3386>
ffffffff80010b19:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80010b1d:	b0 01                	mov    al,0x1
ffffffff80010b1f:	a8 01                	test   al,0x1
ffffffff80010b21:	75 02                	jne    ffffffff80010b25 <fmt.formatType__anon_3175+0x35>
ffffffff80010b23:	eb 0a                	jmp    ffffffff80010b2f <fmt.formatType__anon_3175+0x3f>
ffffffff80010b25:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010b29:	48 83 c4 30          	add    rsp,0x30
ffffffff80010b2d:	5d                   	pop    rbp
ffffffff80010b2e:	c3                   	ret
ffffffff80010b2f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80010b33:	e8 d8 28 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010b38:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010b3c:	48 83 c4 30          	add    rsp,0x30
ffffffff80010b40:	5d                   	pop    rbp
ffffffff80010b41:	c3                   	ret
ffffffff80010b42:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80010b49:	00 00 00 
ffffffff80010b4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80010b50 <fmt.formatType__anon_3176>:
) @TypeOf(writer).Error!void {
ffffffff80010b50:	55                   	push   rbp
ffffffff80010b51:	48 89 e5             	mov    rbp,rsp
ffffffff80010b54:	48 83 ec 30          	sub    rsp,0x30
ffffffff80010b58:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80010b5c:	40 88 f0             	mov    al,sil
ffffffff80010b5f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff80010b62:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80010b66:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80010b6d:	00 
ffffffff80010b6e:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80010b75:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80010b76:	0f b6 f0             	movzx  esi,al
ffffffff80010b79:	e8 62 0a 00 00       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff80010b7e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80010b82:	b0 01                	mov    al,0x1
ffffffff80010b84:	a8 01                	test   al,0x1
ffffffff80010b86:	75 02                	jne    ffffffff80010b8a <fmt.formatType__anon_3176+0x3a>
ffffffff80010b88:	eb 0a                	jmp    ffffffff80010b94 <fmt.formatType__anon_3176+0x44>
ffffffff80010b8a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010b8e:	48 83 c4 30          	add    rsp,0x30
ffffffff80010b92:	5d                   	pop    rbp
ffffffff80010b93:	c3                   	ret
ffffffff80010b94:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80010b98:	e8 73 28 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010b9d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010ba1:	48 83 c4 30          	add    rsp,0x30
ffffffff80010ba5:	5d                   	pop    rbp
ffffffff80010ba6:	c3                   	ret
ffffffff80010ba7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80010bae:	00 00 

ffffffff80010bb0 <fmt.formatType__anon_3177>:
) @TypeOf(writer).Error!void {
ffffffff80010bb0:	55                   	push   rbp
ffffffff80010bb1:	48 89 e5             	mov    rbp,rsp
ffffffff80010bb4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffffffff80010bbb:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
ffffffff80010bc2:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffffffff80010bc9:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffffffff80010bd0:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff80010bd7:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
ffffffff80010bde:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
        defaultSpec(@TypeOf(value))
ffffffff80010be5:	48 c7 45 88 03 00 00 	mov    QWORD PTR [rbp-0x78],0x3
ffffffff80010bec:	00 
ffffffff80010bed:	48 c7 45 80 f1 b4 01 	mov    QWORD PTR [rbp-0x80],0xffffffff8001b4f1
ffffffff80010bf4:	80 
            if (max_depth == 0) {
ffffffff80010bf5:	49 83 f8 00          	cmp    r8,0x0
ffffffff80010bf9:	75 3c                	jne    ffffffff80010c37 <fmt.formatType__anon_3177+0x87>
ffffffff80010bfb:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80010c02:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                return writer.writeAll("{ ... }");
ffffffff80010c09:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80010c0c:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff80010c10:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80010c13:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
ffffffff80010c16:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80010c1d:	48 8d 75 98          	lea    rsi,[rbp-0x68]
ffffffff80010c21:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80010c26:	e8 25 f7 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010c2b:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff80010c2f:	b0 01                	mov    al,0x1
ffffffff80010c31:	a8 01                	test   al,0x1
ffffffff80010c33:	75 04                	jne    ffffffff80010c39 <fmt.formatType__anon_3177+0x89>
ffffffff80010c35:	eb 0f                	jmp    ffffffff80010c46 <fmt.formatType__anon_3177+0x96>
ffffffff80010c37:	eb 26                	jmp    ffffffff80010c5f <fmt.formatType__anon_3177+0xaf>
ffffffff80010c39:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80010c3d:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff80010c44:	5d                   	pop    rbp
ffffffff80010c45:	c3                   	ret
ffffffff80010c46:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80010c4d:	e8 be 27 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010c52:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80010c56:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff80010c5d:	5d                   	pop    rbp
ffffffff80010c5e:	c3                   	ret
ffffffff80010c5f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80010c66:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll("{ ");
ffffffff80010c6d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80010c70:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff80010c74:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80010c77:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff80010c7a:	48 c7 c2 57 b6 01 80 	mov    rdx,0xffffffff8001b657
ffffffff80010c81:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff80010c85:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80010c8a:	e8 c1 f6 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010c8f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80010c96:	00 
            for (value, 0..) |elem, i| {
ffffffff80010c97:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80010c9b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff80010ca2:	48 83 f8 03          	cmp    rax,0x3
ffffffff80010ca6:	73 3a                	jae    ffffffff80010ce2 <fmt.formatType__anon_3177+0x132>
ffffffff80010ca8:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff80010caf:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff80010cb6:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff80010cbd:	8a 14 0a             	mov    dl,BYTE PTR [rdx+rcx*1]
ffffffff80010cc0:	88 95 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],dl
ffffffff80010cc6:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
ffffffff80010cc9:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff80010ccd:	48 83 e8 01          	sub    rax,0x1
ffffffff80010cd1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80010cd5:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff80010cd9:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff80010cdc:	84 c0                	test   al,al
ffffffff80010cde:	74 07                	je     ffffffff80010ce7 <fmt.formatType__anon_3177+0x137>
ffffffff80010ce0:	eb 07                	jmp    ffffffff80010ce9 <fmt.formatType__anon_3177+0x139>
                    try writer.writeAll(", ");
ffffffff80010ce2:	e9 9c 00 00 00       	jmp    ffffffff80010d83 <fmt.formatType__anon_3177+0x1d3>
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff80010ce7:	eb 1c                	jmp    ffffffff80010d05 <fmt.formatType__anon_3177+0x155>
ffffffff80010ce9:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80010cf0:	48 c7 c1 28 c4 01 80 	mov    rcx,0xffffffff8001c428
ffffffff80010cf7:	31 c0                	xor    eax,eax
ffffffff80010cf9:	89 c2                	mov    edx,eax
ffffffff80010cfb:	be 10 00 00 00       	mov    esi,0x10
ffffffff80010d00:	e8 ab f4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80010d05:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff80010d0c:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffffffff80010d13:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80010d1a:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [rbp-0xb9]
ffffffff80010d20:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
ffffffff80010d24:	0f b6 f0             	movzx  esi,al
ffffffff80010d27:	e8 84 96 ff ff       	call   ffffffff8000a3b0 <fmt.formatType__anon_2943>
ffffffff80010d2c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
                if (i < value.len - 1) {
ffffffff80010d33:	48 83 f8 02          	cmp    rax,0x2
ffffffff80010d37:	73 32                	jae    ffffffff80010d6b <fmt.formatType__anon_3177+0x1bb>
ffffffff80010d39:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80010d40:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                    try writer.writeAll(", ");
ffffffff80010d47:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80010d4a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff80010d4e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80010d51:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff80010d54:	48 c7 c2 5a b6 01 80 	mov    rdx,0xffffffff8001b65a
ffffffff80010d5b:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff80010d5f:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80010d64:	e8 e7 f5 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010d69:	eb 02                	jmp    ffffffff80010d6d <fmt.formatType__anon_3177+0x1bd>
ffffffff80010d6b:	eb 00                	jmp    ffffffff80010d6d <fmt.formatType__anon_3177+0x1bd>
ffffffff80010d6d:	eb 00                	jmp    ffffffff80010d6f <fmt.formatType__anon_3177+0x1bf>
ffffffff80010d6f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff80010d76:	48 83 c0 01          	add    rax,0x1
ffffffff80010d7a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80010d7e:	e9 14 ff ff ff       	jmp    ffffffff80010c97 <fmt.formatType__anon_3177+0xe7>
ffffffff80010d83:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80010d8a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll(" }");
ffffffff80010d91:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80010d94:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80010d98:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80010d9b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80010d9e:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff80010da5:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80010da9:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80010dae:	e8 9d f5 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80010db3:	31 c0                	xor    eax,eax
ffffffff80010db5:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff80010dbc:	5d                   	pop    rbp
ffffffff80010dbd:	c3                   	ret
ffffffff80010dbe:	66 90                	xchg   ax,ax

ffffffff80010dc0 <fmt.formatValue__anon_3182>:
) !void {
ffffffff80010dc0:	55                   	push   rbp
ffffffff80010dc1:	48 89 e5             	mov    rbp,rsp
ffffffff80010dc4:	48 83 ec 10          	sub    rsp,0x10
ffffffff80010dc8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80010dcc:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80010dcf:	e8 2c 00 00 00       	call   ffffffff80010e00 <fmt.formatIntValue__anon_3183>
ffffffff80010dd4:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80010dd8:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80010ddd:	75 0a                	jne    ffffffff80010de9 <fmt.formatValue__anon_3182+0x29>
ffffffff80010ddf:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010de3:	48 83 c4 10          	add    rsp,0x10
ffffffff80010de7:	5d                   	pop    rbp
ffffffff80010de8:	c3                   	ret
ffffffff80010de9:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80010ded:	e8 1e 26 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010df2:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010df6:	48 83 c4 10          	add    rsp,0x10
ffffffff80010dfa:	5d                   	pop    rbp
ffffffff80010dfb:	c3                   	ret
ffffffff80010dfc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80010e00 <fmt.formatIntValue__anon_3183>:
) !void {
ffffffff80010e00:	55                   	push   rbp
ffffffff80010e01:	48 89 e5             	mov    rbp,rsp
ffffffff80010e04:	48 83 ec 20          	sub    rsp,0x20
ffffffff80010e08:	49 89 c9             	mov    r9,rcx
ffffffff80010e0b:	49 89 d0             	mov    r8,rdx
ffffffff80010e0e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80010e12:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80010e15:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    return formatInt(int_value, radix, case, options, writer);
ffffffff80010e18:	31 c0                	xor    eax,eax
ffffffff80010e1a:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80010e1f:	31 c9                	xor    ecx,ecx
ffffffff80010e21:	e8 2a 00 00 00       	call   ffffffff80010e50 <fmt.formatInt__anon_3186>
ffffffff80010e26:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80010e2a:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80010e2f:	75 0a                	jne    ffffffff80010e3b <fmt.formatIntValue__anon_3183+0x3b>
ffffffff80010e31:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010e35:	48 83 c4 20          	add    rsp,0x20
ffffffff80010e39:	5d                   	pop    rbp
ffffffff80010e3a:	c3                   	ret
ffffffff80010e3b:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff80010e3f:	e8 cc 25 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80010e44:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80010e48:	48 83 c4 20          	add    rsp,0x20
ffffffff80010e4c:	5d                   	pop    rbp
ffffffff80010e4d:	c3                   	ret
ffffffff80010e4e:	66 90                	xchg   ax,ax

ffffffff80010e50 <fmt.formatInt__anon_3186>:
) !void {
ffffffff80010e50:	55                   	push   rbp
ffffffff80010e51:	48 89 e5             	mov    rbp,rsp
ffffffff80010e54:	48 81 ec b0 01 00 00 	sub    rsp,0x1b0
ffffffff80010e5b:	4c 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],r9
ffffffff80010e62:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
ffffffff80010e69:	89 b5 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],esi
ffffffff80010e6f:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
ffffffff80010e76:	88 8d 23 ff ff ff    	mov    BYTE PTR [rbp-0xdd],cl
ffffffff80010e7c:	88 d0                	mov    al,dl
ffffffff80010e7e:	88 85 2b ff ff ff    	mov    BYTE PTR [rbp-0xd5],al
ffffffff80010e84:	89 b5 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],esi
ffffffff80010e8a:	88 85 32 ff ff ff    	mov    BYTE PTR [rbp-0xce],al
ffffffff80010e90:	80 e1 01             	and    cl,0x1
ffffffff80010e93:	88 8d 33 ff ff ff    	mov    BYTE PTR [rbp-0xcd],cl
    assert(base >= 2);
ffffffff80010e99:	3c 02                	cmp    al,0x2
ffffffff80010e9b:	0f 93 c0             	setae  al
ffffffff80010e9e:	0f b6 f8             	movzx  edi,al
ffffffff80010ea1:	e8 8a 4d ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80010ea6:	8b bd 24 ff ff ff    	mov    edi,DWORD PTR [rbp-0xdc]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80010eac:	89 bd 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],edi
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80010eb2:	66 c7 85 3a ff ff ff 	mov    WORD PTR [rbp-0xc6],0x20
ffffffff80010eb9:	20 00 
    const abs_value = math.absCast(int_value);
ffffffff80010ebb:	e8 00 07 00 00       	call   ffffffff800115c0 <math.absCast__anon_3188>
ffffffff80010ec0:	89 c1                	mov    ecx,eax
ffffffff80010ec2:	8a 85 2b ff ff ff    	mov    al,BYTE PTR [rbp-0xd5]
ffffffff80010ec8:	89 8d 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],ecx
ffffffff80010ece:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff80010ed5:	aa aa aa 
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80010ed8:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffffffff80010edf:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffffffff80010ee6:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
ffffffff80010eed:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
ffffffff80010ef4:	c6 85 60 ff ff ff aa 	mov    BYTE PTR [rbp-0xa0],0xaa
    var a: MinInt = abs_value;
ffffffff80010efb:	89 8d 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],ecx
    var index: usize = buf.len;
ffffffff80010f01:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x21
ffffffff80010f08:	21 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff80010f0c:	3c 0a                	cmp    al,0xa
ffffffff80010f0e:	75 0f                	jne    ffffffff80010f1f <fmt.formatInt__anon_3186+0xcf>
ffffffff80010f10:	e8 7b 62 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80010f15:	34 ff                	xor    al,0xff
ffffffff80010f17:	88 85 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],al
ffffffff80010f1d:	eb 0a                	jmp    ffffffff80010f29 <fmt.formatInt__anon_3186+0xd9>
ffffffff80010f1f:	31 c0                	xor    eax,eax
ffffffff80010f21:	88 85 07 ff ff ff    	mov    BYTE PTR [rbp-0xf9],al
ffffffff80010f27:	eb 00                	jmp    ffffffff80010f29 <fmt.formatInt__anon_3186+0xd9>
ffffffff80010f29:	8a 85 07 ff ff ff    	mov    al,BYTE PTR [rbp-0xf9]
ffffffff80010f2f:	a8 01                	test   al,0x1
ffffffff80010f31:	75 02                	jne    ffffffff80010f35 <fmt.formatInt__anon_3186+0xe5>
ffffffff80010f33:	eb 02                	jmp    ffffffff80010f37 <fmt.formatInt__anon_3186+0xe7>
ffffffff80010f35:	eb 05                	jmp    ffffffff80010f3c <fmt.formatInt__anon_3186+0xec>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80010f37:	e9 fd 03 00 00       	jmp    ffffffff80011339 <fmt.formatInt__anon_3186+0x4e9>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80010f3c:	83 bd 64 ff ff ff 64 	cmp    DWORD PTR [rbp-0x9c],0x64
ffffffff80010f43:	72 25                	jb     ffffffff80010f6a <fmt.formatInt__anon_3186+0x11a>
            index -= 2;
ffffffff80010f45:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80010f4c:	48 83 e8 02          	sub    rax,0x2
ffffffff80010f50:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80010f57:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff80010f5e:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff80010f64:	84 c0                	test   al,al
ffffffff80010f66:	74 07                	je     ffffffff80010f6f <fmt.formatInt__anon_3186+0x11f>
ffffffff80010f68:	eb 07                	jmp    ffffffff80010f71 <fmt.formatInt__anon_3186+0x121>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80010f6a:	e9 5f 01 00 00       	jmp    ffffffff800110ce <fmt.formatInt__anon_3186+0x27e>
            index -= 2;
ffffffff80010f6f:	eb 1c                	jmp    ffffffff80010f8d <fmt.formatInt__anon_3186+0x13d>
ffffffff80010f71:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80010f78:	48 c7 c1 58 c1 01 80 	mov    rcx,0xffffffff8001c158
ffffffff80010f7f:	31 c0                	xor    eax,eax
ffffffff80010f81:	89 c2                	mov    edx,eax
ffffffff80010f83:	be 10 00 00 00       	mov    esi,0x10
ffffffff80010f88:	e8 23 f2 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80010f8d:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80010f94:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80010f9b:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80010fa2:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff80010fa9:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
ffffffff80010fb0:	48 01 c1             	add    rcx,rax
ffffffff80010fb3:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
ffffffff80010fba:	48 83 f8 21          	cmp    rax,0x21
ffffffff80010fbe:	77 02                	ja     ffffffff80010fc2 <fmt.formatInt__anon_3186+0x172>
ffffffff80010fc0:	eb 11                	jmp    ffffffff80010fd3 <fmt.formatInt__anon_3186+0x183>
ffffffff80010fc2:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
ffffffff80010fc9:	be 21 00 00 00       	mov    esi,0x21
ffffffff80010fce:	e8 3d f3 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80010fd3:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff80010fda:	b8 21 00 00 00       	mov    eax,0x21
ffffffff80010fdf:	48 29 c8             	sub    rax,rcx
ffffffff80010fe2:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80010fe9:	b0 01                	mov    al,0x1
ffffffff80010feb:	a8 01                	test   al,0x1
ffffffff80010fed:	75 02                	jne    ffffffff80010ff1 <fmt.formatInt__anon_3186+0x1a1>
ffffffff80010fef:	eb 02                	jmp    ffffffff80010ff3 <fmt.formatInt__anon_3186+0x1a3>
ffffffff80010ff1:	eb 0d                	jmp    ffffffff80011000 <fmt.formatInt__anon_3186+0x1b0>
ffffffff80010ff3:	be 21 00 00 00       	mov    esi,0x21
ffffffff80010ff8:	48 89 f7             	mov    rdi,rsi
ffffffff80010ffb:	e8 d0 f1 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011000:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80011007:	48 83 f8 21          	cmp    rax,0x21
ffffffff8001100b:	77 02                	ja     ffffffff8001100f <fmt.formatInt__anon_3186+0x1bf>
ffffffff8001100d:	eb 11                	jmp    ffffffff80011020 <fmt.formatInt__anon_3186+0x1d0>
ffffffff8001100f:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
ffffffff80011016:	be 21 00 00 00       	mov    esi,0x21
ffffffff8001101b:	e8 b0 f1 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011020:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff80011027:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
ffffffff8001102e:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff80011032:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80011036:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff8001103a:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80011041:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80011045:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff8001104c:	b0 01                	mov    al,0x1
ffffffff8001104e:	a8 01                	test   al,0x1
ffffffff80011050:	75 02                	jne    ffffffff80011054 <fmt.formatInt__anon_3186+0x204>
ffffffff80011052:	eb 02                	jmp    ffffffff80011056 <fmt.formatInt__anon_3186+0x206>
ffffffff80011054:	eb 10                	jmp    ffffffff80011066 <fmt.formatInt__anon_3186+0x216>
ffffffff80011056:	31 c0                	xor    eax,eax
ffffffff80011058:	31 c0                	xor    eax,eax
ffffffff8001105a:	89 c7                	mov    edi,eax
ffffffff8001105c:	be 02 00 00 00       	mov    esi,0x2
ffffffff80011061:	e8 aa f2 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80011066:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff8001106d:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80011072:	48 39 c8             	cmp    rax,rcx
ffffffff80011075:	77 02                	ja     ffffffff80011079 <fmt.formatInt__anon_3186+0x229>
ffffffff80011077:	eb 11                	jmp    ffffffff8001108a <fmt.formatInt__anon_3186+0x23a>
ffffffff80011079:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffffffff80011080:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80011085:	e8 46 f1 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001108a:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffffffff80011090:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff80011095:	31 d2                	xor    edx,edx
ffffffff80011097:	f7 f1                	div    ecx
ffffffff80011099:	89 d0                	mov    eax,edx
ffffffff8001109b:	89 c6                	mov    esi,eax
ffffffff8001109d:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff800110a1:	e8 0a 61 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff800110a6:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff800110ad:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff800110b1:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff800110b4:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffffffff800110ba:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff800110bf:	31 d2                	xor    edx,edx
ffffffff800110c1:	f7 f1                	div    ecx
ffffffff800110c3:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
ffffffff800110c9:	e9 6e fe ff ff       	jmp    ffffffff80010f3c <fmt.formatInt__anon_3186+0xec>
        if (a < 10) {
ffffffff800110ce:	83 bd 64 ff ff ff 0a 	cmp    DWORD PTR [rbp-0x9c],0xa
ffffffff800110d5:	73 1c                	jae    ffffffff800110f3 <fmt.formatInt__anon_3186+0x2a3>
            index -= 1;
ffffffff800110d7:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800110de:	48 83 e8 01          	sub    rax,0x1
ffffffff800110e2:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff800110e6:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff800110ea:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff800110ed:	84 c0                	test   al,al
ffffffff800110ef:	74 25                	je     ffffffff80011116 <fmt.formatInt__anon_3186+0x2c6>
ffffffff800110f1:	eb 25                	jmp    ffffffff80011118 <fmt.formatInt__anon_3186+0x2c8>
            index -= 2;
ffffffff800110f3:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800110fa:	48 83 e8 02          	sub    rax,0x2
ffffffff800110fe:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80011102:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff80011106:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff80011109:	84 c0                	test   al,al
ffffffff8001110b:	0f 84 ec 00 00 00    	je     ffffffff800111fd <fmt.formatInt__anon_3186+0x3ad>
ffffffff80011111:	e9 e9 00 00 00       	jmp    ffffffff800111ff <fmt.formatInt__anon_3186+0x3af>
            index -= 1;
ffffffff80011116:	eb 1c                	jmp    ffffffff80011134 <fmt.formatInt__anon_3186+0x2e4>
ffffffff80011118:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001111f:	48 c7 c1 68 c1 01 80 	mov    rcx,0xffffffff8001c168
ffffffff80011126:	31 c0                	xor    eax,eax
ffffffff80011128:	89 c2                	mov    edx,eax
ffffffff8001112a:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001112f:	e8 7c f0 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80011134:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80011138:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff8001113f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80011146:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
ffffffff8001114d:	48 83 f8 21          	cmp    rax,0x21
ffffffff80011151:	73 02                	jae    ffffffff80011155 <fmt.formatInt__anon_3186+0x305>
ffffffff80011153:	eb 11                	jmp    ffffffff80011166 <fmt.formatInt__anon_3186+0x316>
ffffffff80011155:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff8001115c:	be 21 00 00 00       	mov    esi,0x21
ffffffff80011161:	e8 6a f0 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011166:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff8001116d:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffffffff80011174:	48 01 c8             	add    rax,rcx
ffffffff80011177:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff8001117e:	8b 8d 64 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x9c]
ffffffff80011184:	89 8d cc fe ff ff    	mov    DWORD PTR [rbp-0x134],ecx
ffffffff8001118a:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff8001118f:	29 c8                	sub    eax,ecx
ffffffff80011191:	3d ff 00 00 00       	cmp    eax,0xff
ffffffff80011196:	77 02                	ja     ffffffff8001119a <fmt.formatInt__anon_3186+0x34a>
ffffffff80011198:	eb 1c                	jmp    ffffffff800111b6 <fmt.formatInt__anon_3186+0x366>
ffffffff8001119a:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff800111a1:	48 c7 c1 78 c1 01 80 	mov    rcx,0xffffffff8001c178
ffffffff800111a8:	31 c0                	xor    eax,eax
ffffffff800111aa:	89 c2                	mov    edx,eax
ffffffff800111ac:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff800111b1:	e8 fa ef fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800111b6:	8b 85 cc fe ff ff    	mov    eax,DWORD PTR [rbp-0x134]
ffffffff800111bc:	04 30                	add    al,0x30
ffffffff800111be:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff800111c1:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff800111c5:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff800111c8:	84 c0                	test   al,al
ffffffff800111ca:	75 04                	jne    ffffffff800111d0 <fmt.formatInt__anon_3186+0x380>
ffffffff800111cc:	eb 00                	jmp    ffffffff800111ce <fmt.formatInt__anon_3186+0x37e>
ffffffff800111ce:	eb 1c                	jmp    ffffffff800111ec <fmt.formatInt__anon_3186+0x39c>
ffffffff800111d0:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800111d7:	48 c7 c1 88 c1 01 80 	mov    rcx,0xffffffff8001c188
ffffffff800111de:	31 c0                	xor    eax,eax
ffffffff800111e0:	89 c2                	mov    edx,eax
ffffffff800111e2:	be 10 00 00 00       	mov    esi,0x10
ffffffff800111e7:	e8 c4 ef fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800111ec:	48 8b 85 c0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x140]
ffffffff800111f3:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff800111f6:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800111f8:	e9 37 01 00 00       	jmp    ffffffff80011334 <fmt.formatInt__anon_3186+0x4e4>
            index -= 2;
ffffffff800111fd:	eb 1c                	jmp    ffffffff8001121b <fmt.formatInt__anon_3186+0x3cb>
ffffffff800111ff:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80011206:	48 c7 c1 98 c1 01 80 	mov    rcx,0xffffffff8001c198
ffffffff8001120d:	31 c0                	xor    eax,eax
ffffffff8001120f:	89 c2                	mov    edx,eax
ffffffff80011211:	be 10 00 00 00       	mov    esi,0x10
ffffffff80011216:	e8 95 ef fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001121b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8001121f:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80011226:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001122d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80011234:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
ffffffff8001123b:	48 01 c1             	add    rcx,rax
ffffffff8001123e:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
ffffffff80011245:	48 83 f8 21          	cmp    rax,0x21
ffffffff80011249:	77 02                	ja     ffffffff8001124d <fmt.formatInt__anon_3186+0x3fd>
ffffffff8001124b:	eb 11                	jmp    ffffffff8001125e <fmt.formatInt__anon_3186+0x40e>
ffffffff8001124d:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff80011254:	be 21 00 00 00       	mov    esi,0x21
ffffffff80011259:	e8 b2 f0 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8001125e:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
ffffffff80011265:	b8 21 00 00 00       	mov    eax,0x21
ffffffff8001126a:	48 29 c8             	sub    rax,rcx
ffffffff8001126d:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff80011274:	b0 01                	mov    al,0x1
ffffffff80011276:	a8 01                	test   al,0x1
ffffffff80011278:	75 02                	jne    ffffffff8001127c <fmt.formatInt__anon_3186+0x42c>
ffffffff8001127a:	eb 02                	jmp    ffffffff8001127e <fmt.formatInt__anon_3186+0x42e>
ffffffff8001127c:	eb 0d                	jmp    ffffffff8001128b <fmt.formatInt__anon_3186+0x43b>
ffffffff8001127e:	be 21 00 00 00       	mov    esi,0x21
ffffffff80011283:	48 89 f7             	mov    rdi,rsi
ffffffff80011286:	e8 45 ef fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001128b:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff80011292:	48 83 f8 21          	cmp    rax,0x21
ffffffff80011296:	77 02                	ja     ffffffff8001129a <fmt.formatInt__anon_3186+0x44a>
ffffffff80011298:	eb 11                	jmp    ffffffff800112ab <fmt.formatInt__anon_3186+0x45b>
ffffffff8001129a:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff800112a1:	be 21 00 00 00       	mov    esi,0x21
ffffffff800112a6:	e8 25 ef fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800112ab:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffffffff800112b2:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff800112b9:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff800112bd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800112c1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800112c5:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff800112cc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800112d0:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff800112d7:	b0 01                	mov    al,0x1
ffffffff800112d9:	a8 01                	test   al,0x1
ffffffff800112db:	75 02                	jne    ffffffff800112df <fmt.formatInt__anon_3186+0x48f>
ffffffff800112dd:	eb 02                	jmp    ffffffff800112e1 <fmt.formatInt__anon_3186+0x491>
ffffffff800112df:	eb 10                	jmp    ffffffff800112f1 <fmt.formatInt__anon_3186+0x4a1>
ffffffff800112e1:	31 c0                	xor    eax,eax
ffffffff800112e3:	31 c0                	xor    eax,eax
ffffffff800112e5:	89 c7                	mov    edi,eax
ffffffff800112e7:	be 02 00 00 00       	mov    esi,0x2
ffffffff800112ec:	e8 1f f0 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800112f1:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
ffffffff800112f8:	b8 02 00 00 00       	mov    eax,0x2
ffffffff800112fd:	48 39 c8             	cmp    rax,rcx
ffffffff80011300:	77 02                	ja     ffffffff80011304 <fmt.formatInt__anon_3186+0x4b4>
ffffffff80011302:	eb 11                	jmp    ffffffff80011315 <fmt.formatInt__anon_3186+0x4c5>
ffffffff80011304:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
ffffffff8001130b:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80011310:	e8 bb ee fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011315:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
ffffffff8001131b:	89 c6                	mov    esi,eax
ffffffff8001131d:	48 8d 7d d2          	lea    rdi,[rbp-0x2e]
ffffffff80011321:	e8 8a 5e ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80011326:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
ffffffff8001132d:	66 8b 4d d2          	mov    cx,WORD PTR [rbp-0x2e]
ffffffff80011331:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff80011334:	e9 99 01 00 00       	jmp    ffffffff800114d2 <fmt.formatInt__anon_3186+0x682>
ffffffff80011339:	8a 85 2b ff ff ff    	mov    al,BYTE PTR [rbp-0xd5]
            const digit = a % base;
ffffffff8001133f:	8b 8d 64 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x9c]
ffffffff80011345:	89 8d 90 fe ff ff    	mov    DWORD PTR [rbp-0x170],ecx
ffffffff8001134b:	0f b6 c0             	movzx  eax,al
ffffffff8001134e:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
ffffffff80011354:	83 f8 00             	cmp    eax,0x0
ffffffff80011357:	74 02                	je     ffffffff8001135b <fmt.formatInt__anon_3186+0x50b>
ffffffff80011359:	eb 1c                	jmp    ffffffff80011377 <fmt.formatInt__anon_3186+0x527>
ffffffff8001135b:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80011362:	48 c7 c1 a8 c1 01 80 	mov    rcx,0xffffffff8001c1a8
ffffffff80011369:	31 c0                	xor    eax,eax
ffffffff8001136b:	89 c2                	mov    edx,eax
ffffffff8001136d:	be 10 00 00 00       	mov    esi,0x10
ffffffff80011372:	e8 39 ee fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80011377:	8b 8d 94 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x16c]
ffffffff8001137d:	8b 85 90 fe ff ff    	mov    eax,DWORD PTR [rbp-0x170]
ffffffff80011383:	31 d2                	xor    edx,edx
ffffffff80011385:	f7 f1                	div    ecx
ffffffff80011387:	89 d0                	mov    eax,edx
ffffffff80011389:	89 85 8c fe ff ff    	mov    DWORD PTR [rbp-0x174],eax
ffffffff8001138f:	89 55 d4             	mov    DWORD PTR [rbp-0x2c],edx
            index -= 1;
ffffffff80011392:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80011399:	48 83 e8 01          	sub    rax,0x1
ffffffff8001139d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800113a1:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff800113a5:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff800113a8:	84 c0                	test   al,al
ffffffff800113aa:	75 04                	jne    ffffffff800113b0 <fmt.formatInt__anon_3186+0x560>
ffffffff800113ac:	eb 00                	jmp    ffffffff800113ae <fmt.formatInt__anon_3186+0x55e>
ffffffff800113ae:	eb 1c                	jmp    ffffffff800113cc <fmt.formatInt__anon_3186+0x57c>
ffffffff800113b0:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800113b7:	48 c7 c1 b8 c1 01 80 	mov    rcx,0xffffffff8001c1b8
ffffffff800113be:	31 c0                	xor    eax,eax
ffffffff800113c0:	89 c2                	mov    edx,eax
ffffffff800113c2:	be 10 00 00 00       	mov    esi,0x10
ffffffff800113c7:	e8 e4 ed fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800113cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800113d0:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff800113d7:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800113de:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
ffffffff800113e5:	48 83 f8 21          	cmp    rax,0x21
ffffffff800113e9:	73 02                	jae    ffffffff800113ed <fmt.formatInt__anon_3186+0x59d>
ffffffff800113eb:	eb 11                	jmp    ffffffff800113fe <fmt.formatInt__anon_3186+0x5ae>
ffffffff800113ed:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
ffffffff800113f4:	be 21 00 00 00       	mov    esi,0x21
ffffffff800113f9:	e8 d2 ed fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800113fe:	8b 8d 8c fe ff ff    	mov    ecx,DWORD PTR [rbp-0x174]
ffffffff80011404:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
ffffffff8001140b:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
ffffffff80011412:	48 01 d0             	add    rax,rdx
ffffffff80011415:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff8001141c:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80011421:	29 c8                	sub    eax,ecx
ffffffff80011423:	3d ff 00 00 00       	cmp    eax,0xff
ffffffff80011428:	77 02                	ja     ffffffff8001142c <fmt.formatInt__anon_3186+0x5dc>
ffffffff8001142a:	eb 1c                	jmp    ffffffff80011448 <fmt.formatInt__anon_3186+0x5f8>
ffffffff8001142c:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80011433:	48 c7 c1 c8 c1 01 80 	mov    rcx,0xffffffff8001c1c8
ffffffff8001143a:	31 c0                	xor    eax,eax
ffffffff8001143c:	89 c2                	mov    edx,eax
ffffffff8001143e:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80011443:	e8 68 ed fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80011448:	8a 85 23 ff ff ff    	mov    al,BYTE PTR [rbp-0xdd]
ffffffff8001144e:	8b 8d 8c fe ff ff    	mov    ecx,DWORD PTR [rbp-0x174]
ffffffff80011454:	0f b6 f9             	movzx  edi,cl
ffffffff80011457:	0f b6 f0             	movzx  esi,al
ffffffff8001145a:	e8 c1 5e ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff8001145f:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
ffffffff80011466:	88 c2                	mov    dl,al
ffffffff80011468:	8a 85 2b ff ff ff    	mov    al,BYTE PTR [rbp-0xd5]
ffffffff8001146e:	88 11                	mov    BYTE PTR [rcx],dl
            a /= base;
ffffffff80011470:	8b 8d 64 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x9c]
ffffffff80011476:	89 8d 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],ecx
ffffffff8001147c:	0f b6 c0             	movzx  eax,al
ffffffff8001147f:	89 85 74 fe ff ff    	mov    DWORD PTR [rbp-0x18c],eax
ffffffff80011485:	83 f8 00             	cmp    eax,0x0
ffffffff80011488:	74 02                	je     ffffffff8001148c <fmt.formatInt__anon_3186+0x63c>
ffffffff8001148a:	eb 1c                	jmp    ffffffff800114a8 <fmt.formatInt__anon_3186+0x658>
ffffffff8001148c:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80011493:	48 c7 c1 d8 c1 01 80 	mov    rcx,0xffffffff8001c1d8
ffffffff8001149a:	31 c0                	xor    eax,eax
ffffffff8001149c:	89 c2                	mov    edx,eax
ffffffff8001149e:	be 10 00 00 00       	mov    esi,0x10
ffffffff800114a3:	e8 08 ed fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800114a8:	8b 8d 74 fe ff ff    	mov    ecx,DWORD PTR [rbp-0x18c]
ffffffff800114ae:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
ffffffff800114b4:	31 d2                	xor    edx,edx
ffffffff800114b6:	f7 f1                	div    ecx
ffffffff800114b8:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
            if (a == 0) break;
ffffffff800114be:	83 bd 64 ff ff ff 00 	cmp    DWORD PTR [rbp-0x9c],0x0
ffffffff800114c5:	75 02                	jne    ffffffff800114c9 <fmt.formatInt__anon_3186+0x679>
ffffffff800114c7:	eb 07                	jmp    ffffffff800114d0 <fmt.formatInt__anon_3186+0x680>
ffffffff800114c9:	eb 00                	jmp    ffffffff800114cb <fmt.formatInt__anon_3186+0x67b>
ffffffff800114cb:	e9 69 fe ff ff       	jmp    ffffffff80011339 <fmt.formatInt__anon_3186+0x4e9>
ffffffff800114d0:	eb 00                	jmp    ffffffff800114d2 <fmt.formatInt__anon_3186+0x682>
    return formatBuf(buf[index..], options, writer);
ffffffff800114d2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800114d9:	48 89 85 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rax
ffffffff800114e0:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
ffffffff800114e7:	48 01 c1             	add    rcx,rax
ffffffff800114ea:	48 89 8d 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rcx
ffffffff800114f1:	48 83 f8 21          	cmp    rax,0x21
ffffffff800114f5:	77 02                	ja     ffffffff800114f9 <fmt.formatInt__anon_3186+0x6a9>
ffffffff800114f7:	eb 11                	jmp    ffffffff8001150a <fmt.formatInt__anon_3186+0x6ba>
ffffffff800114f9:	48 8b bd 60 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a0]
ffffffff80011500:	be 21 00 00 00       	mov    esi,0x21
ffffffff80011505:	e8 06 ee fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8001150a:	48 8b 8d 60 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a0]
ffffffff80011511:	b8 21 00 00 00       	mov    eax,0x21
ffffffff80011516:	48 29 c8             	sub    rax,rcx
ffffffff80011519:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80011520:	b0 01                	mov    al,0x1
ffffffff80011522:	a8 01                	test   al,0x1
ffffffff80011524:	75 02                	jne    ffffffff80011528 <fmt.formatInt__anon_3186+0x6d8>
ffffffff80011526:	eb 02                	jmp    ffffffff8001152a <fmt.formatInt__anon_3186+0x6da>
ffffffff80011528:	eb 0d                	jmp    ffffffff80011537 <fmt.formatInt__anon_3186+0x6e7>
ffffffff8001152a:	be 21 00 00 00       	mov    esi,0x21
ffffffff8001152f:	48 89 f7             	mov    rdi,rsi
ffffffff80011532:	e8 99 ec fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011537:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
ffffffff8001153e:	48 83 f8 21          	cmp    rax,0x21
ffffffff80011542:	77 02                	ja     ffffffff80011546 <fmt.formatInt__anon_3186+0x6f6>
ffffffff80011544:	eb 11                	jmp    ffffffff80011557 <fmt.formatInt__anon_3186+0x707>
ffffffff80011546:	48 8b bd 60 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a0]
ffffffff8001154d:	be 21 00 00 00       	mov    esi,0x21
ffffffff80011552:	e8 79 ec fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011557:	4c 8b 85 08 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf8]
ffffffff8001155e:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff80011565:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8001156c:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
ffffffff80011573:	48 8b 95 58 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1a8]
ffffffff8001157a:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8001157e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80011582:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80011586:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8001158a:	e8 d1 5e ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff8001158f:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80011593:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80011598:	75 0d                	jne    ffffffff800115a7 <fmt.formatInt__anon_3186+0x757>
ffffffff8001159a:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8001159e:	48 81 c4 b0 01 00 00 	add    rsp,0x1b0
ffffffff800115a5:	5d                   	pop    rbp
ffffffff800115a6:	c3                   	ret
ffffffff800115a7:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff800115ae:	e8 5d 1e ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800115b3:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800115b7:	48 81 c4 b0 01 00 00 	add    rsp,0x1b0
ffffffff800115be:	5d                   	pop    rbp
ffffffff800115bf:	c3                   	ret

ffffffff800115c0 <math.absCast__anon_3188>:
} {
ffffffff800115c0:	55                   	push   rbp
ffffffff800115c1:	48 89 e5             	mov    rbp,rsp
ffffffff800115c4:	48 83 ec 04          	sub    rsp,0x4
ffffffff800115c8:	89 f8                	mov    eax,edi
ffffffff800115ca:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
            if (int_info.signedness == .unsigned) return x;
ffffffff800115cd:	48 83 c4 04          	add    rsp,0x4
ffffffff800115d1:	5d                   	pop    rbp
ffffffff800115d2:	c3                   	ret
ffffffff800115d3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800115da:	00 00 00 
ffffffff800115dd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800115e0 <fmt.formatValue__anon_3190>:
) !void {
ffffffff800115e0:	55                   	push   rbp
ffffffff800115e1:	48 89 e5             	mov    rbp,rsp
ffffffff800115e4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800115e8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff800115ec:	40 88 f0             	mov    al,sil
ffffffff800115ef:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff800115f2:	0f b6 f0             	movzx  esi,al
ffffffff800115f5:	e8 36 00 00 00       	call   ffffffff80011630 <fmt.formatIntValue__anon_3191>
ffffffff800115fa:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800115fe:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80011603:	75 0a                	jne    ffffffff8001160f <fmt.formatValue__anon_3190+0x2f>
ffffffff80011605:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80011609:	48 83 c4 10          	add    rsp,0x10
ffffffff8001160d:	5d                   	pop    rbp
ffffffff8001160e:	c3                   	ret
ffffffff8001160f:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80011613:	e8 f8 1d ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80011618:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001161c:	48 83 c4 10          	add    rsp,0x10
ffffffff80011620:	5d                   	pop    rbp
ffffffff80011621:	c3                   	ret
ffffffff80011622:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80011629:	00 00 00 
ffffffff8001162c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80011630 <fmt.formatIntValue__anon_3191>:
) !void {
ffffffff80011630:	55                   	push   rbp
ffffffff80011631:	48 89 e5             	mov    rbp,rsp
ffffffff80011634:	48 83 ec 10          	sub    rsp,0x10
ffffffff80011638:	49 89 c9             	mov    r9,rcx
ffffffff8001163b:	49 89 d0             	mov    r8,rdx
ffffffff8001163e:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80011642:	40 88 f0             	mov    al,sil
ffffffff80011645:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80011648:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
    return formatInt(int_value, radix, case, options, writer);
ffffffff8001164b:	31 c9                	xor    ecx,ecx
ffffffff8001164d:	0f b6 f0             	movzx  esi,al
ffffffff80011650:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80011655:	31 c9                	xor    ecx,ecx
ffffffff80011657:	e8 84 cd ff ff       	call   ffffffff8000e3e0 <fmt.formatInt__anon_3052>
ffffffff8001165c:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80011660:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80011665:	75 0a                	jne    ffffffff80011671 <fmt.formatIntValue__anon_3191+0x41>
ffffffff80011667:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001166b:	48 83 c4 10          	add    rsp,0x10
ffffffff8001166f:	5d                   	pop    rbp
ffffffff80011670:	c3                   	ret
ffffffff80011671:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80011675:	e8 96 1d ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001167a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001167e:	48 83 c4 10          	add    rsp,0x10
ffffffff80011682:	5d                   	pop    rbp
ffffffff80011683:	c3                   	ret
ffffffff80011684:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8001168b:	00 00 00 
ffffffff8001168e:	66 90                	xchg   ax,ax

ffffffff80011690 <ports.Port(u8).read>:
        pub fn read(self: Self) T {
ffffffff80011690:	55                   	push   rbp
ffffffff80011691:	48 89 e5             	mov    rbp,rsp
ffffffff80011694:	48 83 ec 01          	sub    rsp,0x1
                    : [port] "N{dx}" (self.port),
ffffffff80011698:	66 8b 17             	mov    dx,WORD PTR [rdi]
ffffffff8001169b:	ec                   	in     al,dx
ffffffff8001169c:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
            return switch (T) {
ffffffff8001169f:	8a 45 ff             	mov    al,BYTE PTR [rbp-0x1]
ffffffff800116a2:	48 83 c4 01          	add    rsp,0x1
ffffffff800116a6:	5d                   	pop    rbp
ffffffff800116a7:	c3                   	ret
ffffffff800116a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800116af:	00 

ffffffff800116b0 <fmt.format__anon_3248>:
) !void {
ffffffff800116b0:	55                   	push   rbp
ffffffff800116b1:	48 89 e5             	mov    rbp,rsp
ffffffff800116b4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800116b8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff800116bc:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800116c0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800116c4:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff800116c7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800116cb:	b0 01                	mov    al,0x1
ffffffff800116cd:	a8 01                	test   al,0x1
ffffffff800116cf:	75 02                	jne    ffffffff800116d3 <fmt.format__anon_3248+0x23>
ffffffff800116d1:	eb 02                	jmp    ffffffff800116d5 <fmt.format__anon_3248+0x25>
ffffffff800116d3:	eb 10                	jmp    ffffffff800116e5 <fmt.format__anon_3248+0x35>
ffffffff800116d5:	31 c0                	xor    eax,eax
ffffffff800116d7:	31 c0                	xor    eax,eax
ffffffff800116d9:	89 c7                	mov    edi,eax
ffffffff800116db:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff800116e0:	e8 2b ec fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800116e5:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800116e9:	48 c7 c2 9c b6 01 80 	mov    rdx,0xffffffff8001b69c
ffffffff800116f0:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff800116f4:	b9 1b 00 00 00       	mov    ecx,0x1b
ffffffff800116f9:	e8 12 01 00 00       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff800116fe:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
ffffffff80011702:	66 83 f8 00          	cmp    ax,0x0
ffffffff80011706:	74 13                	je     ffffffff8001171b <fmt.format__anon_3248+0x6b>
ffffffff80011708:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff8001170c:	e8 ff 1c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80011711:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
ffffffff80011715:	48 83 c4 40          	add    rsp,0x40
ffffffff80011719:	5d                   	pop    rbp
ffffffff8001171a:	c3                   	ret
ffffffff8001171b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff8001171f:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80011723:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80011727:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff8001172e:	00 
        try formatType(
ffffffff8001172f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff80011732:	48 c7 c2 98 aa 01 80 	mov    rdx,0xffffffff8001aa98
ffffffff80011739:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff8001173f:	e8 7c 02 00 00       	call   ffffffff800119c0 <fmt.formatType__anon_3282>
ffffffff80011744:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
ffffffff80011748:	66 83 f8 00          	cmp    ax,0x0
ffffffff8001174c:	74 13                	je     ffffffff80011761 <fmt.format__anon_3248+0xb1>
ffffffff8001174e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
        try formatType(
ffffffff80011752:	e8 b9 1c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80011757:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
ffffffff8001175b:	48 83 c4 40          	add    rsp,0x40
ffffffff8001175f:	5d                   	pop    rbp
ffffffff80011760:	c3                   	ret
ffffffff80011761:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80011765:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011768:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8001176c:	b0 01                	mov    al,0x1
ffffffff8001176e:	a8 01                	test   al,0x1
ffffffff80011770:	75 02                	jne    ffffffff80011774 <fmt.format__anon_3248+0xc4>
ffffffff80011772:	eb 02                	jmp    ffffffff80011776 <fmt.format__anon_3248+0xc6>
ffffffff80011774:	eb 0f                	jmp    ffffffff80011785 <fmt.format__anon_3248+0xd5>
ffffffff80011776:	bf 1e 00 00 00       	mov    edi,0x1e
ffffffff8001177b:	be 24 00 00 00       	mov    esi,0x24
ffffffff80011780:	e8 8b eb fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80011785:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80011789:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8001178d:	48 c7 c2 ba b6 01 80 	mov    rdx,0xffffffff8001b6ba
ffffffff80011794:	b9 06 00 00 00       	mov    ecx,0x6
ffffffff80011799:	e8 72 00 00 00       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff8001179e:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
ffffffff800117a2:	66 83 f8 00          	cmp    ax,0x0
ffffffff800117a6:	74 13                	je     ffffffff800117bb <fmt.format__anon_3248+0x10b>
ffffffff800117a8:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800117ac:	e8 5f 1c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800117b1:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
ffffffff800117b5:	48 83 c4 40          	add    rsp,0x40
ffffffff800117b9:	5d                   	pop    rbp
ffffffff800117ba:	c3                   	ret
ffffffff800117bb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff800117bf:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800117c3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800117c7:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
ffffffff800117ce:	00 
        try formatType(
ffffffff800117cf:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
            std.options.fmt_max_depth,
ffffffff800117d3:	48 c7 c2 28 ab 01 80 	mov    rdx,0xffffffff8001ab28
ffffffff800117da:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800117e0:	e8 db 01 00 00       	call   ffffffff800119c0 <fmt.formatType__anon_3282>
ffffffff800117e5:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
ffffffff800117e9:	66 83 f8 00          	cmp    ax,0x0
ffffffff800117ed:	74 13                	je     ffffffff80011802 <fmt.format__anon_3248+0x152>
ffffffff800117ef:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
        try formatType(
ffffffff800117f3:	e8 18 1c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800117f8:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
ffffffff800117fc:	48 83 c4 40          	add    rsp,0x40
ffffffff80011800:	5d                   	pop    rbp
ffffffff80011801:	c3                   	ret
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80011802:	31 c0                	xor    eax,eax
ffffffff80011804:	48 83 c4 40          	add    rsp,0x40
ffffffff80011808:	5d                   	pop    rbp
ffffffff80011809:	c3                   	ret
ffffffff8001180a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>:
        pub fn writeAll(self: Self, bytes: []const u8) Error!void {
ffffffff80011810:	55                   	push   rbp
ffffffff80011811:	48 89 e5             	mov    rbp,rsp
ffffffff80011814:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
ffffffff8001181b:	48 89 75 88          	mov    QWORD PTR [rbp-0x78],rsi
ffffffff8001181f:	48 89 7d 90          	mov    QWORD PTR [rbp-0x70],rdi
ffffffff80011823:	48 89 c8             	mov    rax,rcx
ffffffff80011826:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8001182a:	48 89 d0             	mov    rax,rdx
ffffffff8001182d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80011831:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff80011835:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
            var index: usize = 0;
ffffffff80011839:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80011840:	00 
ffffffff80011841:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
            while (index != bytes.len) {
ffffffff80011845:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80011849:	48 39 c8             	cmp    rax,rcx
ffffffff8001184c:	74 56                	je     ffffffff800118a4 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x94>
ffffffff8001184e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80011852:	48 8b 4d 98          	mov    rcx,QWORD PTR [rbp-0x68]
ffffffff80011856:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
                index += try self.write(bytes[index..]);
ffffffff8001185a:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffffffff8001185e:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff80011865:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff80011868:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff8001186c:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff80011870:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff80011874:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80011878:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8001187c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80011880:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80011887:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8001188b:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff8001188f:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
ffffffff80011896:	48 01 c2             	add    rdx,rax
ffffffff80011899:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
ffffffff8001189d:	48 39 c8             	cmp    rax,rcx
ffffffff800118a0:	76 07                	jbe    ffffffff800118a9 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x99>
ffffffff800118a2:	eb 07                	jmp    ffffffff800118ab <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x9b>
ffffffff800118a4:	e9 ff 00 00 00       	jmp    ffffffff800119a8 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x198>
ffffffff800118a9:	eb 13                	jmp    ffffffff800118be <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0xae>
ffffffff800118ab:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffffffff800118b2:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff800118b9:	e8 52 ea fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800118be:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff800118c5:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffffffff800118cc:	48 89 c1             	mov    rcx,rax
ffffffff800118cf:	48 29 d1             	sub    rcx,rdx
ffffffff800118d2:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
ffffffff800118d9:	48 39 c0             	cmp    rax,rax
ffffffff800118dc:	77 02                	ja     ffffffff800118e0 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0xd0>
ffffffff800118de:	eb 0f                	jmp    ffffffff800118ef <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0xdf>
ffffffff800118e0:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffffffff800118e7:	48 89 f7             	mov    rdi,rsi
ffffffff800118ea:	e8 e1 e8 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800118ef:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff800118f6:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffffffff800118fd:	48 39 c8             	cmp    rax,rcx
ffffffff80011900:	77 02                	ja     ffffffff80011904 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0xf4>
ffffffff80011902:	eb 13                	jmp    ffffffff80011917 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x107>
ffffffff80011904:	48 8b b5 78 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x88]
ffffffff8001190b:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80011912:	e8 b9 e8 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011917:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
ffffffff8001191b:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
ffffffff8001191f:	4c 8b 85 60 ff ff ff 	mov    r8,QWORD PTR [rbp-0xa0]
ffffffff80011926:	48 8d 7d e0          	lea    rdi,[rbp-0x20]
ffffffff8001192a:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
ffffffff8001192e:	e8 8d 1f 00 00       	call   ffffffff800138c0 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write>
ffffffff80011933:	66 83 7d e8 00       	cmp    WORD PTR [rbp-0x18],0x0
ffffffff80011938:	74 24                	je     ffffffff8001195e <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x14e>
ffffffff8001193a:	48 8b 7d 90          	mov    rdi,QWORD PTR [rbp-0x70]
ffffffff8001193e:	66 8b 45 e8          	mov    ax,WORD PTR [rbp-0x18]
ffffffff80011942:	66 89 85 5e ff ff ff 	mov    WORD PTR [rbp-0xa2],ax
ffffffff80011949:	e8 c2 1a ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001194e:	66 8b 85 5e ff ff ff 	mov    ax,WORD PTR [rbp-0xa2]
ffffffff80011955:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
ffffffff8001195c:	5d                   	pop    rbp
ffffffff8001195d:	c3                   	ret
ffffffff8001195e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80011965:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff80011969:	48 01 c8             	add    rax,rcx
ffffffff8001196c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80011970:	0f 92 45 f8          	setb   BYTE PTR [rbp-0x8]
ffffffff80011974:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff80011977:	84 c0                	test   al,al
ffffffff80011979:	75 04                	jne    ffffffff8001197f <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x16f>
ffffffff8001197b:	eb 00                	jmp    ffffffff8001197d <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x16d>
ffffffff8001197d:	eb 1c                	jmp    ffffffff8001199b <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x18b>
ffffffff8001197f:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80011986:	48 c7 c1 a8 c4 01 80 	mov    rcx,0xffffffff8001c4a8
ffffffff8001198d:	31 c0                	xor    eax,eax
ffffffff8001198f:	89 c2                	mov    edx,eax
ffffffff80011991:	be 10 00 00 00       	mov    esi,0x10
ffffffff80011996:	e8 15 e8 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001199b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8001199f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800119a3:	e9 99 fe ff ff       	jmp    ffffffff80011841 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll+0x31>
ffffffff800119a8:	31 c0                	xor    eax,eax
ffffffff800119aa:	48 81 c4 b0 00 00 00 	add    rsp,0xb0
ffffffff800119b1:	5d                   	pop    rbp
ffffffff800119b2:	c3                   	ret
ffffffff800119b3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800119ba:	00 00 00 
ffffffff800119bd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800119c0 <fmt.formatType__anon_3282>:
) @TypeOf(writer).Error!void {
ffffffff800119c0:	55                   	push   rbp
ffffffff800119c1:	48 89 e5             	mov    rbp,rsp
ffffffff800119c4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800119c8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800119cc:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff800119d0:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff800119d4:	48 c7 45 f0 01 00 00 	mov    QWORD PTR [rbp-0x10],0x1
ffffffff800119db:	00 
ffffffff800119dc:	48 c7 45 e8 31 aa 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001aa31
ffffffff800119e3:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff800119e4:	e8 57 1f 00 00       	call   ffffffff80013940 <fmt.formatValue__anon_3443>
ffffffff800119e9:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800119ed:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800119f2:	75 0a                	jne    ffffffff800119fe <fmt.formatType__anon_3282+0x3e>
ffffffff800119f4:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800119f8:	48 83 c4 30          	add    rsp,0x30
ffffffff800119fc:	5d                   	pop    rbp
ffffffff800119fd:	c3                   	ret
ffffffff800119fe:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80011a02:	e8 09 1a ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80011a07:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80011a0b:	48 83 c4 30          	add    rsp,0x30
ffffffff80011a0f:	5d                   	pop    rbp
ffffffff80011a10:	c3                   	ret
ffffffff80011a11:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80011a18:	00 00 00 
ffffffff80011a1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80011a20 <io.fixed_buffer_stream.fixedBufferStream__anon_3211>:
            self.pos = 0;
        }
    };
}

pub fn fixedBufferStream(buffer: anytype) FixedBufferStream(Slice(@TypeOf(buffer))) {
ffffffff80011a20:	55                   	push   rbp
ffffffff80011a21:	48 89 e5             	mov    rbp,rsp
ffffffff80011a24:	48 83 ec 10          	sub    rsp,0x10
ffffffff80011a28:	48 89 f8             	mov    rax,rdi
ffffffff80011a2b:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80011a2f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return .{ .buffer = buffer, .pos = 0 };
ffffffff80011a33:	48 89 57 08          	mov    QWORD PTR [rdi+0x8],rdx
ffffffff80011a37:	48 89 37             	mov    QWORD PTR [rdi],rsi
ffffffff80011a3a:	48 c7 47 10 00 00 00 	mov    QWORD PTR [rdi+0x10],0x0
ffffffff80011a41:	00 
ffffffff80011a42:	48 83 c4 10          	add    rsp,0x10
ffffffff80011a46:	5d                   	pop    rbp
ffffffff80011a47:	c3                   	ret
ffffffff80011a48:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80011a4f:	00 

ffffffff80011a50 <io.fixed_buffer_stream.FixedBufferStream([]u8).writer>:
        pub fn writer(self: *Self) Writer {
ffffffff80011a50:	55                   	push   rbp
ffffffff80011a51:	48 89 e5             	mov    rbp,rsp
ffffffff80011a54:	50                   	push   rax
ffffffff80011a55:	48 89 f8             	mov    rax,rdi
ffffffff80011a58:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
            return .{ .context = self };
ffffffff80011a5c:	48 89 37             	mov    QWORD PTR [rdi],rsi
ffffffff80011a5f:	48 83 c4 08          	add    rsp,0x8
ffffffff80011a63:	5d                   	pop    rbp
ffffffff80011a64:	c3                   	ret
ffffffff80011a65:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80011a6c:	00 00 00 
ffffffff80011a6f:	90                   	nop

ffffffff80011a70 <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten>:
        pub fn getWritten(self: Self) Buffer {
ffffffff80011a70:	55                   	push   rbp
ffffffff80011a71:	48 89 e5             	mov    rbp,rsp
ffffffff80011a74:	48 83 ec 30          	sub    rsp,0x30
            return self.buffer[0..self.pos];
ffffffff80011a78:	48 8b 47 10          	mov    rax,QWORD PTR [rdi+0x10]
ffffffff80011a7c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80011a80:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80011a83:	48 8b 4f 08          	mov    rcx,QWORD PTR [rdi+0x8]
ffffffff80011a87:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80011a8b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80011a8f:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
ffffffff80011a93:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffffffff80011a97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80011a9b:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80011a9f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80011aa3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80011aa7:	31 c0                	xor    eax,eax
ffffffff80011aa9:	48 39 c8             	cmp    rax,rcx
ffffffff80011aac:	77 02                	ja     ffffffff80011ab0 <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten+0x40>
ffffffff80011aae:	eb 0f                	jmp    ffffffff80011abf <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten+0x4f>
ffffffff80011ab0:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffffffff80011ab4:	31 c0                	xor    eax,eax
ffffffff80011ab6:	31 c0                	xor    eax,eax
ffffffff80011ab8:	89 c7                	mov    edi,eax
ffffffff80011aba:	e8 51 e8 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80011abf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80011ac3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff80011ac7:	48 39 c8             	cmp    rax,rcx
ffffffff80011aca:	77 02                	ja     ffffffff80011ace <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten+0x5e>
ffffffff80011acc:	eb 0d                	jmp    ffffffff80011adb <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten+0x6b>
ffffffff80011ace:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffffffff80011ad2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80011ad6:	e8 f5 e6 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011adb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff80011adf:	31 c0                	xor    eax,eax
ffffffff80011ae1:	48 39 c8             	cmp    rax,rcx
ffffffff80011ae4:	77 02                	ja     ffffffff80011ae8 <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten+0x78>
ffffffff80011ae6:	eb 0f                	jmp    ffffffff80011af7 <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten+0x87>
ffffffff80011ae8:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
ffffffff80011aec:	31 c0                	xor    eax,eax
ffffffff80011aee:	31 c0                	xor    eax,eax
ffffffff80011af0:	89 c7                	mov    edi,eax
ffffffff80011af2:	e8 d9 e6 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80011af7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80011afb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80011aff:	48 83 c4 30          	add    rsp,0x30
ffffffff80011b03:	5d                   	pop    rbp
ffffffff80011b04:	c3                   	ret
ffffffff80011b05:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80011b0c:	00 00 00 
ffffffff80011b0f:	90                   	nop

ffffffff80011b10 <fmt.formatType__anon_3295>:
) @TypeOf(writer).Error!void {
ffffffff80011b10:	55                   	push   rbp
ffffffff80011b11:	48 89 e5             	mov    rbp,rsp
ffffffff80011b14:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffffffff80011b1b:	4c 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],r8
ffffffff80011b22:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
ffffffff80011b29:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
ffffffff80011b30:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
ffffffff80011b37:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
ffffffff80011b3e:	4c 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],r8
ffffffff80011b45:	48 b8 aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaaa
ffffffff80011b4c:	aa aa aa 
    const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))
ffffffff80011b4f:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80011b56:	48 c7 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],0x0
ffffffff80011b5d:	00 00 00 00 
            try writer.writeAll(@typeName(T));
ffffffff80011b61:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff80011b64:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff80011b6b:	8b 41 08             	mov    eax,DWORD PTR [rcx+0x8]
ffffffff80011b6e:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
ffffffff80011b74:	48 c7 c2 e8 b7 01 80 	mov    rdx,0xffffffff8001b7e8
ffffffff80011b7b:	48 8d b5 30 ff ff ff 	lea    rsi,[rbp-0xd0]
ffffffff80011b82:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff80011b87:	e8 c4 e7 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011b8c:	4c 8b 85 10 ff ff ff 	mov    r8,QWORD PTR [rbp-0xf0]
            if (max_depth == 0) {
ffffffff80011b93:	49 83 f8 00          	cmp    r8,0x0
ffffffff80011b97:	75 48                	jne    ffffffff80011be1 <fmt.formatType__anon_3295+0xd1>
ffffffff80011b99:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011ba0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                return writer.writeAll("{ ... }");
ffffffff80011ba7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80011baa:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
ffffffff80011bb1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80011bb4:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
ffffffff80011bba:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80011bc1:	48 8d b5 40 ff ff ff 	lea    rsi,[rbp-0xc0]
ffffffff80011bc8:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80011bcd:	e8 7e e7 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011bd2:	66 89 85 3e ff ff ff 	mov    WORD PTR [rbp-0xc2],ax
ffffffff80011bd9:	b0 01                	mov    al,0x1
ffffffff80011bdb:	a8 01                	test   al,0x1
ffffffff80011bdd:	75 04                	jne    ffffffff80011be3 <fmt.formatType__anon_3295+0xd3>
ffffffff80011bdf:	eb 12                	jmp    ffffffff80011bf3 <fmt.formatType__anon_3295+0xe3>
ffffffff80011be1:	eb 2c                	jmp    ffffffff80011c0f <fmt.formatType__anon_3295+0xff>
ffffffff80011be3:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
ffffffff80011bea:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff80011bf1:	5d                   	pop    rbp
ffffffff80011bf2:	c3                   	ret
ffffffff80011bf3:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011bfa:	e8 11 18 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80011bff:	66 8b 85 3e ff ff ff 	mov    ax,WORD PTR [rbp-0xc2]
ffffffff80011c06:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff80011c0d:	5d                   	pop    rbp
ffffffff80011c0e:	c3                   	ret
ffffffff80011c0f:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011c16:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
            try writer.writeAll("{");
ffffffff80011c1d:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80011c20:	89 8d 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],ecx
ffffffff80011c26:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011c29:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff80011c30:	48 c7 c2 e1 b3 01 80 	mov    rdx,0xffffffff8001b3e1
ffffffff80011c37:	48 8d b5 50 ff ff ff 	lea    rsi,[rbp-0xb0]
ffffffff80011c3e:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80011c43:	e8 08 e7 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011c48:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011c4f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
            inline for (info.fields, 0..) |f, i| {
ffffffff80011c56:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
ffffffff80011c5d:	00 00 00 00 
                    try writer.writeAll(" .");
ffffffff80011c61:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80011c64:	89 8d 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],ecx
ffffffff80011c6a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011c6d:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff80011c74:	48 c7 c2 ed b3 01 80 	mov    rdx,0xffffffff8001b3ed
ffffffff80011c7b:	48 8d b5 68 ff ff ff 	lea    rsi,[rbp-0x98]
ffffffff80011c82:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80011c87:	e8 c4 e6 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011c8c:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011c93:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(f.name);
ffffffff80011c9a:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80011c9d:	89 4d 80             	mov    DWORD PTR [rbp-0x80],ecx
ffffffff80011ca0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011ca3:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80011caa:	48 c7 c2 f2 b7 01 80 	mov    rdx,0xffffffff8001b7f2
ffffffff80011cb1:	48 8d b5 78 ff ff ff 	lea    rsi,[rbp-0x88]
ffffffff80011cb8:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80011cbd:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
ffffffff80011cc4:	e8 87 e6 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011cc9:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011cd0:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff80011cd7:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(" = ");
ffffffff80011cde:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80011ce1:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
ffffffff80011ce4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011ce7:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80011ceb:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80011cf2:	48 8d 75 88          	lea    rsi,[rbp-0x78]
ffffffff80011cf6:	e8 55 e6 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011cfb:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
ffffffff80011d02:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80011d09:	48 8b 09             	mov    rcx,QWORD PTR [rcx]
ffffffff80011d0c:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
ffffffff80011d13:	48 83 e8 01          	sub    rax,0x1
ffffffff80011d17:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80011d1b:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80011d1f:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80011d22:	84 c0                	test   al,al
ffffffff80011d24:	75 04                	jne    ffffffff80011d2a <fmt.formatType__anon_3295+0x21a>
ffffffff80011d26:	eb 00                	jmp    ffffffff80011d28 <fmt.formatType__anon_3295+0x218>
ffffffff80011d28:	eb 1c                	jmp    ffffffff80011d46 <fmt.formatType__anon_3295+0x236>
ffffffff80011d2a:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80011d31:	48 c7 c1 78 c5 01 80 	mov    rcx,0xffffffff8001c578
ffffffff80011d38:	31 c0                	xor    eax,eax
ffffffff80011d3a:	89 c2                	mov    edx,eax
ffffffff80011d3c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80011d41:	e8 6a e4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80011d46:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011d4d:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff80011d54:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
ffffffff80011d5b:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
ffffffff80011d62:	4c 8b 45 98          	mov    r8,QWORD PTR [rbp-0x68]
ffffffff80011d66:	e8 95 2b 00 00       	call   ffffffff80014900 <fmt.formatType__anon_3462>
ffffffff80011d6b:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011d72:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80011d79:	48 c7 45 a8 01 00 00 	mov    QWORD PTR [rbp-0x58],0x1
ffffffff80011d80:	00 
                    try writer.writeAll(", .");
ffffffff80011d81:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80011d84:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
ffffffff80011d87:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011d8a:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80011d8e:	48 c7 c2 fb b3 01 80 	mov    rdx,0xffffffff8001b3fb
ffffffff80011d95:	48 8d 75 b0          	lea    rsi,[rbp-0x50]
ffffffff80011d99:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80011d9e:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
ffffffff80011da5:	e8 a6 e5 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011daa:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011db1:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(f.name);
ffffffff80011db8:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
ffffffff80011dbb:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
ffffffff80011dbe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011dc1:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80011dc5:	48 c7 c2 f6 b7 01 80 	mov    rdx,0xffffffff8001b7f6
ffffffff80011dcc:	48 8d 75 c0          	lea    rsi,[rbp-0x40]
ffffffff80011dd0:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80011dd5:	e8 76 e5 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011dda:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011de1:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff80011de8:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
                try writer.writeAll(" = ");
ffffffff80011def:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80011df2:	89 55 d8             	mov    DWORD PTR [rbp-0x28],edx
ffffffff80011df5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80011df8:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80011dfc:	48 c7 c2 f0 b3 01 80 	mov    rdx,0xffffffff8001b3f0
ffffffff80011e03:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff80011e07:	e8 44 e5 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011e0c:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
ffffffff80011e13:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
                try formatType(@field(value, f.name), ANY, options, writer, max_depth - 1);
ffffffff80011e1a:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80011e1e:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
ffffffff80011e25:	48 83 e8 01          	sub    rax,0x1
ffffffff80011e29:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80011e2d:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff80011e31:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff80011e34:	84 c0                	test   al,al
ffffffff80011e36:	75 04                	jne    ffffffff80011e3c <fmt.formatType__anon_3295+0x32c>
ffffffff80011e38:	eb 00                	jmp    ffffffff80011e3a <fmt.formatType__anon_3295+0x32a>
ffffffff80011e3a:	eb 1c                	jmp    ffffffff80011e58 <fmt.formatType__anon_3295+0x348>
ffffffff80011e3c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80011e43:	48 c7 c1 88 c5 01 80 	mov    rcx,0xffffffff8001c588
ffffffff80011e4a:	31 c0                	xor    eax,eax
ffffffff80011e4c:	89 c2                	mov    edx,eax
ffffffff80011e4e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80011e53:	e8 58 e3 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80011e58:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011e5f:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff80011e66:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
ffffffff80011e6d:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
ffffffff80011e74:	4c 8b 45 e0          	mov    r8,QWORD PTR [rbp-0x20]
ffffffff80011e78:	e8 e3 2a 00 00       	call   ffffffff80014960 <fmt.formatType__anon_3463>
ffffffff80011e7d:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80011e84:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
            try writer.writeAll(" }");
ffffffff80011e8b:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80011e8e:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80011e92:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80011e95:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80011e98:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff80011e9f:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80011ea3:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80011ea8:	e8 a3 e4 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80011ead:	31 c0                	xor    eax,eax
ffffffff80011eaf:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff80011eb6:	5d                   	pop    rbp
ffffffff80011eb7:	c3                   	ret
ffffffff80011eb8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80011ebf:	00 

ffffffff80011ec0 <fmt.formatValue__anon_3297>:
) !void {
ffffffff80011ec0:	55                   	push   rbp
ffffffff80011ec1:	48 89 e5             	mov    rbp,rsp
ffffffff80011ec4:	48 83 ec 10          	sub    rsp,0x10
ffffffff80011ec8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80011ecc:	66 89 f0             	mov    ax,si
ffffffff80011ecf:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80011ed3:	66 89 c6             	mov    si,ax
ffffffff80011ed6:	e8 35 00 00 00       	call   ffffffff80011f10 <fmt.formatIntValue__anon_3298>
ffffffff80011edb:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80011edf:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80011ee4:	75 0a                	jne    ffffffff80011ef0 <fmt.formatValue__anon_3297+0x30>
ffffffff80011ee6:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80011eea:	48 83 c4 10          	add    rsp,0x10
ffffffff80011eee:	5d                   	pop    rbp
ffffffff80011eef:	c3                   	ret
ffffffff80011ef0:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80011ef4:	e8 17 15 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80011ef9:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80011efd:	48 83 c4 10          	add    rsp,0x10
ffffffff80011f01:	5d                   	pop    rbp
ffffffff80011f02:	c3                   	ret
ffffffff80011f03:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80011f0a:	00 00 00 
ffffffff80011f0d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80011f10 <fmt.formatIntValue__anon_3298>:
) !void {
ffffffff80011f10:	55                   	push   rbp
ffffffff80011f11:	48 89 e5             	mov    rbp,rsp
ffffffff80011f14:	48 83 ec 10          	sub    rsp,0x10
ffffffff80011f18:	49 89 c9             	mov    r9,rcx
ffffffff80011f1b:	49 89 d0             	mov    r8,rdx
ffffffff80011f1e:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80011f22:	66 89 f0             	mov    ax,si
ffffffff80011f25:	66 89 45 fa          	mov    WORD PTR [rbp-0x6],ax
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80011f29:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
    return formatInt(int_value, radix, case, options, writer);
ffffffff80011f2d:	31 c9                	xor    ecx,ecx
ffffffff80011f2f:	66 89 c6             	mov    si,ax
ffffffff80011f32:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80011f37:	31 c9                	xor    ecx,ecx
ffffffff80011f39:	e8 32 00 00 00       	call   ffffffff80011f70 <fmt.formatInt__anon_3301>
ffffffff80011f3e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80011f42:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80011f47:	75 0a                	jne    ffffffff80011f53 <fmt.formatIntValue__anon_3298+0x43>
ffffffff80011f49:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80011f4d:	48 83 c4 10          	add    rsp,0x10
ffffffff80011f51:	5d                   	pop    rbp
ffffffff80011f52:	c3                   	ret
ffffffff80011f53:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80011f57:	e8 b4 14 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80011f5c:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80011f60:	48 83 c4 10          	add    rsp,0x10
ffffffff80011f64:	5d                   	pop    rbp
ffffffff80011f65:	c3                   	ret
ffffffff80011f66:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80011f6d:	00 00 00 

ffffffff80011f70 <fmt.formatInt__anon_3301>:
) !void {
ffffffff80011f70:	55                   	push   rbp
ffffffff80011f71:	48 89 e5             	mov    rbp,rsp
ffffffff80011f74:	48 81 ec 80 01 00 00 	sub    rsp,0x180
ffffffff80011f7b:	4c 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],r9
ffffffff80011f82:	4c 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],r8
ffffffff80011f89:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
ffffffff80011f90:	88 8d 41 ff ff ff    	mov    BYTE PTR [rbp-0xbf],cl
ffffffff80011f96:	88 d0                	mov    al,dl
ffffffff80011f98:	88 85 45 ff ff ff    	mov    BYTE PTR [rbp-0xbb],al
ffffffff80011f9e:	66 89 f2             	mov    dx,si
ffffffff80011fa1:	66 89 95 42 ff ff ff 	mov    WORD PTR [rbp-0xbe],dx
ffffffff80011fa8:	66 89 95 46 ff ff ff 	mov    WORD PTR [rbp-0xba],dx
ffffffff80011faf:	88 85 48 ff ff ff    	mov    BYTE PTR [rbp-0xb8],al
ffffffff80011fb5:	80 e1 01             	and    cl,0x1
ffffffff80011fb8:	88 8d 49 ff ff ff    	mov    BYTE PTR [rbp-0xb7],cl
    assert(base >= 2);
ffffffff80011fbe:	3c 02                	cmp    al,0x2
ffffffff80011fc0:	0f 93 c0             	setae  al
ffffffff80011fc3:	0f b6 f8             	movzx  edi,al
ffffffff80011fc6:	e8 65 3c ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80011fcb:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [rbp-0xbe]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80011fd2:	66 89 85 4a ff ff ff 	mov    WORD PTR [rbp-0xb6],ax
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80011fd9:	66 c7 85 4c ff ff ff 	mov    WORD PTR [rbp-0xb4],0x10
ffffffff80011fe0:	10 00 
    const abs_value = math.absCast(int_value);
ffffffff80011fe2:	66 89 c7             	mov    di,ax
ffffffff80011fe5:	e8 16 07 00 00       	call   ffffffff80012700 <math.absCast__anon_3303>
ffffffff80011fea:	66 89 c1             	mov    cx,ax
ffffffff80011fed:	8a 85 45 ff ff ff    	mov    al,BYTE PTR [rbp-0xbb]
ffffffff80011ff3:	66 89 8d 4e ff ff ff 	mov    WORD PTR [rbp-0xb2],cx
ffffffff80011ffa:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff80012001:	aa aa aa 
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80012004:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffffffff8001200b:	48 89 95 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdx
ffffffff80012012:	c6 85 60 ff ff ff aa 	mov    BYTE PTR [rbp-0xa0],0xaa
    var a: MinInt = abs_value;
ffffffff80012019:	66 89 8d 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],cx
    var index: usize = buf.len;
ffffffff80012020:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x11
ffffffff80012027:	11 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff8001202b:	3c 0a                	cmp    al,0xa
ffffffff8001202d:	75 0f                	jne    ffffffff8001203e <fmt.formatInt__anon_3301+0xce>
ffffffff8001202f:	e8 5c 51 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80012034:	34 ff                	xor    al,0xff
ffffffff80012036:	88 85 27 ff ff ff    	mov    BYTE PTR [rbp-0xd9],al
ffffffff8001203c:	eb 0a                	jmp    ffffffff80012048 <fmt.formatInt__anon_3301+0xd8>
ffffffff8001203e:	31 c0                	xor    eax,eax
ffffffff80012040:	88 85 27 ff ff ff    	mov    BYTE PTR [rbp-0xd9],al
ffffffff80012046:	eb 00                	jmp    ffffffff80012048 <fmt.formatInt__anon_3301+0xd8>
ffffffff80012048:	8a 85 27 ff ff ff    	mov    al,BYTE PTR [rbp-0xd9]
ffffffff8001204e:	a8 01                	test   al,0x1
ffffffff80012050:	75 02                	jne    ffffffff80012054 <fmt.formatInt__anon_3301+0xe4>
ffffffff80012052:	eb 02                	jmp    ffffffff80012056 <fmt.formatInt__anon_3301+0xe6>
ffffffff80012054:	eb 05                	jmp    ffffffff8001205b <fmt.formatInt__anon_3301+0xeb>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80012056:	e9 06 04 00 00       	jmp    ffffffff80012461 <fmt.formatInt__anon_3301+0x4f1>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8001205b:	66 83 bd 66 ff ff ff 	cmp    WORD PTR [rbp-0x9a],0x64
ffffffff80012062:	64 
ffffffff80012063:	72 25                	jb     ffffffff8001208a <fmt.formatInt__anon_3301+0x11a>
            index -= 2;
ffffffff80012065:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001206c:	48 83 e8 02          	sub    rax,0x2
ffffffff80012070:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80012077:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff8001207e:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff80012084:	84 c0                	test   al,al
ffffffff80012086:	74 07                	je     ffffffff8001208f <fmt.formatInt__anon_3301+0x11f>
ffffffff80012088:	eb 07                	jmp    ffffffff80012091 <fmt.formatInt__anon_3301+0x121>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8001208a:	e9 63 01 00 00       	jmp    ffffffff800121f2 <fmt.formatInt__anon_3301+0x282>
            index -= 2;
ffffffff8001208f:	eb 1c                	jmp    ffffffff800120ad <fmt.formatInt__anon_3301+0x13d>
ffffffff80012091:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80012098:	48 c7 c1 68 c2 01 80 	mov    rcx,0xffffffff8001c268
ffffffff8001209f:	31 c0                	xor    eax,eax
ffffffff800120a1:	89 c2                	mov    edx,eax
ffffffff800120a3:	be 10 00 00 00       	mov    esi,0x10
ffffffff800120a8:	e8 03 e1 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800120ad:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff800120b4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff800120bb:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800120c2:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff800120c9:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
ffffffff800120d0:	48 01 c1             	add    rcx,rax
ffffffff800120d3:	48 89 8d 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rcx
ffffffff800120da:	48 83 f8 11          	cmp    rax,0x11
ffffffff800120de:	77 02                	ja     ffffffff800120e2 <fmt.formatInt__anon_3301+0x172>
ffffffff800120e0:	eb 11                	jmp    ffffffff800120f3 <fmt.formatInt__anon_3301+0x183>
ffffffff800120e2:	48 8b bd 10 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf0]
ffffffff800120e9:	be 11 00 00 00       	mov    esi,0x11
ffffffff800120ee:	e8 1d e2 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800120f3:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff800120fa:	b8 11 00 00 00       	mov    eax,0x11
ffffffff800120ff:	48 29 c8             	sub    rax,rcx
ffffffff80012102:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80012109:	b0 01                	mov    al,0x1
ffffffff8001210b:	a8 01                	test   al,0x1
ffffffff8001210d:	75 02                	jne    ffffffff80012111 <fmt.formatInt__anon_3301+0x1a1>
ffffffff8001210f:	eb 02                	jmp    ffffffff80012113 <fmt.formatInt__anon_3301+0x1a3>
ffffffff80012111:	eb 0d                	jmp    ffffffff80012120 <fmt.formatInt__anon_3301+0x1b0>
ffffffff80012113:	be 11 00 00 00       	mov    esi,0x11
ffffffff80012118:	48 89 f7             	mov    rdi,rsi
ffffffff8001211b:	e8 b0 e0 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80012120:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff80012127:	48 83 f8 11          	cmp    rax,0x11
ffffffff8001212b:	77 02                	ja     ffffffff8001212f <fmt.formatInt__anon_3301+0x1bf>
ffffffff8001212d:	eb 11                	jmp    ffffffff80012140 <fmt.formatInt__anon_3301+0x1d0>
ffffffff8001212f:	48 8b bd 10 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf0]
ffffffff80012136:	be 11 00 00 00       	mov    esi,0x11
ffffffff8001213b:	e8 90 e0 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80012140:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffffffff80012147:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
ffffffff8001214e:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff80012152:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80012156:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff8001215a:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80012161:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80012165:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff8001216c:	b0 01                	mov    al,0x1
ffffffff8001216e:	a8 01                	test   al,0x1
ffffffff80012170:	75 02                	jne    ffffffff80012174 <fmt.formatInt__anon_3301+0x204>
ffffffff80012172:	eb 02                	jmp    ffffffff80012176 <fmt.formatInt__anon_3301+0x206>
ffffffff80012174:	eb 10                	jmp    ffffffff80012186 <fmt.formatInt__anon_3301+0x216>
ffffffff80012176:	31 c0                	xor    eax,eax
ffffffff80012178:	31 c0                	xor    eax,eax
ffffffff8001217a:	89 c7                	mov    edi,eax
ffffffff8001217c:	be 02 00 00 00       	mov    esi,0x2
ffffffff80012181:	e8 8a e1 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012186:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
ffffffff8001218d:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80012192:	48 39 c8             	cmp    rax,rcx
ffffffff80012195:	77 02                	ja     ffffffff80012199 <fmt.formatInt__anon_3301+0x229>
ffffffff80012197:	eb 11                	jmp    ffffffff800121aa <fmt.formatInt__anon_3301+0x23a>
ffffffff80012199:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
ffffffff800121a0:	bf 02 00 00 00       	mov    edi,0x2
ffffffff800121a5:	e8 26 e0 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800121aa:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
ffffffff800121b1:	66 b9 64 00          	mov    cx,0x64
ffffffff800121b5:	31 d2                	xor    edx,edx
ffffffff800121b7:	66 f7 f1             	div    cx
ffffffff800121ba:	0f b7 c2             	movzx  eax,dx
ffffffff800121bd:	89 c6                	mov    esi,eax
ffffffff800121bf:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff800121c3:	e8 e8 4f ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff800121c8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff800121cf:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff800121d3:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff800121d6:	66 8b 85 66 ff ff ff 	mov    ax,WORD PTR [rbp-0x9a]
ffffffff800121dd:	66 b9 64 00          	mov    cx,0x64
ffffffff800121e1:	31 d2                	xor    edx,edx
ffffffff800121e3:	66 f7 f1             	div    cx
ffffffff800121e6:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
ffffffff800121ed:	e9 69 fe ff ff       	jmp    ffffffff8001205b <fmt.formatInt__anon_3301+0xeb>
        if (a < 10) {
ffffffff800121f2:	66 83 bd 66 ff ff ff 	cmp    WORD PTR [rbp-0x9a],0xa
ffffffff800121f9:	0a 
ffffffff800121fa:	73 1c                	jae    ffffffff80012218 <fmt.formatInt__anon_3301+0x2a8>
            index -= 1;
ffffffff800121fc:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80012203:	48 83 e8 01          	sub    rax,0x1
ffffffff80012207:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff8001220b:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff8001220f:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80012212:	84 c0                	test   al,al
ffffffff80012214:	74 25                	je     ffffffff8001223b <fmt.formatInt__anon_3301+0x2cb>
ffffffff80012216:	eb 25                	jmp    ffffffff8001223d <fmt.formatInt__anon_3301+0x2cd>
            index -= 2;
ffffffff80012218:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001221f:	48 83 e8 02          	sub    rax,0x2
ffffffff80012223:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80012227:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff8001222b:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff8001222e:	84 c0                	test   al,al
ffffffff80012230:	0f 84 ee 00 00 00    	je     ffffffff80012324 <fmt.formatInt__anon_3301+0x3b4>
ffffffff80012236:	e9 eb 00 00 00       	jmp    ffffffff80012326 <fmt.formatInt__anon_3301+0x3b6>
            index -= 1;
ffffffff8001223b:	eb 1c                	jmp    ffffffff80012259 <fmt.formatInt__anon_3301+0x2e9>
ffffffff8001223d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80012244:	48 c7 c1 78 c2 01 80 	mov    rcx,0xffffffff8001c278
ffffffff8001224b:	31 c0                	xor    eax,eax
ffffffff8001224d:	89 c2                	mov    edx,eax
ffffffff8001224f:	be 10 00 00 00       	mov    esi,0x10
ffffffff80012254:	e8 57 df fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80012259:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff8001225d:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80012264:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001226b:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff80012272:	48 83 f8 11          	cmp    rax,0x11
ffffffff80012276:	73 02                	jae    ffffffff8001227a <fmt.formatInt__anon_3301+0x30a>
ffffffff80012278:	eb 11                	jmp    ffffffff8001228b <fmt.formatInt__anon_3301+0x31b>
ffffffff8001227a:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
ffffffff80012281:	be 11 00 00 00       	mov    esi,0x11
ffffffff80012286:	e8 45 df fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001228b:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff80012292:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffffffff80012299:	48 01 c8             	add    rax,rcx
ffffffff8001229c:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff800122a3:	66 8b 8d 66 ff ff ff 	mov    cx,WORD PTR [rbp-0x9a]
ffffffff800122aa:	66 89 8d ee fe ff ff 	mov    WORD PTR [rbp-0x112],cx
ffffffff800122b1:	66 b8 ff 00          	mov    ax,0xff
ffffffff800122b5:	66 29 c8             	sub    ax,cx
ffffffff800122b8:	66 3d ff 00          	cmp    ax,0xff
ffffffff800122bc:	77 02                	ja     ffffffff800122c0 <fmt.formatInt__anon_3301+0x350>
ffffffff800122be:	eb 1c                	jmp    ffffffff800122dc <fmt.formatInt__anon_3301+0x36c>
ffffffff800122c0:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff800122c7:	48 c7 c1 88 c2 01 80 	mov    rcx,0xffffffff8001c288
ffffffff800122ce:	31 c0                	xor    eax,eax
ffffffff800122d0:	89 c2                	mov    edx,eax
ffffffff800122d2:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff800122d7:	e8 d4 de fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800122dc:	66 8b 85 ee fe ff ff 	mov    ax,WORD PTR [rbp-0x112]
ffffffff800122e3:	04 30                	add    al,0x30
ffffffff800122e5:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff800122e8:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff800122ec:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff800122ef:	84 c0                	test   al,al
ffffffff800122f1:	75 04                	jne    ffffffff800122f7 <fmt.formatInt__anon_3301+0x387>
ffffffff800122f3:	eb 00                	jmp    ffffffff800122f5 <fmt.formatInt__anon_3301+0x385>
ffffffff800122f5:	eb 1c                	jmp    ffffffff80012313 <fmt.formatInt__anon_3301+0x3a3>
ffffffff800122f7:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800122fe:	48 c7 c1 98 c2 01 80 	mov    rcx,0xffffffff8001c298
ffffffff80012305:	31 c0                	xor    eax,eax
ffffffff80012307:	89 c2                	mov    edx,eax
ffffffff80012309:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001230e:	e8 9d de fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80012313:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffffffff8001231a:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff8001231d:	88 08                	mov    BYTE PTR [rax],cl
ffffffff8001231f:	e9 38 01 00 00       	jmp    ffffffff8001245c <fmt.formatInt__anon_3301+0x4ec>
            index -= 2;
ffffffff80012324:	eb 1c                	jmp    ffffffff80012342 <fmt.formatInt__anon_3301+0x3d2>
ffffffff80012326:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001232d:	48 c7 c1 a8 c2 01 80 	mov    rcx,0xffffffff8001c2a8
ffffffff80012334:	31 c0                	xor    eax,eax
ffffffff80012336:	89 c2                	mov    edx,eax
ffffffff80012338:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001233d:	e8 6e de fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80012342:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80012346:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff8001234d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80012354:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
ffffffff8001235b:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
ffffffff80012362:	48 01 c1             	add    rcx,rax
ffffffff80012365:	48 89 8d d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rcx
ffffffff8001236c:	48 83 f8 11          	cmp    rax,0x11
ffffffff80012370:	77 02                	ja     ffffffff80012374 <fmt.formatInt__anon_3301+0x404>
ffffffff80012372:	eb 11                	jmp    ffffffff80012385 <fmt.formatInt__anon_3301+0x415>
ffffffff80012374:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff8001237b:	be 11 00 00 00       	mov    esi,0x11
ffffffff80012380:	e8 8b df fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012385:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff8001238c:	b8 11 00 00 00       	mov    eax,0x11
ffffffff80012391:	48 29 c8             	sub    rax,rcx
ffffffff80012394:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
ffffffff8001239b:	b0 01                	mov    al,0x1
ffffffff8001239d:	a8 01                	test   al,0x1
ffffffff8001239f:	75 02                	jne    ffffffff800123a3 <fmt.formatInt__anon_3301+0x433>
ffffffff800123a1:	eb 02                	jmp    ffffffff800123a5 <fmt.formatInt__anon_3301+0x435>
ffffffff800123a3:	eb 0d                	jmp    ffffffff800123b2 <fmt.formatInt__anon_3301+0x442>
ffffffff800123a5:	be 11 00 00 00       	mov    esi,0x11
ffffffff800123aa:	48 89 f7             	mov    rdi,rsi
ffffffff800123ad:	e8 1e de fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800123b2:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
ffffffff800123b9:	48 83 f8 11          	cmp    rax,0x11
ffffffff800123bd:	77 02                	ja     ffffffff800123c1 <fmt.formatInt__anon_3301+0x451>
ffffffff800123bf:	eb 11                	jmp    ffffffff800123d2 <fmt.formatInt__anon_3301+0x462>
ffffffff800123c1:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
ffffffff800123c8:	be 11 00 00 00       	mov    esi,0x11
ffffffff800123cd:	e8 fe dd fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800123d2:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff800123d9:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffffffff800123e0:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff800123e4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800123e8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800123ec:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
ffffffff800123f3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800123f7:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff800123fe:	b0 01                	mov    al,0x1
ffffffff80012400:	a8 01                	test   al,0x1
ffffffff80012402:	75 02                	jne    ffffffff80012406 <fmt.formatInt__anon_3301+0x496>
ffffffff80012404:	eb 02                	jmp    ffffffff80012408 <fmt.formatInt__anon_3301+0x498>
ffffffff80012406:	eb 10                	jmp    ffffffff80012418 <fmt.formatInt__anon_3301+0x4a8>
ffffffff80012408:	31 c0                	xor    eax,eax
ffffffff8001240a:	31 c0                	xor    eax,eax
ffffffff8001240c:	89 c7                	mov    edi,eax
ffffffff8001240e:	be 02 00 00 00       	mov    esi,0x2
ffffffff80012413:	e8 f8 de fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012418:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
ffffffff8001241f:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80012424:	48 39 c8             	cmp    rax,rcx
ffffffff80012427:	77 02                	ja     ffffffff8001242b <fmt.formatInt__anon_3301+0x4bb>
ffffffff80012429:	eb 11                	jmp    ffffffff8001243c <fmt.formatInt__anon_3301+0x4cc>
ffffffff8001242b:	48 8b b5 c0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x140]
ffffffff80012432:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80012437:	e8 94 dd fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001243c:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [rbp-0x9a]
ffffffff80012443:	89 c6                	mov    esi,eax
ffffffff80012445:	48 8d 7d d4          	lea    rdi,[rbp-0x2c]
ffffffff80012449:	e8 62 4d ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8001244e:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffffffff80012455:	66 8b 4d d4          	mov    cx,WORD PTR [rbp-0x2c]
ffffffff80012459:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff8001245c:	e9 ad 01 00 00       	jmp    ffffffff8001260e <fmt.formatInt__anon_3301+0x69e>
ffffffff80012461:	8a 85 45 ff ff ff    	mov    al,BYTE PTR [rbp-0xbb]
            const digit = a % base;
ffffffff80012467:	66 8b 8d 66 ff ff ff 	mov    cx,WORD PTR [rbp-0x9a]
ffffffff8001246e:	66 89 8d b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],cx
ffffffff80012475:	0f b6 c0             	movzx  eax,al
ffffffff80012478:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
ffffffff8001247f:	66 83 f8 00          	cmp    ax,0x0
ffffffff80012483:	74 02                	je     ffffffff80012487 <fmt.formatInt__anon_3301+0x517>
ffffffff80012485:	eb 1c                	jmp    ffffffff800124a3 <fmt.formatInt__anon_3301+0x533>
ffffffff80012487:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8001248e:	48 c7 c1 b8 c2 01 80 	mov    rcx,0xffffffff8001c2b8
ffffffff80012495:	31 c0                	xor    eax,eax
ffffffff80012497:	89 c2                	mov    edx,eax
ffffffff80012499:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001249e:	e8 0d dd fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800124a3:	66 8b 8d b6 fe ff ff 	mov    cx,WORD PTR [rbp-0x14a]
ffffffff800124aa:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
ffffffff800124b1:	31 d2                	xor    edx,edx
ffffffff800124b3:	66 f7 f1             	div    cx
ffffffff800124b6:	66 89 d0             	mov    ax,dx
ffffffff800124b9:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
ffffffff800124c0:	66 89 55 d6          	mov    WORD PTR [rbp-0x2a],dx
            index -= 1;
ffffffff800124c4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800124cb:	48 83 e8 01          	sub    rax,0x1
ffffffff800124cf:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800124d3:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff800124d7:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff800124da:	84 c0                	test   al,al
ffffffff800124dc:	75 04                	jne    ffffffff800124e2 <fmt.formatInt__anon_3301+0x572>
ffffffff800124de:	eb 00                	jmp    ffffffff800124e0 <fmt.formatInt__anon_3301+0x570>
ffffffff800124e0:	eb 1c                	jmp    ffffffff800124fe <fmt.formatInt__anon_3301+0x58e>
ffffffff800124e2:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800124e9:	48 c7 c1 c8 c2 01 80 	mov    rcx,0xffffffff8001c2c8
ffffffff800124f0:	31 c0                	xor    eax,eax
ffffffff800124f2:	89 c2                	mov    edx,eax
ffffffff800124f4:	be 10 00 00 00       	mov    esi,0x10
ffffffff800124f9:	e8 b2 dc fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800124fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80012502:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80012509:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80012510:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff80012517:	48 83 f8 11          	cmp    rax,0x11
ffffffff8001251b:	73 02                	jae    ffffffff8001251f <fmt.formatInt__anon_3301+0x5af>
ffffffff8001251d:	eb 11                	jmp    ffffffff80012530 <fmt.formatInt__anon_3301+0x5c0>
ffffffff8001251f:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80012526:	be 11 00 00 00       	mov    esi,0x11
ffffffff8001252b:	e8 a0 dc fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80012530:	66 8b 8d b2 fe ff ff 	mov    cx,WORD PTR [rbp-0x14e]
ffffffff80012537:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
ffffffff8001253e:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffffffff80012545:	48 01 d0             	add    rax,rdx
ffffffff80012548:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff8001254f:	66 b8 ff 00          	mov    ax,0xff
ffffffff80012553:	66 29 c8             	sub    ax,cx
ffffffff80012556:	66 3d ff 00          	cmp    ax,0xff
ffffffff8001255a:	77 02                	ja     ffffffff8001255e <fmt.formatInt__anon_3301+0x5ee>
ffffffff8001255c:	eb 1c                	jmp    ffffffff8001257a <fmt.formatInt__anon_3301+0x60a>
ffffffff8001255e:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80012565:	48 c7 c1 d8 c2 01 80 	mov    rcx,0xffffffff8001c2d8
ffffffff8001256c:	31 c0                	xor    eax,eax
ffffffff8001256e:	89 c2                	mov    edx,eax
ffffffff80012570:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80012575:	e8 36 dc fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001257a:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [rbp-0xbf]
ffffffff80012580:	66 8b 8d b2 fe ff ff 	mov    cx,WORD PTR [rbp-0x14e]
ffffffff80012587:	0f b6 f9             	movzx  edi,cl
ffffffff8001258a:	0f b6 f0             	movzx  esi,al
ffffffff8001258d:	e8 8e 4d ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80012592:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
ffffffff80012599:	88 c2                	mov    dl,al
ffffffff8001259b:	8a 85 45 ff ff ff    	mov    al,BYTE PTR [rbp-0xbb]
ffffffff800125a1:	88 11                	mov    BYTE PTR [rcx],dl
            a /= base;
ffffffff800125a3:	66 8b 8d 66 ff ff ff 	mov    cx,WORD PTR [rbp-0x9a]
ffffffff800125aa:	66 89 8d 9c fe ff ff 	mov    WORD PTR [rbp-0x164],cx
ffffffff800125b1:	0f b6 c0             	movzx  eax,al
ffffffff800125b4:	66 89 85 9e fe ff ff 	mov    WORD PTR [rbp-0x162],ax
ffffffff800125bb:	66 83 f8 00          	cmp    ax,0x0
ffffffff800125bf:	74 02                	je     ffffffff800125c3 <fmt.formatInt__anon_3301+0x653>
ffffffff800125c1:	eb 1c                	jmp    ffffffff800125df <fmt.formatInt__anon_3301+0x66f>
ffffffff800125c3:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff800125ca:	48 c7 c1 e8 c2 01 80 	mov    rcx,0xffffffff8001c2e8
ffffffff800125d1:	31 c0                	xor    eax,eax
ffffffff800125d3:	89 c2                	mov    edx,eax
ffffffff800125d5:	be 10 00 00 00       	mov    esi,0x10
ffffffff800125da:	e8 d1 db fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800125df:	66 8b 8d 9e fe ff ff 	mov    cx,WORD PTR [rbp-0x162]
ffffffff800125e6:	66 8b 85 9c fe ff ff 	mov    ax,WORD PTR [rbp-0x164]
ffffffff800125ed:	31 d2                	xor    edx,edx
ffffffff800125ef:	66 f7 f1             	div    cx
ffffffff800125f2:	66 89 85 66 ff ff ff 	mov    WORD PTR [rbp-0x9a],ax
            if (a == 0) break;
ffffffff800125f9:	66 83 bd 66 ff ff ff 	cmp    WORD PTR [rbp-0x9a],0x0
ffffffff80012600:	00 
ffffffff80012601:	75 02                	jne    ffffffff80012605 <fmt.formatInt__anon_3301+0x695>
ffffffff80012603:	eb 07                	jmp    ffffffff8001260c <fmt.formatInt__anon_3301+0x69c>
ffffffff80012605:	eb 00                	jmp    ffffffff80012607 <fmt.formatInt__anon_3301+0x697>
ffffffff80012607:	e9 55 fe ff ff       	jmp    ffffffff80012461 <fmt.formatInt__anon_3301+0x4f1>
ffffffff8001260c:	eb 00                	jmp    ffffffff8001260e <fmt.formatInt__anon_3301+0x69e>
    return formatBuf(buf[index..], options, writer);
ffffffff8001260e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80012615:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
ffffffff8001261c:	48 8d 8d 50 ff ff ff 	lea    rcx,[rbp-0xb0]
ffffffff80012623:	48 01 c1             	add    rcx,rax
ffffffff80012626:	48 89 8d 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rcx
ffffffff8001262d:	48 83 f8 11          	cmp    rax,0x11
ffffffff80012631:	77 02                	ja     ffffffff80012635 <fmt.formatInt__anon_3301+0x6c5>
ffffffff80012633:	eb 11                	jmp    ffffffff80012646 <fmt.formatInt__anon_3301+0x6d6>
ffffffff80012635:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
ffffffff8001263c:	be 11 00 00 00       	mov    esi,0x11
ffffffff80012641:	e8 ca dc fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012646:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffffffff8001264d:	b8 11 00 00 00       	mov    eax,0x11
ffffffff80012652:	48 29 c8             	sub    rax,rcx
ffffffff80012655:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
ffffffff8001265c:	b0 01                	mov    al,0x1
ffffffff8001265e:	a8 01                	test   al,0x1
ffffffff80012660:	75 02                	jne    ffffffff80012664 <fmt.formatInt__anon_3301+0x6f4>
ffffffff80012662:	eb 02                	jmp    ffffffff80012666 <fmt.formatInt__anon_3301+0x6f6>
ffffffff80012664:	eb 0d                	jmp    ffffffff80012673 <fmt.formatInt__anon_3301+0x703>
ffffffff80012666:	be 11 00 00 00       	mov    esi,0x11
ffffffff8001266b:	48 89 f7             	mov    rdi,rsi
ffffffff8001266e:	e8 5d db fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80012673:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
ffffffff8001267a:	48 83 f8 11          	cmp    rax,0x11
ffffffff8001267e:	77 02                	ja     ffffffff80012682 <fmt.formatInt__anon_3301+0x712>
ffffffff80012680:	eb 11                	jmp    ffffffff80012693 <fmt.formatInt__anon_3301+0x723>
ffffffff80012682:	48 8b bd 88 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x178]
ffffffff80012689:	be 11 00 00 00       	mov    esi,0x11
ffffffff8001268e:	e8 3d db fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80012693:	4c 8b 85 28 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd8]
ffffffff8001269a:	48 8b 8d 30 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd0]
ffffffff800126a1:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
ffffffff800126a8:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
ffffffff800126af:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
ffffffff800126b6:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff800126ba:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800126be:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff800126c2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800126c6:	e8 95 4d ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800126cb:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff800126cf:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff800126d4:	75 0d                	jne    ffffffff800126e3 <fmt.formatInt__anon_3301+0x773>
ffffffff800126d6:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800126da:	48 81 c4 80 01 00 00 	add    rsp,0x180
ffffffff800126e1:	5d                   	pop    rbp
ffffffff800126e2:	c3                   	ret
ffffffff800126e3:	48 8b bd 38 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc8]
ffffffff800126ea:	e8 21 0d ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800126ef:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800126f3:	48 81 c4 80 01 00 00 	add    rsp,0x180
ffffffff800126fa:	5d                   	pop    rbp
ffffffff800126fb:	c3                   	ret
ffffffff800126fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80012700 <math.absCast__anon_3303>:
} {
ffffffff80012700:	55                   	push   rbp
ffffffff80012701:	48 89 e5             	mov    rbp,rsp
ffffffff80012704:	48 83 ec 02          	sub    rsp,0x2
ffffffff80012708:	66 89 f8             	mov    ax,di
ffffffff8001270b:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
            if (int_info.signedness == .unsigned) return x;
ffffffff8001270f:	48 83 c4 02          	add    rsp,0x2
ffffffff80012713:	5d                   	pop    rbp
ffffffff80012714:	c3                   	ret
ffffffff80012715:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8001271c:	00 00 00 
ffffffff8001271f:	90                   	nop

ffffffff80012720 <fmt.formatType__anon_3350>:
) @TypeOf(writer).Error!void {
ffffffff80012720:	55                   	push   rbp
ffffffff80012721:	48 89 e5             	mov    rbp,rsp
ffffffff80012724:	48 83 ec 30          	sub    rsp,0x30
ffffffff80012728:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001272c:	40 88 f0             	mov    al,sil
ffffffff8001272f:	40 88 c6             	mov    sil,al
ffffffff80012732:	40 80 e6 07          	and    sil,0x7
ffffffff80012736:	40 88 75 df          	mov    BYTE PTR [rbp-0x21],sil
ffffffff8001273a:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8001273e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80012745:	00 
ffffffff80012746:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8001274d:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8001274e:	0f b6 f0             	movzx  esi,al
ffffffff80012751:	e8 6a 22 00 00       	call   ffffffff800149c0 <fmt.formatValue__anon_3465>
ffffffff80012756:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001275a:	b0 01                	mov    al,0x1
ffffffff8001275c:	a8 01                	test   al,0x1
ffffffff8001275e:	75 02                	jne    ffffffff80012762 <fmt.formatType__anon_3350+0x42>
ffffffff80012760:	eb 0a                	jmp    ffffffff8001276c <fmt.formatType__anon_3350+0x4c>
ffffffff80012762:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012766:	48 83 c4 30          	add    rsp,0x30
ffffffff8001276a:	5d                   	pop    rbp
ffffffff8001276b:	c3                   	ret
ffffffff8001276c:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80012770:	e8 9b 0c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012775:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012779:	48 83 c4 30          	add    rsp,0x30
ffffffff8001277d:	5d                   	pop    rbp
ffffffff8001277e:	c3                   	ret
ffffffff8001277f:	90                   	nop

ffffffff80012780 <fmt.formatType__anon_3351>:
) @TypeOf(writer).Error!void {
ffffffff80012780:	55                   	push   rbp
ffffffff80012781:	48 89 e5             	mov    rbp,rsp
ffffffff80012784:	48 83 ec 30          	sub    rsp,0x30
ffffffff80012788:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001278c:	40 88 f0             	mov    al,sil
ffffffff8001278f:	40 88 c6             	mov    sil,al
ffffffff80012792:	40 80 e6 1f          	and    sil,0x1f
ffffffff80012796:	40 88 75 df          	mov    BYTE PTR [rbp-0x21],sil
ffffffff8001279a:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8001279e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff800127a5:	00 
ffffffff800127a6:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff800127ad:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff800127ae:	0f b6 f0             	movzx  esi,al
ffffffff800127b1:	e8 ba 29 00 00       	call   ffffffff80015170 <fmt.formatValue__anon_3474>
ffffffff800127b6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800127ba:	b0 01                	mov    al,0x1
ffffffff800127bc:	a8 01                	test   al,0x1
ffffffff800127be:	75 02                	jne    ffffffff800127c2 <fmt.formatType__anon_3351+0x42>
ffffffff800127c0:	eb 0a                	jmp    ffffffff800127cc <fmt.formatType__anon_3351+0x4c>
ffffffff800127c2:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800127c6:	48 83 c4 30          	add    rsp,0x30
ffffffff800127ca:	5d                   	pop    rbp
ffffffff800127cb:	c3                   	ret
ffffffff800127cc:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800127d0:	e8 3b 0c ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800127d5:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800127d9:	48 83 c4 30          	add    rsp,0x30
ffffffff800127dd:	5d                   	pop    rbp
ffffffff800127de:	c3                   	ret
ffffffff800127df:	90                   	nop

ffffffff800127e0 <fmt.formatType__anon_3352>:
) @TypeOf(writer).Error!void {
ffffffff800127e0:	55                   	push   rbp
ffffffff800127e1:	48 89 e5             	mov    rbp,rsp
ffffffff800127e4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800127e8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800127ec:	40 88 f0             	mov    al,sil
ffffffff800127ef:	40 88 c6             	mov    sil,al
ffffffff800127f2:	40 80 e6 0f          	and    sil,0xf
ffffffff800127f6:	40 88 75 df          	mov    BYTE PTR [rbp-0x21],sil
ffffffff800127fa:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff800127fe:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80012805:	00 
ffffffff80012806:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8001280d:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8001280e:	0f b6 f0             	movzx  esi,al
ffffffff80012811:	e8 0a 31 00 00       	call   ffffffff80015920 <fmt.formatValue__anon_3483>
ffffffff80012816:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001281a:	b0 01                	mov    al,0x1
ffffffff8001281c:	a8 01                	test   al,0x1
ffffffff8001281e:	75 02                	jne    ffffffff80012822 <fmt.formatType__anon_3352+0x42>
ffffffff80012820:	eb 0a                	jmp    ffffffff8001282c <fmt.formatType__anon_3352+0x4c>
ffffffff80012822:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012826:	48 83 c4 30          	add    rsp,0x30
ffffffff8001282a:	5d                   	pop    rbp
ffffffff8001282b:	c3                   	ret
ffffffff8001282c:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80012830:	e8 db 0b ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012835:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012839:	48 83 c4 30          	add    rsp,0x30
ffffffff8001283d:	5d                   	pop    rbp
ffffffff8001283e:	c3                   	ret
ffffffff8001283f:	90                   	nop

ffffffff80012840 <fmt.formatType__anon_3353>:
) @TypeOf(writer).Error!void {
ffffffff80012840:	55                   	push   rbp
ffffffff80012841:	48 89 e5             	mov    rbp,rsp
ffffffff80012844:	48 83 ec 30          	sub    rsp,0x30
ffffffff80012848:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001284c:	40 88 f0             	mov    al,sil
ffffffff8001284f:	40 88 c6             	mov    sil,al
ffffffff80012852:	40 80 e6 01          	and    sil,0x1
ffffffff80012856:	40 88 75 df          	mov    BYTE PTR [rbp-0x21],sil
ffffffff8001285a:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff8001285e:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80012865:	00 
ffffffff80012866:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff8001286d:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff8001286e:	0f b6 f0             	movzx  esi,al
ffffffff80012871:	e8 5a 38 00 00       	call   ffffffff800160d0 <fmt.formatValue__anon_3492>
ffffffff80012876:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001287a:	b0 01                	mov    al,0x1
ffffffff8001287c:	a8 01                	test   al,0x1
ffffffff8001287e:	75 02                	jne    ffffffff80012882 <fmt.formatType__anon_3353+0x42>
ffffffff80012880:	eb 0a                	jmp    ffffffff8001288c <fmt.formatType__anon_3353+0x4c>
ffffffff80012882:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012886:	48 83 c4 30          	add    rsp,0x30
ffffffff8001288a:	5d                   	pop    rbp
ffffffff8001288b:	c3                   	ret
ffffffff8001288c:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80012890:	e8 7b 0b ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012895:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012899:	48 83 c4 30          	add    rsp,0x30
ffffffff8001289d:	5d                   	pop    rbp
ffffffff8001289e:	c3                   	ret
ffffffff8001289f:	90                   	nop

ffffffff800128a0 <fmt.formatType__anon_3354>:
) @TypeOf(writer).Error!void {
ffffffff800128a0:	55                   	push   rbp
ffffffff800128a1:	48 89 e5             	mov    rbp,rsp
ffffffff800128a4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800128a8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800128ac:	40 88 f0             	mov    al,sil
ffffffff800128af:	40 88 c6             	mov    sil,al
ffffffff800128b2:	40 80 e6 03          	and    sil,0x3
ffffffff800128b6:	40 88 75 df          	mov    BYTE PTR [rbp-0x21],sil
ffffffff800128ba:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff800128be:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff800128c5:	00 
ffffffff800128c6:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff800128cd:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff800128ce:	0f b6 f0             	movzx  esi,al
ffffffff800128d1:	e8 aa 3f 00 00       	call   ffffffff80016880 <fmt.formatValue__anon_3501>
ffffffff800128d6:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800128da:	b0 01                	mov    al,0x1
ffffffff800128dc:	a8 01                	test   al,0x1
ffffffff800128de:	75 02                	jne    ffffffff800128e2 <fmt.formatType__anon_3354+0x42>
ffffffff800128e0:	eb 0a                	jmp    ffffffff800128ec <fmt.formatType__anon_3354+0x4c>
ffffffff800128e2:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800128e6:	48 83 c4 30          	add    rsp,0x30
ffffffff800128ea:	5d                   	pop    rbp
ffffffff800128eb:	c3                   	ret
ffffffff800128ec:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800128f0:	e8 1b 0b ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800128f5:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800128f9:	48 83 c4 30          	add    rsp,0x30
ffffffff800128fd:	5d                   	pop    rbp
ffffffff800128fe:	c3                   	ret
ffffffff800128ff:	90                   	nop

ffffffff80012900 <fmt.formatType__anon_3355>:
) @TypeOf(writer).Error!void {
ffffffff80012900:	55                   	push   rbp
ffffffff80012901:	48 89 e5             	mov    rbp,rsp
ffffffff80012904:	48 83 ec 50          	sub    rsp,0x50
ffffffff80012908:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff8001290c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff80012910:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff80012914:	40 88 f0             	mov    al,sil
ffffffff80012917:	88 c1                	mov    cl,al
ffffffff80012919:	80 e1 01             	and    cl,0x1
ffffffff8001291c:	88 4d df             	mov    BYTE PTR [rbp-0x21],cl
ffffffff8001291f:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80012923:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8001292a:	00 
ffffffff8001292b:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80012932:	80 
            return formatBuf(if (value) "true" else "false", options, writer);
ffffffff80012933:	a8 01                	test   al,0x1
ffffffff80012935:	75 02                	jne    ffffffff80012939 <fmt.formatType__anon_3355+0x39>
ffffffff80012937:	eb 16                	jmp    ffffffff8001294f <fmt.formatType__anon_3355+0x4f>
ffffffff80012939:	b8 04 00 00 00       	mov    eax,0x4
ffffffff8001293e:	48 c7 c1 b4 b3 01 80 	mov    rcx,0xffffffff8001b3b4
ffffffff80012945:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff80012949:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8001294d:	eb 16                	jmp    ffffffff80012965 <fmt.formatType__anon_3355+0x65>
ffffffff8001294f:	b8 05 00 00 00       	mov    eax,0x5
ffffffff80012954:	48 c7 c1 b9 b3 01 80 	mov    rcx,0xffffffff8001b3b9
ffffffff8001295b:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff8001295f:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80012963:	eb 00                	jmp    ffffffff80012965 <fmt.formatType__anon_3355+0x65>
ffffffff80012965:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
ffffffff80012969:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8001296d:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80012971:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
ffffffff80012975:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffffffff80012979:	e8 e2 4a ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff8001297e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80012982:	b0 01                	mov    al,0x1
ffffffff80012984:	a8 01                	test   al,0x1
ffffffff80012986:	75 02                	jne    ffffffff8001298a <fmt.formatType__anon_3355+0x8a>
ffffffff80012988:	eb 0a                	jmp    ffffffff80012994 <fmt.formatType__anon_3355+0x94>
ffffffff8001298a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001298e:	48 83 c4 50          	add    rsp,0x50
ffffffff80012992:	5d                   	pop    rbp
ffffffff80012993:	c3                   	ret
ffffffff80012994:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80012998:	e8 73 0a ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001299d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800129a1:	48 83 c4 50          	add    rsp,0x50
ffffffff800129a5:	5d                   	pop    rbp
ffffffff800129a6:	c3                   	ret
ffffffff800129a7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800129ae:	00 00 

ffffffff800129b0 <fmt.format__anon_3356>:
) !void {
ffffffff800129b0:	55                   	push   rbp
ffffffff800129b1:	48 89 e5             	mov    rbp,rsp
ffffffff800129b4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800129b8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff800129bc:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800129c0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff800129c4:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff800129c7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800129cb:	b0 01                	mov    al,0x1
ffffffff800129cd:	a8 01                	test   al,0x1
ffffffff800129cf:	75 02                	jne    ffffffff800129d3 <fmt.format__anon_3356+0x23>
ffffffff800129d1:	eb 02                	jmp    ffffffff800129d5 <fmt.format__anon_3356+0x25>
ffffffff800129d3:	eb 10                	jmp    ffffffff800129e5 <fmt.format__anon_3356+0x35>
ffffffff800129d5:	31 c0                	xor    eax,eax
ffffffff800129d7:	31 c0                	xor    eax,eax
ffffffff800129d9:	89 c7                	mov    edi,eax
ffffffff800129db:	be 0c 00 00 00       	mov    esi,0xc
ffffffff800129e0:	e8 2b d9 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800129e5:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800129e9:	48 c7 c2 3c b7 01 80 	mov    rdx,0xffffffff8001b73c
ffffffff800129f0:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff800129f4:	b9 0c 00 00 00       	mov    ecx,0xc
ffffffff800129f9:	e8 12 ee ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff800129fe:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
ffffffff80012a02:	66 83 f8 00          	cmp    ax,0x0
ffffffff80012a06:	74 13                	je     ffffffff80012a1b <fmt.format__anon_3356+0x6b>
ffffffff80012a08:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80012a0c:	e8 ff 09 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012a11:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
ffffffff80012a15:	48 83 c4 40          	add    rsp,0x40
ffffffff80012a19:	5d                   	pop    rbp
ffffffff80012a1a:	c3                   	ret
ffffffff80012a1b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff80012a1f:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80012a23:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80012a27:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80012a2e:	00 
        try formatType(
ffffffff80012a2f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff80012a32:	48 c7 c2 e0 ac 01 80 	mov    rdx,0xffffffff8001ace0
ffffffff80012a39:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80012a3f:	e8 7c ef ff ff       	call   ffffffff800119c0 <fmt.formatType__anon_3282>
ffffffff80012a44:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
ffffffff80012a48:	66 83 f8 00          	cmp    ax,0x0
ffffffff80012a4c:	74 13                	je     ffffffff80012a61 <fmt.format__anon_3356+0xb1>
ffffffff80012a4e:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
        try formatType(
ffffffff80012a52:	e8 b9 09 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012a57:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
ffffffff80012a5b:	48 83 c4 40          	add    rsp,0x40
ffffffff80012a5f:	5d                   	pop    rbp
ffffffff80012a60:	c3                   	ret
ffffffff80012a61:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80012a65:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80012a68:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80012a6c:	b0 01                	mov    al,0x1
ffffffff80012a6e:	a8 01                	test   al,0x1
ffffffff80012a70:	75 02                	jne    ffffffff80012a74 <fmt.format__anon_3356+0xc4>
ffffffff80012a72:	eb 02                	jmp    ffffffff80012a76 <fmt.format__anon_3356+0xc6>
ffffffff80012a74:	eb 0f                	jmp    ffffffff80012a85 <fmt.format__anon_3356+0xd5>
ffffffff80012a76:	bf 0f 00 00 00       	mov    edi,0xf
ffffffff80012a7b:	be 29 00 00 00       	mov    esi,0x29
ffffffff80012a80:	e8 8b d8 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012a85:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80012a89:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80012a8d:	48 c7 c2 4b b7 01 80 	mov    rdx,0xffffffff8001b74b
ffffffff80012a94:	b9 1a 00 00 00       	mov    ecx,0x1a
ffffffff80012a99:	e8 72 ed ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff80012a9e:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
ffffffff80012aa2:	66 83 f8 00          	cmp    ax,0x0
ffffffff80012aa6:	74 13                	je     ffffffff80012abb <fmt.format__anon_3356+0x10b>
ffffffff80012aa8:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80012aac:	e8 5f 09 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012ab1:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
ffffffff80012ab5:	48 83 c4 40          	add    rsp,0x40
ffffffff80012ab9:	5d                   	pop    rbp
ffffffff80012aba:	c3                   	ret
ffffffff80012abb:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff80012abf:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80012ac3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80012ac7:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
ffffffff80012ace:	00 
        try formatType(
ffffffff80012acf:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
            std.options.fmt_max_depth,
ffffffff80012ad3:	48 c7 c2 70 ad 01 80 	mov    rdx,0xffffffff8001ad70
ffffffff80012ada:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80012ae0:	e8 db ee ff ff       	call   ffffffff800119c0 <fmt.formatType__anon_3282>
ffffffff80012ae5:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
ffffffff80012ae9:	66 83 f8 00          	cmp    ax,0x0
ffffffff80012aed:	74 13                	je     ffffffff80012b02 <fmt.format__anon_3356+0x152>
ffffffff80012aef:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
        try formatType(
ffffffff80012af3:	e8 18 09 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012af8:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
ffffffff80012afc:	48 83 c4 40          	add    rsp,0x40
ffffffff80012b00:	5d                   	pop    rbp
ffffffff80012b01:	c3                   	ret
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80012b02:	31 c0                	xor    eax,eax
ffffffff80012b04:	48 83 c4 40          	add    rsp,0x40
ffffffff80012b08:	5d                   	pop    rbp
ffffffff80012b09:	c3                   	ret
ffffffff80012b0a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80012b10 <mem.indexOfSentinel__anon_3376>:
pub fn indexOfSentinel(comptime Elem: type, comptime sentinel: Elem, ptr: [*:sentinel]const Elem) usize {
ffffffff80012b10:	55                   	push   rbp
ffffffff80012b11:	48 89 e5             	mov    rbp,rsp
ffffffff80012b14:	48 83 ec 30          	sub    rsp,0x30
ffffffff80012b18:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80012b1c:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
    var i: usize = 0;
ffffffff80012b20:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80012b27:	00 
ffffffff80012b28:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    while (ptr[i] != sentinel) {
ffffffff80012b2c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80012b30:	80 3c 08 00          	cmp    BYTE PTR [rax+rcx*1],0x0
ffffffff80012b34:	74 18                	je     ffffffff80012b4e <mem.indexOfSentinel__anon_3376+0x3e>
        i += 1;
ffffffff80012b36:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80012b3a:	48 ff c0             	inc    rax
ffffffff80012b3d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80012b41:	0f 94 45 f8          	sete   BYTE PTR [rbp-0x8]
ffffffff80012b45:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff80012b48:	84 c0                	test   al,al
ffffffff80012b4a:	74 04                	je     ffffffff80012b50 <mem.indexOfSentinel__anon_3376+0x40>
ffffffff80012b4c:	eb 04                	jmp    ffffffff80012b52 <mem.indexOfSentinel__anon_3376+0x42>
ffffffff80012b4e:	eb 28                	jmp    ffffffff80012b78 <mem.indexOfSentinel__anon_3376+0x68>
ffffffff80012b50:	eb 1c                	jmp    ffffffff80012b6e <mem.indexOfSentinel__anon_3376+0x5e>
ffffffff80012b52:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80012b59:	48 c7 c1 c8 c7 01 80 	mov    rcx,0xffffffff8001c7c8
ffffffff80012b60:	31 c0                	xor    eax,eax
ffffffff80012b62:	89 c2                	mov    edx,eax
ffffffff80012b64:	be 10 00 00 00       	mov    esi,0x10
ffffffff80012b69:	e8 42 d6 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80012b6e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80012b72:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80012b76:	eb b0                	jmp    ffffffff80012b28 <mem.indexOfSentinel__anon_3376+0x18>
    return i;
ffffffff80012b78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80012b7c:	48 83 c4 30          	add    rsp,0x30
ffffffff80012b80:	5d                   	pop    rbp
ffffffff80012b81:	c3                   	ret
ffffffff80012b82:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80012b89:	00 00 00 
ffffffff80012b8c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80012b90 <debug.panicExtra__anon_3378>:
) noreturn {
ffffffff80012b90:	55                   	push   rbp
ffffffff80012b91:	48 89 e5             	mov    rbp,rsp
ffffffff80012b94:	b8 c0 11 00 00       	mov    eax,0x11c0
ffffffff80012b99:	e8 52 52 00 00       	call   ffffffff80017df0 <__zig_probe_stack>
ffffffff80012b9e:	48 29 c4             	sub    rsp,rax
ffffffff80012ba1:	48 89 95 68 ee ff ff 	mov    QWORD PTR [rbp-0x1198],rdx
ffffffff80012ba8:	48 89 b5 70 ee ff ff 	mov    QWORD PTR [rbp-0x1190],rsi
ffffffff80012baf:	48 89 bd 78 ee ff ff 	mov    QWORD PTR [rbp-0x1188],rdi
ffffffff80012bb6:	48 89 bd 90 ee ff ff 	mov    QWORD PTR [rbp-0x1170],rdi
ffffffff80012bbd:	48 8d 85 98 ee ff ff 	lea    rax,[rbp-0x1168]
ffffffff80012bc4:	48 89 85 a0 ef ff ff 	mov    QWORD PTR [rbp-0x1060],rax
ffffffff80012bcb:	48 c7 85 a8 ef ff ff 	mov    QWORD PTR [rbp-0x1058],0x20
ffffffff80012bd2:	20 00 00 00 
ffffffff80012bd6:	48 c7 85 98 ef ff ff 	mov    QWORD PTR [rbp-0x1068],0x0
ffffffff80012bdd:	00 00 00 00 
ffffffff80012be1:	48 8b 85 98 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1068]
ffffffff80012be8:	48 89 85 80 ee ff ff 	mov    QWORD PTR [rbp-0x1180],rax
    const trunc_msg = "(msg truncated)";
ffffffff80012bef:	48 c7 85 b0 ef ff ff 	mov    QWORD PTR [rbp-0x1050],0xffffffff8001b47e
ffffffff80012bf6:	7e b4 01 80 
ffffffff80012bfa:	48 8d bd b9 ef ff ff 	lea    rdi,[rbp-0x1047]
ffffffff80012c01:	be aa 00 00 00       	mov    esi,0xaa
ffffffff80012c06:	ba 0f 10 00 00       	mov    edx,0x100f
    var buf: [size + trunc_msg.len]u8 = undefined;
ffffffff80012c0b:	e8 f0 52 00 00       	call   ffffffff80017f00 <memset>
    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {
ffffffff80012c10:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80012c17:	48 89 85 88 ee ff ff 	mov    QWORD PTR [rbp-0x1178],rax
ffffffff80012c1e:	b0 01                	mov    al,0x1
ffffffff80012c20:	a8 01                	test   al,0x1
ffffffff80012c22:	75 02                	jne    ffffffff80012c26 <debug.panicExtra__anon_3378+0x96>
ffffffff80012c24:	eb 02                	jmp    ffffffff80012c28 <debug.panicExtra__anon_3378+0x98>
ffffffff80012c26:	eb 10                	jmp    ffffffff80012c38 <debug.panicExtra__anon_3378+0xa8>
ffffffff80012c28:	31 c0                	xor    eax,eax
ffffffff80012c2a:	31 c0                	xor    eax,eax
ffffffff80012c2c:	89 c7                	mov    edi,eax
ffffffff80012c2e:	be 00 10 00 00       	mov    esi,0x1000
ffffffff80012c33:	e8 d8 d6 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012c38:	4c 8b 85 68 ee ff ff 	mov    r8,QWORD PTR [rbp-0x1198]
ffffffff80012c3f:	48 8b 95 88 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1178]
ffffffff80012c46:	b9 00 10 00 00       	mov    ecx,0x1000
ffffffff80012c4b:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff80012c4f:	48 8d b5 98 ef ff ff 	lea    rsi,[rbp-0x1068]
ffffffff80012c56:	e8 d5 43 00 00       	call   ffffffff80017030 <fmt.bufPrint__anon_3509>
ffffffff80012c5b:	66 83 7d d8 00       	cmp    WORD PTR [rbp-0x28],0x0
ffffffff80012c60:	75 1b                	jne    ffffffff80012c7d <debug.panicExtra__anon_3378+0xed>
ffffffff80012c62:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff80012c66:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80012c6a:	48 89 8d 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rcx
ffffffff80012c71:	48 89 85 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rax
ffffffff80012c78:	e9 aa 00 00 00       	jmp    ffffffff80012d27 <debug.panicExtra__anon_3378+0x197>
ffffffff80012c7d:	66 8b 45 d8          	mov    ax,WORD PTR [rbp-0x28]
ffffffff80012c81:	66 83 e8 09          	sub    ax,0x9
ffffffff80012c85:	74 1e                	je     ffffffff80012ca5 <debug.panicExtra__anon_3378+0x115>
ffffffff80012c87:	eb 00                	jmp    ffffffff80012c89 <debug.panicExtra__anon_3378+0xf9>
ffffffff80012c89:	48 c7 c7 9b b1 01 80 	mov    rdi,0xffffffff8001b19b
ffffffff80012c90:	48 c7 c1 d8 c7 01 80 	mov    rcx,0xffffffff8001c7d8
ffffffff80012c97:	31 c0                	xor    eax,eax
ffffffff80012c99:	89 c2                	mov    edx,eax
ffffffff80012c9b:	be 17 00 00 00       	mov    esi,0x17
ffffffff80012ca0:	e8 0b d5 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
            std.mem.copy(u8, buf[size..], trunc_msg);
ffffffff80012ca5:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80012cac:	48 05 00 10 00 00    	add    rax,0x1000
ffffffff80012cb2:	48 89 85 50 ee ff ff 	mov    QWORD PTR [rbp-0x11b0],rax
ffffffff80012cb9:	b0 01                	mov    al,0x1
ffffffff80012cbb:	a8 01                	test   al,0x1
ffffffff80012cbd:	75 02                	jne    ffffffff80012cc1 <debug.panicExtra__anon_3378+0x131>
ffffffff80012cbf:	eb 02                	jmp    ffffffff80012cc3 <debug.panicExtra__anon_3378+0x133>
ffffffff80012cc1:	eb 0f                	jmp    ffffffff80012cd2 <debug.panicExtra__anon_3378+0x142>
ffffffff80012cc3:	bf 00 10 00 00       	mov    edi,0x1000
ffffffff80012cc8:	be 0f 10 00 00       	mov    esi,0x100f
ffffffff80012ccd:	e8 3e d6 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012cd2:	48 8b bd 50 ee ff ff 	mov    rdi,QWORD PTR [rbp-0x11b0]
ffffffff80012cd9:	be 0f 00 00 00       	mov    esi,0xf
ffffffff80012cde:	48 c7 c2 7e b4 01 80 	mov    rdx,0xffffffff8001b47e
ffffffff80012ce5:	b9 0f 00 00 00       	mov    ecx,0xf
ffffffff80012cea:	e8 b1 8c ff ff       	call   ffffffff8000b9a0 <mem.copy__anon_3027>
ffffffff80012cef:	48 8d 85 b9 ef ff ff 	lea    rax,[rbp-0x1047]
ffffffff80012cf6:	48 89 85 48 ee ff ff 	mov    QWORD PTR [rbp-0x11b8],rax
ffffffff80012cfd:	48 8b 85 80 ee ff ff 	mov    rax,QWORD PTR [rbp-0x1180]
ffffffff80012d04:	48 8b 8d 48 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x11b8]
    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {
ffffffff80012d0b:	48 89 85 98 ef ff ff 	mov    QWORD PTR [rbp-0x1068],rax
ffffffff80012d12:	b8 0f 10 00 00       	mov    eax,0x100f
ffffffff80012d17:	48 89 8d 58 ee ff ff 	mov    QWORD PTR [rbp-0x11a8],rcx
ffffffff80012d1e:	48 89 85 60 ee ff ff 	mov    QWORD PTR [rbp-0x11a0],rax
ffffffff80012d25:	eb 00                	jmp    ffffffff80012d27 <debug.panicExtra__anon_3378+0x197>
ffffffff80012d27:	48 8b 8d 70 ee ff ff 	mov    rcx,QWORD PTR [rbp-0x1190]
ffffffff80012d2e:	48 8b 95 78 ee ff ff 	mov    rdx,QWORD PTR [rbp-0x1188]
ffffffff80012d35:	48 8b 85 58 ee ff ff 	mov    rax,QWORD PTR [rbp-0x11a8]
ffffffff80012d3c:	48 8b b5 60 ee ff ff 	mov    rsi,QWORD PTR [rbp-0x11a0]
ffffffff80012d43:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80012d47:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    std.builtin.panic(msg, trace, ret_addr);
ffffffff80012d4b:	48 89 75 f8          	mov    QWORD PTR [rbp-0x8],rsi
ffffffff80012d4f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80012d53:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80012d57:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
ffffffff80012d5b:	e8 50 d4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>

ffffffff80012d60 <fmt.formatValue__anon_3382>:
) !void {
ffffffff80012d60:	55                   	push   rbp
ffffffff80012d61:	48 89 e5             	mov    rbp,rsp
ffffffff80012d64:	48 83 ec 20          	sub    rsp,0x20
ffffffff80012d68:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80012d6c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80012d70:	e8 2b 00 00 00       	call   ffffffff80012da0 <fmt.formatIntValue__anon_3383>
ffffffff80012d75:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80012d79:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80012d7e:	75 0a                	jne    ffffffff80012d8a <fmt.formatValue__anon_3382+0x2a>
ffffffff80012d80:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012d84:	48 83 c4 20          	add    rsp,0x20
ffffffff80012d88:	5d                   	pop    rbp
ffffffff80012d89:	c3                   	ret
ffffffff80012d8a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff80012d8e:	e8 7d 06 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012d93:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012d97:	48 83 c4 20          	add    rsp,0x20
ffffffff80012d9b:	5d                   	pop    rbp
ffffffff80012d9c:	c3                   	ret
ffffffff80012d9d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80012da0 <fmt.formatIntValue__anon_3383>:
) !void {
ffffffff80012da0:	55                   	push   rbp
ffffffff80012da1:	48 89 e5             	mov    rbp,rsp
ffffffff80012da4:	48 83 ec 20          	sub    rsp,0x20
ffffffff80012da8:	49 89 c9             	mov    r9,rcx
ffffffff80012dab:	49 89 d0             	mov    r8,rdx
ffffffff80012dae:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff80012db2:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80012db6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return formatInt(int_value, radix, case, options, writer);
ffffffff80012dba:	31 c0                	xor    eax,eax
ffffffff80012dbc:	ba 10 00 00 00       	mov    edx,0x10
ffffffff80012dc1:	31 c9                	xor    ecx,ecx
ffffffff80012dc3:	e8 d8 3b ff ff       	call   ffffffff800069a0 <fmt.formatInt__anon_2783>
ffffffff80012dc8:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80012dcc:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80012dd1:	75 0a                	jne    ffffffff80012ddd <fmt.formatIntValue__anon_3383+0x3d>
ffffffff80012dd3:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012dd7:	48 83 c4 20          	add    rsp,0x20
ffffffff80012ddb:	5d                   	pop    rbp
ffffffff80012ddc:	c3                   	ret
ffffffff80012ddd:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80012de1:	e8 2a 06 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012de6:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012dea:	48 83 c4 20          	add    rsp,0x20
ffffffff80012dee:	5d                   	pop    rbp
ffffffff80012def:	c3                   	ret

ffffffff80012df0 <fmt.formatValue__anon_3386>:
) !void {
ffffffff80012df0:	55                   	push   rbp
ffffffff80012df1:	48 89 e5             	mov    rbp,rsp
ffffffff80012df4:	48 83 ec 20          	sub    rsp,0x20
ffffffff80012df8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80012dfc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80012e00:	e8 2b 00 00 00       	call   ffffffff80012e30 <fmt.formatIntValue__anon_3387>
ffffffff80012e05:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80012e09:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80012e0e:	75 0a                	jne    ffffffff80012e1a <fmt.formatValue__anon_3386+0x2a>
ffffffff80012e10:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012e14:	48 83 c4 20          	add    rsp,0x20
ffffffff80012e18:	5d                   	pop    rbp
ffffffff80012e19:	c3                   	ret
ffffffff80012e1a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff80012e1e:	e8 ed 05 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012e23:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012e27:	48 83 c4 20          	add    rsp,0x20
ffffffff80012e2b:	5d                   	pop    rbp
ffffffff80012e2c:	c3                   	ret
ffffffff80012e2d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80012e30 <fmt.formatIntValue__anon_3387>:
) !void {
ffffffff80012e30:	55                   	push   rbp
ffffffff80012e31:	48 89 e5             	mov    rbp,rsp
ffffffff80012e34:	48 83 ec 20          	sub    rsp,0x20
ffffffff80012e38:	49 89 c9             	mov    r9,rcx
ffffffff80012e3b:	49 89 d0             	mov    r8,rdx
ffffffff80012e3e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff80012e42:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80012e46:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return formatInt(int_value, radix, case, options, writer);
ffffffff80012e4a:	31 c0                	xor    eax,eax
ffffffff80012e4c:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80012e51:	31 c9                	xor    ecx,ecx
ffffffff80012e53:	e8 a8 55 ff ff       	call   ffffffff80008400 <fmt.formatInt__anon_2871>
ffffffff80012e58:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80012e5c:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80012e61:	75 0a                	jne    ffffffff80012e6d <fmt.formatIntValue__anon_3387+0x3d>
ffffffff80012e63:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012e67:	48 83 c4 20          	add    rsp,0x20
ffffffff80012e6b:	5d                   	pop    rbp
ffffffff80012e6c:	c3                   	ret
ffffffff80012e6d:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff80012e71:	e8 9a 05 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012e76:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80012e7a:	48 83 c4 20          	add    rsp,0x20
ffffffff80012e7e:	5d                   	pop    rbp
ffffffff80012e7f:	c3                   	ret

ffffffff80012e80 <fmt.format__anon_3393>:
) !void {
ffffffff80012e80:	55                   	push   rbp
ffffffff80012e81:	48 89 e5             	mov    rbp,rsp
ffffffff80012e84:	48 83 ec 40          	sub    rsp,0x40
ffffffff80012e88:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff80012e8c:	48 89 f1             	mov    rcx,rsi
ffffffff80012e8f:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80012e93:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80012e97:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80012e9e:	00 
            std.options.fmt_max_depth,
ffffffff80012e9f:	48 c7 c6 94 b7 01 80 	mov    rsi,0xffffffff8001b794
ffffffff80012ea6:	48 c7 c2 48 ae 01 80 	mov    rdx,0xffffffff8001ae48
ffffffff80012ead:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80012eb3:	e8 f8 d2 ff ff       	call   ffffffff800101b0 <fmt.formatType__anon_3133>
ffffffff80012eb8:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80012ebc:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80012ebf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80012ec3:	8b 46 08             	mov    eax,DWORD PTR [rsi+0x8]
ffffffff80012ec6:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80012ec9:	b0 01                	mov    al,0x1
ffffffff80012ecb:	a8 01                	test   al,0x1
ffffffff80012ecd:	75 02                	jne    ffffffff80012ed1 <fmt.format__anon_3393+0x51>
ffffffff80012ecf:	eb 02                	jmp    ffffffff80012ed3 <fmt.format__anon_3393+0x53>
ffffffff80012ed1:	eb 0f                	jmp    ffffffff80012ee2 <fmt.format__anon_3393+0x62>
ffffffff80012ed3:	bf 03 00 00 00       	mov    edi,0x3
ffffffff80012ed8:	be 04 00 00 00       	mov    esi,0x4
ffffffff80012edd:	e8 2e d4 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80012ee2:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80012ee6:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff80012eea:	48 c7 c2 cb b5 01 80 	mov    rdx,0xffffffff8001b5cb
ffffffff80012ef1:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff80012ef6:	e8 55 d4 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80012efb:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80012eff:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80012f03:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80012f07:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
ffffffff80012f0e:	00 
        try formatType(
ffffffff80012f0f:	48 8b 30             	mov    rsi,QWORD PTR [rax]
            std.options.fmt_max_depth,
ffffffff80012f12:	48 c7 c2 d8 ae 01 80 	mov    rdx,0xffffffff8001aed8
ffffffff80012f19:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80012f1f:	e8 ec d2 ff ff       	call   ffffffff80010210 <fmt.formatType__anon_3140>
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff80012f24:	31 c0                	xor    eax,eax
ffffffff80012f26:	48 83 c4 40          	add    rsp,0x40
ffffffff80012f2a:	5d                   	pop    rbp
ffffffff80012f2b:	c3                   	ret
ffffffff80012f2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80012f30 <fmt.formatType__anon_3436>:
) @TypeOf(writer).Error!void {
ffffffff80012f30:	55                   	push   rbp
ffffffff80012f31:	48 89 e5             	mov    rbp,rsp
ffffffff80012f34:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffffffff80012f3b:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
ffffffff80012f42:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffffffff80012f49:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffffffff80012f50:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff80012f57:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
ffffffff80012f5e:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
        defaultSpec(@TypeOf(value))
ffffffff80012f65:	48 c7 45 88 03 00 00 	mov    QWORD PTR [rbp-0x78],0x3
ffffffff80012f6c:	00 
ffffffff80012f6d:	48 c7 45 80 f1 b4 01 	mov    QWORD PTR [rbp-0x80],0xffffffff8001b4f1
ffffffff80012f74:	80 
            if (max_depth == 0) {
ffffffff80012f75:	49 83 f8 00          	cmp    r8,0x0
ffffffff80012f79:	75 3c                	jne    ffffffff80012fb7 <fmt.formatType__anon_3436+0x87>
ffffffff80012f7b:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80012f82:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                return writer.writeAll("{ ... }");
ffffffff80012f89:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80012f8c:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff80012f90:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80012f93:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
ffffffff80012f96:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff80012f9d:	48 8d 75 98          	lea    rsi,[rbp-0x68]
ffffffff80012fa1:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80012fa6:	e8 a5 d3 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80012fab:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff80012faf:	b0 01                	mov    al,0x1
ffffffff80012fb1:	a8 01                	test   al,0x1
ffffffff80012fb3:	75 04                	jne    ffffffff80012fb9 <fmt.formatType__anon_3436+0x89>
ffffffff80012fb5:	eb 0f                	jmp    ffffffff80012fc6 <fmt.formatType__anon_3436+0x96>
ffffffff80012fb7:	eb 26                	jmp    ffffffff80012fdf <fmt.formatType__anon_3436+0xaf>
ffffffff80012fb9:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80012fbd:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff80012fc4:	5d                   	pop    rbp
ffffffff80012fc5:	c3                   	ret
ffffffff80012fc6:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80012fcd:	e8 3e 04 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80012fd2:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80012fd6:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff80012fdd:	5d                   	pop    rbp
ffffffff80012fde:	c3                   	ret
ffffffff80012fdf:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80012fe6:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll("{ ");
ffffffff80012fed:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80012ff0:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff80012ff4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80012ff7:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff80012ffa:	48 c7 c2 57 b6 01 80 	mov    rdx,0xffffffff8001b657
ffffffff80013001:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff80013005:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8001300a:	e8 41 d3 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8001300f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80013016:	00 
            for (value, 0..) |elem, i| {
ffffffff80013017:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8001301b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff80013022:	48 83 f8 08          	cmp    rax,0x8
ffffffff80013026:	73 3a                	jae    ffffffff80013062 <fmt.formatType__anon_3436+0x132>
ffffffff80013028:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff8001302f:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff80013036:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff8001303d:	8a 14 0a             	mov    dl,BYTE PTR [rdx+rcx*1]
ffffffff80013040:	88 95 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],dl
ffffffff80013046:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
ffffffff80013049:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff8001304d:	48 83 e8 01          	sub    rax,0x1
ffffffff80013051:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80013055:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff80013059:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff8001305c:	84 c0                	test   al,al
ffffffff8001305e:	74 07                	je     ffffffff80013067 <fmt.formatType__anon_3436+0x137>
ffffffff80013060:	eb 07                	jmp    ffffffff80013069 <fmt.formatType__anon_3436+0x139>
                    try writer.writeAll(", ");
ffffffff80013062:	e9 9c 00 00 00       	jmp    ffffffff80013103 <fmt.formatType__anon_3436+0x1d3>
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff80013067:	eb 1c                	jmp    ffffffff80013085 <fmt.formatType__anon_3436+0x155>
ffffffff80013069:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013070:	48 c7 c1 e8 c7 01 80 	mov    rcx,0xffffffff8001c7e8
ffffffff80013077:	31 c0                	xor    eax,eax
ffffffff80013079:	89 c2                	mov    edx,eax
ffffffff8001307b:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013080:	e8 2b d1 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013085:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff8001308c:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffffffff80013093:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8001309a:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [rbp-0xb9]
ffffffff800130a0:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
ffffffff800130a4:	0f b6 f0             	movzx  esi,al
ffffffff800130a7:	e8 04 73 ff ff       	call   ffffffff8000a3b0 <fmt.formatType__anon_2943>
ffffffff800130ac:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
                if (i < value.len - 1) {
ffffffff800130b3:	48 83 f8 07          	cmp    rax,0x7
ffffffff800130b7:	73 32                	jae    ffffffff800130eb <fmt.formatType__anon_3436+0x1bb>
ffffffff800130b9:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff800130c0:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                    try writer.writeAll(", ");
ffffffff800130c7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800130ca:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff800130ce:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800130d1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff800130d4:	48 c7 c2 5a b6 01 80 	mov    rdx,0xffffffff8001b65a
ffffffff800130db:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff800130df:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff800130e4:	e8 67 d2 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800130e9:	eb 02                	jmp    ffffffff800130ed <fmt.formatType__anon_3436+0x1bd>
ffffffff800130eb:	eb 00                	jmp    ffffffff800130ed <fmt.formatType__anon_3436+0x1bd>
ffffffff800130ed:	eb 00                	jmp    ffffffff800130ef <fmt.formatType__anon_3436+0x1bf>
ffffffff800130ef:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff800130f6:	48 83 c0 01          	add    rax,0x1
ffffffff800130fa:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800130fe:	e9 14 ff ff ff       	jmp    ffffffff80013017 <fmt.formatType__anon_3436+0xe7>
ffffffff80013103:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8001310a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll(" }");
ffffffff80013111:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80013114:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80013118:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8001311b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8001311e:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff80013125:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80013129:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8001312e:	e8 1d d2 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80013133:	31 c0                	xor    eax,eax
ffffffff80013135:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8001313c:	5d                   	pop    rbp
ffffffff8001313d:	c3                   	ret
ffffffff8001313e:	66 90                	xchg   ax,ax

ffffffff80013140 <fmt.formatType__anon_3437>:
) @TypeOf(writer).Error!void {
ffffffff80013140:	55                   	push   rbp
ffffffff80013141:	48 89 e5             	mov    rbp,rsp
ffffffff80013144:	48 83 ec 30          	sub    rsp,0x30
ffffffff80013148:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001314c:	40 88 f0             	mov    al,sil
ffffffff8001314f:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff80013152:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80013156:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8001315d:	00 
ffffffff8001315e:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80013165:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80013166:	0f b6 f0             	movzx  esi,al
ffffffff80013169:	e8 72 e4 ff ff       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff8001316e:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80013172:	b0 01                	mov    al,0x1
ffffffff80013174:	a8 01                	test   al,0x1
ffffffff80013176:	75 02                	jne    ffffffff8001317a <fmt.formatType__anon_3437+0x3a>
ffffffff80013178:	eb 0a                	jmp    ffffffff80013184 <fmt.formatType__anon_3437+0x44>
ffffffff8001317a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001317e:	48 83 c4 30          	add    rsp,0x30
ffffffff80013182:	5d                   	pop    rbp
ffffffff80013183:	c3                   	ret
ffffffff80013184:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80013188:	e8 83 02 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001318d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80013191:	48 83 c4 30          	add    rsp,0x30
ffffffff80013195:	5d                   	pop    rbp
ffffffff80013196:	c3                   	ret
ffffffff80013197:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8001319e:	00 00 

ffffffff800131a0 <fmt.formatType__anon_3438>:
) @TypeOf(writer).Error!void {
ffffffff800131a0:	55                   	push   rbp
ffffffff800131a1:	48 89 e5             	mov    rbp,rsp
ffffffff800131a4:	48 81 ec c0 00 00 00 	sub    rsp,0xc0
ffffffff800131ab:	4c 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r8
ffffffff800131b2:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
ffffffff800131b9:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffffffff800131c0:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff800131c7:	48 89 bd 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdi
ffffffff800131ce:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
        defaultSpec(@TypeOf(value))
ffffffff800131d5:	48 c7 45 88 03 00 00 	mov    QWORD PTR [rbp-0x78],0x3
ffffffff800131dc:	00 
ffffffff800131dd:	48 c7 45 80 f1 b4 01 	mov    QWORD PTR [rbp-0x80],0xffffffff8001b4f1
ffffffff800131e4:	80 
            if (max_depth == 0) {
ffffffff800131e5:	49 83 f8 00          	cmp    r8,0x0
ffffffff800131e9:	75 3c                	jne    ffffffff80013227 <fmt.formatType__anon_3438+0x87>
ffffffff800131eb:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff800131f2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                return writer.writeAll("{ ... }");
ffffffff800131f9:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff800131fc:	48 89 4d 98          	mov    QWORD PTR [rbp-0x68],rcx
ffffffff80013200:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80013203:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
ffffffff80013206:	48 c7 c2 bf b3 01 80 	mov    rdx,0xffffffff8001b3bf
ffffffff8001320d:	48 8d 75 98          	lea    rsi,[rbp-0x68]
ffffffff80013211:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80013216:	e8 35 d1 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8001321b:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff8001321f:	b0 01                	mov    al,0x1
ffffffff80013221:	a8 01                	test   al,0x1
ffffffff80013223:	75 04                	jne    ffffffff80013229 <fmt.formatType__anon_3438+0x89>
ffffffff80013225:	eb 0f                	jmp    ffffffff80013236 <fmt.formatType__anon_3438+0x96>
ffffffff80013227:	eb 26                	jmp    ffffffff8001324f <fmt.formatType__anon_3438+0xaf>
ffffffff80013229:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff8001322d:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff80013234:	5d                   	pop    rbp
ffffffff80013235:	c3                   	ret
ffffffff80013236:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8001323d:	e8 ce 01 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80013242:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80013246:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff8001324d:	5d                   	pop    rbp
ffffffff8001324e:	c3                   	ret
ffffffff8001324f:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80013256:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll("{ ");
ffffffff8001325d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80013260:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
ffffffff80013264:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80013267:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
ffffffff8001326a:	48 c7 c2 57 b6 01 80 	mov    rdx,0xffffffff8001b657
ffffffff80013271:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff80013275:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8001327a:	e8 d1 d0 fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff8001327f:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80013286:	00 
            for (value, 0..) |elem, i| {
ffffffff80013287:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8001328b:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff80013292:	48 83 f8 06          	cmp    rax,0x6
ffffffff80013296:	73 3a                	jae    ffffffff800132d2 <fmt.formatType__anon_3438+0x132>
ffffffff80013298:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
ffffffff8001329f:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff800132a6:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff800132ad:	8a 14 0a             	mov    dl,BYTE PTR [rdx+rcx*1]
ffffffff800132b0:	88 95 47 ff ff ff    	mov    BYTE PTR [rbp-0xb9],dl
ffffffff800132b6:	88 55 c7             	mov    BYTE PTR [rbp-0x39],dl
ffffffff800132b9:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff800132bd:	48 83 e8 01          	sub    rax,0x1
ffffffff800132c1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800132c5:	0f 92 45 d8          	setb   BYTE PTR [rbp-0x28]
ffffffff800132c9:	8a 45 d8             	mov    al,BYTE PTR [rbp-0x28]
ffffffff800132cc:	84 c0                	test   al,al
ffffffff800132ce:	74 07                	je     ffffffff800132d7 <fmt.formatType__anon_3438+0x137>
ffffffff800132d0:	eb 07                	jmp    ffffffff800132d9 <fmt.formatType__anon_3438+0x139>
                    try writer.writeAll(", ");
ffffffff800132d2:	e9 9c 00 00 00       	jmp    ffffffff80013373 <fmt.formatType__anon_3438+0x1d3>
                try formatType(elem, actual_fmt, options, writer, max_depth - 1);
ffffffff800132d7:	eb 1c                	jmp    ffffffff800132f5 <fmt.formatType__anon_3438+0x155>
ffffffff800132d9:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800132e0:	48 c7 c1 f8 c7 01 80 	mov    rcx,0xffffffff8001c7f8
ffffffff800132e7:	31 c0                	xor    eax,eax
ffffffff800132e9:	89 c2                	mov    edx,eax
ffffffff800132eb:	be 10 00 00 00       	mov    esi,0x10
ffffffff800132f0:	e8 bb ce fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800132f5:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff800132fc:	48 8b 95 60 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa0]
ffffffff80013303:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8001330a:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [rbp-0xb9]
ffffffff80013310:	4c 8b 45 d0          	mov    r8,QWORD PTR [rbp-0x30]
ffffffff80013314:	0f b6 f0             	movzx  esi,al
ffffffff80013317:	e8 94 70 ff ff       	call   ffffffff8000a3b0 <fmt.formatType__anon_2943>
ffffffff8001331c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
                if (i < value.len - 1) {
ffffffff80013323:	48 83 f8 05          	cmp    rax,0x5
ffffffff80013327:	73 32                	jae    ffffffff8001335b <fmt.formatType__anon_3438+0x1bb>
ffffffff80013329:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff80013330:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
                    try writer.writeAll(", ");
ffffffff80013337:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff8001333a:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff8001333e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80013341:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff80013344:	48 c7 c2 5a b6 01 80 	mov    rdx,0xffffffff8001b65a
ffffffff8001334b:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff8001334f:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff80013354:	e8 f7 cf fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff80013359:	eb 02                	jmp    ffffffff8001335d <fmt.formatType__anon_3438+0x1bd>
ffffffff8001335b:	eb 00                	jmp    ffffffff8001335d <fmt.formatType__anon_3438+0x1bd>
ffffffff8001335d:	eb 00                	jmp    ffffffff8001335f <fmt.formatType__anon_3438+0x1bf>
ffffffff8001335f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff80013366:	48 83 c0 01          	add    rax,0x1
ffffffff8001336a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8001336e:	e9 14 ff ff ff       	jmp    ffffffff80013287 <fmt.formatType__anon_3438+0xe7>
ffffffff80013373:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8001337a:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
            try writer.writeAll(" }");
ffffffff80013381:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80013384:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
ffffffff80013388:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8001338b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8001338e:	48 c7 c2 48 b4 01 80 	mov    rdx,0xffffffff8001b448
ffffffff80013395:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80013399:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff8001339e:	e8 ad cf fe ff       	call   ffffffff80000350 <io.writer.Writer(ports.SerialPort,error{},(function 'write_message')).writeAll>
ffffffff800133a3:	31 c0                	xor    eax,eax
ffffffff800133a5:	48 81 c4 c0 00 00 00 	add    rsp,0xc0
ffffffff800133ac:	5d                   	pop    rbp
ffffffff800133ad:	c3                   	ret
ffffffff800133ae:	66 90                	xchg   ax,ax

ffffffff800133b0 <fmt.formatType__anon_3439>:
) @TypeOf(writer).Error!void {
ffffffff800133b0:	55                   	push   rbp
ffffffff800133b1:	48 89 e5             	mov    rbp,rsp
ffffffff800133b4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800133b8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800133bc:	40 88 f0             	mov    al,sil
ffffffff800133bf:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff800133c2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff800133c6:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff800133cd:	00 
ffffffff800133ce:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff800133d5:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff800133d6:	0f b6 f0             	movzx  esi,al
ffffffff800133d9:	e8 02 e2 ff ff       	call   ffffffff800115e0 <fmt.formatValue__anon_3190>
ffffffff800133de:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800133e2:	b0 01                	mov    al,0x1
ffffffff800133e4:	a8 01                	test   al,0x1
ffffffff800133e6:	75 02                	jne    ffffffff800133ea <fmt.formatType__anon_3439+0x3a>
ffffffff800133e8:	eb 0a                	jmp    ffffffff800133f4 <fmt.formatType__anon_3439+0x44>
ffffffff800133ea:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800133ee:	48 83 c4 30          	add    rsp,0x30
ffffffff800133f2:	5d                   	pop    rbp
ffffffff800133f3:	c3                   	ret
ffffffff800133f4:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800133f8:	e8 13 00 ff ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800133fd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80013401:	48 83 c4 30          	add    rsp,0x30
ffffffff80013405:	5d                   	pop    rbp
ffffffff80013406:	c3                   	ret
ffffffff80013407:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8001340e:	00 00 

ffffffff80013410 <fmt.formatType__anon_3440>:
) @TypeOf(writer).Error!void {
ffffffff80013410:	55                   	push   rbp
ffffffff80013411:	48 89 e5             	mov    rbp,rsp
ffffffff80013414:	48 83 ec 30          	sub    rsp,0x30
ffffffff80013418:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001341c:	89 75 dc             	mov    DWORD PTR [rbp-0x24],esi
ffffffff8001341f:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80013423:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8001342a:	00 
ffffffff8001342b:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80013432:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80013433:	e8 88 d9 ff ff       	call   ffffffff80010dc0 <fmt.formatValue__anon_3182>
ffffffff80013438:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001343c:	b0 01                	mov    al,0x1
ffffffff8001343e:	a8 01                	test   al,0x1
ffffffff80013440:	75 02                	jne    ffffffff80013444 <fmt.formatType__anon_3440+0x34>
ffffffff80013442:	eb 0a                	jmp    ffffffff8001344e <fmt.formatType__anon_3440+0x3e>
ffffffff80013444:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80013448:	48 83 c4 30          	add    rsp,0x30
ffffffff8001344c:	5d                   	pop    rbp
ffffffff8001344d:	c3                   	ret
ffffffff8001344e:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80013452:	e8 b9 ff fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80013457:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001345b:	48 83 c4 30          	add    rsp,0x30
ffffffff8001345f:	5d                   	pop    rbp
ffffffff80013460:	c3                   	ret
ffffffff80013461:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80013468:	00 00 00 
ffffffff8001346b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80013470 <io.fixed_buffer_stream.FixedBufferStream([]u8).write>:
        pub fn write(self: *Self, bytes: []const u8) WriteError!usize {
ffffffff80013470:	55                   	push   rbp
ffffffff80013471:	48 89 e5             	mov    rbp,rsp
ffffffff80013474:	48 81 ec 30 01 00 00 	sub    rsp,0x130
ffffffff8001347b:	4c 89 c0             	mov    rax,r8
ffffffff8001347e:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
ffffffff80013485:	48 89 b5 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rsi
ffffffff8001348c:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
ffffffff80013493:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
ffffffff8001349a:	49 89 c0             	mov    r8,rax
ffffffff8001349d:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
ffffffff800134a4:	48 89 ce             	mov    rsi,rcx
ffffffff800134a7:	48 89 b5 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rsi
ffffffff800134ae:	48 89 95 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rdx
ffffffff800134b5:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff800134b9:	48 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rcx
            if (bytes.len == 0) return 0;
ffffffff800134c0:	49 83 f8 00          	cmp    r8,0x0
ffffffff800134c4:	75 26                	jne    ffffffff800134ec <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x7c>
ffffffff800134c6:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff800134cd:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff800134d4:	48 c7 41 08 00 00 00 	mov    QWORD PTR [rcx+0x8],0x0
ffffffff800134db:	00 
ffffffff800134dc:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
ffffffff800134e3:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff800134ea:	5d                   	pop    rbp
ffffffff800134eb:	c3                   	ret
ffffffff800134ec:	eb 00                	jmp    ffffffff800134ee <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x7e>
ffffffff800134ee:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
            if (self.pos >= self.buffer.len) return error.NoSpaceLeft;
ffffffff800134f5:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
ffffffff800134f9:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
ffffffff800134fc:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80013500:	48 39 c8             	cmp    rax,rcx
ffffffff80013503:	72 32                	jb     ffffffff80013537 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0xc7>
ffffffff80013505:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff8001350c:	e8 ff fe fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80013511:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff80013518:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff8001351f:	48 c7 41 08 09 00 00 	mov    QWORD PTR [rcx+0x8],0x9
ffffffff80013526:	00 
ffffffff80013527:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
ffffffff8001352e:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff80013535:	5d                   	pop    rbp
ffffffff80013536:	c3                   	ret
ffffffff80013537:	eb 00                	jmp    ffffffff80013539 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0xc9>
ffffffff80013539:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
ffffffff80013540:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
            const n = if (self.pos + bytes.len <= self.buffer.len)
ffffffff80013547:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8001354b:	48 01 c8             	add    rax,rcx
ffffffff8001354e:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80013552:	0f 92 45 90          	setb   BYTE PTR [rbp-0x70]
ffffffff80013556:	8a 45 90             	mov    al,BYTE PTR [rbp-0x70]
ffffffff80013559:	84 c0                	test   al,al
ffffffff8001355b:	75 04                	jne    ffffffff80013561 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0xf1>
ffffffff8001355d:	eb 00                	jmp    ffffffff8001355f <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0xef>
ffffffff8001355f:	eb 1c                	jmp    ffffffff8001357d <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x10d>
ffffffff80013561:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013568:	48 c7 c1 58 c4 01 80 	mov    rcx,0xffffffff8001c458
ffffffff8001356f:	31 c0                	xor    eax,eax
ffffffff80013571:	89 c2                	mov    edx,eax
ffffffff80013573:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013578:	e8 33 cc fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001357d:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffffffff80013584:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80013588:	48 8b 11             	mov    rdx,QWORD PTR [rcx]
ffffffff8001358b:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff8001358f:	48 39 c8             	cmp    rax,rcx
ffffffff80013592:	77 10                	ja     ffffffff800135a4 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x134>
ffffffff80013594:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8001359b:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
                bytes.len
ffffffff800135a2:	eb 4c                	jmp    ffffffff800135f0 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x180>
ffffffff800135a4:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
                self.buffer.len - self.pos;
ffffffff800135ab:	48 8b 41 08          	mov    rax,QWORD PTR [rcx+0x8]
ffffffff800135af:	48 8b 49 10          	mov    rcx,QWORD PTR [rcx+0x10]
ffffffff800135b3:	48 29 c8             	sub    rax,rcx
ffffffff800135b6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff800135ba:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff800135be:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff800135c1:	84 c0                	test   al,al
ffffffff800135c3:	75 04                	jne    ffffffff800135c9 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x159>
ffffffff800135c5:	eb 00                	jmp    ffffffff800135c7 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x157>
ffffffff800135c7:	eb 1c                	jmp    ffffffff800135e5 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x175>
ffffffff800135c9:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800135d0:	48 c7 c1 68 c4 01 80 	mov    rcx,0xffffffff8001c468
ffffffff800135d7:	31 c0                	xor    eax,eax
ffffffff800135d9:	89 c2                	mov    edx,eax
ffffffff800135db:	be 10 00 00 00       	mov    esi,0x10
ffffffff800135e0:	e8 cb cb fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800135e5:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff800135e9:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
ffffffff800135f0:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff800135f7:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
ffffffff800135fe:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
ffffffff80013605:	48 89 4d a8          	mov    QWORD PTR [rbp-0x58],rcx
            mem.copy(u8, self.buffer[self.pos .. self.pos + n], bytes[0..n]);
ffffffff80013609:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff8001360d:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80013611:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
ffffffff80013618:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8001361c:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
ffffffff80013623:	48 01 c8             	add    rax,rcx
ffffffff80013626:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8001362a:	0f 92 45 c0          	setb   BYTE PTR [rbp-0x40]
ffffffff8001362e:	8a 45 c0             	mov    al,BYTE PTR [rbp-0x40]
ffffffff80013631:	84 c0                	test   al,al
ffffffff80013633:	75 04                	jne    ffffffff80013639 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x1c9>
ffffffff80013635:	eb 00                	jmp    ffffffff80013637 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x1c7>
ffffffff80013637:	eb 1c                	jmp    ffffffff80013655 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x1e5>
ffffffff80013639:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013640:	48 c7 c1 78 c4 01 80 	mov    rcx,0xffffffff8001c478
ffffffff80013647:	31 c0                	xor    eax,eax
ffffffff80013649:	89 c2                	mov    edx,eax
ffffffff8001364b:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013650:	e8 5b cb fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013655:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffffffff8001365c:	48 8b b5 28 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd8]
ffffffff80013663:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80013667:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
ffffffff8001366e:	48 8b 16             	mov    rdx,QWORD PTR [rsi]
ffffffff80013671:	48 8b 76 08          	mov    rsi,QWORD PTR [rsi+0x8]
ffffffff80013675:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
ffffffff8001367c:	48 01 c2             	add    rdx,rax
ffffffff8001367f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
ffffffff80013686:	48 39 c8             	cmp    rax,rcx
ffffffff80013689:	77 02                	ja     ffffffff8001368d <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x21d>
ffffffff8001368b:	eb 13                	jmp    ffffffff800136a0 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x230>
ffffffff8001368d:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
ffffffff80013694:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
ffffffff8001369b:	e8 70 cc fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800136a0:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff800136a7:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff800136ae:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
ffffffff800136b5:	48 89 c2             	mov    rdx,rax
ffffffff800136b8:	48 29 f2             	sub    rdx,rsi
ffffffff800136bb:	48 89 95 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rdx
ffffffff800136c2:	48 39 c8             	cmp    rax,rcx
ffffffff800136c5:	77 02                	ja     ffffffff800136c9 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x259>
ffffffff800136c7:	eb 13                	jmp    ffffffff800136dc <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x26c>
ffffffff800136c9:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
ffffffff800136d0:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff800136d7:	e8 f4 ca fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800136dc:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffffffff800136e3:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
ffffffff800136ea:	48 39 c8             	cmp    rax,rcx
ffffffff800136ed:	77 02                	ja     ffffffff800136f1 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x281>
ffffffff800136ef:	eb 13                	jmp    ffffffff80013704 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x294>
ffffffff800136f1:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
ffffffff800136f8:	48 8b bd 30 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd0]
ffffffff800136ff:	e8 cc ca fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013704:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff8001370b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013712:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
ffffffff80013719:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
ffffffff80013720:	48 8b bd 00 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x100]
ffffffff80013727:	48 89 bd e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdi
ffffffff8001372e:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
ffffffff80013735:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff80013739:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8001373d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80013741:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff80013748:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8001374c:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80013753:	31 c0                	xor    eax,eax
ffffffff80013755:	48 39 c8             	cmp    rax,rcx
ffffffff80013758:	77 02                	ja     ffffffff8001375c <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x2ec>
ffffffff8001375a:	eb 12                	jmp    ffffffff8001376e <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x2fe>
ffffffff8001375c:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
ffffffff80013763:	31 c0                	xor    eax,eax
ffffffff80013765:	31 c0                	xor    eax,eax
ffffffff80013767:	89 c7                	mov    edi,eax
ffffffff80013769:	e8 a2 cb fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8001376e:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff80013775:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
ffffffff8001377c:	48 39 c8             	cmp    rax,rcx
ffffffff8001377f:	77 02                	ja     ffffffff80013783 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x313>
ffffffff80013781:	eb 13                	jmp    ffffffff80013796 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x326>
ffffffff80013783:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
ffffffff8001378a:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
ffffffff80013791:	e8 3a ca fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013796:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff8001379d:	31 c0                	xor    eax,eax
ffffffff8001379f:	48 39 c8             	cmp    rax,rcx
ffffffff800137a2:	77 02                	ja     ffffffff800137a6 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x336>
ffffffff800137a4:	eb 12                	jmp    ffffffff800137b8 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x348>
ffffffff800137a6:	48 8b b5 20 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe0]
ffffffff800137ad:	31 c0                	xor    eax,eax
ffffffff800137af:	31 c0                	xor    eax,eax
ffffffff800137b1:	89 c7                	mov    edi,eax
ffffffff800137b3:	e8 18 ca fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800137b8:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff800137bf:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
ffffffff800137c6:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffffffff800137cd:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
ffffffff800137d4:	e8 c7 81 ff ff       	call   ffffffff8000b9a0 <mem.copy__anon_3027>
ffffffff800137d9:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
ffffffff800137e0:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
            self.pos += n;
ffffffff800137e7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800137eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800137ef:	48 89 c2             	mov    rdx,rax
ffffffff800137f2:	48 83 c2 10          	add    rdx,0x10
ffffffff800137f6:	48 89 95 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdx
ffffffff800137fd:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80013801:	48 01 c8             	add    rax,rcx
ffffffff80013804:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80013808:	0f 92 45 e8          	setb   BYTE PTR [rbp-0x18]
ffffffff8001380c:	8a 45 e8             	mov    al,BYTE PTR [rbp-0x18]
ffffffff8001380f:	84 c0                	test   al,al
ffffffff80013811:	75 04                	jne    ffffffff80013817 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x3a7>
ffffffff80013813:	eb 00                	jmp    ffffffff80013815 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x3a5>
ffffffff80013815:	eb 1c                	jmp    ffffffff80013833 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x3c3>
ffffffff80013817:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001381e:	48 c7 c1 88 c4 01 80 	mov    rcx,0xffffffff8001c488
ffffffff80013825:	31 c0                	xor    eax,eax
ffffffff80013827:	89 c2                	mov    edx,eax
ffffffff80013829:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001382e:	e8 7d c9 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013833:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff8001383a:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80013841:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80013845:	48 89 11             	mov    QWORD PTR [rcx],rdx
            if (n == 0) return error.NoSpaceLeft;
ffffffff80013848:	48 83 f8 00          	cmp    rax,0x0
ffffffff8001384c:	75 32                	jne    ffffffff80013880 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x410>
ffffffff8001384e:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff80013855:	e8 b6 fb fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001385a:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff80013861:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80013868:	48 c7 41 08 09 00 00 	mov    QWORD PTR [rcx+0x8],0x9
ffffffff8001386f:	00 
ffffffff80013870:	48 c7 01 00 00 00 00 	mov    QWORD PTR [rcx],0x0
ffffffff80013877:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff8001387e:	5d                   	pop    rbp
ffffffff8001387f:	c3                   	ret
ffffffff80013880:	eb 00                	jmp    ffffffff80013882 <io.fixed_buffer_stream.FixedBufferStream([]u8).write+0x412>
ffffffff80013882:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80013889:	48 8b 8d 50 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb0]
ffffffff80013890:	48 8b 95 20 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe0]
            return n;
ffffffff80013897:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
ffffffff8001389d:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff800138a1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800138a5:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff800138a8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800138ac:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff800138b0:	48 81 c4 30 01 00 00 	add    rsp,0x130
ffffffff800138b7:	5d                   	pop    rbp
ffffffff800138b8:	c3                   	ret
ffffffff800138b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800138c0 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write>:
        pub fn write(self: Self, bytes: []const u8) Error!usize {
ffffffff800138c0:	55                   	push   rbp
ffffffff800138c1:	48 89 e5             	mov    rbp,rsp
ffffffff800138c4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800138c8:	4c 89 45 c8          	mov    QWORD PTR [rbp-0x38],r8
ffffffff800138cc:	48 89 c8             	mov    rax,rcx
ffffffff800138cf:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff800138d3:	48 89 f9             	mov    rcx,rdi
ffffffff800138d6:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffffffff800138da:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff800138de:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffffffff800138e2:	49 89 f8             	mov    r8,rdi
ffffffff800138e5:	48 89 c1             	mov    rcx,rax
ffffffff800138e8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800138ec:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
            return writeFn(self.context, bytes);
ffffffff800138f0:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff800138f3:	48 8d 7d f0          	lea    rdi,[rbp-0x10]
ffffffff800138f7:	e8 74 fb ff ff       	call   ffffffff80013470 <io.fixed_buffer_stream.FixedBufferStream([]u8).write>
ffffffff800138fc:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80013900:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80013904:	48 89 07             	mov    QWORD PTR [rdi],rax
ffffffff80013907:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8001390b:	48 89 47 08          	mov    QWORD PTR [rdi+0x8],rax
ffffffff8001390f:	66 83 7f 08 00       	cmp    WORD PTR [rdi+0x8],0x0
ffffffff80013914:	75 0a                	jne    ffffffff80013920 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).write+0x60>
ffffffff80013916:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8001391a:	48 83 c4 40          	add    rsp,0x40
ffffffff8001391e:	5d                   	pop    rbp
ffffffff8001391f:	c3                   	ret
ffffffff80013920:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
ffffffff80013924:	e8 e7 fa fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80013929:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8001392d:	48 83 c4 40          	add    rsp,0x40
ffffffff80013931:	5d                   	pop    rbp
ffffffff80013932:	c3                   	ret
ffffffff80013933:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8001393a:	00 00 00 
ffffffff8001393d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80013940 <fmt.formatValue__anon_3443>:
) !void {
ffffffff80013940:	55                   	push   rbp
ffffffff80013941:	48 89 e5             	mov    rbp,rsp
ffffffff80013944:	48 83 ec 20          	sub    rsp,0x20
ffffffff80013948:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8001394c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80013950:	e8 2b 00 00 00       	call   ffffffff80013980 <fmt.formatIntValue__anon_3445>
ffffffff80013955:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80013959:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8001395e:	75 0a                	jne    ffffffff8001396a <fmt.formatValue__anon_3443+0x2a>
ffffffff80013960:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80013964:	48 83 c4 20          	add    rsp,0x20
ffffffff80013968:	5d                   	pop    rbp
ffffffff80013969:	c3                   	ret
ffffffff8001396a:	48 8b 7d e8          	mov    rdi,QWORD PTR [rbp-0x18]
ffffffff8001396e:	e8 9d fa fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80013973:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80013977:	48 83 c4 20          	add    rsp,0x20
ffffffff8001397b:	5d                   	pop    rbp
ffffffff8001397c:	c3                   	ret
ffffffff8001397d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80013980 <fmt.formatIntValue__anon_3445>:
) !void {
ffffffff80013980:	55                   	push   rbp
ffffffff80013981:	48 89 e5             	mov    rbp,rsp
ffffffff80013984:	48 83 ec 20          	sub    rsp,0x20
ffffffff80013988:	49 89 c9             	mov    r9,rcx
ffffffff8001398b:	49 89 d0             	mov    r8,rdx
ffffffff8001398e:	48 89 7d e0          	mov    QWORD PTR [rbp-0x20],rdi
ffffffff80013992:	48 89 75 e8          	mov    QWORD PTR [rbp-0x18],rsi
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80013996:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    return formatInt(int_value, radix, case, options, writer);
ffffffff8001399a:	31 c0                	xor    eax,eax
ffffffff8001399c:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff800139a1:	31 c9                	xor    ecx,ecx
ffffffff800139a3:	e8 28 00 00 00       	call   ffffffff800139d0 <fmt.formatInt__anon_3449>
ffffffff800139a8:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800139ac:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800139b1:	75 0a                	jne    ffffffff800139bd <fmt.formatIntValue__anon_3445+0x3d>
ffffffff800139b3:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800139b7:	48 83 c4 20          	add    rsp,0x20
ffffffff800139bb:	5d                   	pop    rbp
ffffffff800139bc:	c3                   	ret
ffffffff800139bd:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
ffffffff800139c1:	e8 4a fa fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800139c6:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800139ca:	48 83 c4 20          	add    rsp,0x20
ffffffff800139ce:	5d                   	pop    rbp
ffffffff800139cf:	c3                   	ret

ffffffff800139d0 <fmt.formatInt__anon_3449>:
) !void {
ffffffff800139d0:	55                   	push   rbp
ffffffff800139d1:	48 89 e5             	mov    rbp,rsp
ffffffff800139d4:	48 81 ec 10 02 00 00 	sub    rsp,0x210
ffffffff800139db:	4c 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],r9
ffffffff800139e2:	4c 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],r8
ffffffff800139e9:	48 89 b5 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rsi
ffffffff800139f0:	48 89 bd c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rdi
ffffffff800139f7:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
ffffffff800139fd:	88 d0                	mov    al,dl
ffffffff800139ff:	88 85 df fe ff ff    	mov    BYTE PTR [rbp-0x121],al
ffffffff80013a05:	48 89 b5 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rsi
ffffffff80013a0c:	88 85 f6 fe ff ff    	mov    BYTE PTR [rbp-0x10a],al
ffffffff80013a12:	80 e1 01             	and    cl,0x1
ffffffff80013a15:	88 8d f7 fe ff ff    	mov    BYTE PTR [rbp-0x109],cl
    assert(base >= 2);
ffffffff80013a1b:	3c 02                	cmp    al,0x2
ffffffff80013a1d:	0f 93 c0             	setae  al
ffffffff80013a20:	0f b6 f8             	movzx  edi,al
ffffffff80013a23:	e8 08 22 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80013a28:	48 8b bd d0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x130]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80013a2f:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80013a36:	66 c7 85 06 ff ff ff 	mov    WORD PTR [rbp-0xfa],0x40
ffffffff80013a3d:	40 00 
    const abs_value = math.absCast(int_value);
ffffffff80013a3f:	e8 2c 37 ff ff       	call   ffffffff80007170 <math.absCast__anon_2785>
ffffffff80013a44:	48 89 c1             	mov    rcx,rax
ffffffff80013a47:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
ffffffff80013a4d:	48 89 8d 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rcx
ffffffff80013a54:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff80013a5b:	aa aa aa 
ffffffff80013a5e:	48 89 95 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rdx
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80013a65:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
ffffffff80013a6c:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
ffffffff80013a73:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
ffffffff80013a7a:	48 89 95 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rdx
ffffffff80013a81:	48 89 95 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdx
ffffffff80013a88:	48 89 95 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rdx
ffffffff80013a8f:	48 89 95 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdx
ffffffff80013a96:	48 89 95 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rdx
ffffffff80013a9d:	c6 85 50 ff ff ff aa 	mov    BYTE PTR [rbp-0xb0],0xaa
    var a: MinInt = abs_value;
ffffffff80013aa4:	48 89 8d 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rcx
    var index: usize = buf.len;
ffffffff80013aab:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x41
ffffffff80013ab2:	41 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff80013ab6:	3c 0a                	cmp    al,0xa
ffffffff80013ab8:	75 0f                	jne    ffffffff80013ac9 <fmt.formatInt__anon_3449+0xf9>
ffffffff80013aba:	e8 d1 36 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80013abf:	34 ff                	xor    al,0xff
ffffffff80013ac1:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
ffffffff80013ac7:	eb 0a                	jmp    ffffffff80013ad3 <fmt.formatInt__anon_3449+0x103>
ffffffff80013ac9:	31 c0                	xor    eax,eax
ffffffff80013acb:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
ffffffff80013ad1:	eb 00                	jmp    ffffffff80013ad3 <fmt.formatInt__anon_3449+0x103>
ffffffff80013ad3:	8a 85 af fe ff ff    	mov    al,BYTE PTR [rbp-0x151]
ffffffff80013ad9:	a8 01                	test   al,0x1
ffffffff80013adb:	75 02                	jne    ffffffff80013adf <fmt.formatInt__anon_3449+0x10f>
ffffffff80013add:	eb 02                	jmp    ffffffff80013ae1 <fmt.formatInt__anon_3449+0x111>
ffffffff80013adf:	eb 05                	jmp    ffffffff80013ae6 <fmt.formatInt__anon_3449+0x116>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80013ae1:	e9 0d 04 00 00       	jmp    ffffffff80013ef3 <fmt.formatInt__anon_3449+0x523>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80013ae6:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x64
ffffffff80013aed:	64 
ffffffff80013aee:	72 25                	jb     ffffffff80013b15 <fmt.formatInt__anon_3449+0x145>
            index -= 2;
ffffffff80013af0:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013af7:	48 83 e8 02          	sub    rax,0x2
ffffffff80013afb:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
ffffffff80013b02:	0f 92 85 70 ff ff ff 	setb   BYTE PTR [rbp-0x90]
ffffffff80013b09:	8a 85 70 ff ff ff    	mov    al,BYTE PTR [rbp-0x90]
ffffffff80013b0f:	84 c0                	test   al,al
ffffffff80013b11:	74 07                	je     ffffffff80013b1a <fmt.formatInt__anon_3449+0x14a>
ffffffff80013b13:	eb 07                	jmp    ffffffff80013b1c <fmt.formatInt__anon_3449+0x14c>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80013b15:	e9 69 01 00 00       	jmp    ffffffff80013c83 <fmt.formatInt__anon_3449+0x2b3>
            index -= 2;
ffffffff80013b1a:	eb 1c                	jmp    ffffffff80013b38 <fmt.formatInt__anon_3449+0x168>
ffffffff80013b1c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013b23:	48 c7 c1 b8 c4 01 80 	mov    rcx,0xffffffff8001c4b8
ffffffff80013b2a:	31 c0                	xor    eax,eax
ffffffff80013b2c:	89 c2                	mov    edx,eax
ffffffff80013b2e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013b33:	e8 78 c6 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013b38:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80013b3f:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80013b46:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013b4d:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80013b54:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff80013b5b:	48 01 c1             	add    rcx,rax
ffffffff80013b5e:	48 89 8d a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rcx
ffffffff80013b65:	48 83 f8 41          	cmp    rax,0x41
ffffffff80013b69:	77 02                	ja     ffffffff80013b6d <fmt.formatInt__anon_3449+0x19d>
ffffffff80013b6b:	eb 11                	jmp    ffffffff80013b7e <fmt.formatInt__anon_3449+0x1ae>
ffffffff80013b6d:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff80013b74:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013b79:	e8 92 c7 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80013b7e:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
ffffffff80013b85:	b8 41 00 00 00       	mov    eax,0x41
ffffffff80013b8a:	48 29 c8             	sub    rax,rcx
ffffffff80013b8d:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
ffffffff80013b94:	b0 01                	mov    al,0x1
ffffffff80013b96:	a8 01                	test   al,0x1
ffffffff80013b98:	75 02                	jne    ffffffff80013b9c <fmt.formatInt__anon_3449+0x1cc>
ffffffff80013b9a:	eb 02                	jmp    ffffffff80013b9e <fmt.formatInt__anon_3449+0x1ce>
ffffffff80013b9c:	eb 0d                	jmp    ffffffff80013bab <fmt.formatInt__anon_3449+0x1db>
ffffffff80013b9e:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013ba3:	48 89 f7             	mov    rdi,rsi
ffffffff80013ba6:	e8 25 c6 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013bab:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
ffffffff80013bb2:	48 83 f8 41          	cmp    rax,0x41
ffffffff80013bb6:	77 02                	ja     ffffffff80013bba <fmt.formatInt__anon_3449+0x1ea>
ffffffff80013bb8:	eb 11                	jmp    ffffffff80013bcb <fmt.formatInt__anon_3449+0x1fb>
ffffffff80013bba:	48 8b bd 98 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x168]
ffffffff80013bc1:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013bc6:	e8 05 c6 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013bcb:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
ffffffff80013bd2:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
ffffffff80013bd9:	48 89 4d 80          	mov    QWORD PTR [rbp-0x80],rcx
ffffffff80013bdd:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80013be4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80013beb:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
ffffffff80013bf2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80013bf6:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
ffffffff80013bfd:	b0 01                	mov    al,0x1
ffffffff80013bff:	a8 01                	test   al,0x1
ffffffff80013c01:	75 02                	jne    ffffffff80013c05 <fmt.formatInt__anon_3449+0x235>
ffffffff80013c03:	eb 02                	jmp    ffffffff80013c07 <fmt.formatInt__anon_3449+0x237>
ffffffff80013c05:	eb 10                	jmp    ffffffff80013c17 <fmt.formatInt__anon_3449+0x247>
ffffffff80013c07:	31 c0                	xor    eax,eax
ffffffff80013c09:	31 c0                	xor    eax,eax
ffffffff80013c0b:	89 c7                	mov    edi,eax
ffffffff80013c0d:	be 02 00 00 00       	mov    esi,0x2
ffffffff80013c12:	e8 f9 c6 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80013c17:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
ffffffff80013c1e:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80013c23:	48 39 c8             	cmp    rax,rcx
ffffffff80013c26:	77 02                	ja     ffffffff80013c2a <fmt.formatInt__anon_3449+0x25a>
ffffffff80013c28:	eb 11                	jmp    ffffffff80013c3b <fmt.formatInt__anon_3449+0x26b>
ffffffff80013c2a:	48 8b b5 88 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x178]
ffffffff80013c31:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80013c36:	e8 95 c5 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013c3b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80013c42:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff80013c47:	31 d2                	xor    edx,edx
ffffffff80013c49:	48 f7 f1             	div    rcx
ffffffff80013c4c:	48 89 d6             	mov    rsi,rdx
ffffffff80013c4f:	48 8d 7d 8e          	lea    rdi,[rbp-0x72]
ffffffff80013c53:	e8 58 35 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80013c58:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff80013c5f:	66 8b 4d 8e          	mov    cx,WORD PTR [rbp-0x72]
ffffffff80013c63:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80013c66:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
ffffffff80013c6d:	b9 64 00 00 00       	mov    ecx,0x64
ffffffff80013c72:	31 d2                	xor    edx,edx
ffffffff80013c74:	48 f7 f1             	div    rcx
ffffffff80013c77:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
ffffffff80013c7e:	e9 63 fe ff ff       	jmp    ffffffff80013ae6 <fmt.formatInt__anon_3449+0x116>
        if (a < 10) {
ffffffff80013c83:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0xa
ffffffff80013c8a:	0a 
ffffffff80013c8b:	73 1c                	jae    ffffffff80013ca9 <fmt.formatInt__anon_3449+0x2d9>
            index -= 1;
ffffffff80013c8d:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013c94:	48 83 e8 01          	sub    rax,0x1
ffffffff80013c98:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80013c9c:	0f 92 45 98          	setb   BYTE PTR [rbp-0x68]
ffffffff80013ca0:	8a 45 98             	mov    al,BYTE PTR [rbp-0x68]
ffffffff80013ca3:	84 c0                	test   al,al
ffffffff80013ca5:	74 25                	je     ffffffff80013ccc <fmt.formatInt__anon_3449+0x2fc>
ffffffff80013ca7:	eb 25                	jmp    ffffffff80013cce <fmt.formatInt__anon_3449+0x2fe>
            index -= 2;
ffffffff80013ca9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013cb0:	48 83 e8 02          	sub    rax,0x2
ffffffff80013cb4:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80013cb8:	0f 92 45 b0          	setb   BYTE PTR [rbp-0x50]
ffffffff80013cbc:	8a 45 b0             	mov    al,BYTE PTR [rbp-0x50]
ffffffff80013cbf:	84 c0                	test   al,al
ffffffff80013cc1:	0f 84 f1 00 00 00    	je     ffffffff80013db8 <fmt.formatInt__anon_3449+0x3e8>
ffffffff80013cc7:	e9 ee 00 00 00       	jmp    ffffffff80013dba <fmt.formatInt__anon_3449+0x3ea>
            index -= 1;
ffffffff80013ccc:	eb 1c                	jmp    ffffffff80013cea <fmt.formatInt__anon_3449+0x31a>
ffffffff80013cce:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013cd5:	48 c7 c1 c8 c4 01 80 	mov    rcx,0xffffffff8001c4c8
ffffffff80013cdc:	31 c0                	xor    eax,eax
ffffffff80013cde:	89 c2                	mov    edx,eax
ffffffff80013ce0:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013ce5:	e8 c6 c4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013cea:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80013cee:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80013cf5:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013cfc:	48 89 85 78 fe ff ff 	mov    QWORD PTR [rbp-0x188],rax
ffffffff80013d03:	48 83 f8 41          	cmp    rax,0x41
ffffffff80013d07:	73 02                	jae    ffffffff80013d0b <fmt.formatInt__anon_3449+0x33b>
ffffffff80013d09:	eb 11                	jmp    ffffffff80013d1c <fmt.formatInt__anon_3449+0x34c>
ffffffff80013d0b:	48 8b bd 78 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x188]
ffffffff80013d12:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013d17:	e8 b4 c4 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013d1c:	48 8b 8d 78 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x188]
ffffffff80013d23:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffffffff80013d2a:	48 01 c8             	add    rax,rcx
ffffffff80013d2d:	48 89 85 68 fe ff ff 	mov    QWORD PTR [rbp-0x198],rax
ffffffff80013d34:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff80013d3b:	48 89 8d 70 fe ff ff 	mov    QWORD PTR [rbp-0x190],rcx
ffffffff80013d42:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80013d47:	48 29 c8             	sub    rax,rcx
ffffffff80013d4a:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff80013d50:	77 02                	ja     ffffffff80013d54 <fmt.formatInt__anon_3449+0x384>
ffffffff80013d52:	eb 1c                	jmp    ffffffff80013d70 <fmt.formatInt__anon_3449+0x3a0>
ffffffff80013d54:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80013d5b:	48 c7 c1 d8 c4 01 80 	mov    rcx,0xffffffff8001c4d8
ffffffff80013d62:	31 c0                	xor    eax,eax
ffffffff80013d64:	89 c2                	mov    edx,eax
ffffffff80013d66:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff80013d6b:	e8 40 c4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013d70:	48 8b 85 70 fe ff ff 	mov    rax,QWORD PTR [rbp-0x190]
ffffffff80013d77:	04 30                	add    al,0x30
ffffffff80013d79:	88 45 a0             	mov    BYTE PTR [rbp-0x60],al
ffffffff80013d7c:	0f 92 45 a1          	setb   BYTE PTR [rbp-0x5f]
ffffffff80013d80:	8a 45 a1             	mov    al,BYTE PTR [rbp-0x5f]
ffffffff80013d83:	84 c0                	test   al,al
ffffffff80013d85:	75 04                	jne    ffffffff80013d8b <fmt.formatInt__anon_3449+0x3bb>
ffffffff80013d87:	eb 00                	jmp    ffffffff80013d89 <fmt.formatInt__anon_3449+0x3b9>
ffffffff80013d89:	eb 1c                	jmp    ffffffff80013da7 <fmt.formatInt__anon_3449+0x3d7>
ffffffff80013d8b:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013d92:	48 c7 c1 e8 c4 01 80 	mov    rcx,0xffffffff8001c4e8
ffffffff80013d99:	31 c0                	xor    eax,eax
ffffffff80013d9b:	89 c2                	mov    edx,eax
ffffffff80013d9d:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013da2:	e8 09 c4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013da7:	48 8b 85 68 fe ff ff 	mov    rax,QWORD PTR [rbp-0x198]
ffffffff80013dae:	8a 4d a0             	mov    cl,BYTE PTR [rbp-0x60]
ffffffff80013db1:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80013db3:	e9 36 01 00 00       	jmp    ffffffff80013eee <fmt.formatInt__anon_3449+0x51e>
            index -= 2;
ffffffff80013db8:	eb 1c                	jmp    ffffffff80013dd6 <fmt.formatInt__anon_3449+0x406>
ffffffff80013dba:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013dc1:	48 c7 c1 f8 c4 01 80 	mov    rcx,0xffffffff8001c4f8
ffffffff80013dc8:	31 c0                	xor    eax,eax
ffffffff80013dca:	89 c2                	mov    edx,eax
ffffffff80013dcc:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013dd1:	e8 da c3 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013dd6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80013dda:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80013de1:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013de8:	48 89 85 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rax
ffffffff80013def:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff80013df6:	48 01 c1             	add    rcx,rax
ffffffff80013df9:	48 89 8d 60 fe ff ff 	mov    QWORD PTR [rbp-0x1a0],rcx
ffffffff80013e00:	48 83 f8 41          	cmp    rax,0x41
ffffffff80013e04:	77 02                	ja     ffffffff80013e08 <fmt.formatInt__anon_3449+0x438>
ffffffff80013e06:	eb 11                	jmp    ffffffff80013e19 <fmt.formatInt__anon_3449+0x449>
ffffffff80013e08:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff80013e0f:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013e14:	e8 f7 c4 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80013e19:	48 8b 8d 58 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1a8]
ffffffff80013e20:	b8 41 00 00 00       	mov    eax,0x41
ffffffff80013e25:	48 29 c8             	sub    rax,rcx
ffffffff80013e28:	48 89 85 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rax
ffffffff80013e2f:	b0 01                	mov    al,0x1
ffffffff80013e31:	a8 01                	test   al,0x1
ffffffff80013e33:	75 02                	jne    ffffffff80013e37 <fmt.formatInt__anon_3449+0x467>
ffffffff80013e35:	eb 02                	jmp    ffffffff80013e39 <fmt.formatInt__anon_3449+0x469>
ffffffff80013e37:	eb 0d                	jmp    ffffffff80013e46 <fmt.formatInt__anon_3449+0x476>
ffffffff80013e39:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013e3e:	48 89 f7             	mov    rdi,rsi
ffffffff80013e41:	e8 8a c3 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013e46:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
ffffffff80013e4d:	48 83 f8 41          	cmp    rax,0x41
ffffffff80013e51:	77 02                	ja     ffffffff80013e55 <fmt.formatInt__anon_3449+0x485>
ffffffff80013e53:	eb 11                	jmp    ffffffff80013e66 <fmt.formatInt__anon_3449+0x496>
ffffffff80013e55:	48 8b bd 58 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1a8]
ffffffff80013e5c:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013e61:	e8 6a c3 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013e66:	48 8b 85 60 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a0]
ffffffff80013e6d:	48 8b 8d 50 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b0]
ffffffff80013e74:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
ffffffff80013e78:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80013e7c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80013e80:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
ffffffff80013e87:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80013e8b:	48 89 85 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rax
ffffffff80013e92:	b0 01                	mov    al,0x1
ffffffff80013e94:	a8 01                	test   al,0x1
ffffffff80013e96:	75 02                	jne    ffffffff80013e9a <fmt.formatInt__anon_3449+0x4ca>
ffffffff80013e98:	eb 02                	jmp    ffffffff80013e9c <fmt.formatInt__anon_3449+0x4cc>
ffffffff80013e9a:	eb 10                	jmp    ffffffff80013eac <fmt.formatInt__anon_3449+0x4dc>
ffffffff80013e9c:	31 c0                	xor    eax,eax
ffffffff80013e9e:	31 c0                	xor    eax,eax
ffffffff80013ea0:	89 c7                	mov    edi,eax
ffffffff80013ea2:	be 02 00 00 00       	mov    esi,0x2
ffffffff80013ea7:	e8 64 c4 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80013eac:	48 8b 8d 48 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1b8]
ffffffff80013eb3:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80013eb8:	48 39 c8             	cmp    rax,rcx
ffffffff80013ebb:	77 02                	ja     ffffffff80013ebf <fmt.formatInt__anon_3449+0x4ef>
ffffffff80013ebd:	eb 11                	jmp    ffffffff80013ed0 <fmt.formatInt__anon_3449+0x500>
ffffffff80013ebf:	48 8b b5 48 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1b8]
ffffffff80013ec6:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80013ecb:	e8 00 c3 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013ed0:	48 8b b5 58 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa8]
ffffffff80013ed7:	48 8d 7d ce          	lea    rdi,[rbp-0x32]
ffffffff80013edb:	e8 d0 32 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80013ee0:	48 8b 85 40 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c0]
ffffffff80013ee7:	66 8b 4d ce          	mov    cx,WORD PTR [rbp-0x32]
ffffffff80013eeb:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff80013eee:	e9 b0 01 00 00       	jmp    ffffffff800140a3 <fmt.formatInt__anon_3449+0x6d3>
ffffffff80013ef3:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
            const digit = a % base;
ffffffff80013ef9:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff80013f00:	48 89 8d 30 fe ff ff 	mov    QWORD PTR [rbp-0x1d0],rcx
ffffffff80013f07:	0f b6 c0             	movzx  eax,al
ffffffff80013f0a:	48 89 85 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rax
ffffffff80013f11:	48 83 f8 00          	cmp    rax,0x0
ffffffff80013f15:	74 02                	je     ffffffff80013f19 <fmt.formatInt__anon_3449+0x549>
ffffffff80013f17:	eb 1c                	jmp    ffffffff80013f35 <fmt.formatInt__anon_3449+0x565>
ffffffff80013f19:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80013f20:	48 c7 c1 08 c5 01 80 	mov    rcx,0xffffffff8001c508
ffffffff80013f27:	31 c0                	xor    eax,eax
ffffffff80013f29:	89 c2                	mov    edx,eax
ffffffff80013f2b:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013f30:	e8 7b c2 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013f35:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
ffffffff80013f3c:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
ffffffff80013f43:	31 d2                	xor    edx,edx
ffffffff80013f45:	48 f7 f1             	div    rcx
ffffffff80013f48:	48 89 d0             	mov    rax,rdx
ffffffff80013f4b:	48 89 85 28 fe ff ff 	mov    QWORD PTR [rbp-0x1d8],rax
ffffffff80013f52:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
            index -= 1;
ffffffff80013f56:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013f5d:	48 83 e8 01          	sub    rax,0x1
ffffffff80013f61:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80013f65:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80013f69:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff80013f6c:	84 c0                	test   al,al
ffffffff80013f6e:	75 04                	jne    ffffffff80013f74 <fmt.formatInt__anon_3449+0x5a4>
ffffffff80013f70:	eb 00                	jmp    ffffffff80013f72 <fmt.formatInt__anon_3449+0x5a2>
ffffffff80013f72:	eb 1c                	jmp    ffffffff80013f90 <fmt.formatInt__anon_3449+0x5c0>
ffffffff80013f74:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80013f7b:	48 c7 c1 18 c5 01 80 	mov    rcx,0xffffffff8001c518
ffffffff80013f82:	31 c0                	xor    eax,eax
ffffffff80013f84:	89 c2                	mov    edx,eax
ffffffff80013f86:	be 10 00 00 00       	mov    esi,0x10
ffffffff80013f8b:	e8 20 c2 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80013f90:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80013f94:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80013f9b:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80013fa2:	48 89 85 20 fe ff ff 	mov    QWORD PTR [rbp-0x1e0],rax
ffffffff80013fa9:	48 83 f8 41          	cmp    rax,0x41
ffffffff80013fad:	73 02                	jae    ffffffff80013fb1 <fmt.formatInt__anon_3449+0x5e1>
ffffffff80013faf:	eb 11                	jmp    ffffffff80013fc2 <fmt.formatInt__anon_3449+0x5f2>
ffffffff80013fb1:	48 8b bd 20 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1e0]
ffffffff80013fb8:	be 41 00 00 00       	mov    esi,0x41
ffffffff80013fbd:	e8 0e c2 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80013fc2:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff80013fc9:	48 8b 95 20 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1e0]
ffffffff80013fd0:	48 8d 85 10 ff ff ff 	lea    rax,[rbp-0xf0]
ffffffff80013fd7:	48 01 d0             	add    rax,rdx
ffffffff80013fda:	48 89 85 18 fe ff ff 	mov    QWORD PTR [rbp-0x1e8],rax
ffffffff80013fe1:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80013fe6:	48 29 c8             	sub    rax,rcx
ffffffff80013fe9:	48 3d ff 00 00 00    	cmp    rax,0xff
ffffffff80013fef:	77 02                	ja     ffffffff80013ff3 <fmt.formatInt__anon_3449+0x623>
ffffffff80013ff1:	eb 1c                	jmp    ffffffff8001400f <fmt.formatInt__anon_3449+0x63f>
ffffffff80013ff3:	48 c7 c7 71 b1 01 80 	mov    rdi,0xffffffff8001b171
ffffffff80013ffa:	48 c7 c1 28 c5 01 80 	mov    rcx,0xffffffff8001c528
ffffffff80014001:	31 c0                	xor    eax,eax
ffffffff80014003:	89 c2                	mov    edx,eax
ffffffff80014005:	be 1b 00 00 00       	mov    esi,0x1b
ffffffff8001400a:	e8 a1 c1 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001400f:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
ffffffff80014015:	48 8b 8d 28 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1d8]
ffffffff8001401c:	0f b6 f9             	movzx  edi,cl
ffffffff8001401f:	0f b6 f0             	movzx  esi,al
ffffffff80014022:	e8 f9 32 ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80014027:	48 8b 8d 18 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1e8]
ffffffff8001402e:	88 c2                	mov    dl,al
ffffffff80014030:	8a 85 df fe ff ff    	mov    al,BYTE PTR [rbp-0x121]
ffffffff80014036:	88 11                	mov    BYTE PTR [rcx],dl
            a /= base;
ffffffff80014038:	48 8b 8d 58 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa8]
ffffffff8001403f:	48 89 8d 08 fe ff ff 	mov    QWORD PTR [rbp-0x1f8],rcx
ffffffff80014046:	0f b6 c0             	movzx  eax,al
ffffffff80014049:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
ffffffff80014050:	48 83 f8 00          	cmp    rax,0x0
ffffffff80014054:	74 02                	je     ffffffff80014058 <fmt.formatInt__anon_3449+0x688>
ffffffff80014056:	eb 1c                	jmp    ffffffff80014074 <fmt.formatInt__anon_3449+0x6a4>
ffffffff80014058:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8001405f:	48 c7 c1 38 c5 01 80 	mov    rcx,0xffffffff8001c538
ffffffff80014066:	31 c0                	xor    eax,eax
ffffffff80014068:	89 c2                	mov    edx,eax
ffffffff8001406a:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001406f:	e8 3c c1 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014074:	48 8b 8d 10 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1f0]
ffffffff8001407b:	48 8b 85 08 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1f8]
ffffffff80014082:	31 d2                	xor    edx,edx
ffffffff80014084:	48 f7 f1             	div    rcx
ffffffff80014087:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
            if (a == 0) break;
ffffffff8001408e:	48 83 bd 58 ff ff ff 	cmp    QWORD PTR [rbp-0xa8],0x0
ffffffff80014095:	00 
ffffffff80014096:	75 02                	jne    ffffffff8001409a <fmt.formatInt__anon_3449+0x6ca>
ffffffff80014098:	eb 07                	jmp    ffffffff800140a1 <fmt.formatInt__anon_3449+0x6d1>
ffffffff8001409a:	eb 00                	jmp    ffffffff8001409c <fmt.formatInt__anon_3449+0x6cc>
ffffffff8001409c:	e9 52 fe ff ff       	jmp    ffffffff80013ef3 <fmt.formatInt__anon_3449+0x523>
ffffffff800140a1:	eb 00                	jmp    ffffffff800140a3 <fmt.formatInt__anon_3449+0x6d3>
    return formatBuf(buf[index..], options, writer);
ffffffff800140a3:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff800140aa:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
ffffffff800140b1:	48 8d 8d 10 ff ff ff 	lea    rcx,[rbp-0xf0]
ffffffff800140b8:	48 01 c1             	add    rcx,rax
ffffffff800140bb:	48 89 8d 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rcx
ffffffff800140c2:	48 83 f8 41          	cmp    rax,0x41
ffffffff800140c6:	77 02                	ja     ffffffff800140ca <fmt.formatInt__anon_3449+0x6fa>
ffffffff800140c8:	eb 11                	jmp    ffffffff800140db <fmt.formatInt__anon_3449+0x70b>
ffffffff800140ca:	48 8b bd f8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x208]
ffffffff800140d1:	be 41 00 00 00       	mov    esi,0x41
ffffffff800140d6:	e8 35 c2 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800140db:	48 8b 8d f8 fd ff ff 	mov    rcx,QWORD PTR [rbp-0x208]
ffffffff800140e2:	b8 41 00 00 00       	mov    eax,0x41
ffffffff800140e7:	48 29 c8             	sub    rax,rcx
ffffffff800140ea:	48 89 85 f0 fd ff ff 	mov    QWORD PTR [rbp-0x210],rax
ffffffff800140f1:	b0 01                	mov    al,0x1
ffffffff800140f3:	a8 01                	test   al,0x1
ffffffff800140f5:	75 02                	jne    ffffffff800140f9 <fmt.formatInt__anon_3449+0x729>
ffffffff800140f7:	eb 02                	jmp    ffffffff800140fb <fmt.formatInt__anon_3449+0x72b>
ffffffff800140f9:	eb 0d                	jmp    ffffffff80014108 <fmt.formatInt__anon_3449+0x738>
ffffffff800140fb:	be 41 00 00 00       	mov    esi,0x41
ffffffff80014100:	48 89 f7             	mov    rdi,rsi
ffffffff80014103:	e8 c8 c0 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014108:	48 8b 85 f8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x208]
ffffffff8001410f:	48 83 f8 41          	cmp    rax,0x41
ffffffff80014113:	77 02                	ja     ffffffff80014117 <fmt.formatInt__anon_3449+0x747>
ffffffff80014115:	eb 11                	jmp    ffffffff80014128 <fmt.formatInt__anon_3449+0x758>
ffffffff80014117:	48 8b bd f8 fd ff ff 	mov    rdi,QWORD PTR [rbp-0x208]
ffffffff8001411e:	be 41 00 00 00       	mov    esi,0x41
ffffffff80014123:	e8 a8 c0 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014128:	4c 8b 85 b0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x150]
ffffffff8001412f:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff80014136:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff8001413d:	48 8b 85 00 fe ff ff 	mov    rax,QWORD PTR [rbp-0x200]
ffffffff80014144:	48 8b 95 f0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x210]
ffffffff8001414b:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8001414f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80014153:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80014157:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8001415b:	e8 40 00 00 00       	call   ffffffff800141a0 <fmt.formatBuf__anon_3450>
ffffffff80014160:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80014164:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80014169:	75 0d                	jne    ffffffff80014178 <fmt.formatInt__anon_3449+0x7a8>
ffffffff8001416b:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8001416f:	48 81 c4 10 02 00 00 	add    rsp,0x210
ffffffff80014176:	5d                   	pop    rbp
ffffffff80014177:	c3                   	ret
ffffffff80014178:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff8001417f:	e8 8c f2 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014184:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80014188:	48 81 c4 10 02 00 00 	add    rsp,0x210
ffffffff8001418f:	5d                   	pop    rbp
ffffffff80014190:	c3                   	ret
ffffffff80014191:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80014198:	00 00 00 
ffffffff8001419b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800141a0 <fmt.formatBuf__anon_3450>:
) !void {
ffffffff800141a0:	55                   	push   rbp
ffffffff800141a1:	48 89 e5             	mov    rbp,rsp
ffffffff800141a4:	48 81 ec 50 01 00 00 	sub    rsp,0x150
ffffffff800141ab:	4c 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],r8
ffffffff800141b2:	48 89 8d 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rcx
ffffffff800141b9:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
ffffffff800141c0:	48 89 d0             	mov    rax,rdx
ffffffff800141c3:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff800141ca:	48 89 f0             	mov    rax,rsi
ffffffff800141cd:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
ffffffff800141d4:	48 89 95 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdx
ffffffff800141db:	48 89 b5 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rsi
ffffffff800141e2:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff800141e5:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
    if (options.width) |min_width| {
ffffffff800141ec:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
ffffffff800141f0:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff800141f7:	48 8b 41 18          	mov    rax,QWORD PTR [rcx+0x18]
ffffffff800141fb:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
ffffffff80014202:	80 bd 50 ff ff ff 00 	cmp    BYTE PTR [rbp-0xb0],0x0
ffffffff80014209:	74 42                	je     ffffffff8001424d <fmt.formatBuf__anon_3450+0xad>
ffffffff8001420b:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff80014212:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffffffff80014219:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
ffffffff80014220:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
ffffffff80014227:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff8001422e:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
ffffffff80014235:	48 8d bd 60 ff ff ff 	lea    rdi,[rbp-0xa0]
        const width = unicode.utf8CountCodepoints(buf) catch buf.len;
ffffffff8001423c:	e8 8f 37 ff ff       	call   ffffffff800079d0 <unicode.utf8CountCodepoints>
ffffffff80014241:	66 83 bd 68 ff ff ff 	cmp    WORD PTR [rbp-0x98],0x0
ffffffff80014248:	00 
ffffffff80014249:	74 44                	je     ffffffff8001428f <fmt.formatBuf__anon_3450+0xef>
ffffffff8001424b:	eb 52                	jmp    ffffffff8001429f <fmt.formatBuf__anon_3450+0xff>
ffffffff8001424d:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff80014254:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffffffff8001425b:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014262:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
        try writer.writeAll(buf);
ffffffff80014269:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8001426c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80014270:	48 8d 75 f8          	lea    rsi,[rbp-0x8]
ffffffff80014274:	e8 97 d5 ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff80014279:	66 89 85 fe fe ff ff 	mov    WORD PTR [rbp-0x102],ax
ffffffff80014280:	66 83 f8 00          	cmp    ax,0x0
ffffffff80014284:	0f 85 54 04 00 00    	jne    ffffffff800146de <fmt.formatBuf__anon_3450+0x53e>
ffffffff8001428a:	e9 6b 04 00 00       	jmp    ffffffff800146fa <fmt.formatBuf__anon_3450+0x55a>
        const width = unicode.utf8CountCodepoints(buf) catch buf.len;
ffffffff8001428f:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff80014296:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff8001429d:	eb 1f                	jmp    ffffffff800142be <fmt.formatBuf__anon_3450+0x11e>
ffffffff8001429f:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff800142a6:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff800142ad:	48 8b 95 30 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd0]
ffffffff800142b4:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff800142b7:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff800142be:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
ffffffff800142c5:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff800142cc:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff800142d3:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
        const padding = if (width < min_width) min_width - width else 0;
ffffffff800142da:	48 39 c8             	cmp    rax,rcx
ffffffff800142dd:	73 25                	jae    ffffffff80014304 <fmt.formatBuf__anon_3450+0x164>
ffffffff800142df:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
ffffffff800142e6:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff800142ed:	48 29 c8             	sub    rax,rcx
ffffffff800142f0:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff800142f7:	0f 92 45 80          	setb   BYTE PTR [rbp-0x80]
ffffffff800142fb:	8a 45 80             	mov    al,BYTE PTR [rbp-0x80]
ffffffff800142fe:	84 c0                	test   al,al
ffffffff80014300:	74 0d                	je     ffffffff8001430f <fmt.formatBuf__anon_3450+0x16f>
ffffffff80014302:	eb 0d                	jmp    ffffffff80014311 <fmt.formatBuf__anon_3450+0x171>
ffffffff80014304:	31 c0                	xor    eax,eax
ffffffff80014306:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff8001430d:	eb 2c                	jmp    ffffffff8001433b <fmt.formatBuf__anon_3450+0x19b>
ffffffff8001430f:	eb 1c                	jmp    ffffffff8001432d <fmt.formatBuf__anon_3450+0x18d>
ffffffff80014311:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80014318:	48 c7 c1 48 c5 01 80 	mov    rcx,0xffffffff8001c548
ffffffff8001431f:	31 c0                	xor    eax,eax
ffffffff80014321:	89 c2                	mov    edx,eax
ffffffff80014323:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014328:	e8 83 be fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001432d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80014334:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff8001433b:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffffffff80014342:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80014349:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
        if (padding == 0)
ffffffff8001434d:	48 83 f8 00          	cmp    rax,0x0
ffffffff80014351:	75 39                	jne    ffffffff8001438c <fmt.formatBuf__anon_3450+0x1ec>
ffffffff80014353:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff8001435a:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffffffff80014361:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014368:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
            return writer.writeAll(buf);
ffffffff8001436f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80014372:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80014376:	48 8d 75 98          	lea    rsi,[rbp-0x68]
ffffffff8001437a:	e8 91 d4 ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff8001437f:	66 89 45 96          	mov    WORD PTR [rbp-0x6a],ax
ffffffff80014383:	66 83 7d 96 00       	cmp    WORD PTR [rbp-0x6a],0x0
ffffffff80014388:	74 04                	je     ffffffff8001438e <fmt.formatBuf__anon_3450+0x1ee>
ffffffff8001438a:	eb 0f                	jmp    ffffffff8001439b <fmt.formatBuf__anon_3450+0x1fb>
ffffffff8001438c:	eb 26                	jmp    ffffffff800143b4 <fmt.formatBuf__anon_3450+0x214>
ffffffff8001438e:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff80014392:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff80014399:	5d                   	pop    rbp
ffffffff8001439a:	c3                   	ret
ffffffff8001439b:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff800143a2:	e8 69 f0 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800143a7:	66 8b 45 96          	mov    ax,WORD PTR [rbp-0x6a]
ffffffff800143ab:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff800143b2:	5d                   	pop    rbp
ffffffff800143b3:	c3                   	ret
ffffffff800143b4:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
        switch (options.alignment) {
ffffffff800143bb:	8a 40 20             	mov    al,BYTE PTR [rax+0x20]
ffffffff800143be:	88 85 d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],al
ffffffff800143c4:	2c 02                	sub    al,0x2
ffffffff800143c6:	0f 84 5e 02 00 00    	je     ffffffff8001462a <fmt.formatBuf__anon_3450+0x48a>
ffffffff800143cc:	eb 00                	jmp    ffffffff800143ce <fmt.formatBuf__anon_3450+0x22e>
ffffffff800143ce:	8a 85 d7 fe ff ff    	mov    al,BYTE PTR [rbp-0x129]
ffffffff800143d4:	a8 03                	test   al,0x3
ffffffff800143d6:	74 30                	je     ffffffff80014408 <fmt.formatBuf__anon_3450+0x268>
ffffffff800143d8:	eb 00                	jmp    ffffffff800143da <fmt.formatBuf__anon_3450+0x23a>
ffffffff800143da:	8a 85 d7 fe ff ff    	mov    al,BYTE PTR [rbp-0x129]
ffffffff800143e0:	24 03                	and    al,0x3
ffffffff800143e2:	2c 01                	sub    al,0x1
ffffffff800143e4:	0f 84 d3 00 00 00    	je     ffffffff800144bd <fmt.formatBuf__anon_3450+0x31d>
ffffffff800143ea:	eb 00                	jmp    ffffffff800143ec <fmt.formatBuf__anon_3450+0x24c>
ffffffff800143ec:	48 c7 c7 9b b1 01 80 	mov    rdi,0xffffffff8001b19b
ffffffff800143f3:	48 c7 c1 68 c5 01 80 	mov    rcx,0xffffffff8001c568
ffffffff800143fa:	31 c0                	xor    eax,eax
ffffffff800143fc:	89 c2                	mov    edx,eax
ffffffff800143fe:	be 17 00 00 00       	mov    esi,0x17
ffffffff80014403:	e8 a8 bd fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014408:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff8001440f:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffffffff80014416:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8001441d:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
                try writer.writeAll(buf);
ffffffff80014424:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80014427:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff8001442b:	48 8d 75 a0          	lea    rsi,[rbp-0x60]
ffffffff8001442f:	e8 dc d3 ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff80014434:	66 89 85 d4 fe ff ff 	mov    WORD PTR [rbp-0x12c],ax
ffffffff8001443b:	66 83 f8 00          	cmp    ax,0x0
ffffffff8001443f:	74 1c                	je     ffffffff8001445d <fmt.formatBuf__anon_3450+0x2bd>
ffffffff80014441:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014448:	e8 c3 ef fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001444d:	66 8b 85 d4 fe ff ff 	mov    ax,WORD PTR [rbp-0x12c]
ffffffff80014454:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff8001445b:	5d                   	pop    rbp
ffffffff8001445c:	c3                   	ret
ffffffff8001445d:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80014464:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8001446b:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff80014472:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
                try writer.writeByteNTimes(options.fill, padding);
ffffffff80014479:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff8001447c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff80014480:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff80014483:	0f b6 d0             	movzx  edx,al
ffffffff80014486:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff8001448a:	e8 81 02 00 00       	call   ffffffff80014710 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes>
ffffffff8001448f:	66 89 85 d2 fe ff ff 	mov    WORD PTR [rbp-0x12e],ax
ffffffff80014496:	66 83 f8 00          	cmp    ax,0x0
ffffffff8001449a:	74 1c                	je     ffffffff800144b8 <fmt.formatBuf__anon_3450+0x318>
ffffffff8001449c:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff800144a3:	e8 68 ef fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800144a8:	66 8b 85 d2 fe ff ff 	mov    ax,WORD PTR [rbp-0x12e]
ffffffff800144af:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff800144b6:	5d                   	pop    rbp
ffffffff800144b7:	c3                   	ret
ffffffff800144b8:	e9 1f 02 00 00       	jmp    ffffffff800146dc <fmt.formatBuf__anon_3450+0x53c>
ffffffff800144bd:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
                const left_padding = padding / 2;
ffffffff800144c4:	48 89 c1             	mov    rcx,rax
ffffffff800144c7:	48 d1 e9             	shr    rcx,1
ffffffff800144ca:	48 89 8d c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rcx
ffffffff800144d1:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
                const right_padding = (padding + 1) / 2;
ffffffff800144d5:	48 ff c0             	inc    rax
ffffffff800144d8:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800144dc:	0f 94 45 c0          	sete   BYTE PTR [rbp-0x40]
ffffffff800144e0:	8a 45 c0             	mov    al,BYTE PTR [rbp-0x40]
ffffffff800144e3:	84 c0                	test   al,al
ffffffff800144e5:	75 04                	jne    ffffffff800144eb <fmt.formatBuf__anon_3450+0x34b>
ffffffff800144e7:	eb 00                	jmp    ffffffff800144e9 <fmt.formatBuf__anon_3450+0x349>
ffffffff800144e9:	eb 1c                	jmp    ffffffff80014507 <fmt.formatBuf__anon_3450+0x367>
ffffffff800144eb:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800144f2:	48 c7 c1 58 c5 01 80 	mov    rcx,0xffffffff8001c558
ffffffff800144f9:	31 c0                	xor    eax,eax
ffffffff800144fb:	89 c2                	mov    edx,eax
ffffffff800144fd:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014502:	e8 a9 bc fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014507:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffffffff8001450e:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014515:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff8001451c:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
ffffffff80014523:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffffffff80014527:	48 c1 ee 01          	shr    rsi,0x1
ffffffff8001452b:	48 89 b5 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rsi
ffffffff80014532:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
                try writer.writeByteNTimes(options.fill, left_padding);
ffffffff80014536:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff80014539:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff8001453d:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff80014540:	0f b6 d0             	movzx  edx,al
ffffffff80014543:	48 8d 75 d0          	lea    rsi,[rbp-0x30]
ffffffff80014547:	e8 c4 01 00 00       	call   ffffffff80014710 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes>
ffffffff8001454c:	66 89 85 c6 fe ff ff 	mov    WORD PTR [rbp-0x13a],ax
ffffffff80014553:	66 83 f8 00          	cmp    ax,0x0
ffffffff80014557:	74 1c                	je     ffffffff80014575 <fmt.formatBuf__anon_3450+0x3d5>
ffffffff80014559:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014560:	e8 ab ee fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014565:	66 8b 85 c6 fe ff ff 	mov    ax,WORD PTR [rbp-0x13a]
ffffffff8001456c:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff80014573:	5d                   	pop    rbp
ffffffff80014574:	c3                   	ret
ffffffff80014575:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff8001457c:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffffffff80014583:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8001458a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
                try writer.writeAll(buf);
ffffffff80014591:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80014594:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80014598:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff8001459c:	e8 6f d2 ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff800145a1:	66 89 85 b6 fe ff ff 	mov    WORD PTR [rbp-0x14a],ax
ffffffff800145a8:	66 83 f8 00          	cmp    ax,0x0
ffffffff800145ac:	74 1c                	je     ffffffff800145ca <fmt.formatBuf__anon_3450+0x42a>
ffffffff800145ae:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff800145b5:	e8 56 ee fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800145ba:	66 8b 85 b6 fe ff ff 	mov    ax,WORD PTR [rbp-0x14a]
ffffffff800145c1:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff800145c8:	5d                   	pop    rbp
ffffffff800145c9:	c3                   	ret
ffffffff800145ca:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff800145d1:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff800145d8:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff800145df:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
                try writer.writeByteNTimes(options.fill, right_padding);
ffffffff800145e6:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff800145e9:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff800145ed:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff800145f0:	0f b6 d0             	movzx  edx,al
ffffffff800145f3:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff800145f7:	e8 14 01 00 00       	call   ffffffff80014710 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes>
ffffffff800145fc:	66 89 85 b4 fe ff ff 	mov    WORD PTR [rbp-0x14c],ax
ffffffff80014603:	66 83 f8 00          	cmp    ax,0x0
ffffffff80014607:	74 1c                	je     ffffffff80014625 <fmt.formatBuf__anon_3450+0x485>
ffffffff80014609:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014610:	e8 fb ed fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014615:	66 8b 85 b4 fe ff ff 	mov    ax,WORD PTR [rbp-0x14c]
ffffffff8001461c:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff80014623:	5d                   	pop    rbp
ffffffff80014624:	c3                   	ret
ffffffff80014625:	e9 b2 00 00 00       	jmp    ffffffff800146dc <fmt.formatBuf__anon_3450+0x53c>
ffffffff8001462a:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80014631:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014638:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff8001463f:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
                try writer.writeByteNTimes(options.fill, padding);
ffffffff80014646:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff80014649:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff8001464d:	8a 40 21             	mov    al,BYTE PTR [rax+0x21]
ffffffff80014650:	0f b6 d0             	movzx  edx,al
ffffffff80014653:	48 8d 75 e8          	lea    rsi,[rbp-0x18]
ffffffff80014657:	e8 b4 00 00 00       	call   ffffffff80014710 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes>
ffffffff8001465c:	66 89 85 b2 fe ff ff 	mov    WORD PTR [rbp-0x14e],ax
ffffffff80014663:	66 83 f8 00          	cmp    ax,0x0
ffffffff80014667:	74 1c                	je     ffffffff80014685 <fmt.formatBuf__anon_3450+0x4e5>
ffffffff80014669:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80014670:	e8 9b ed fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014675:	66 8b 85 b2 fe ff ff 	mov    ax,WORD PTR [rbp-0x14e]
ffffffff8001467c:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff80014683:	5d                   	pop    rbp
ffffffff80014684:	c3                   	ret
ffffffff80014685:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff8001468c:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
ffffffff80014693:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8001469a:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
                try writer.writeAll(buf);
ffffffff800146a1:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800146a4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800146a8:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff800146ac:	e8 5f d1 ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff800146b1:	66 89 85 b0 fe ff ff 	mov    WORD PTR [rbp-0x150],ax
ffffffff800146b8:	66 83 f8 00          	cmp    ax,0x0
ffffffff800146bc:	74 1c                	je     ffffffff800146da <fmt.formatBuf__anon_3450+0x53a>
ffffffff800146be:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff800146c5:	e8 46 ed fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800146ca:	66 8b 85 b0 fe ff ff 	mov    ax,WORD PTR [rbp-0x150]
ffffffff800146d1:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff800146d8:	5d                   	pop    rbp
ffffffff800146d9:	c3                   	ret
ffffffff800146da:	eb 00                	jmp    ffffffff800146dc <fmt.formatBuf__anon_3450+0x53c>
        switch (options.alignment) {
ffffffff800146dc:	eb 1e                	jmp    ffffffff800146fc <fmt.formatBuf__anon_3450+0x55c>
ffffffff800146de:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
        try writer.writeAll(buf);
ffffffff800146e5:	e8 26 ed fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800146ea:	66 8b 85 fe fe ff ff 	mov    ax,WORD PTR [rbp-0x102]
ffffffff800146f1:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff800146f8:	5d                   	pop    rbp
ffffffff800146f9:	c3                   	ret
ffffffff800146fa:	eb 00                	jmp    ffffffff800146fc <fmt.formatBuf__anon_3450+0x55c>
ffffffff800146fc:	31 c0                	xor    eax,eax
ffffffff800146fe:	48 81 c4 50 01 00 00 	add    rsp,0x150
ffffffff80014705:	5d                   	pop    rbp
ffffffff80014706:	c3                   	ret
ffffffff80014707:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8001470e:	00 00 

ffffffff80014710 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes>:
        pub fn writeByteNTimes(self: Self, byte: u8, n: usize) Error!void {
ffffffff80014710:	55                   	push   rbp
ffffffff80014711:	48 89 e5             	mov    rbp,rsp
ffffffff80014714:	48 81 ec 90 01 00 00 	sub    rsp,0x190
ffffffff8001471b:	48 89 8d 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rcx
ffffffff80014722:	48 89 b5 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rsi
ffffffff80014729:	48 89 bd a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rdi
ffffffff80014730:	88 d0                	mov    al,dl
ffffffff80014732:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
ffffffff80014738:	88 85 bf fe ff ff    	mov    BYTE PTR [rbp-0x141],al
ffffffff8001473e:	48 89 8d c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rcx
ffffffff80014745:	48 8d bd c8 fe ff ff 	lea    rdi,[rbp-0x138]
ffffffff8001474c:	be aa 00 00 00       	mov    esi,0xaa
ffffffff80014751:	ba 00 01 00 00       	mov    edx,0x100
            var bytes: [256]u8 = undefined;
ffffffff80014756:	e8 a5 37 00 00       	call   ffffffff80017f00 <memset>
            mem.set(u8, bytes[0..], byte);
ffffffff8001475b:	48 8d 85 c8 fe ff ff 	lea    rax,[rbp-0x138]
ffffffff80014762:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80014769:	b0 01                	mov    al,0x1
ffffffff8001476b:	a8 01                	test   al,0x1
ffffffff8001476d:	75 02                	jne    ffffffff80014771 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x61>
ffffffff8001476f:	eb 02                	jmp    ffffffff80014773 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x63>
ffffffff80014771:	eb 10                	jmp    ffffffff80014783 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x73>
ffffffff80014773:	31 c0                	xor    eax,eax
ffffffff80014775:	31 c0                	xor    eax,eax
ffffffff80014777:	89 c7                	mov    edi,eax
ffffffff80014779:	be 00 01 00 00       	mov    esi,0x100
ffffffff8001477e:	e8 8d bb fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80014783:	8a 85 af fe ff ff    	mov    al,BYTE PTR [rbp-0x151]
ffffffff80014789:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff80014790:	be 00 01 00 00       	mov    esi,0x100
ffffffff80014795:	0f b6 d0             	movzx  edx,al
ffffffff80014798:	e8 b3 b8 ff ff       	call   ffffffff80010050 <mem.set__anon_3114>
ffffffff8001479d:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
            var remaining: usize = n;
ffffffff800147a4:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
            while (remaining > 0) {
ffffffff800147a8:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffffffff800147ad:	76 41                	jbe    ffffffff800147f0 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0xe0>
                const to_write = std.math.min(remaining, bytes.len);
ffffffff800147af:	48 8b 7d c8          	mov    rdi,QWORD PTR [rbp-0x38]
ffffffff800147b3:	be 00 01 00 00       	mov    esi,0x100
ffffffff800147b8:	e8 03 b9 ff ff       	call   ffffffff800100c0 <math.min__anon_3115>
ffffffff800147bd:	48 89 c1             	mov    rcx,rax
ffffffff800147c0:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
ffffffff800147c7:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
ffffffff800147ce:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
                try self.writeAll(bytes[0..to_write]);
ffffffff800147d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800147d5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800147d9:	48 8d 85 c8 fe ff ff 	lea    rax,[rbp-0x138]
ffffffff800147e0:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
ffffffff800147e7:	31 c0                	xor    eax,eax
ffffffff800147e9:	48 39 c8             	cmp    rax,rcx
ffffffff800147ec:	76 07                	jbe    ffffffff800147f5 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0xe5>
ffffffff800147ee:	eb 07                	jmp    ffffffff800147f7 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0xe7>
                remaining -= to_write;
ffffffff800147f0:	e9 f9 00 00 00       	jmp    ffffffff800148ee <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x1de>
                try self.writeAll(bytes[0..to_write]);
ffffffff800147f5:	eb 12                	jmp    ffffffff80014809 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0xf9>
ffffffff800147f7:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
ffffffff800147fe:	31 c0                	xor    eax,eax
ffffffff80014800:	31 c0                	xor    eax,eax
ffffffff80014802:	89 c7                	mov    edi,eax
ffffffff80014804:	e8 07 bb fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80014809:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
ffffffff80014810:	48 3d 00 01 00 00    	cmp    rax,0x100
ffffffff80014816:	77 02                	ja     ffffffff8001481a <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x10a>
ffffffff80014818:	eb 11                	jmp    ffffffff8001482b <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x11b>
ffffffff8001481a:	48 8b bd 80 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x180]
ffffffff80014821:	be 00 01 00 00       	mov    esi,0x100
ffffffff80014826:	e8 a5 b9 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001482b:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
ffffffff80014832:	31 c0                	xor    eax,eax
ffffffff80014834:	48 39 c8             	cmp    rax,rcx
ffffffff80014837:	77 02                	ja     ffffffff8001483b <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x12b>
ffffffff80014839:	eb 12                	jmp    ffffffff8001484d <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x13d>
ffffffff8001483b:	48 8b b5 80 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x180]
ffffffff80014842:	31 c0                	xor    eax,eax
ffffffff80014844:	31 c0                	xor    eax,eax
ffffffff80014846:	89 c7                	mov    edi,eax
ffffffff80014848:	e8 83 b9 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001484d:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff80014854:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
ffffffff8001485b:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
ffffffff80014862:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80014866:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8001486a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8001486e:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80014872:	48 8d 75 d8          	lea    rsi,[rbp-0x28]
ffffffff80014876:	e8 95 cf ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff8001487b:	66 89 85 7e fe ff ff 	mov    WORD PTR [rbp-0x182],ax
ffffffff80014882:	66 83 f8 00          	cmp    ax,0x0
ffffffff80014886:	74 1c                	je     ffffffff800148a4 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x194>
ffffffff80014888:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff8001488f:	e8 7c eb fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014894:	66 8b 85 7e fe ff ff 	mov    ax,WORD PTR [rbp-0x182]
ffffffff8001489b:	48 81 c4 90 01 00 00 	add    rsp,0x190
ffffffff800148a2:	5d                   	pop    rbp
ffffffff800148a3:	c3                   	ret
ffffffff800148a4:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
                remaining -= to_write;
ffffffff800148ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800148af:	48 29 c8             	sub    rax,rcx
ffffffff800148b2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800148b6:	0f 92 45 f8          	setb   BYTE PTR [rbp-0x8]
ffffffff800148ba:	8a 45 f8             	mov    al,BYTE PTR [rbp-0x8]
ffffffff800148bd:	84 c0                	test   al,al
ffffffff800148bf:	75 04                	jne    ffffffff800148c5 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x1b5>
ffffffff800148c1:	eb 00                	jmp    ffffffff800148c3 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x1b3>
ffffffff800148c3:	eb 1c                	jmp    ffffffff800148e1 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x1d1>
ffffffff800148c5:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800148cc:	48 c7 c1 08 c8 01 80 	mov    rcx,0xffffffff8001c808
ffffffff800148d3:	31 c0                	xor    eax,eax
ffffffff800148d5:	89 c2                	mov    edx,eax
ffffffff800148d7:	be 10 00 00 00       	mov    esi,0x10
ffffffff800148dc:	e8 cf b8 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800148e1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800148e5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff800148e9:	e9 ba fe ff ff       	jmp    ffffffff800147a8 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeByteNTimes+0x98>
ffffffff800148ee:	31 c0                	xor    eax,eax
ffffffff800148f0:	48 81 c4 90 01 00 00 	add    rsp,0x190
ffffffff800148f7:	5d                   	pop    rbp
ffffffff800148f8:	c3                   	ret
ffffffff800148f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80014900 <fmt.formatType__anon_3462>:
) @TypeOf(writer).Error!void {
ffffffff80014900:	55                   	push   rbp
ffffffff80014901:	48 89 e5             	mov    rbp,rsp
ffffffff80014904:	48 83 ec 30          	sub    rsp,0x30
ffffffff80014908:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001490c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80014910:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80014914:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8001491b:	00 
ffffffff8001491c:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80014923:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80014924:	e8 c7 e4 ff ff       	call   ffffffff80012df0 <fmt.formatValue__anon_3386>
ffffffff80014929:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001492d:	b0 01                	mov    al,0x1
ffffffff8001492f:	a8 01                	test   al,0x1
ffffffff80014931:	75 02                	jne    ffffffff80014935 <fmt.formatType__anon_3462+0x35>
ffffffff80014933:	eb 0a                	jmp    ffffffff8001493f <fmt.formatType__anon_3462+0x3f>
ffffffff80014935:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80014939:	48 83 c4 30          	add    rsp,0x30
ffffffff8001493d:	5d                   	pop    rbp
ffffffff8001493e:	c3                   	ret
ffffffff8001493f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80014943:	e8 c8 ea fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014948:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001494c:	48 83 c4 30          	add    rsp,0x30
ffffffff80014950:	5d                   	pop    rbp
ffffffff80014951:	c3                   	ret
ffffffff80014952:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80014959:	00 00 00 
ffffffff8001495c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80014960 <fmt.formatType__anon_3463>:
) @TypeOf(writer).Error!void {
ffffffff80014960:	55                   	push   rbp
ffffffff80014961:	48 89 e5             	mov    rbp,rsp
ffffffff80014964:	48 83 ec 30          	sub    rsp,0x30
ffffffff80014968:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff8001496c:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80014970:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff80014974:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8001497b:	00 
ffffffff8001497c:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff80014983:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff80014984:	e8 67 e4 ff ff       	call   ffffffff80012df0 <fmt.formatValue__anon_3386>
ffffffff80014989:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001498d:	b0 01                	mov    al,0x1
ffffffff8001498f:	a8 01                	test   al,0x1
ffffffff80014991:	75 02                	jne    ffffffff80014995 <fmt.formatType__anon_3463+0x35>
ffffffff80014993:	eb 0a                	jmp    ffffffff8001499f <fmt.formatType__anon_3463+0x3f>
ffffffff80014995:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80014999:	48 83 c4 30          	add    rsp,0x30
ffffffff8001499d:	5d                   	pop    rbp
ffffffff8001499e:	c3                   	ret
ffffffff8001499f:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff800149a3:	e8 68 ea fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800149a8:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800149ac:	48 83 c4 30          	add    rsp,0x30
ffffffff800149b0:	5d                   	pop    rbp
ffffffff800149b1:	c3                   	ret
ffffffff800149b2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800149b9:	00 00 00 
ffffffff800149bc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800149c0 <fmt.formatValue__anon_3465>:
) !void {
ffffffff800149c0:	55                   	push   rbp
ffffffff800149c1:	48 89 e5             	mov    rbp,rsp
ffffffff800149c4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800149c8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff800149cc:	40 88 f0             	mov    al,sil
ffffffff800149cf:	40 88 c6             	mov    sil,al
ffffffff800149d2:	40 80 e6 07          	and    sil,0x7
ffffffff800149d6:	40 88 75 fd          	mov    BYTE PTR [rbp-0x3],sil
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff800149da:	0f b6 f0             	movzx  esi,al
ffffffff800149dd:	e8 2e 00 00 00       	call   ffffffff80014a10 <fmt.formatIntValue__anon_3466>
ffffffff800149e2:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800149e6:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800149eb:	75 0a                	jne    ffffffff800149f7 <fmt.formatValue__anon_3465+0x37>
ffffffff800149ed:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800149f1:	48 83 c4 10          	add    rsp,0x10
ffffffff800149f5:	5d                   	pop    rbp
ffffffff800149f6:	c3                   	ret
ffffffff800149f7:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff800149fb:	e8 10 ea fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014a00:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80014a04:	48 83 c4 10          	add    rsp,0x10
ffffffff80014a08:	5d                   	pop    rbp
ffffffff80014a09:	c3                   	ret
ffffffff80014a0a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80014a10 <fmt.formatIntValue__anon_3466>:
) !void {
ffffffff80014a10:	55                   	push   rbp
ffffffff80014a11:	48 89 e5             	mov    rbp,rsp
ffffffff80014a14:	48 83 ec 10          	sub    rsp,0x10
ffffffff80014a18:	49 89 c9             	mov    r9,rcx
ffffffff80014a1b:	49 89 d0             	mov    r8,rdx
ffffffff80014a1e:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80014a22:	40 88 f0             	mov    al,sil
ffffffff80014a25:	88 c1                	mov    cl,al
ffffffff80014a27:	80 e1 07             	and    cl,0x7
ffffffff80014a2a:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80014a2d:	88 4d fd             	mov    BYTE PTR [rbp-0x3],cl
    return formatInt(int_value, radix, case, options, writer);
ffffffff80014a30:	0f b6 f0             	movzx  esi,al
ffffffff80014a33:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80014a38:	31 c9                	xor    ecx,ecx
ffffffff80014a3a:	e8 31 00 00 00       	call   ffffffff80014a70 <fmt.formatInt__anon_3469>
ffffffff80014a3f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80014a43:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80014a48:	75 0a                	jne    ffffffff80014a54 <fmt.formatIntValue__anon_3466+0x44>
ffffffff80014a4a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80014a4e:	48 83 c4 10          	add    rsp,0x10
ffffffff80014a52:	5d                   	pop    rbp
ffffffff80014a53:	c3                   	ret
ffffffff80014a54:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80014a58:	e8 b3 e9 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80014a5d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80014a61:	48 83 c4 10          	add    rsp,0x10
ffffffff80014a65:	5d                   	pop    rbp
ffffffff80014a66:	c3                   	ret
ffffffff80014a67:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80014a6e:	00 00 

ffffffff80014a70 <fmt.formatInt__anon_3469>:
) !void {
ffffffff80014a70:	55                   	push   rbp
ffffffff80014a71:	48 89 e5             	mov    rbp,rsp
ffffffff80014a74:	48 81 ec 60 01 00 00 	sub    rsp,0x160
ffffffff80014a7b:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
ffffffff80014a82:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
ffffffff80014a89:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
ffffffff80014a90:	88 8d 54 ff ff ff    	mov    BYTE PTR [rbp-0xac],cl
ffffffff80014a96:	88 d0                	mov    al,dl
ffffffff80014a98:	88 85 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],al
ffffffff80014a9e:	40 88 f2             	mov    dl,sil
ffffffff80014aa1:	88 95 56 ff ff ff    	mov    BYTE PTR [rbp-0xaa],dl
ffffffff80014aa7:	80 e2 07             	and    dl,0x7
ffffffff80014aaa:	88 95 55 ff ff ff    	mov    BYTE PTR [rbp-0xab],dl
ffffffff80014ab0:	88 95 58 ff ff ff    	mov    BYTE PTR [rbp-0xa8],dl
ffffffff80014ab6:	88 85 59 ff ff ff    	mov    BYTE PTR [rbp-0xa7],al
ffffffff80014abc:	80 e1 01             	and    cl,0x1
ffffffff80014abf:	88 8d 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],cl
    assert(base >= 2);
ffffffff80014ac5:	2c 02                	sub    al,0x2
ffffffff80014ac7:	0f 93 c0             	setae  al
ffffffff80014aca:	0f b6 f8             	movzx  edi,al
ffffffff80014acd:	e8 5e 11 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80014ad2:	8a 8d 55 ff ff ff    	mov    cl,BYTE PTR [rbp-0xab]
ffffffff80014ad8:	8a 85 56 ff ff ff    	mov    al,BYTE PTR [rbp-0xaa]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80014ade:	88 8d 5b ff ff ff    	mov    BYTE PTR [rbp-0xa5],cl
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80014ae4:	66 c7 85 5c ff ff ff 	mov    WORD PTR [rbp-0xa4],0x8
ffffffff80014aeb:	08 00 
    const abs_value = math.absCast(int_value);
ffffffff80014aed:	0f b6 f8             	movzx  edi,al
ffffffff80014af0:	e8 5b 06 00 00       	call   ffffffff80015150 <math.absCast__anon_3471>
ffffffff80014af5:	88 c1                	mov    cl,al
ffffffff80014af7:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
ffffffff80014afd:	80 e1 07             	and    cl,0x7
ffffffff80014b00:	88 8d 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],cl
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80014b06:	c7 85 60 ff ff ff aa 	mov    DWORD PTR [rbp-0xa0],0xaaaaaaaa
ffffffff80014b0d:	aa aa aa 
    var a: MinInt = abs_value;
ffffffff80014b10:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
    var index: usize = buf.len;
ffffffff80014b16:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x4
ffffffff80014b1d:	04 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff80014b21:	3c 0a                	cmp    al,0xa
ffffffff80014b23:	75 0f                	jne    ffffffff80014b34 <fmt.formatInt__anon_3469+0xc4>
ffffffff80014b25:	e8 66 26 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80014b2a:	34 ff                	xor    al,0xff
ffffffff80014b2c:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
ffffffff80014b32:	eb 0a                	jmp    ffffffff80014b3e <fmt.formatInt__anon_3469+0xce>
ffffffff80014b34:	31 c0                	xor    eax,eax
ffffffff80014b36:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
ffffffff80014b3c:	eb 00                	jmp    ffffffff80014b3e <fmt.formatInt__anon_3469+0xce>
ffffffff80014b3e:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
ffffffff80014b44:	a8 01                	test   al,0x1
ffffffff80014b46:	75 02                	jne    ffffffff80014b4a <fmt.formatInt__anon_3469+0xda>
ffffffff80014b48:	eb 02                	jmp    ffffffff80014b4c <fmt.formatInt__anon_3469+0xdc>
ffffffff80014b4a:	eb 05                	jmp    ffffffff80014b51 <fmt.formatInt__anon_3469+0xe1>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80014b4c:	e9 c3 03 00 00       	jmp    ffffffff80014f14 <fmt.formatInt__anon_3469+0x4a4>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80014b51:	80 bd 67 ff ff ff 64 	cmp    BYTE PTR [rbp-0x99],0x64
ffffffff80014b58:	72 25                	jb     ffffffff80014b7f <fmt.formatInt__anon_3469+0x10f>
            index -= 2;
ffffffff80014b5a:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014b61:	48 83 e8 02          	sub    rax,0x2
ffffffff80014b65:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80014b6c:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff80014b73:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff80014b79:	84 c0                	test   al,al
ffffffff80014b7b:	74 07                	je     ffffffff80014b84 <fmt.formatInt__anon_3469+0x114>
ffffffff80014b7d:	eb 07                	jmp    ffffffff80014b86 <fmt.formatInt__anon_3469+0x116>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80014b7f:	e9 5e 01 00 00       	jmp    ffffffff80014ce2 <fmt.formatInt__anon_3469+0x272>
            index -= 2;
ffffffff80014b84:	eb 1c                	jmp    ffffffff80014ba2 <fmt.formatInt__anon_3469+0x132>
ffffffff80014b86:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80014b8d:	48 c7 c1 98 c5 01 80 	mov    rcx,0xffffffff8001c598
ffffffff80014b94:	31 c0                	xor    eax,eax
ffffffff80014b96:	89 c2                	mov    edx,eax
ffffffff80014b98:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014b9d:	e8 0e b6 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014ba2:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80014ba9:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80014bb0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014bb7:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80014bbe:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff80014bc5:	48 01 c1             	add    rcx,rax
ffffffff80014bc8:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
ffffffff80014bcf:	48 83 f8 04          	cmp    rax,0x4
ffffffff80014bd3:	77 02                	ja     ffffffff80014bd7 <fmt.formatInt__anon_3469+0x167>
ffffffff80014bd5:	eb 11                	jmp    ffffffff80014be8 <fmt.formatInt__anon_3469+0x178>
ffffffff80014bd7:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
ffffffff80014bde:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014be3:	e8 28 b7 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80014be8:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff80014bef:	b8 04 00 00 00       	mov    eax,0x4
ffffffff80014bf4:	48 29 c8             	sub    rax,rcx
ffffffff80014bf7:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff80014bfe:	b0 01                	mov    al,0x1
ffffffff80014c00:	a8 01                	test   al,0x1
ffffffff80014c02:	75 02                	jne    ffffffff80014c06 <fmt.formatInt__anon_3469+0x196>
ffffffff80014c04:	eb 02                	jmp    ffffffff80014c08 <fmt.formatInt__anon_3469+0x198>
ffffffff80014c06:	eb 0d                	jmp    ffffffff80014c15 <fmt.formatInt__anon_3469+0x1a5>
ffffffff80014c08:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014c0d:	48 89 f7             	mov    rdi,rsi
ffffffff80014c10:	e8 bb b5 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014c15:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff80014c1c:	48 83 f8 04          	cmp    rax,0x4
ffffffff80014c20:	77 02                	ja     ffffffff80014c24 <fmt.formatInt__anon_3469+0x1b4>
ffffffff80014c22:	eb 11                	jmp    ffffffff80014c35 <fmt.formatInt__anon_3469+0x1c5>
ffffffff80014c24:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
ffffffff80014c2b:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014c30:	e8 9b b5 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014c35:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff80014c3c:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff80014c43:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff80014c47:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80014c4b:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80014c4f:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80014c56:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80014c5a:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff80014c61:	b0 01                	mov    al,0x1
ffffffff80014c63:	a8 01                	test   al,0x1
ffffffff80014c65:	75 02                	jne    ffffffff80014c69 <fmt.formatInt__anon_3469+0x1f9>
ffffffff80014c67:	eb 02                	jmp    ffffffff80014c6b <fmt.formatInt__anon_3469+0x1fb>
ffffffff80014c69:	eb 10                	jmp    ffffffff80014c7b <fmt.formatInt__anon_3469+0x20b>
ffffffff80014c6b:	31 c0                	xor    eax,eax
ffffffff80014c6d:	31 c0                	xor    eax,eax
ffffffff80014c6f:	89 c7                	mov    edi,eax
ffffffff80014c71:	be 02 00 00 00       	mov    esi,0x2
ffffffff80014c76:	e8 95 b6 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80014c7b:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff80014c82:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80014c87:	48 39 c8             	cmp    rax,rcx
ffffffff80014c8a:	77 02                	ja     ffffffff80014c8e <fmt.formatInt__anon_3469+0x21e>
ffffffff80014c8c:	eb 11                	jmp    ffffffff80014c9f <fmt.formatInt__anon_3469+0x22f>
ffffffff80014c8e:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
ffffffff80014c95:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80014c9a:	e8 31 b5 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014c9f:	b1 64                	mov    cl,0x64
ffffffff80014ca1:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80014ca8:	ff 
ffffffff80014ca9:	f6 f1                	div    cl
ffffffff80014cab:	66 c1 e8 08          	shr    ax,0x8
ffffffff80014caf:	0f b6 c0             	movzx  eax,al
ffffffff80014cb2:	89 c6                	mov    esi,eax
ffffffff80014cb4:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff80014cb8:	e8 f3 24 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80014cbd:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80014cc4:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff80014cc8:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80014ccb:	b1 64                	mov    cl,0x64
ffffffff80014ccd:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80014cd4:	ff 
ffffffff80014cd5:	f6 f1                	div    cl
ffffffff80014cd7:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
ffffffff80014cdd:	e9 6f fe ff ff       	jmp    ffffffff80014b51 <fmt.formatInt__anon_3469+0xe1>
        if (a < 10) {
ffffffff80014ce2:	80 bd 67 ff ff ff 0a 	cmp    BYTE PTR [rbp-0x99],0xa
ffffffff80014ce9:	73 1c                	jae    ffffffff80014d07 <fmt.formatInt__anon_3469+0x297>
            index -= 1;
ffffffff80014ceb:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014cf2:	48 83 e8 01          	sub    rax,0x1
ffffffff80014cf6:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80014cfa:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80014cfe:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80014d01:	84 c0                	test   al,al
ffffffff80014d03:	74 25                	je     ffffffff80014d2a <fmt.formatInt__anon_3469+0x2ba>
ffffffff80014d05:	eb 25                	jmp    ffffffff80014d2c <fmt.formatInt__anon_3469+0x2bc>
            index -= 2;
ffffffff80014d07:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014d0e:	48 83 e8 02          	sub    rax,0x2
ffffffff80014d12:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80014d16:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff80014d1a:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff80014d1d:	84 c0                	test   al,al
ffffffff80014d1f:	0f 84 b2 00 00 00    	je     ffffffff80014dd7 <fmt.formatInt__anon_3469+0x367>
ffffffff80014d25:	e9 af 00 00 00       	jmp    ffffffff80014dd9 <fmt.formatInt__anon_3469+0x369>
            index -= 1;
ffffffff80014d2a:	eb 1c                	jmp    ffffffff80014d48 <fmt.formatInt__anon_3469+0x2d8>
ffffffff80014d2c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80014d33:	48 c7 c1 a8 c5 01 80 	mov    rcx,0xffffffff8001c5a8
ffffffff80014d3a:	31 c0                	xor    eax,eax
ffffffff80014d3c:	89 c2                	mov    edx,eax
ffffffff80014d3e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014d43:	e8 68 b4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014d48:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80014d4c:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80014d53:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014d5a:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff80014d61:	48 83 f8 04          	cmp    rax,0x4
ffffffff80014d65:	73 02                	jae    ffffffff80014d69 <fmt.formatInt__anon_3469+0x2f9>
ffffffff80014d67:	eb 11                	jmp    ffffffff80014d7a <fmt.formatInt__anon_3469+0x30a>
ffffffff80014d69:	48 8b bd 00 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x100]
ffffffff80014d70:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014d75:	e8 56 b4 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014d7a:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff80014d81:	48 8d 84 05 60 ff ff 	lea    rax,[rbp+rax*1-0xa0]
ffffffff80014d88:	ff 
ffffffff80014d89:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80014d90:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
ffffffff80014d96:	04 30                	add    al,0x30
ffffffff80014d98:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff80014d9b:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff80014d9f:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff80014da2:	84 c0                	test   al,al
ffffffff80014da4:	75 04                	jne    ffffffff80014daa <fmt.formatInt__anon_3469+0x33a>
ffffffff80014da6:	eb 00                	jmp    ffffffff80014da8 <fmt.formatInt__anon_3469+0x338>
ffffffff80014da8:	eb 1c                	jmp    ffffffff80014dc6 <fmt.formatInt__anon_3469+0x356>
ffffffff80014daa:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80014db1:	48 c7 c1 b8 c5 01 80 	mov    rcx,0xffffffff8001c5b8
ffffffff80014db8:	31 c0                	xor    eax,eax
ffffffff80014dba:	89 c2                	mov    edx,eax
ffffffff80014dbc:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014dc1:	e8 ea b3 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014dc6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff80014dcd:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff80014dd0:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80014dd2:	e9 38 01 00 00       	jmp    ffffffff80014f0f <fmt.formatInt__anon_3469+0x49f>
            index -= 2;
ffffffff80014dd7:	eb 1c                	jmp    ffffffff80014df5 <fmt.formatInt__anon_3469+0x385>
ffffffff80014dd9:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80014de0:	48 c7 c1 c8 c5 01 80 	mov    rcx,0xffffffff8001c5c8
ffffffff80014de7:	31 c0                	xor    eax,eax
ffffffff80014de9:	89 c2                	mov    edx,eax
ffffffff80014deb:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014df0:	e8 bb b3 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014df5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80014df9:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80014e00:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014e07:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80014e0e:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff80014e15:	48 01 c1             	add    rcx,rax
ffffffff80014e18:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
ffffffff80014e1f:	48 83 f8 04          	cmp    rax,0x4
ffffffff80014e23:	77 02                	ja     ffffffff80014e27 <fmt.formatInt__anon_3469+0x3b7>
ffffffff80014e25:	eb 11                	jmp    ffffffff80014e38 <fmt.formatInt__anon_3469+0x3c8>
ffffffff80014e27:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
ffffffff80014e2e:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014e33:	e8 d8 b4 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80014e38:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
ffffffff80014e3f:	b8 04 00 00 00       	mov    eax,0x4
ffffffff80014e44:	48 29 c8             	sub    rax,rcx
ffffffff80014e47:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff80014e4e:	b0 01                	mov    al,0x1
ffffffff80014e50:	a8 01                	test   al,0x1
ffffffff80014e52:	75 02                	jne    ffffffff80014e56 <fmt.formatInt__anon_3469+0x3e6>
ffffffff80014e54:	eb 02                	jmp    ffffffff80014e58 <fmt.formatInt__anon_3469+0x3e8>
ffffffff80014e56:	eb 0d                	jmp    ffffffff80014e65 <fmt.formatInt__anon_3469+0x3f5>
ffffffff80014e58:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014e5d:	48 89 f7             	mov    rdi,rsi
ffffffff80014e60:	e8 6b b3 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014e65:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffffffff80014e6c:	48 83 f8 04          	cmp    rax,0x4
ffffffff80014e70:	77 02                	ja     ffffffff80014e74 <fmt.formatInt__anon_3469+0x404>
ffffffff80014e72:	eb 11                	jmp    ffffffff80014e85 <fmt.formatInt__anon_3469+0x415>
ffffffff80014e74:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
ffffffff80014e7b:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014e80:	e8 4b b3 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014e85:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80014e8c:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff80014e93:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80014e97:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80014e9b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80014e9f:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
ffffffff80014ea6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80014eaa:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80014eb1:	b0 01                	mov    al,0x1
ffffffff80014eb3:	a8 01                	test   al,0x1
ffffffff80014eb5:	75 02                	jne    ffffffff80014eb9 <fmt.formatInt__anon_3469+0x449>
ffffffff80014eb7:	eb 02                	jmp    ffffffff80014ebb <fmt.formatInt__anon_3469+0x44b>
ffffffff80014eb9:	eb 10                	jmp    ffffffff80014ecb <fmt.formatInt__anon_3469+0x45b>
ffffffff80014ebb:	31 c0                	xor    eax,eax
ffffffff80014ebd:	31 c0                	xor    eax,eax
ffffffff80014ebf:	89 c7                	mov    edi,eax
ffffffff80014ec1:	be 02 00 00 00       	mov    esi,0x2
ffffffff80014ec6:	e8 45 b4 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80014ecb:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80014ed2:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80014ed7:	48 39 c8             	cmp    rax,rcx
ffffffff80014eda:	77 02                	ja     ffffffff80014ede <fmt.formatInt__anon_3469+0x46e>
ffffffff80014edc:	eb 11                	jmp    ffffffff80014eef <fmt.formatInt__anon_3469+0x47f>
ffffffff80014ede:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
ffffffff80014ee5:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80014eea:	e8 e1 b2 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014eef:	0f b6 85 67 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x99]
ffffffff80014ef6:	89 c6                	mov    esi,eax
ffffffff80014ef8:	48 8d 7d d5          	lea    rdi,[rbp-0x2b]
ffffffff80014efc:	e8 af 22 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80014f01:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
ffffffff80014f08:	66 8b 4d d5          	mov    cx,WORD PTR [rbp-0x2b]
ffffffff80014f0c:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff80014f0f:	e9 45 01 00 00       	jmp    ffffffff80015059 <fmt.formatInt__anon_3469+0x5e9>
ffffffff80014f14:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
            const digit = a % base;
ffffffff80014f1a:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80014f20:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
ffffffff80014f26:	3c 00                	cmp    al,0x0
ffffffff80014f28:	74 02                	je     ffffffff80014f2c <fmt.formatInt__anon_3469+0x4bc>
ffffffff80014f2a:	eb 1c                	jmp    ffffffff80014f48 <fmt.formatInt__anon_3469+0x4d8>
ffffffff80014f2c:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80014f33:	48 c7 c1 d8 c5 01 80 	mov    rcx,0xffffffff8001c5d8
ffffffff80014f3a:	31 c0                	xor    eax,eax
ffffffff80014f3c:	89 c2                	mov    edx,eax
ffffffff80014f3e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014f43:	e8 68 b2 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014f48:	8a 8d 57 ff ff ff    	mov    cl,BYTE PTR [rbp-0xa9]
ffffffff80014f4e:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
ffffffff80014f54:	66 0f b6 c0          	movzx  ax,al
ffffffff80014f58:	f6 f1                	div    cl
ffffffff80014f5a:	0f b6 c4             	movzx  eax,ah
ffffffff80014f5d:	88 85 ce fe ff ff    	mov    BYTE PTR [rbp-0x132],al
ffffffff80014f63:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            index -= 1;
ffffffff80014f66:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014f6d:	48 83 e8 01          	sub    rax,0x1
ffffffff80014f71:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80014f75:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80014f79:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff80014f7c:	84 c0                	test   al,al
ffffffff80014f7e:	75 04                	jne    ffffffff80014f84 <fmt.formatInt__anon_3469+0x514>
ffffffff80014f80:	eb 00                	jmp    ffffffff80014f82 <fmt.formatInt__anon_3469+0x512>
ffffffff80014f82:	eb 1c                	jmp    ffffffff80014fa0 <fmt.formatInt__anon_3469+0x530>
ffffffff80014f84:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80014f8b:	48 c7 c1 e8 c5 01 80 	mov    rcx,0xffffffff8001c5e8
ffffffff80014f92:	31 c0                	xor    eax,eax
ffffffff80014f94:	89 c2                	mov    edx,eax
ffffffff80014f96:	be 10 00 00 00       	mov    esi,0x10
ffffffff80014f9b:	e8 10 b2 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80014fa0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80014fa4:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80014fab:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80014fb2:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff80014fb9:	48 83 f8 04          	cmp    rax,0x4
ffffffff80014fbd:	73 02                	jae    ffffffff80014fc1 <fmt.formatInt__anon_3469+0x551>
ffffffff80014fbf:	eb 11                	jmp    ffffffff80014fd2 <fmt.formatInt__anon_3469+0x562>
ffffffff80014fc1:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff80014fc8:	be 04 00 00 00       	mov    esi,0x4
ffffffff80014fcd:	e8 fe b1 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80014fd2:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [rbp-0xac]
ffffffff80014fd8:	8a 8d ce fe ff ff    	mov    cl,BYTE PTR [rbp-0x132]
ffffffff80014fde:	0f b6 f9             	movzx  edi,cl
ffffffff80014fe1:	0f b6 f0             	movzx  esi,al
ffffffff80014fe4:	e8 37 23 ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80014fe9:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
ffffffff80014ff0:	88 c2                	mov    dl,al
ffffffff80014ff2:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
ffffffff80014ff8:	88 94 0d 60 ff ff ff 	mov    BYTE PTR [rbp+rcx*1-0xa0],dl
            a /= base;
ffffffff80014fff:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80015005:	88 8d bf fe ff ff    	mov    BYTE PTR [rbp-0x141],cl
ffffffff8001500b:	3c 00                	cmp    al,0x0
ffffffff8001500d:	74 02                	je     ffffffff80015011 <fmt.formatInt__anon_3469+0x5a1>
ffffffff8001500f:	eb 1c                	jmp    ffffffff8001502d <fmt.formatInt__anon_3469+0x5bd>
ffffffff80015011:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80015018:	48 c7 c1 f8 c5 01 80 	mov    rcx,0xffffffff8001c5f8
ffffffff8001501f:	31 c0                	xor    eax,eax
ffffffff80015021:	89 c2                	mov    edx,eax
ffffffff80015023:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015028:	e8 83 b1 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001502d:	8a 8d 57 ff ff ff    	mov    cl,BYTE PTR [rbp-0xa9]
ffffffff80015033:	8a 85 bf fe ff ff    	mov    al,BYTE PTR [rbp-0x141]
ffffffff80015039:	66 0f b6 c0          	movzx  ax,al
ffffffff8001503d:	f6 f1                	div    cl
ffffffff8001503f:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
            if (a == 0) break;
ffffffff80015045:	80 bd 67 ff ff ff 00 	cmp    BYTE PTR [rbp-0x99],0x0
ffffffff8001504c:	75 02                	jne    ffffffff80015050 <fmt.formatInt__anon_3469+0x5e0>
ffffffff8001504e:	eb 07                	jmp    ffffffff80015057 <fmt.formatInt__anon_3469+0x5e7>
ffffffff80015050:	eb 00                	jmp    ffffffff80015052 <fmt.formatInt__anon_3469+0x5e2>
ffffffff80015052:	e9 bd fe ff ff       	jmp    ffffffff80014f14 <fmt.formatInt__anon_3469+0x4a4>
ffffffff80015057:	eb 00                	jmp    ffffffff80015059 <fmt.formatInt__anon_3469+0x5e9>
    return formatBuf(buf[index..], options, writer);
ffffffff80015059:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015060:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff80015067:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff8001506e:	48 01 c1             	add    rcx,rax
ffffffff80015071:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
ffffffff80015078:	48 83 f8 04          	cmp    rax,0x4
ffffffff8001507c:	77 02                	ja     ffffffff80015080 <fmt.formatInt__anon_3469+0x610>
ffffffff8001507e:	eb 11                	jmp    ffffffff80015091 <fmt.formatInt__anon_3469+0x621>
ffffffff80015080:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80015087:	be 04 00 00 00       	mov    esi,0x4
ffffffff8001508c:	e8 7f b2 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015091:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff80015098:	b8 04 00 00 00       	mov    eax,0x4
ffffffff8001509d:	48 29 c8             	sub    rax,rcx
ffffffff800150a0:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff800150a7:	b0 01                	mov    al,0x1
ffffffff800150a9:	a8 01                	test   al,0x1
ffffffff800150ab:	75 02                	jne    ffffffff800150af <fmt.formatInt__anon_3469+0x63f>
ffffffff800150ad:	eb 02                	jmp    ffffffff800150b1 <fmt.formatInt__anon_3469+0x641>
ffffffff800150af:	eb 0d                	jmp    ffffffff800150be <fmt.formatInt__anon_3469+0x64e>
ffffffff800150b1:	be 04 00 00 00       	mov    esi,0x4
ffffffff800150b6:	48 89 f7             	mov    rdi,rsi
ffffffff800150b9:	e8 12 b1 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800150be:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffffffff800150c5:	48 83 f8 04          	cmp    rax,0x4
ffffffff800150c9:	77 02                	ja     ffffffff800150cd <fmt.formatInt__anon_3469+0x65d>
ffffffff800150cb:	eb 11                	jmp    ffffffff800150de <fmt.formatInt__anon_3469+0x66e>
ffffffff800150cd:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff800150d4:	be 04 00 00 00       	mov    esi,0x4
ffffffff800150d9:	e8 f2 b0 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800150de:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffffffff800150e5:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffffffff800150ec:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff800150f3:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff800150fa:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
ffffffff80015101:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80015105:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80015109:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff8001510d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80015111:	e8 4a 23 ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff80015116:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff8001511a:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff8001511f:	75 0d                	jne    ffffffff8001512e <fmt.formatInt__anon_3469+0x6be>
ffffffff80015121:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80015125:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff8001512c:	5d                   	pop    rbp
ffffffff8001512d:	c3                   	ret
ffffffff8001512e:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff80015135:	e8 d6 e2 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001513a:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8001513e:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff80015145:	5d                   	pop    rbp
ffffffff80015146:	c3                   	ret
ffffffff80015147:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8001514e:	00 00 

ffffffff80015150 <math.absCast__anon_3471>:
} {
ffffffff80015150:	55                   	push   rbp
ffffffff80015151:	48 89 e5             	mov    rbp,rsp
ffffffff80015154:	48 83 ec 01          	sub    rsp,0x1
ffffffff80015158:	40 88 f8             	mov    al,dil
ffffffff8001515b:	88 c1                	mov    cl,al
ffffffff8001515d:	80 e1 07             	and    cl,0x7
ffffffff80015160:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
            if (int_info.signedness == .unsigned) return x;
ffffffff80015163:	48 83 c4 01          	add    rsp,0x1
ffffffff80015167:	5d                   	pop    rbp
ffffffff80015168:	c3                   	ret
ffffffff80015169:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80015170 <fmt.formatValue__anon_3474>:
) !void {
ffffffff80015170:	55                   	push   rbp
ffffffff80015171:	48 89 e5             	mov    rbp,rsp
ffffffff80015174:	48 83 ec 10          	sub    rsp,0x10
ffffffff80015178:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff8001517c:	40 88 f0             	mov    al,sil
ffffffff8001517f:	40 88 c6             	mov    sil,al
ffffffff80015182:	40 80 e6 1f          	and    sil,0x1f
ffffffff80015186:	40 88 75 fd          	mov    BYTE PTR [rbp-0x3],sil
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff8001518a:	0f b6 f0             	movzx  esi,al
ffffffff8001518d:	e8 2e 00 00 00       	call   ffffffff800151c0 <fmt.formatIntValue__anon_3475>
ffffffff80015192:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80015196:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8001519b:	75 0a                	jne    ffffffff800151a7 <fmt.formatValue__anon_3474+0x37>
ffffffff8001519d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800151a1:	48 83 c4 10          	add    rsp,0x10
ffffffff800151a5:	5d                   	pop    rbp
ffffffff800151a6:	c3                   	ret
ffffffff800151a7:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff800151ab:	e8 60 e2 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800151b0:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800151b4:	48 83 c4 10          	add    rsp,0x10
ffffffff800151b8:	5d                   	pop    rbp
ffffffff800151b9:	c3                   	ret
ffffffff800151ba:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff800151c0 <fmt.formatIntValue__anon_3475>:
) !void {
ffffffff800151c0:	55                   	push   rbp
ffffffff800151c1:	48 89 e5             	mov    rbp,rsp
ffffffff800151c4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800151c8:	49 89 c9             	mov    r9,rcx
ffffffff800151cb:	49 89 d0             	mov    r8,rdx
ffffffff800151ce:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff800151d2:	40 88 f0             	mov    al,sil
ffffffff800151d5:	88 c1                	mov    cl,al
ffffffff800151d7:	80 e1 1f             	and    cl,0x1f
ffffffff800151da:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff800151dd:	88 4d fd             	mov    BYTE PTR [rbp-0x3],cl
    return formatInt(int_value, radix, case, options, writer);
ffffffff800151e0:	0f b6 f0             	movzx  esi,al
ffffffff800151e3:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff800151e8:	31 c9                	xor    ecx,ecx
ffffffff800151ea:	e8 31 00 00 00       	call   ffffffff80015220 <fmt.formatInt__anon_3478>
ffffffff800151ef:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800151f3:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800151f8:	75 0a                	jne    ffffffff80015204 <fmt.formatIntValue__anon_3475+0x44>
ffffffff800151fa:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800151fe:	48 83 c4 10          	add    rsp,0x10
ffffffff80015202:	5d                   	pop    rbp
ffffffff80015203:	c3                   	ret
ffffffff80015204:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80015208:	e8 03 e2 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001520d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80015211:	48 83 c4 10          	add    rsp,0x10
ffffffff80015215:	5d                   	pop    rbp
ffffffff80015216:	c3                   	ret
ffffffff80015217:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8001521e:	00 00 

ffffffff80015220 <fmt.formatInt__anon_3478>:
) !void {
ffffffff80015220:	55                   	push   rbp
ffffffff80015221:	48 89 e5             	mov    rbp,rsp
ffffffff80015224:	48 81 ec 60 01 00 00 	sub    rsp,0x160
ffffffff8001522b:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
ffffffff80015232:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
ffffffff80015239:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
ffffffff80015240:	88 8d 54 ff ff ff    	mov    BYTE PTR [rbp-0xac],cl
ffffffff80015246:	88 d0                	mov    al,dl
ffffffff80015248:	88 85 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],al
ffffffff8001524e:	40 88 f2             	mov    dl,sil
ffffffff80015251:	88 95 56 ff ff ff    	mov    BYTE PTR [rbp-0xaa],dl
ffffffff80015257:	80 e2 1f             	and    dl,0x1f
ffffffff8001525a:	88 95 55 ff ff ff    	mov    BYTE PTR [rbp-0xab],dl
ffffffff80015260:	88 95 58 ff ff ff    	mov    BYTE PTR [rbp-0xa8],dl
ffffffff80015266:	88 85 59 ff ff ff    	mov    BYTE PTR [rbp-0xa7],al
ffffffff8001526c:	80 e1 01             	and    cl,0x1
ffffffff8001526f:	88 8d 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],cl
    assert(base >= 2);
ffffffff80015275:	2c 02                	sub    al,0x2
ffffffff80015277:	0f 93 c0             	setae  al
ffffffff8001527a:	0f b6 f8             	movzx  edi,al
ffffffff8001527d:	e8 ae 09 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80015282:	8a 8d 55 ff ff ff    	mov    cl,BYTE PTR [rbp-0xab]
ffffffff80015288:	8a 85 56 ff ff ff    	mov    al,BYTE PTR [rbp-0xaa]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8001528e:	88 8d 5b ff ff ff    	mov    BYTE PTR [rbp-0xa5],cl
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80015294:	66 c7 85 5c ff ff ff 	mov    WORD PTR [rbp-0xa4],0x8
ffffffff8001529b:	08 00 
    const abs_value = math.absCast(int_value);
ffffffff8001529d:	0f b6 f8             	movzx  edi,al
ffffffff800152a0:	e8 5b 06 00 00       	call   ffffffff80015900 <math.absCast__anon_3480>
ffffffff800152a5:	88 c1                	mov    cl,al
ffffffff800152a7:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
ffffffff800152ad:	80 e1 1f             	and    cl,0x1f
ffffffff800152b0:	88 8d 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],cl
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff800152b6:	66 c7 85 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],0xaaaa
ffffffff800152bd:	aa aa 
ffffffff800152bf:	c7 85 60 ff ff ff aa 	mov    DWORD PTR [rbp-0xa0],0xaaaaaaaa
ffffffff800152c6:	aa aa aa 
    var a: MinInt = abs_value;
ffffffff800152c9:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
    var index: usize = buf.len;
ffffffff800152cf:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x6
ffffffff800152d6:	06 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff800152da:	3c 0a                	cmp    al,0xa
ffffffff800152dc:	75 0f                	jne    ffffffff800152ed <fmt.formatInt__anon_3478+0xcd>
ffffffff800152de:	e8 ad 1e ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff800152e3:	34 ff                	xor    al,0xff
ffffffff800152e5:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
ffffffff800152eb:	eb 0a                	jmp    ffffffff800152f7 <fmt.formatInt__anon_3478+0xd7>
ffffffff800152ed:	31 c0                	xor    eax,eax
ffffffff800152ef:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
ffffffff800152f5:	eb 00                	jmp    ffffffff800152f7 <fmt.formatInt__anon_3478+0xd7>
ffffffff800152f7:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
ffffffff800152fd:	a8 01                	test   al,0x1
ffffffff800152ff:	75 02                	jne    ffffffff80015303 <fmt.formatInt__anon_3478+0xe3>
ffffffff80015301:	eb 02                	jmp    ffffffff80015305 <fmt.formatInt__anon_3478+0xe5>
ffffffff80015303:	eb 05                	jmp    ffffffff8001530a <fmt.formatInt__anon_3478+0xea>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80015305:	e9 c3 03 00 00       	jmp    ffffffff800156cd <fmt.formatInt__anon_3478+0x4ad>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8001530a:	80 bd 67 ff ff ff 64 	cmp    BYTE PTR [rbp-0x99],0x64
ffffffff80015311:	72 25                	jb     ffffffff80015338 <fmt.formatInt__anon_3478+0x118>
            index -= 2;
ffffffff80015313:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001531a:	48 83 e8 02          	sub    rax,0x2
ffffffff8001531e:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80015325:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff8001532c:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff80015332:	84 c0                	test   al,al
ffffffff80015334:	74 07                	je     ffffffff8001533d <fmt.formatInt__anon_3478+0x11d>
ffffffff80015336:	eb 07                	jmp    ffffffff8001533f <fmt.formatInt__anon_3478+0x11f>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80015338:	e9 5e 01 00 00       	jmp    ffffffff8001549b <fmt.formatInt__anon_3478+0x27b>
            index -= 2;
ffffffff8001533d:	eb 1c                	jmp    ffffffff8001535b <fmt.formatInt__anon_3478+0x13b>
ffffffff8001533f:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015346:	48 c7 c1 08 c6 01 80 	mov    rcx,0xffffffff8001c608
ffffffff8001534d:	31 c0                	xor    eax,eax
ffffffff8001534f:	89 c2                	mov    edx,eax
ffffffff80015351:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015356:	e8 55 ae fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001535b:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80015362:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80015369:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015370:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80015377:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff8001537e:	48 01 c1             	add    rcx,rax
ffffffff80015381:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
ffffffff80015388:	48 83 f8 06          	cmp    rax,0x6
ffffffff8001538c:	77 02                	ja     ffffffff80015390 <fmt.formatInt__anon_3478+0x170>
ffffffff8001538e:	eb 11                	jmp    ffffffff800153a1 <fmt.formatInt__anon_3478+0x181>
ffffffff80015390:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
ffffffff80015397:	be 06 00 00 00       	mov    esi,0x6
ffffffff8001539c:	e8 6f af fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800153a1:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff800153a8:	b8 06 00 00 00       	mov    eax,0x6
ffffffff800153ad:	48 29 c8             	sub    rax,rcx
ffffffff800153b0:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff800153b7:	b0 01                	mov    al,0x1
ffffffff800153b9:	a8 01                	test   al,0x1
ffffffff800153bb:	75 02                	jne    ffffffff800153bf <fmt.formatInt__anon_3478+0x19f>
ffffffff800153bd:	eb 02                	jmp    ffffffff800153c1 <fmt.formatInt__anon_3478+0x1a1>
ffffffff800153bf:	eb 0d                	jmp    ffffffff800153ce <fmt.formatInt__anon_3478+0x1ae>
ffffffff800153c1:	be 06 00 00 00       	mov    esi,0x6
ffffffff800153c6:	48 89 f7             	mov    rdi,rsi
ffffffff800153c9:	e8 02 ae fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800153ce:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff800153d5:	48 83 f8 06          	cmp    rax,0x6
ffffffff800153d9:	77 02                	ja     ffffffff800153dd <fmt.formatInt__anon_3478+0x1bd>
ffffffff800153db:	eb 11                	jmp    ffffffff800153ee <fmt.formatInt__anon_3478+0x1ce>
ffffffff800153dd:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
ffffffff800153e4:	be 06 00 00 00       	mov    esi,0x6
ffffffff800153e9:	e8 e2 ad fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800153ee:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff800153f5:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff800153fc:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff80015400:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80015404:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80015408:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff8001540f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80015413:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff8001541a:	b0 01                	mov    al,0x1
ffffffff8001541c:	a8 01                	test   al,0x1
ffffffff8001541e:	75 02                	jne    ffffffff80015422 <fmt.formatInt__anon_3478+0x202>
ffffffff80015420:	eb 02                	jmp    ffffffff80015424 <fmt.formatInt__anon_3478+0x204>
ffffffff80015422:	eb 10                	jmp    ffffffff80015434 <fmt.formatInt__anon_3478+0x214>
ffffffff80015424:	31 c0                	xor    eax,eax
ffffffff80015426:	31 c0                	xor    eax,eax
ffffffff80015428:	89 c7                	mov    edi,eax
ffffffff8001542a:	be 02 00 00 00       	mov    esi,0x2
ffffffff8001542f:	e8 dc ae fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015434:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff8001543b:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80015440:	48 39 c8             	cmp    rax,rcx
ffffffff80015443:	77 02                	ja     ffffffff80015447 <fmt.formatInt__anon_3478+0x227>
ffffffff80015445:	eb 11                	jmp    ffffffff80015458 <fmt.formatInt__anon_3478+0x238>
ffffffff80015447:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
ffffffff8001544e:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80015453:	e8 78 ad fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015458:	b1 64                	mov    cl,0x64
ffffffff8001545a:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80015461:	ff 
ffffffff80015462:	f6 f1                	div    cl
ffffffff80015464:	66 c1 e8 08          	shr    ax,0x8
ffffffff80015468:	0f b6 c0             	movzx  eax,al
ffffffff8001546b:	89 c6                	mov    esi,eax
ffffffff8001546d:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff80015471:	e8 3a 1d ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80015476:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff8001547d:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff80015481:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80015484:	b1 64                	mov    cl,0x64
ffffffff80015486:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff8001548d:	ff 
ffffffff8001548e:	f6 f1                	div    cl
ffffffff80015490:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
ffffffff80015496:	e9 6f fe ff ff       	jmp    ffffffff8001530a <fmt.formatInt__anon_3478+0xea>
        if (a < 10) {
ffffffff8001549b:	80 bd 67 ff ff ff 0a 	cmp    BYTE PTR [rbp-0x99],0xa
ffffffff800154a2:	73 1c                	jae    ffffffff800154c0 <fmt.formatInt__anon_3478+0x2a0>
            index -= 1;
ffffffff800154a4:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800154ab:	48 83 e8 01          	sub    rax,0x1
ffffffff800154af:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff800154b3:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff800154b7:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff800154ba:	84 c0                	test   al,al
ffffffff800154bc:	74 25                	je     ffffffff800154e3 <fmt.formatInt__anon_3478+0x2c3>
ffffffff800154be:	eb 25                	jmp    ffffffff800154e5 <fmt.formatInt__anon_3478+0x2c5>
            index -= 2;
ffffffff800154c0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800154c7:	48 83 e8 02          	sub    rax,0x2
ffffffff800154cb:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800154cf:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff800154d3:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff800154d6:	84 c0                	test   al,al
ffffffff800154d8:	0f 84 b2 00 00 00    	je     ffffffff80015590 <fmt.formatInt__anon_3478+0x370>
ffffffff800154de:	e9 af 00 00 00       	jmp    ffffffff80015592 <fmt.formatInt__anon_3478+0x372>
            index -= 1;
ffffffff800154e3:	eb 1c                	jmp    ffffffff80015501 <fmt.formatInt__anon_3478+0x2e1>
ffffffff800154e5:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800154ec:	48 c7 c1 18 c6 01 80 	mov    rcx,0xffffffff8001c618
ffffffff800154f3:	31 c0                	xor    eax,eax
ffffffff800154f5:	89 c2                	mov    edx,eax
ffffffff800154f7:	be 10 00 00 00       	mov    esi,0x10
ffffffff800154fc:	e8 af ac fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015501:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80015505:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff8001550c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015513:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff8001551a:	48 83 f8 06          	cmp    rax,0x6
ffffffff8001551e:	73 02                	jae    ffffffff80015522 <fmt.formatInt__anon_3478+0x302>
ffffffff80015520:	eb 11                	jmp    ffffffff80015533 <fmt.formatInt__anon_3478+0x313>
ffffffff80015522:	48 8b bd 00 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x100]
ffffffff80015529:	be 06 00 00 00       	mov    esi,0x6
ffffffff8001552e:	e8 9d ac fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015533:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff8001553a:	48 8d 84 05 60 ff ff 	lea    rax,[rbp+rax*1-0xa0]
ffffffff80015541:	ff 
ffffffff80015542:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80015549:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
ffffffff8001554f:	04 30                	add    al,0x30
ffffffff80015551:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff80015554:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff80015558:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff8001555b:	84 c0                	test   al,al
ffffffff8001555d:	75 04                	jne    ffffffff80015563 <fmt.formatInt__anon_3478+0x343>
ffffffff8001555f:	eb 00                	jmp    ffffffff80015561 <fmt.formatInt__anon_3478+0x341>
ffffffff80015561:	eb 1c                	jmp    ffffffff8001557f <fmt.formatInt__anon_3478+0x35f>
ffffffff80015563:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001556a:	48 c7 c1 28 c6 01 80 	mov    rcx,0xffffffff8001c628
ffffffff80015571:	31 c0                	xor    eax,eax
ffffffff80015573:	89 c2                	mov    edx,eax
ffffffff80015575:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001557a:	e8 31 ac fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001557f:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff80015586:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff80015589:	88 08                	mov    BYTE PTR [rax],cl
ffffffff8001558b:	e9 38 01 00 00       	jmp    ffffffff800156c8 <fmt.formatInt__anon_3478+0x4a8>
            index -= 2;
ffffffff80015590:	eb 1c                	jmp    ffffffff800155ae <fmt.formatInt__anon_3478+0x38e>
ffffffff80015592:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015599:	48 c7 c1 38 c6 01 80 	mov    rcx,0xffffffff8001c638
ffffffff800155a0:	31 c0                	xor    eax,eax
ffffffff800155a2:	89 c2                	mov    edx,eax
ffffffff800155a4:	be 10 00 00 00       	mov    esi,0x10
ffffffff800155a9:	e8 02 ac fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800155ae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800155b2:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff800155b9:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800155c0:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff800155c7:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff800155ce:	48 01 c1             	add    rcx,rax
ffffffff800155d1:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
ffffffff800155d8:	48 83 f8 06          	cmp    rax,0x6
ffffffff800155dc:	77 02                	ja     ffffffff800155e0 <fmt.formatInt__anon_3478+0x3c0>
ffffffff800155de:	eb 11                	jmp    ffffffff800155f1 <fmt.formatInt__anon_3478+0x3d1>
ffffffff800155e0:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
ffffffff800155e7:	be 06 00 00 00       	mov    esi,0x6
ffffffff800155ec:	e8 1f ad fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800155f1:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
ffffffff800155f8:	b8 06 00 00 00       	mov    eax,0x6
ffffffff800155fd:	48 29 c8             	sub    rax,rcx
ffffffff80015600:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff80015607:	b0 01                	mov    al,0x1
ffffffff80015609:	a8 01                	test   al,0x1
ffffffff8001560b:	75 02                	jne    ffffffff8001560f <fmt.formatInt__anon_3478+0x3ef>
ffffffff8001560d:	eb 02                	jmp    ffffffff80015611 <fmt.formatInt__anon_3478+0x3f1>
ffffffff8001560f:	eb 0d                	jmp    ffffffff8001561e <fmt.formatInt__anon_3478+0x3fe>
ffffffff80015611:	be 06 00 00 00       	mov    esi,0x6
ffffffff80015616:	48 89 f7             	mov    rdi,rsi
ffffffff80015619:	e8 b2 ab fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001561e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffffffff80015625:	48 83 f8 06          	cmp    rax,0x6
ffffffff80015629:	77 02                	ja     ffffffff8001562d <fmt.formatInt__anon_3478+0x40d>
ffffffff8001562b:	eb 11                	jmp    ffffffff8001563e <fmt.formatInt__anon_3478+0x41e>
ffffffff8001562d:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
ffffffff80015634:	be 06 00 00 00       	mov    esi,0x6
ffffffff80015639:	e8 92 ab fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001563e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80015645:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff8001564c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80015650:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80015654:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80015658:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
ffffffff8001565f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80015663:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff8001566a:	b0 01                	mov    al,0x1
ffffffff8001566c:	a8 01                	test   al,0x1
ffffffff8001566e:	75 02                	jne    ffffffff80015672 <fmt.formatInt__anon_3478+0x452>
ffffffff80015670:	eb 02                	jmp    ffffffff80015674 <fmt.formatInt__anon_3478+0x454>
ffffffff80015672:	eb 10                	jmp    ffffffff80015684 <fmt.formatInt__anon_3478+0x464>
ffffffff80015674:	31 c0                	xor    eax,eax
ffffffff80015676:	31 c0                	xor    eax,eax
ffffffff80015678:	89 c7                	mov    edi,eax
ffffffff8001567a:	be 02 00 00 00       	mov    esi,0x2
ffffffff8001567f:	e8 8c ac fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015684:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff8001568b:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80015690:	48 39 c8             	cmp    rax,rcx
ffffffff80015693:	77 02                	ja     ffffffff80015697 <fmt.formatInt__anon_3478+0x477>
ffffffff80015695:	eb 11                	jmp    ffffffff800156a8 <fmt.formatInt__anon_3478+0x488>
ffffffff80015697:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
ffffffff8001569e:	bf 02 00 00 00       	mov    edi,0x2
ffffffff800156a3:	e8 28 ab fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800156a8:	0f b6 85 67 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x99]
ffffffff800156af:	89 c6                	mov    esi,eax
ffffffff800156b1:	48 8d 7d d5          	lea    rdi,[rbp-0x2b]
ffffffff800156b5:	e8 f6 1a ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff800156ba:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
ffffffff800156c1:	66 8b 4d d5          	mov    cx,WORD PTR [rbp-0x2b]
ffffffff800156c5:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff800156c8:	e9 45 01 00 00       	jmp    ffffffff80015812 <fmt.formatInt__anon_3478+0x5f2>
ffffffff800156cd:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
            const digit = a % base;
ffffffff800156d3:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff800156d9:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
ffffffff800156df:	3c 00                	cmp    al,0x0
ffffffff800156e1:	74 02                	je     ffffffff800156e5 <fmt.formatInt__anon_3478+0x4c5>
ffffffff800156e3:	eb 1c                	jmp    ffffffff80015701 <fmt.formatInt__anon_3478+0x4e1>
ffffffff800156e5:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff800156ec:	48 c7 c1 48 c6 01 80 	mov    rcx,0xffffffff8001c648
ffffffff800156f3:	31 c0                	xor    eax,eax
ffffffff800156f5:	89 c2                	mov    edx,eax
ffffffff800156f7:	be 10 00 00 00       	mov    esi,0x10
ffffffff800156fc:	e8 af aa fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015701:	8a 8d 57 ff ff ff    	mov    cl,BYTE PTR [rbp-0xa9]
ffffffff80015707:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
ffffffff8001570d:	66 0f b6 c0          	movzx  ax,al
ffffffff80015711:	f6 f1                	div    cl
ffffffff80015713:	0f b6 c4             	movzx  eax,ah
ffffffff80015716:	88 85 ce fe ff ff    	mov    BYTE PTR [rbp-0x132],al
ffffffff8001571c:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            index -= 1;
ffffffff8001571f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015726:	48 83 e8 01          	sub    rax,0x1
ffffffff8001572a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8001572e:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80015732:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff80015735:	84 c0                	test   al,al
ffffffff80015737:	75 04                	jne    ffffffff8001573d <fmt.formatInt__anon_3478+0x51d>
ffffffff80015739:	eb 00                	jmp    ffffffff8001573b <fmt.formatInt__anon_3478+0x51b>
ffffffff8001573b:	eb 1c                	jmp    ffffffff80015759 <fmt.formatInt__anon_3478+0x539>
ffffffff8001573d:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015744:	48 c7 c1 58 c6 01 80 	mov    rcx,0xffffffff8001c658
ffffffff8001574b:	31 c0                	xor    eax,eax
ffffffff8001574d:	89 c2                	mov    edx,eax
ffffffff8001574f:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015754:	e8 57 aa fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015759:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8001575d:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80015764:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001576b:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff80015772:	48 83 f8 06          	cmp    rax,0x6
ffffffff80015776:	73 02                	jae    ffffffff8001577a <fmt.formatInt__anon_3478+0x55a>
ffffffff80015778:	eb 11                	jmp    ffffffff8001578b <fmt.formatInt__anon_3478+0x56b>
ffffffff8001577a:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff80015781:	be 06 00 00 00       	mov    esi,0x6
ffffffff80015786:	e8 45 aa fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001578b:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [rbp-0xac]
ffffffff80015791:	8a 8d ce fe ff ff    	mov    cl,BYTE PTR [rbp-0x132]
ffffffff80015797:	0f b6 f9             	movzx  edi,cl
ffffffff8001579a:	0f b6 f0             	movzx  esi,al
ffffffff8001579d:	e8 7e 1b ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff800157a2:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
ffffffff800157a9:	88 c2                	mov    dl,al
ffffffff800157ab:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
ffffffff800157b1:	88 94 0d 60 ff ff ff 	mov    BYTE PTR [rbp+rcx*1-0xa0],dl
            a /= base;
ffffffff800157b8:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff800157be:	88 8d bf fe ff ff    	mov    BYTE PTR [rbp-0x141],cl
ffffffff800157c4:	3c 00                	cmp    al,0x0
ffffffff800157c6:	74 02                	je     ffffffff800157ca <fmt.formatInt__anon_3478+0x5aa>
ffffffff800157c8:	eb 1c                	jmp    ffffffff800157e6 <fmt.formatInt__anon_3478+0x5c6>
ffffffff800157ca:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff800157d1:	48 c7 c1 68 c6 01 80 	mov    rcx,0xffffffff8001c668
ffffffff800157d8:	31 c0                	xor    eax,eax
ffffffff800157da:	89 c2                	mov    edx,eax
ffffffff800157dc:	be 10 00 00 00       	mov    esi,0x10
ffffffff800157e1:	e8 ca a9 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800157e6:	8a 8d 57 ff ff ff    	mov    cl,BYTE PTR [rbp-0xa9]
ffffffff800157ec:	8a 85 bf fe ff ff    	mov    al,BYTE PTR [rbp-0x141]
ffffffff800157f2:	66 0f b6 c0          	movzx  ax,al
ffffffff800157f6:	f6 f1                	div    cl
ffffffff800157f8:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
            if (a == 0) break;
ffffffff800157fe:	80 bd 67 ff ff ff 00 	cmp    BYTE PTR [rbp-0x99],0x0
ffffffff80015805:	75 02                	jne    ffffffff80015809 <fmt.formatInt__anon_3478+0x5e9>
ffffffff80015807:	eb 07                	jmp    ffffffff80015810 <fmt.formatInt__anon_3478+0x5f0>
ffffffff80015809:	eb 00                	jmp    ffffffff8001580b <fmt.formatInt__anon_3478+0x5eb>
ffffffff8001580b:	e9 bd fe ff ff       	jmp    ffffffff800156cd <fmt.formatInt__anon_3478+0x4ad>
ffffffff80015810:	eb 00                	jmp    ffffffff80015812 <fmt.formatInt__anon_3478+0x5f2>
    return formatBuf(buf[index..], options, writer);
ffffffff80015812:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015819:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff80015820:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff80015827:	48 01 c1             	add    rcx,rax
ffffffff8001582a:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
ffffffff80015831:	48 83 f8 06          	cmp    rax,0x6
ffffffff80015835:	77 02                	ja     ffffffff80015839 <fmt.formatInt__anon_3478+0x619>
ffffffff80015837:	eb 11                	jmp    ffffffff8001584a <fmt.formatInt__anon_3478+0x62a>
ffffffff80015839:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80015840:	be 06 00 00 00       	mov    esi,0x6
ffffffff80015845:	e8 c6 aa fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8001584a:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff80015851:	b8 06 00 00 00       	mov    eax,0x6
ffffffff80015856:	48 29 c8             	sub    rax,rcx
ffffffff80015859:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff80015860:	b0 01                	mov    al,0x1
ffffffff80015862:	a8 01                	test   al,0x1
ffffffff80015864:	75 02                	jne    ffffffff80015868 <fmt.formatInt__anon_3478+0x648>
ffffffff80015866:	eb 02                	jmp    ffffffff8001586a <fmt.formatInt__anon_3478+0x64a>
ffffffff80015868:	eb 0d                	jmp    ffffffff80015877 <fmt.formatInt__anon_3478+0x657>
ffffffff8001586a:	be 06 00 00 00       	mov    esi,0x6
ffffffff8001586f:	48 89 f7             	mov    rdi,rsi
ffffffff80015872:	e8 59 a9 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015877:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffffffff8001587e:	48 83 f8 06          	cmp    rax,0x6
ffffffff80015882:	77 02                	ja     ffffffff80015886 <fmt.formatInt__anon_3478+0x666>
ffffffff80015884:	eb 11                	jmp    ffffffff80015897 <fmt.formatInt__anon_3478+0x677>
ffffffff80015886:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff8001588d:	be 06 00 00 00       	mov    esi,0x6
ffffffff80015892:	e8 39 a9 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015897:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffffffff8001589e:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffffffff800158a5:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff800158ac:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff800158b3:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
ffffffff800158ba:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff800158be:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800158c2:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff800158c6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800158ca:	e8 91 1b ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff800158cf:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff800158d3:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff800158d8:	75 0d                	jne    ffffffff800158e7 <fmt.formatInt__anon_3478+0x6c7>
ffffffff800158da:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800158de:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff800158e5:	5d                   	pop    rbp
ffffffff800158e6:	c3                   	ret
ffffffff800158e7:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff800158ee:	e8 1d db fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800158f3:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800158f7:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff800158fe:	5d                   	pop    rbp
ffffffff800158ff:	c3                   	ret

ffffffff80015900 <math.absCast__anon_3480>:
} {
ffffffff80015900:	55                   	push   rbp
ffffffff80015901:	48 89 e5             	mov    rbp,rsp
ffffffff80015904:	48 83 ec 01          	sub    rsp,0x1
ffffffff80015908:	40 88 f8             	mov    al,dil
ffffffff8001590b:	88 c1                	mov    cl,al
ffffffff8001590d:	80 e1 1f             	and    cl,0x1f
ffffffff80015910:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
            if (int_info.signedness == .unsigned) return x;
ffffffff80015913:	48 83 c4 01          	add    rsp,0x1
ffffffff80015917:	5d                   	pop    rbp
ffffffff80015918:	c3                   	ret
ffffffff80015919:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80015920 <fmt.formatValue__anon_3483>:
) !void {
ffffffff80015920:	55                   	push   rbp
ffffffff80015921:	48 89 e5             	mov    rbp,rsp
ffffffff80015924:	48 83 ec 10          	sub    rsp,0x10
ffffffff80015928:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff8001592c:	40 88 f0             	mov    al,sil
ffffffff8001592f:	40 88 c6             	mov    sil,al
ffffffff80015932:	40 80 e6 0f          	and    sil,0xf
ffffffff80015936:	40 88 75 fd          	mov    BYTE PTR [rbp-0x3],sil
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff8001593a:	0f b6 f0             	movzx  esi,al
ffffffff8001593d:	e8 2e 00 00 00       	call   ffffffff80015970 <fmt.formatIntValue__anon_3484>
ffffffff80015942:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80015946:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8001594b:	75 0a                	jne    ffffffff80015957 <fmt.formatValue__anon_3483+0x37>
ffffffff8001594d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80015951:	48 83 c4 10          	add    rsp,0x10
ffffffff80015955:	5d                   	pop    rbp
ffffffff80015956:	c3                   	ret
ffffffff80015957:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff8001595b:	e8 b0 da fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80015960:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80015964:	48 83 c4 10          	add    rsp,0x10
ffffffff80015968:	5d                   	pop    rbp
ffffffff80015969:	c3                   	ret
ffffffff8001596a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80015970 <fmt.formatIntValue__anon_3484>:
) !void {
ffffffff80015970:	55                   	push   rbp
ffffffff80015971:	48 89 e5             	mov    rbp,rsp
ffffffff80015974:	48 83 ec 10          	sub    rsp,0x10
ffffffff80015978:	49 89 c9             	mov    r9,rcx
ffffffff8001597b:	49 89 d0             	mov    r8,rdx
ffffffff8001597e:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80015982:	40 88 f0             	mov    al,sil
ffffffff80015985:	88 c1                	mov    cl,al
ffffffff80015987:	80 e1 0f             	and    cl,0xf
ffffffff8001598a:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8001598d:	88 4d fd             	mov    BYTE PTR [rbp-0x3],cl
    return formatInt(int_value, radix, case, options, writer);
ffffffff80015990:	0f b6 f0             	movzx  esi,al
ffffffff80015993:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80015998:	31 c9                	xor    ecx,ecx
ffffffff8001599a:	e8 31 00 00 00       	call   ffffffff800159d0 <fmt.formatInt__anon_3487>
ffffffff8001599f:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800159a3:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800159a8:	75 0a                	jne    ffffffff800159b4 <fmt.formatIntValue__anon_3484+0x44>
ffffffff800159aa:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800159ae:	48 83 c4 10          	add    rsp,0x10
ffffffff800159b2:	5d                   	pop    rbp
ffffffff800159b3:	c3                   	ret
ffffffff800159b4:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff800159b8:	e8 53 da fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800159bd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800159c1:	48 83 c4 10          	add    rsp,0x10
ffffffff800159c5:	5d                   	pop    rbp
ffffffff800159c6:	c3                   	ret
ffffffff800159c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800159ce:	00 00 

ffffffff800159d0 <fmt.formatInt__anon_3487>:
) !void {
ffffffff800159d0:	55                   	push   rbp
ffffffff800159d1:	48 89 e5             	mov    rbp,rsp
ffffffff800159d4:	48 81 ec 60 01 00 00 	sub    rsp,0x160
ffffffff800159db:	4c 89 8d 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r9
ffffffff800159e2:	4c 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r8
ffffffff800159e9:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
ffffffff800159f0:	88 8d 54 ff ff ff    	mov    BYTE PTR [rbp-0xac],cl
ffffffff800159f6:	88 d0                	mov    al,dl
ffffffff800159f8:	88 85 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],al
ffffffff800159fe:	40 88 f2             	mov    dl,sil
ffffffff80015a01:	88 95 56 ff ff ff    	mov    BYTE PTR [rbp-0xaa],dl
ffffffff80015a07:	80 e2 0f             	and    dl,0xf
ffffffff80015a0a:	88 95 55 ff ff ff    	mov    BYTE PTR [rbp-0xab],dl
ffffffff80015a10:	88 95 58 ff ff ff    	mov    BYTE PTR [rbp-0xa8],dl
ffffffff80015a16:	88 85 59 ff ff ff    	mov    BYTE PTR [rbp-0xa7],al
ffffffff80015a1c:	80 e1 01             	and    cl,0x1
ffffffff80015a1f:	88 8d 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],cl
    assert(base >= 2);
ffffffff80015a25:	2c 02                	sub    al,0x2
ffffffff80015a27:	0f 93 c0             	setae  al
ffffffff80015a2a:	0f b6 f8             	movzx  edi,al
ffffffff80015a2d:	e8 fe 01 ff ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80015a32:	8a 8d 55 ff ff ff    	mov    cl,BYTE PTR [rbp-0xab]
ffffffff80015a38:	8a 85 56 ff ff ff    	mov    al,BYTE PTR [rbp-0xaa]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80015a3e:	88 8d 5b ff ff ff    	mov    BYTE PTR [rbp-0xa5],cl
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80015a44:	66 c7 85 5c ff ff ff 	mov    WORD PTR [rbp-0xa4],0x8
ffffffff80015a4b:	08 00 
    const abs_value = math.absCast(int_value);
ffffffff80015a4d:	0f b6 f8             	movzx  edi,al
ffffffff80015a50:	e8 5b 06 00 00       	call   ffffffff800160b0 <math.absCast__anon_3489>
ffffffff80015a55:	88 c1                	mov    cl,al
ffffffff80015a57:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
ffffffff80015a5d:	80 e1 0f             	and    cl,0xf
ffffffff80015a60:	88 8d 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],cl
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80015a66:	c6 85 64 ff ff ff aa 	mov    BYTE PTR [rbp-0x9c],0xaa
ffffffff80015a6d:	c7 85 60 ff ff ff aa 	mov    DWORD PTR [rbp-0xa0],0xaaaaaaaa
ffffffff80015a74:	aa aa aa 
    var a: MinInt = abs_value;
ffffffff80015a77:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
    var index: usize = buf.len;
ffffffff80015a7d:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x5
ffffffff80015a84:	05 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff80015a88:	3c 0a                	cmp    al,0xa
ffffffff80015a8a:	75 0f                	jne    ffffffff80015a9b <fmt.formatInt__anon_3487+0xcb>
ffffffff80015a8c:	e8 ff 16 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80015a91:	34 ff                	xor    al,0xff
ffffffff80015a93:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
ffffffff80015a99:	eb 0a                	jmp    ffffffff80015aa5 <fmt.formatInt__anon_3487+0xd5>
ffffffff80015a9b:	31 c0                	xor    eax,eax
ffffffff80015a9d:	88 85 37 ff ff ff    	mov    BYTE PTR [rbp-0xc9],al
ffffffff80015aa3:	eb 00                	jmp    ffffffff80015aa5 <fmt.formatInt__anon_3487+0xd5>
ffffffff80015aa5:	8a 85 37 ff ff ff    	mov    al,BYTE PTR [rbp-0xc9]
ffffffff80015aab:	a8 01                	test   al,0x1
ffffffff80015aad:	75 02                	jne    ffffffff80015ab1 <fmt.formatInt__anon_3487+0xe1>
ffffffff80015aaf:	eb 02                	jmp    ffffffff80015ab3 <fmt.formatInt__anon_3487+0xe3>
ffffffff80015ab1:	eb 05                	jmp    ffffffff80015ab8 <fmt.formatInt__anon_3487+0xe8>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80015ab3:	e9 c3 03 00 00       	jmp    ffffffff80015e7b <fmt.formatInt__anon_3487+0x4ab>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80015ab8:	80 bd 67 ff ff ff 64 	cmp    BYTE PTR [rbp-0x99],0x64
ffffffff80015abf:	72 25                	jb     ffffffff80015ae6 <fmt.formatInt__anon_3487+0x116>
            index -= 2;
ffffffff80015ac1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015ac8:	48 83 e8 02          	sub    rax,0x2
ffffffff80015acc:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80015ad3:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff80015ada:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff80015ae0:	84 c0                	test   al,al
ffffffff80015ae2:	74 07                	je     ffffffff80015aeb <fmt.formatInt__anon_3487+0x11b>
ffffffff80015ae4:	eb 07                	jmp    ffffffff80015aed <fmt.formatInt__anon_3487+0x11d>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80015ae6:	e9 5e 01 00 00       	jmp    ffffffff80015c49 <fmt.formatInt__anon_3487+0x279>
            index -= 2;
ffffffff80015aeb:	eb 1c                	jmp    ffffffff80015b09 <fmt.formatInt__anon_3487+0x139>
ffffffff80015aed:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015af4:	48 c7 c1 78 c6 01 80 	mov    rcx,0xffffffff8001c678
ffffffff80015afb:	31 c0                	xor    eax,eax
ffffffff80015afd:	89 c2                	mov    edx,eax
ffffffff80015aff:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015b04:	e8 a7 a6 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015b09:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80015b10:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80015b17:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015b1e:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80015b25:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff80015b2c:	48 01 c1             	add    rcx,rax
ffffffff80015b2f:	48 89 8d 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rcx
ffffffff80015b36:	48 83 f8 05          	cmp    rax,0x5
ffffffff80015b3a:	77 02                	ja     ffffffff80015b3e <fmt.formatInt__anon_3487+0x16e>
ffffffff80015b3c:	eb 11                	jmp    ffffffff80015b4f <fmt.formatInt__anon_3487+0x17f>
ffffffff80015b3e:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
ffffffff80015b45:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015b4a:	e8 c1 a7 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015b4f:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff80015b56:	b8 05 00 00 00       	mov    eax,0x5
ffffffff80015b5b:	48 29 c8             	sub    rax,rcx
ffffffff80015b5e:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff80015b65:	b0 01                	mov    al,0x1
ffffffff80015b67:	a8 01                	test   al,0x1
ffffffff80015b69:	75 02                	jne    ffffffff80015b6d <fmt.formatInt__anon_3487+0x19d>
ffffffff80015b6b:	eb 02                	jmp    ffffffff80015b6f <fmt.formatInt__anon_3487+0x19f>
ffffffff80015b6d:	eb 0d                	jmp    ffffffff80015b7c <fmt.formatInt__anon_3487+0x1ac>
ffffffff80015b6f:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015b74:	48 89 f7             	mov    rdi,rsi
ffffffff80015b77:	e8 54 a6 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015b7c:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff80015b83:	48 83 f8 05          	cmp    rax,0x5
ffffffff80015b87:	77 02                	ja     ffffffff80015b8b <fmt.formatInt__anon_3487+0x1bb>
ffffffff80015b89:	eb 11                	jmp    ffffffff80015b9c <fmt.formatInt__anon_3487+0x1cc>
ffffffff80015b8b:	48 8b bd 20 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe0]
ffffffff80015b92:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015b97:	e8 34 a6 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015b9c:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff80015ba3:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff80015baa:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff80015bae:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80015bb2:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80015bb6:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80015bbd:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80015bc1:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff80015bc8:	b0 01                	mov    al,0x1
ffffffff80015bca:	a8 01                	test   al,0x1
ffffffff80015bcc:	75 02                	jne    ffffffff80015bd0 <fmt.formatInt__anon_3487+0x200>
ffffffff80015bce:	eb 02                	jmp    ffffffff80015bd2 <fmt.formatInt__anon_3487+0x202>
ffffffff80015bd0:	eb 10                	jmp    ffffffff80015be2 <fmt.formatInt__anon_3487+0x212>
ffffffff80015bd2:	31 c0                	xor    eax,eax
ffffffff80015bd4:	31 c0                	xor    eax,eax
ffffffff80015bd6:	89 c7                	mov    edi,eax
ffffffff80015bd8:	be 02 00 00 00       	mov    esi,0x2
ffffffff80015bdd:	e8 2e a7 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015be2:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff80015be9:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80015bee:	48 39 c8             	cmp    rax,rcx
ffffffff80015bf1:	77 02                	ja     ffffffff80015bf5 <fmt.formatInt__anon_3487+0x225>
ffffffff80015bf3:	eb 11                	jmp    ffffffff80015c06 <fmt.formatInt__anon_3487+0x236>
ffffffff80015bf5:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
ffffffff80015bfc:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80015c01:	e8 ca a5 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015c06:	b1 64                	mov    cl,0x64
ffffffff80015c08:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80015c0f:	ff 
ffffffff80015c10:	f6 f1                	div    cl
ffffffff80015c12:	66 c1 e8 08          	shr    ax,0x8
ffffffff80015c16:	0f b6 c0             	movzx  eax,al
ffffffff80015c19:	89 c6                	mov    esi,eax
ffffffff80015c1b:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff80015c1f:	e8 8c 15 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80015c24:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80015c2b:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff80015c2f:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80015c32:	b1 64                	mov    cl,0x64
ffffffff80015c34:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80015c3b:	ff 
ffffffff80015c3c:	f6 f1                	div    cl
ffffffff80015c3e:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
ffffffff80015c44:	e9 6f fe ff ff       	jmp    ffffffff80015ab8 <fmt.formatInt__anon_3487+0xe8>
        if (a < 10) {
ffffffff80015c49:	80 bd 67 ff ff ff 0a 	cmp    BYTE PTR [rbp-0x99],0xa
ffffffff80015c50:	73 1c                	jae    ffffffff80015c6e <fmt.formatInt__anon_3487+0x29e>
            index -= 1;
ffffffff80015c52:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015c59:	48 83 e8 01          	sub    rax,0x1
ffffffff80015c5d:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80015c61:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80015c65:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80015c68:	84 c0                	test   al,al
ffffffff80015c6a:	74 25                	je     ffffffff80015c91 <fmt.formatInt__anon_3487+0x2c1>
ffffffff80015c6c:	eb 25                	jmp    ffffffff80015c93 <fmt.formatInt__anon_3487+0x2c3>
            index -= 2;
ffffffff80015c6e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015c75:	48 83 e8 02          	sub    rax,0x2
ffffffff80015c79:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80015c7d:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff80015c81:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff80015c84:	84 c0                	test   al,al
ffffffff80015c86:	0f 84 b2 00 00 00    	je     ffffffff80015d3e <fmt.formatInt__anon_3487+0x36e>
ffffffff80015c8c:	e9 af 00 00 00       	jmp    ffffffff80015d40 <fmt.formatInt__anon_3487+0x370>
            index -= 1;
ffffffff80015c91:	eb 1c                	jmp    ffffffff80015caf <fmt.formatInt__anon_3487+0x2df>
ffffffff80015c93:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015c9a:	48 c7 c1 88 c6 01 80 	mov    rcx,0xffffffff8001c688
ffffffff80015ca1:	31 c0                	xor    eax,eax
ffffffff80015ca3:	89 c2                	mov    edx,eax
ffffffff80015ca5:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015caa:	e8 01 a5 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015caf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80015cb3:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80015cba:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015cc1:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff80015cc8:	48 83 f8 05          	cmp    rax,0x5
ffffffff80015ccc:	73 02                	jae    ffffffff80015cd0 <fmt.formatInt__anon_3487+0x300>
ffffffff80015cce:	eb 11                	jmp    ffffffff80015ce1 <fmt.formatInt__anon_3487+0x311>
ffffffff80015cd0:	48 8b bd 00 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x100]
ffffffff80015cd7:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015cdc:	e8 ef a4 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015ce1:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff80015ce8:	48 8d 84 05 60 ff ff 	lea    rax,[rbp+rax*1-0xa0]
ffffffff80015cef:	ff 
ffffffff80015cf0:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff80015cf7:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
ffffffff80015cfd:	04 30                	add    al,0x30
ffffffff80015cff:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff80015d02:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff80015d06:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff80015d09:	84 c0                	test   al,al
ffffffff80015d0b:	75 04                	jne    ffffffff80015d11 <fmt.formatInt__anon_3487+0x341>
ffffffff80015d0d:	eb 00                	jmp    ffffffff80015d0f <fmt.formatInt__anon_3487+0x33f>
ffffffff80015d0f:	eb 1c                	jmp    ffffffff80015d2d <fmt.formatInt__anon_3487+0x35d>
ffffffff80015d11:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015d18:	48 c7 c1 98 c6 01 80 	mov    rcx,0xffffffff8001c698
ffffffff80015d1f:	31 c0                	xor    eax,eax
ffffffff80015d21:	89 c2                	mov    edx,eax
ffffffff80015d23:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015d28:	e8 83 a4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015d2d:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff80015d34:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff80015d37:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80015d39:	e9 38 01 00 00       	jmp    ffffffff80015e76 <fmt.formatInt__anon_3487+0x4a6>
            index -= 2;
ffffffff80015d3e:	eb 1c                	jmp    ffffffff80015d5c <fmt.formatInt__anon_3487+0x38c>
ffffffff80015d40:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015d47:	48 c7 c1 a8 c6 01 80 	mov    rcx,0xffffffff8001c6a8
ffffffff80015d4e:	31 c0                	xor    eax,eax
ffffffff80015d50:	89 c2                	mov    edx,eax
ffffffff80015d52:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015d57:	e8 54 a4 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015d5c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80015d60:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80015d67:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015d6e:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80015d75:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff80015d7c:	48 01 c1             	add    rcx,rax
ffffffff80015d7f:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
ffffffff80015d86:	48 83 f8 05          	cmp    rax,0x5
ffffffff80015d8a:	77 02                	ja     ffffffff80015d8e <fmt.formatInt__anon_3487+0x3be>
ffffffff80015d8c:	eb 11                	jmp    ffffffff80015d9f <fmt.formatInt__anon_3487+0x3cf>
ffffffff80015d8e:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
ffffffff80015d95:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015d9a:	e8 71 a5 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015d9f:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
ffffffff80015da6:	b8 05 00 00 00       	mov    eax,0x5
ffffffff80015dab:	48 29 c8             	sub    rax,rcx
ffffffff80015dae:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff80015db5:	b0 01                	mov    al,0x1
ffffffff80015db7:	a8 01                	test   al,0x1
ffffffff80015db9:	75 02                	jne    ffffffff80015dbd <fmt.formatInt__anon_3487+0x3ed>
ffffffff80015dbb:	eb 02                	jmp    ffffffff80015dbf <fmt.formatInt__anon_3487+0x3ef>
ffffffff80015dbd:	eb 0d                	jmp    ffffffff80015dcc <fmt.formatInt__anon_3487+0x3fc>
ffffffff80015dbf:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015dc4:	48 89 f7             	mov    rdi,rsi
ffffffff80015dc7:	e8 04 a4 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015dcc:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffffffff80015dd3:	48 83 f8 05          	cmp    rax,0x5
ffffffff80015dd7:	77 02                	ja     ffffffff80015ddb <fmt.formatInt__anon_3487+0x40b>
ffffffff80015dd9:	eb 11                	jmp    ffffffff80015dec <fmt.formatInt__anon_3487+0x41c>
ffffffff80015ddb:	48 8b bd e8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x118]
ffffffff80015de2:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015de7:	e8 e4 a3 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015dec:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80015df3:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff80015dfa:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80015dfe:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80015e02:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80015e06:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
ffffffff80015e0d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80015e11:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80015e18:	b0 01                	mov    al,0x1
ffffffff80015e1a:	a8 01                	test   al,0x1
ffffffff80015e1c:	75 02                	jne    ffffffff80015e20 <fmt.formatInt__anon_3487+0x450>
ffffffff80015e1e:	eb 02                	jmp    ffffffff80015e22 <fmt.formatInt__anon_3487+0x452>
ffffffff80015e20:	eb 10                	jmp    ffffffff80015e32 <fmt.formatInt__anon_3487+0x462>
ffffffff80015e22:	31 c0                	xor    eax,eax
ffffffff80015e24:	31 c0                	xor    eax,eax
ffffffff80015e26:	89 c7                	mov    edi,eax
ffffffff80015e28:	be 02 00 00 00       	mov    esi,0x2
ffffffff80015e2d:	e8 de a4 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015e32:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff80015e39:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80015e3e:	48 39 c8             	cmp    rax,rcx
ffffffff80015e41:	77 02                	ja     ffffffff80015e45 <fmt.formatInt__anon_3487+0x475>
ffffffff80015e43:	eb 11                	jmp    ffffffff80015e56 <fmt.formatInt__anon_3487+0x486>
ffffffff80015e45:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
ffffffff80015e4c:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80015e51:	e8 7a a3 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015e56:	0f b6 85 67 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x99]
ffffffff80015e5d:	89 c6                	mov    esi,eax
ffffffff80015e5f:	48 8d 7d d5          	lea    rdi,[rbp-0x2b]
ffffffff80015e63:	e8 48 13 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80015e68:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
ffffffff80015e6f:	66 8b 4d d5          	mov    cx,WORD PTR [rbp-0x2b]
ffffffff80015e73:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff80015e76:	e9 45 01 00 00       	jmp    ffffffff80015fc0 <fmt.formatInt__anon_3487+0x5f0>
ffffffff80015e7b:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
            const digit = a % base;
ffffffff80015e81:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80015e87:	88 8d cf fe ff ff    	mov    BYTE PTR [rbp-0x131],cl
ffffffff80015e8d:	3c 00                	cmp    al,0x0
ffffffff80015e8f:	74 02                	je     ffffffff80015e93 <fmt.formatInt__anon_3487+0x4c3>
ffffffff80015e91:	eb 1c                	jmp    ffffffff80015eaf <fmt.formatInt__anon_3487+0x4df>
ffffffff80015e93:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80015e9a:	48 c7 c1 b8 c6 01 80 	mov    rcx,0xffffffff8001c6b8
ffffffff80015ea1:	31 c0                	xor    eax,eax
ffffffff80015ea3:	89 c2                	mov    edx,eax
ffffffff80015ea5:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015eaa:	e8 01 a3 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015eaf:	8a 8d 57 ff ff ff    	mov    cl,BYTE PTR [rbp-0xa9]
ffffffff80015eb5:	8a 85 cf fe ff ff    	mov    al,BYTE PTR [rbp-0x131]
ffffffff80015ebb:	66 0f b6 c0          	movzx  ax,al
ffffffff80015ebf:	f6 f1                	div    cl
ffffffff80015ec1:	0f b6 c4             	movzx  eax,ah
ffffffff80015ec4:	88 85 ce fe ff ff    	mov    BYTE PTR [rbp-0x132],al
ffffffff80015eca:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            index -= 1;
ffffffff80015ecd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015ed4:	48 83 e8 01          	sub    rax,0x1
ffffffff80015ed8:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80015edc:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80015ee0:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff80015ee3:	84 c0                	test   al,al
ffffffff80015ee5:	75 04                	jne    ffffffff80015eeb <fmt.formatInt__anon_3487+0x51b>
ffffffff80015ee7:	eb 00                	jmp    ffffffff80015ee9 <fmt.formatInt__anon_3487+0x519>
ffffffff80015ee9:	eb 1c                	jmp    ffffffff80015f07 <fmt.formatInt__anon_3487+0x537>
ffffffff80015eeb:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80015ef2:	48 c7 c1 c8 c6 01 80 	mov    rcx,0xffffffff8001c6c8
ffffffff80015ef9:	31 c0                	xor    eax,eax
ffffffff80015efb:	89 c2                	mov    edx,eax
ffffffff80015efd:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015f02:	e8 a9 a2 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015f07:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80015f0b:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80015f12:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015f19:	48 89 85 c0 fe ff ff 	mov    QWORD PTR [rbp-0x140],rax
ffffffff80015f20:	48 83 f8 05          	cmp    rax,0x5
ffffffff80015f24:	73 02                	jae    ffffffff80015f28 <fmt.formatInt__anon_3487+0x558>
ffffffff80015f26:	eb 11                	jmp    ffffffff80015f39 <fmt.formatInt__anon_3487+0x569>
ffffffff80015f28:	48 8b bd c0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x140]
ffffffff80015f2f:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015f34:	e8 97 a2 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80015f39:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [rbp-0xac]
ffffffff80015f3f:	8a 8d ce fe ff ff    	mov    cl,BYTE PTR [rbp-0x132]
ffffffff80015f45:	0f b6 f9             	movzx  edi,cl
ffffffff80015f48:	0f b6 f0             	movzx  esi,al
ffffffff80015f4b:	e8 d0 13 ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80015f50:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
ffffffff80015f57:	88 c2                	mov    dl,al
ffffffff80015f59:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [rbp-0xa9]
ffffffff80015f5f:	88 94 0d 60 ff ff ff 	mov    BYTE PTR [rbp+rcx*1-0xa0],dl
            a /= base;
ffffffff80015f66:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80015f6c:	88 8d bf fe ff ff    	mov    BYTE PTR [rbp-0x141],cl
ffffffff80015f72:	3c 00                	cmp    al,0x0
ffffffff80015f74:	74 02                	je     ffffffff80015f78 <fmt.formatInt__anon_3487+0x5a8>
ffffffff80015f76:	eb 1c                	jmp    ffffffff80015f94 <fmt.formatInt__anon_3487+0x5c4>
ffffffff80015f78:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80015f7f:	48 c7 c1 d8 c6 01 80 	mov    rcx,0xffffffff8001c6d8
ffffffff80015f86:	31 c0                	xor    eax,eax
ffffffff80015f88:	89 c2                	mov    edx,eax
ffffffff80015f8a:	be 10 00 00 00       	mov    esi,0x10
ffffffff80015f8f:	e8 1c a2 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80015f94:	8a 8d 57 ff ff ff    	mov    cl,BYTE PTR [rbp-0xa9]
ffffffff80015f9a:	8a 85 bf fe ff ff    	mov    al,BYTE PTR [rbp-0x141]
ffffffff80015fa0:	66 0f b6 c0          	movzx  ax,al
ffffffff80015fa4:	f6 f1                	div    cl
ffffffff80015fa6:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
            if (a == 0) break;
ffffffff80015fac:	80 bd 67 ff ff ff 00 	cmp    BYTE PTR [rbp-0x99],0x0
ffffffff80015fb3:	75 02                	jne    ffffffff80015fb7 <fmt.formatInt__anon_3487+0x5e7>
ffffffff80015fb5:	eb 07                	jmp    ffffffff80015fbe <fmt.formatInt__anon_3487+0x5ee>
ffffffff80015fb7:	eb 00                	jmp    ffffffff80015fb9 <fmt.formatInt__anon_3487+0x5e9>
ffffffff80015fb9:	e9 bd fe ff ff       	jmp    ffffffff80015e7b <fmt.formatInt__anon_3487+0x4ab>
ffffffff80015fbe:	eb 00                	jmp    ffffffff80015fc0 <fmt.formatInt__anon_3487+0x5f0>
    return formatBuf(buf[index..], options, writer);
ffffffff80015fc0:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80015fc7:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff80015fce:	48 8d 8d 60 ff ff ff 	lea    rcx,[rbp-0xa0]
ffffffff80015fd5:	48 01 c1             	add    rcx,rax
ffffffff80015fd8:	48 89 8d b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rcx
ffffffff80015fdf:	48 83 f8 05          	cmp    rax,0x5
ffffffff80015fe3:	77 02                	ja     ffffffff80015fe7 <fmt.formatInt__anon_3487+0x617>
ffffffff80015fe5:	eb 11                	jmp    ffffffff80015ff8 <fmt.formatInt__anon_3487+0x628>
ffffffff80015fe7:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff80015fee:	be 05 00 00 00       	mov    esi,0x5
ffffffff80015ff3:	e8 18 a3 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80015ff8:	48 8b 8d a8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x158]
ffffffff80015fff:	b8 05 00 00 00       	mov    eax,0x5
ffffffff80016004:	48 29 c8             	sub    rax,rcx
ffffffff80016007:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff8001600e:	b0 01                	mov    al,0x1
ffffffff80016010:	a8 01                	test   al,0x1
ffffffff80016012:	75 02                	jne    ffffffff80016016 <fmt.formatInt__anon_3487+0x646>
ffffffff80016014:	eb 02                	jmp    ffffffff80016018 <fmt.formatInt__anon_3487+0x648>
ffffffff80016016:	eb 0d                	jmp    ffffffff80016025 <fmt.formatInt__anon_3487+0x655>
ffffffff80016018:	be 05 00 00 00       	mov    esi,0x5
ffffffff8001601d:	48 89 f7             	mov    rdi,rsi
ffffffff80016020:	e8 ab a1 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016025:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffffffff8001602c:	48 83 f8 05          	cmp    rax,0x5
ffffffff80016030:	77 02                	ja     ffffffff80016034 <fmt.formatInt__anon_3487+0x664>
ffffffff80016032:	eb 11                	jmp    ffffffff80016045 <fmt.formatInt__anon_3487+0x675>
ffffffff80016034:	48 8b bd a8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x158]
ffffffff8001603b:	be 05 00 00 00       	mov    esi,0x5
ffffffff80016040:	e8 8b a1 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016045:	4c 8b 85 38 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc8]
ffffffff8001604c:	48 8b 8d 40 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc0]
ffffffff80016053:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff8001605a:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff80016061:	48 8b 95 a0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x160]
ffffffff80016068:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8001606c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80016070:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80016074:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80016078:	e8 e3 13 ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff8001607d:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80016081:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80016086:	75 0d                	jne    ffffffff80016095 <fmt.formatInt__anon_3487+0x6c5>
ffffffff80016088:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8001608c:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff80016093:	5d                   	pop    rbp
ffffffff80016094:	c3                   	ret
ffffffff80016095:	48 8b bd 48 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb8]
ffffffff8001609c:	e8 6f d3 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800160a1:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff800160a5:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff800160ac:	5d                   	pop    rbp
ffffffff800160ad:	c3                   	ret
ffffffff800160ae:	66 90                	xchg   ax,ax

ffffffff800160b0 <math.absCast__anon_3489>:
} {
ffffffff800160b0:	55                   	push   rbp
ffffffff800160b1:	48 89 e5             	mov    rbp,rsp
ffffffff800160b4:	48 83 ec 01          	sub    rsp,0x1
ffffffff800160b8:	40 88 f8             	mov    al,dil
ffffffff800160bb:	88 c1                	mov    cl,al
ffffffff800160bd:	80 e1 0f             	and    cl,0xf
ffffffff800160c0:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
            if (int_info.signedness == .unsigned) return x;
ffffffff800160c3:	48 83 c4 01          	add    rsp,0x1
ffffffff800160c7:	5d                   	pop    rbp
ffffffff800160c8:	c3                   	ret
ffffffff800160c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800160d0 <fmt.formatValue__anon_3492>:
) !void {
ffffffff800160d0:	55                   	push   rbp
ffffffff800160d1:	48 89 e5             	mov    rbp,rsp
ffffffff800160d4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800160d8:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff800160dc:	40 88 f0             	mov    al,sil
ffffffff800160df:	40 88 c6             	mov    sil,al
ffffffff800160e2:	40 80 e6 01          	and    sil,0x1
ffffffff800160e6:	40 88 75 fd          	mov    BYTE PTR [rbp-0x3],sil
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff800160ea:	0f b6 f0             	movzx  esi,al
ffffffff800160ed:	e8 2e 00 00 00       	call   ffffffff80016120 <fmt.formatIntValue__anon_3493>
ffffffff800160f2:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800160f6:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800160fb:	75 0a                	jne    ffffffff80016107 <fmt.formatValue__anon_3492+0x37>
ffffffff800160fd:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80016101:	48 83 c4 10          	add    rsp,0x10
ffffffff80016105:	5d                   	pop    rbp
ffffffff80016106:	c3                   	ret
ffffffff80016107:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff8001610b:	e8 00 d3 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80016110:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80016114:	48 83 c4 10          	add    rsp,0x10
ffffffff80016118:	5d                   	pop    rbp
ffffffff80016119:	c3                   	ret
ffffffff8001611a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80016120 <fmt.formatIntValue__anon_3493>:
) !void {
ffffffff80016120:	55                   	push   rbp
ffffffff80016121:	48 89 e5             	mov    rbp,rsp
ffffffff80016124:	48 83 ec 10          	sub    rsp,0x10
ffffffff80016128:	49 89 c9             	mov    r9,rcx
ffffffff8001612b:	49 89 d0             	mov    r8,rdx
ffffffff8001612e:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80016132:	40 88 f0             	mov    al,sil
ffffffff80016135:	88 c1                	mov    cl,al
ffffffff80016137:	80 e1 01             	and    cl,0x1
ffffffff8001613a:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8001613d:	88 c1                	mov    cl,al
ffffffff8001613f:	80 e1 01             	and    cl,0x1
ffffffff80016142:	88 4d fd             	mov    BYTE PTR [rbp-0x3],cl
    return formatInt(int_value, radix, case, options, writer);
ffffffff80016145:	0f b6 f0             	movzx  esi,al
ffffffff80016148:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff8001614d:	31 c9                	xor    ecx,ecx
ffffffff8001614f:	e8 2c 00 00 00       	call   ffffffff80016180 <fmt.formatInt__anon_3496>
ffffffff80016154:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80016158:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff8001615d:	75 0a                	jne    ffffffff80016169 <fmt.formatIntValue__anon_3493+0x49>
ffffffff8001615f:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80016163:	48 83 c4 10          	add    rsp,0x10
ffffffff80016167:	5d                   	pop    rbp
ffffffff80016168:	c3                   	ret
ffffffff80016169:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff8001616d:	e8 9e d2 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80016172:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80016176:	48 83 c4 10          	add    rsp,0x10
ffffffff8001617a:	5d                   	pop    rbp
ffffffff8001617b:	c3                   	ret
ffffffff8001617c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80016180 <fmt.formatInt__anon_3496>:
) !void {
ffffffff80016180:	55                   	push   rbp
ffffffff80016181:	48 89 e5             	mov    rbp,rsp
ffffffff80016184:	48 81 ec 60 01 00 00 	sub    rsp,0x160
ffffffff8001618b:	4c 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r9
ffffffff80016192:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
ffffffff80016199:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
ffffffff800161a0:	88 8d 59 ff ff ff    	mov    BYTE PTR [rbp-0xa7],cl
ffffffff800161a6:	88 d0                	mov    al,dl
ffffffff800161a8:	88 85 5b ff ff ff    	mov    BYTE PTR [rbp-0xa5],al
ffffffff800161ae:	40 88 f2             	mov    dl,sil
ffffffff800161b1:	88 95 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],dl
ffffffff800161b7:	80 e2 01             	and    dl,0x1
ffffffff800161ba:	88 95 5c ff ff ff    	mov    BYTE PTR [rbp-0xa4],dl
ffffffff800161c0:	88 85 5d ff ff ff    	mov    BYTE PTR [rbp-0xa3],al
ffffffff800161c6:	80 e1 01             	and    cl,0x1
ffffffff800161c9:	88 8d 5e ff ff ff    	mov    BYTE PTR [rbp-0xa2],cl
    assert(base >= 2);
ffffffff800161cf:	3c 02                	cmp    al,0x2
ffffffff800161d1:	0f 93 c0             	setae  al
ffffffff800161d4:	0f b6 f8             	movzx  edi,al
ffffffff800161d7:	e8 54 fa fe ff       	call   ffffffff80005c30 <debug.assert>
ffffffff800161dc:	8a 85 5a ff ff ff    	mov    al,BYTE PTR [rbp-0xa6]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff800161e2:	88 c1                	mov    cl,al
ffffffff800161e4:	80 e1 01             	and    cl,0x1
ffffffff800161e7:	88 8d 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],cl
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff800161ed:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x8
ffffffff800161f4:	08 00 
    const abs_value = math.absCast(int_value);
ffffffff800161f6:	0f b6 f8             	movzx  edi,al
ffffffff800161f9:	e8 62 06 00 00       	call   ffffffff80016860 <math.absCast__anon_3498>
ffffffff800161fe:	88 c1                	mov    cl,al
ffffffff80016200:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
ffffffff80016206:	88 ca                	mov    dl,cl
ffffffff80016208:	80 e2 01             	and    dl,0x1
ffffffff8001620b:	88 95 63 ff ff ff    	mov    BYTE PTR [rbp-0x9d],dl
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff80016211:	66 c7 85 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],0xaaaa
ffffffff80016218:	aa aa 
    var a: MinInt = abs_value;
ffffffff8001621a:	80 e1 01             	and    cl,0x1
ffffffff8001621d:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
    var index: usize = buf.len;
ffffffff80016223:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x2
ffffffff8001622a:	02 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff8001622e:	3c 0a                	cmp    al,0xa
ffffffff80016230:	75 0f                	jne    ffffffff80016241 <fmt.formatInt__anon_3496+0xc1>
ffffffff80016232:	e8 59 0f ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80016237:	34 ff                	xor    al,0xff
ffffffff80016239:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
ffffffff8001623f:	eb 0a                	jmp    ffffffff8001624b <fmt.formatInt__anon_3496+0xcb>
ffffffff80016241:	31 c0                	xor    eax,eax
ffffffff80016243:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
ffffffff80016249:	eb 00                	jmp    ffffffff8001624b <fmt.formatInt__anon_3496+0xcb>
ffffffff8001624b:	8a 85 3f ff ff ff    	mov    al,BYTE PTR [rbp-0xc1]
ffffffff80016251:	a8 01                	test   al,0x1
ffffffff80016253:	75 02                	jne    ffffffff80016257 <fmt.formatInt__anon_3496+0xd7>
ffffffff80016255:	eb 02                	jmp    ffffffff80016259 <fmt.formatInt__anon_3496+0xd9>
ffffffff80016257:	eb 05                	jmp    ffffffff8001625e <fmt.formatInt__anon_3496+0xde>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80016259:	e9 c3 03 00 00       	jmp    ffffffff80016621 <fmt.formatInt__anon_3496+0x4a1>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8001625e:	80 bd 67 ff ff ff 64 	cmp    BYTE PTR [rbp-0x99],0x64
ffffffff80016265:	72 25                	jb     ffffffff8001628c <fmt.formatInt__anon_3496+0x10c>
            index -= 2;
ffffffff80016267:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001626e:	48 83 e8 02          	sub    rax,0x2
ffffffff80016272:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80016279:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff80016280:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff80016286:	84 c0                	test   al,al
ffffffff80016288:	74 07                	je     ffffffff80016291 <fmt.formatInt__anon_3496+0x111>
ffffffff8001628a:	eb 07                	jmp    ffffffff80016293 <fmt.formatInt__anon_3496+0x113>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff8001628c:	e9 5e 01 00 00       	jmp    ffffffff800163ef <fmt.formatInt__anon_3496+0x26f>
            index -= 2;
ffffffff80016291:	eb 1c                	jmp    ffffffff800162af <fmt.formatInt__anon_3496+0x12f>
ffffffff80016293:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001629a:	48 c7 c1 e8 c6 01 80 	mov    rcx,0xffffffff8001c6e8
ffffffff800162a1:	31 c0                	xor    eax,eax
ffffffff800162a3:	89 c2                	mov    edx,eax
ffffffff800162a5:	be 10 00 00 00       	mov    esi,0x10
ffffffff800162aa:	e8 01 9f fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800162af:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff800162b6:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff800162bd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800162c4:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
ffffffff800162cb:	48 8d 8d 64 ff ff ff 	lea    rcx,[rbp-0x9c]
ffffffff800162d2:	48 01 c1             	add    rcx,rax
ffffffff800162d5:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
ffffffff800162dc:	48 83 f8 02          	cmp    rax,0x2
ffffffff800162e0:	77 02                	ja     ffffffff800162e4 <fmt.formatInt__anon_3496+0x164>
ffffffff800162e2:	eb 11                	jmp    ffffffff800162f5 <fmt.formatInt__anon_3496+0x175>
ffffffff800162e4:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
ffffffff800162eb:	be 02 00 00 00       	mov    esi,0x2
ffffffff800162f0:	e8 1b a0 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800162f5:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
ffffffff800162fc:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80016301:	48 29 c8             	sub    rax,rcx
ffffffff80016304:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff8001630b:	b0 01                	mov    al,0x1
ffffffff8001630d:	a8 01                	test   al,0x1
ffffffff8001630f:	75 02                	jne    ffffffff80016313 <fmt.formatInt__anon_3496+0x193>
ffffffff80016311:	eb 02                	jmp    ffffffff80016315 <fmt.formatInt__anon_3496+0x195>
ffffffff80016313:	eb 0d                	jmp    ffffffff80016322 <fmt.formatInt__anon_3496+0x1a2>
ffffffff80016315:	be 02 00 00 00       	mov    esi,0x2
ffffffff8001631a:	48 89 f7             	mov    rdi,rsi
ffffffff8001631d:	e8 ae 9e fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016322:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff80016329:	48 83 f8 02          	cmp    rax,0x2
ffffffff8001632d:	77 02                	ja     ffffffff80016331 <fmt.formatInt__anon_3496+0x1b1>
ffffffff8001632f:	eb 11                	jmp    ffffffff80016342 <fmt.formatInt__anon_3496+0x1c2>
ffffffff80016331:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
ffffffff80016338:	be 02 00 00 00       	mov    esi,0x2
ffffffff8001633d:	e8 8e 9e fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016342:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffffffff80016349:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff80016350:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff80016354:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80016358:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff8001635c:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff80016363:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80016367:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff8001636e:	b0 01                	mov    al,0x1
ffffffff80016370:	a8 01                	test   al,0x1
ffffffff80016372:	75 02                	jne    ffffffff80016376 <fmt.formatInt__anon_3496+0x1f6>
ffffffff80016374:	eb 02                	jmp    ffffffff80016378 <fmt.formatInt__anon_3496+0x1f8>
ffffffff80016376:	eb 10                	jmp    ffffffff80016388 <fmt.formatInt__anon_3496+0x208>
ffffffff80016378:	31 c0                	xor    eax,eax
ffffffff8001637a:	31 c0                	xor    eax,eax
ffffffff8001637c:	89 c7                	mov    edi,eax
ffffffff8001637e:	be 02 00 00 00       	mov    esi,0x2
ffffffff80016383:	e8 88 9f fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80016388:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff8001638f:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80016394:	48 39 c8             	cmp    rax,rcx
ffffffff80016397:	77 02                	ja     ffffffff8001639b <fmt.formatInt__anon_3496+0x21b>
ffffffff80016399:	eb 11                	jmp    ffffffff800163ac <fmt.formatInt__anon_3496+0x22c>
ffffffff8001639b:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
ffffffff800163a2:	bf 02 00 00 00       	mov    edi,0x2
ffffffff800163a7:	e8 24 9e fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800163ac:	b1 64                	mov    cl,0x64
ffffffff800163ae:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff800163b5:	ff 
ffffffff800163b6:	f6 f1                	div    cl
ffffffff800163b8:	66 c1 e8 08          	shr    ax,0x8
ffffffff800163bc:	0f b6 c0             	movzx  eax,al
ffffffff800163bf:	89 c6                	mov    esi,eax
ffffffff800163c1:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff800163c5:	e8 e6 0d ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff800163ca:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff800163d1:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff800163d5:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff800163d8:	b1 64                	mov    cl,0x64
ffffffff800163da:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff800163e1:	ff 
ffffffff800163e2:	f6 f1                	div    cl
ffffffff800163e4:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
ffffffff800163ea:	e9 6f fe ff ff       	jmp    ffffffff8001625e <fmt.formatInt__anon_3496+0xde>
        if (a < 10) {
ffffffff800163ef:	80 bd 67 ff ff ff 0a 	cmp    BYTE PTR [rbp-0x99],0xa
ffffffff800163f6:	73 1c                	jae    ffffffff80016414 <fmt.formatInt__anon_3496+0x294>
            index -= 1;
ffffffff800163f8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800163ff:	48 83 e8 01          	sub    rax,0x1
ffffffff80016403:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80016407:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff8001640b:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff8001640e:	84 c0                	test   al,al
ffffffff80016410:	74 25                	je     ffffffff80016437 <fmt.formatInt__anon_3496+0x2b7>
ffffffff80016412:	eb 25                	jmp    ffffffff80016439 <fmt.formatInt__anon_3496+0x2b9>
            index -= 2;
ffffffff80016414:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001641b:	48 83 e8 02          	sub    rax,0x2
ffffffff8001641f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80016423:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff80016427:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff8001642a:	84 c0                	test   al,al
ffffffff8001642c:	0f 84 b2 00 00 00    	je     ffffffff800164e4 <fmt.formatInt__anon_3496+0x364>
ffffffff80016432:	e9 af 00 00 00       	jmp    ffffffff800164e6 <fmt.formatInt__anon_3496+0x366>
            index -= 1;
ffffffff80016437:	eb 1c                	jmp    ffffffff80016455 <fmt.formatInt__anon_3496+0x2d5>
ffffffff80016439:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80016440:	48 c7 c1 f8 c6 01 80 	mov    rcx,0xffffffff8001c6f8
ffffffff80016447:	31 c0                	xor    eax,eax
ffffffff80016449:	89 c2                	mov    edx,eax
ffffffff8001644b:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016450:	e8 5b 9d fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016455:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80016459:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80016460:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016467:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff8001646e:	48 83 f8 02          	cmp    rax,0x2
ffffffff80016472:	73 02                	jae    ffffffff80016476 <fmt.formatInt__anon_3496+0x2f6>
ffffffff80016474:	eb 11                	jmp    ffffffff80016487 <fmt.formatInt__anon_3496+0x307>
ffffffff80016476:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff8001647d:	be 02 00 00 00       	mov    esi,0x2
ffffffff80016482:	e8 49 9d fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016487:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff8001648e:	48 8d 84 05 64 ff ff 	lea    rax,[rbp+rax*1-0x9c]
ffffffff80016495:	ff 
ffffffff80016496:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff8001649d:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
ffffffff800164a3:	04 30                	add    al,0x30
ffffffff800164a5:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff800164a8:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff800164ac:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff800164af:	84 c0                	test   al,al
ffffffff800164b1:	75 04                	jne    ffffffff800164b7 <fmt.formatInt__anon_3496+0x337>
ffffffff800164b3:	eb 00                	jmp    ffffffff800164b5 <fmt.formatInt__anon_3496+0x335>
ffffffff800164b5:	eb 1c                	jmp    ffffffff800164d3 <fmt.formatInt__anon_3496+0x353>
ffffffff800164b7:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800164be:	48 c7 c1 08 c7 01 80 	mov    rcx,0xffffffff8001c708
ffffffff800164c5:	31 c0                	xor    eax,eax
ffffffff800164c7:	89 c2                	mov    edx,eax
ffffffff800164c9:	be 10 00 00 00       	mov    esi,0x10
ffffffff800164ce:	e8 dd 9c fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800164d3:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff800164da:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff800164dd:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800164df:	e9 38 01 00 00       	jmp    ffffffff8001661c <fmt.formatInt__anon_3496+0x49c>
            index -= 2;
ffffffff800164e4:	eb 1c                	jmp    ffffffff80016502 <fmt.formatInt__anon_3496+0x382>
ffffffff800164e6:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800164ed:	48 c7 c1 18 c7 01 80 	mov    rcx,0xffffffff8001c718
ffffffff800164f4:	31 c0                	xor    eax,eax
ffffffff800164f6:	89 c2                	mov    edx,eax
ffffffff800164f8:	be 10 00 00 00       	mov    esi,0x10
ffffffff800164fd:	e8 ae 9c fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016502:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80016506:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff8001650d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016514:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff8001651b:	48 8d 8d 64 ff ff ff 	lea    rcx,[rbp-0x9c]
ffffffff80016522:	48 01 c1             	add    rcx,rax
ffffffff80016525:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
ffffffff8001652c:	48 83 f8 02          	cmp    rax,0x2
ffffffff80016530:	77 02                	ja     ffffffff80016534 <fmt.formatInt__anon_3496+0x3b4>
ffffffff80016532:	eb 11                	jmp    ffffffff80016545 <fmt.formatInt__anon_3496+0x3c5>
ffffffff80016534:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
ffffffff8001653b:	be 02 00 00 00       	mov    esi,0x2
ffffffff80016540:	e8 cb 9d fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80016545:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff8001654c:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80016551:	48 29 c8             	sub    rax,rcx
ffffffff80016554:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff8001655b:	b0 01                	mov    al,0x1
ffffffff8001655d:	a8 01                	test   al,0x1
ffffffff8001655f:	75 02                	jne    ffffffff80016563 <fmt.formatInt__anon_3496+0x3e3>
ffffffff80016561:	eb 02                	jmp    ffffffff80016565 <fmt.formatInt__anon_3496+0x3e5>
ffffffff80016563:	eb 0d                	jmp    ffffffff80016572 <fmt.formatInt__anon_3496+0x3f2>
ffffffff80016565:	be 02 00 00 00       	mov    esi,0x2
ffffffff8001656a:	48 89 f7             	mov    rdi,rsi
ffffffff8001656d:	e8 5e 9c fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016572:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80016579:	48 83 f8 02          	cmp    rax,0x2
ffffffff8001657d:	77 02                	ja     ffffffff80016581 <fmt.formatInt__anon_3496+0x401>
ffffffff8001657f:	eb 11                	jmp    ffffffff80016592 <fmt.formatInt__anon_3496+0x412>
ffffffff80016581:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
ffffffff80016588:	be 02 00 00 00       	mov    esi,0x2
ffffffff8001658d:	e8 3e 9c fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016592:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff80016599:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
ffffffff800165a0:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff800165a4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800165a8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800165ac:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff800165b3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800165b7:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff800165be:	b0 01                	mov    al,0x1
ffffffff800165c0:	a8 01                	test   al,0x1
ffffffff800165c2:	75 02                	jne    ffffffff800165c6 <fmt.formatInt__anon_3496+0x446>
ffffffff800165c4:	eb 02                	jmp    ffffffff800165c8 <fmt.formatInt__anon_3496+0x448>
ffffffff800165c6:	eb 10                	jmp    ffffffff800165d8 <fmt.formatInt__anon_3496+0x458>
ffffffff800165c8:	31 c0                	xor    eax,eax
ffffffff800165ca:	31 c0                	xor    eax,eax
ffffffff800165cc:	89 c7                	mov    edi,eax
ffffffff800165ce:	be 02 00 00 00       	mov    esi,0x2
ffffffff800165d3:	e8 38 9d fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800165d8:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff800165df:	b8 02 00 00 00       	mov    eax,0x2
ffffffff800165e4:	48 39 c8             	cmp    rax,rcx
ffffffff800165e7:	77 02                	ja     ffffffff800165eb <fmt.formatInt__anon_3496+0x46b>
ffffffff800165e9:	eb 11                	jmp    ffffffff800165fc <fmt.formatInt__anon_3496+0x47c>
ffffffff800165eb:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffffffff800165f2:	bf 02 00 00 00       	mov    edi,0x2
ffffffff800165f7:	e8 d4 9b fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800165fc:	0f b6 85 67 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x99]
ffffffff80016603:	89 c6                	mov    esi,eax
ffffffff80016605:	48 8d 7d d5          	lea    rdi,[rbp-0x2b]
ffffffff80016609:	e8 a2 0b ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8001660e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff80016615:	66 8b 4d d5          	mov    cx,WORD PTR [rbp-0x2b]
ffffffff80016619:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff8001661c:	e9 45 01 00 00       	jmp    ffffffff80016766 <fmt.formatInt__anon_3496+0x5e6>
ffffffff80016621:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
            const digit = a % base;
ffffffff80016627:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff8001662d:	88 8d d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],cl
ffffffff80016633:	3c 00                	cmp    al,0x0
ffffffff80016635:	74 02                	je     ffffffff80016639 <fmt.formatInt__anon_3496+0x4b9>
ffffffff80016637:	eb 1c                	jmp    ffffffff80016655 <fmt.formatInt__anon_3496+0x4d5>
ffffffff80016639:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80016640:	48 c7 c1 28 c7 01 80 	mov    rcx,0xffffffff8001c728
ffffffff80016647:	31 c0                	xor    eax,eax
ffffffff80016649:	89 c2                	mov    edx,eax
ffffffff8001664b:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016650:	e8 5b 9b fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016655:	8a 8d 5b ff ff ff    	mov    cl,BYTE PTR [rbp-0xa5]
ffffffff8001665b:	8a 85 d7 fe ff ff    	mov    al,BYTE PTR [rbp-0x129]
ffffffff80016661:	66 0f b6 c0          	movzx  ax,al
ffffffff80016665:	f6 f1                	div    cl
ffffffff80016667:	0f b6 c4             	movzx  eax,ah
ffffffff8001666a:	88 85 d6 fe ff ff    	mov    BYTE PTR [rbp-0x12a],al
ffffffff80016670:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            index -= 1;
ffffffff80016673:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001667a:	48 83 e8 01          	sub    rax,0x1
ffffffff8001667e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80016682:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80016686:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff80016689:	84 c0                	test   al,al
ffffffff8001668b:	75 04                	jne    ffffffff80016691 <fmt.formatInt__anon_3496+0x511>
ffffffff8001668d:	eb 00                	jmp    ffffffff8001668f <fmt.formatInt__anon_3496+0x50f>
ffffffff8001668f:	eb 1c                	jmp    ffffffff800166ad <fmt.formatInt__anon_3496+0x52d>
ffffffff80016691:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80016698:	48 c7 c1 38 c7 01 80 	mov    rcx,0xffffffff8001c738
ffffffff8001669f:	31 c0                	xor    eax,eax
ffffffff800166a1:	89 c2                	mov    edx,eax
ffffffff800166a3:	be 10 00 00 00       	mov    esi,0x10
ffffffff800166a8:	e8 03 9b fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800166ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800166b1:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff800166b8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800166bf:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
ffffffff800166c6:	48 83 f8 02          	cmp    rax,0x2
ffffffff800166ca:	73 02                	jae    ffffffff800166ce <fmt.formatInt__anon_3496+0x54e>
ffffffff800166cc:	eb 11                	jmp    ffffffff800166df <fmt.formatInt__anon_3496+0x55f>
ffffffff800166ce:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
ffffffff800166d5:	be 02 00 00 00       	mov    esi,0x2
ffffffff800166da:	e8 f1 9a fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800166df:	8a 85 59 ff ff ff    	mov    al,BYTE PTR [rbp-0xa7]
ffffffff800166e5:	8a 8d d6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x12a]
ffffffff800166eb:	0f b6 f9             	movzx  edi,cl
ffffffff800166ee:	0f b6 f0             	movzx  esi,al
ffffffff800166f1:	e8 2a 0c ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff800166f6:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffffffff800166fd:	88 c2                	mov    dl,al
ffffffff800166ff:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
ffffffff80016705:	88 94 0d 64 ff ff ff 	mov    BYTE PTR [rbp+rcx*1-0x9c],dl
            a /= base;
ffffffff8001670c:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80016712:	88 8d c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],cl
ffffffff80016718:	3c 00                	cmp    al,0x0
ffffffff8001671a:	74 02                	je     ffffffff8001671e <fmt.formatInt__anon_3496+0x59e>
ffffffff8001671c:	eb 1c                	jmp    ffffffff8001673a <fmt.formatInt__anon_3496+0x5ba>
ffffffff8001671e:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80016725:	48 c7 c1 48 c7 01 80 	mov    rcx,0xffffffff8001c748
ffffffff8001672c:	31 c0                	xor    eax,eax
ffffffff8001672e:	89 c2                	mov    edx,eax
ffffffff80016730:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016735:	e8 76 9a fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001673a:	8a 8d 5b ff ff ff    	mov    cl,BYTE PTR [rbp-0xa5]
ffffffff80016740:	8a 85 c7 fe ff ff    	mov    al,BYTE PTR [rbp-0x139]
ffffffff80016746:	66 0f b6 c0          	movzx  ax,al
ffffffff8001674a:	f6 f1                	div    cl
ffffffff8001674c:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
            if (a == 0) break;
ffffffff80016752:	80 bd 67 ff ff ff 00 	cmp    BYTE PTR [rbp-0x99],0x0
ffffffff80016759:	75 02                	jne    ffffffff8001675d <fmt.formatInt__anon_3496+0x5dd>
ffffffff8001675b:	eb 07                	jmp    ffffffff80016764 <fmt.formatInt__anon_3496+0x5e4>
ffffffff8001675d:	eb 00                	jmp    ffffffff8001675f <fmt.formatInt__anon_3496+0x5df>
ffffffff8001675f:	e9 bd fe ff ff       	jmp    ffffffff80016621 <fmt.formatInt__anon_3496+0x4a1>
ffffffff80016764:	eb 00                	jmp    ffffffff80016766 <fmt.formatInt__anon_3496+0x5e6>
    return formatBuf(buf[index..], options, writer);
ffffffff80016766:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001676d:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80016774:	48 8d 8d 64 ff ff ff 	lea    rcx,[rbp-0x9c]
ffffffff8001677b:	48 01 c1             	add    rcx,rax
ffffffff8001677e:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
ffffffff80016785:	48 83 f8 02          	cmp    rax,0x2
ffffffff80016789:	77 02                	ja     ffffffff8001678d <fmt.formatInt__anon_3496+0x60d>
ffffffff8001678b:	eb 11                	jmp    ffffffff8001679e <fmt.formatInt__anon_3496+0x61e>
ffffffff8001678d:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff80016794:	be 02 00 00 00       	mov    esi,0x2
ffffffff80016799:	e8 72 9b fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff8001679e:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
ffffffff800167a5:	b8 02 00 00 00       	mov    eax,0x2
ffffffff800167aa:	48 29 c8             	sub    rax,rcx
ffffffff800167ad:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff800167b4:	b0 01                	mov    al,0x1
ffffffff800167b6:	a8 01                	test   al,0x1
ffffffff800167b8:	75 02                	jne    ffffffff800167bc <fmt.formatInt__anon_3496+0x63c>
ffffffff800167ba:	eb 02                	jmp    ffffffff800167be <fmt.formatInt__anon_3496+0x63e>
ffffffff800167bc:	eb 0d                	jmp    ffffffff800167cb <fmt.formatInt__anon_3496+0x64b>
ffffffff800167be:	be 02 00 00 00       	mov    esi,0x2
ffffffff800167c3:	48 89 f7             	mov    rdi,rsi
ffffffff800167c6:	e8 05 9a fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800167cb:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff800167d2:	48 83 f8 02          	cmp    rax,0x2
ffffffff800167d6:	77 02                	ja     ffffffff800167da <fmt.formatInt__anon_3496+0x65a>
ffffffff800167d8:	eb 11                	jmp    ffffffff800167eb <fmt.formatInt__anon_3496+0x66b>
ffffffff800167da:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff800167e1:	be 02 00 00 00       	mov    esi,0x2
ffffffff800167e6:	e8 e5 99 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800167eb:	4c 8b 85 40 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc0]
ffffffff800167f2:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff800167f9:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
ffffffff80016800:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffffffff80016807:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
ffffffff8001680e:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80016812:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80016816:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff8001681a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8001681e:	e8 3d 0c ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff80016823:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80016827:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff8001682c:	75 0d                	jne    ffffffff8001683b <fmt.formatInt__anon_3496+0x6bb>
ffffffff8001682e:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80016832:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff80016839:	5d                   	pop    rbp
ffffffff8001683a:	c3                   	ret
ffffffff8001683b:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
ffffffff80016842:	e8 c9 cb fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80016847:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff8001684b:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff80016852:	5d                   	pop    rbp
ffffffff80016853:	c3                   	ret
ffffffff80016854:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8001685b:	00 00 00 
ffffffff8001685e:	66 90                	xchg   ax,ax

ffffffff80016860 <math.absCast__anon_3498>:
} {
ffffffff80016860:	55                   	push   rbp
ffffffff80016861:	48 89 e5             	mov    rbp,rsp
ffffffff80016864:	48 83 ec 01          	sub    rsp,0x1
ffffffff80016868:	40 88 f8             	mov    al,dil
ffffffff8001686b:	88 c1                	mov    cl,al
ffffffff8001686d:	80 e1 01             	and    cl,0x1
ffffffff80016870:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
            if (int_info.signedness == .unsigned) return x;
ffffffff80016873:	48 83 c4 01          	add    rsp,0x1
ffffffff80016877:	5d                   	pop    rbp
ffffffff80016878:	c3                   	ret
ffffffff80016879:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80016880 <fmt.formatValue__anon_3501>:
) !void {
ffffffff80016880:	55                   	push   rbp
ffffffff80016881:	48 89 e5             	mov    rbp,rsp
ffffffff80016884:	48 83 ec 10          	sub    rsp,0x10
ffffffff80016888:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff8001688c:	40 88 f0             	mov    al,sil
ffffffff8001688f:	40 88 c6             	mov    sil,al
ffffffff80016892:	40 80 e6 03          	and    sil,0x3
ffffffff80016896:	40 88 75 fd          	mov    BYTE PTR [rbp-0x3],sil
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff8001689a:	0f b6 f0             	movzx  esi,al
ffffffff8001689d:	e8 2e 00 00 00       	call   ffffffff800168d0 <fmt.formatIntValue__anon_3502>
ffffffff800168a2:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800168a6:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800168ab:	75 0a                	jne    ffffffff800168b7 <fmt.formatValue__anon_3501+0x37>
ffffffff800168ad:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800168b1:	48 83 c4 10          	add    rsp,0x10
ffffffff800168b5:	5d                   	pop    rbp
ffffffff800168b6:	c3                   	ret
ffffffff800168b7:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff800168bb:	e8 50 cb fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800168c0:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800168c4:	48 83 c4 10          	add    rsp,0x10
ffffffff800168c8:	5d                   	pop    rbp
ffffffff800168c9:	c3                   	ret
ffffffff800168ca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff800168d0 <fmt.formatIntValue__anon_3502>:
) !void {
ffffffff800168d0:	55                   	push   rbp
ffffffff800168d1:	48 89 e5             	mov    rbp,rsp
ffffffff800168d4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800168d8:	49 89 c9             	mov    r9,rcx
ffffffff800168db:	49 89 d0             	mov    r8,rdx
ffffffff800168de:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff800168e2:	40 88 f0             	mov    al,sil
ffffffff800168e5:	88 c1                	mov    cl,al
ffffffff800168e7:	80 e1 03             	and    cl,0x3
ffffffff800168ea:	88 4d fc             	mov    BYTE PTR [rbp-0x4],cl
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff800168ed:	88 4d fd             	mov    BYTE PTR [rbp-0x3],cl
    return formatInt(int_value, radix, case, options, writer);
ffffffff800168f0:	0f b6 f0             	movzx  esi,al
ffffffff800168f3:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff800168f8:	31 c9                	xor    ecx,ecx
ffffffff800168fa:	e8 31 00 00 00       	call   ffffffff80016930 <fmt.formatInt__anon_3505>
ffffffff800168ff:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80016903:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80016908:	75 0a                	jne    ffffffff80016914 <fmt.formatIntValue__anon_3502+0x44>
ffffffff8001690a:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001690e:	48 83 c4 10          	add    rsp,0x10
ffffffff80016912:	5d                   	pop    rbp
ffffffff80016913:	c3                   	ret
ffffffff80016914:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80016918:	e8 f3 ca fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001691d:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80016921:	48 83 c4 10          	add    rsp,0x10
ffffffff80016925:	5d                   	pop    rbp
ffffffff80016926:	c3                   	ret
ffffffff80016927:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8001692e:	00 00 

ffffffff80016930 <fmt.formatInt__anon_3505>:
) !void {
ffffffff80016930:	55                   	push   rbp
ffffffff80016931:	48 89 e5             	mov    rbp,rsp
ffffffff80016934:	48 81 ec 60 01 00 00 	sub    rsp,0x160
ffffffff8001693b:	4c 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],r9
ffffffff80016942:	4c 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],r8
ffffffff80016949:	48 89 bd 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rdi
ffffffff80016950:	88 8d 58 ff ff ff    	mov    BYTE PTR [rbp-0xa8],cl
ffffffff80016956:	88 d0                	mov    al,dl
ffffffff80016958:	88 85 5b ff ff ff    	mov    BYTE PTR [rbp-0xa5],al
ffffffff8001695e:	40 88 f2             	mov    dl,sil
ffffffff80016961:	88 95 5a ff ff ff    	mov    BYTE PTR [rbp-0xa6],dl
ffffffff80016967:	80 e2 03             	and    dl,0x3
ffffffff8001696a:	88 95 59 ff ff ff    	mov    BYTE PTR [rbp-0xa7],dl
ffffffff80016970:	88 95 5c ff ff ff    	mov    BYTE PTR [rbp-0xa4],dl
ffffffff80016976:	88 85 5d ff ff ff    	mov    BYTE PTR [rbp-0xa3],al
ffffffff8001697c:	80 e1 01             	and    cl,0x1
ffffffff8001697f:	88 8d 5e ff ff ff    	mov    BYTE PTR [rbp-0xa2],cl
    assert(base >= 2);
ffffffff80016985:	2c 02                	sub    al,0x2
ffffffff80016987:	0f 93 c0             	setae  al
ffffffff8001698a:	0f b6 f8             	movzx  edi,al
ffffffff8001698d:	e8 9e f2 fe ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80016992:	8a 8d 59 ff ff ff    	mov    cl,BYTE PTR [rbp-0xa7]
ffffffff80016998:	8a 85 5a ff ff ff    	mov    al,BYTE PTR [rbp-0xa6]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8001699e:	88 8d 5f ff ff ff    	mov    BYTE PTR [rbp-0xa1],cl
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff800169a4:	66 c7 85 60 ff ff ff 	mov    WORD PTR [rbp-0xa0],0x8
ffffffff800169ab:	08 00 
    const abs_value = math.absCast(int_value);
ffffffff800169ad:	0f b6 f8             	movzx  edi,al
ffffffff800169b0:	e8 5b 06 00 00       	call   ffffffff80017010 <math.absCast__anon_3507>
ffffffff800169b5:	88 c1                	mov    cl,al
ffffffff800169b7:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
ffffffff800169bd:	80 e1 03             	and    cl,0x3
ffffffff800169c0:	88 8d 63 ff ff ff    	mov    BYTE PTR [rbp-0x9d],cl
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff800169c6:	c6 85 66 ff ff ff aa 	mov    BYTE PTR [rbp-0x9a],0xaa
ffffffff800169cd:	66 c7 85 64 ff ff ff 	mov    WORD PTR [rbp-0x9c],0xaaaa
ffffffff800169d4:	aa aa 
    var a: MinInt = abs_value;
ffffffff800169d6:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
    var index: usize = buf.len;
ffffffff800169dc:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x3
ffffffff800169e3:	03 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff800169e7:	3c 0a                	cmp    al,0xa
ffffffff800169e9:	75 0f                	jne    ffffffff800169fa <fmt.formatInt__anon_3505+0xca>
ffffffff800169eb:	e8 a0 07 ff ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff800169f0:	34 ff                	xor    al,0xff
ffffffff800169f2:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
ffffffff800169f8:	eb 0a                	jmp    ffffffff80016a04 <fmt.formatInt__anon_3505+0xd4>
ffffffff800169fa:	31 c0                	xor    eax,eax
ffffffff800169fc:	88 85 3f ff ff ff    	mov    BYTE PTR [rbp-0xc1],al
ffffffff80016a02:	eb 00                	jmp    ffffffff80016a04 <fmt.formatInt__anon_3505+0xd4>
ffffffff80016a04:	8a 85 3f ff ff ff    	mov    al,BYTE PTR [rbp-0xc1]
ffffffff80016a0a:	a8 01                	test   al,0x1
ffffffff80016a0c:	75 02                	jne    ffffffff80016a10 <fmt.formatInt__anon_3505+0xe0>
ffffffff80016a0e:	eb 02                	jmp    ffffffff80016a12 <fmt.formatInt__anon_3505+0xe2>
ffffffff80016a10:	eb 05                	jmp    ffffffff80016a17 <fmt.formatInt__anon_3505+0xe7>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80016a12:	e9 c3 03 00 00       	jmp    ffffffff80016dda <fmt.formatInt__anon_3505+0x4aa>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80016a17:	80 bd 67 ff ff ff 64 	cmp    BYTE PTR [rbp-0x99],0x64
ffffffff80016a1e:	72 25                	jb     ffffffff80016a45 <fmt.formatInt__anon_3505+0x115>
            index -= 2;
ffffffff80016a20:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016a27:	48 83 e8 02          	sub    rax,0x2
ffffffff80016a2b:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff80016a32:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff80016a39:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff80016a3f:	84 c0                	test   al,al
ffffffff80016a41:	74 07                	je     ffffffff80016a4a <fmt.formatInt__anon_3505+0x11a>
ffffffff80016a43:	eb 07                	jmp    ffffffff80016a4c <fmt.formatInt__anon_3505+0x11c>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80016a45:	e9 5e 01 00 00       	jmp    ffffffff80016ba8 <fmt.formatInt__anon_3505+0x278>
            index -= 2;
ffffffff80016a4a:	eb 1c                	jmp    ffffffff80016a68 <fmt.formatInt__anon_3505+0x138>
ffffffff80016a4c:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80016a53:	48 c7 c1 58 c7 01 80 	mov    rcx,0xffffffff8001c758
ffffffff80016a5a:	31 c0                	xor    eax,eax
ffffffff80016a5c:	89 c2                	mov    edx,eax
ffffffff80016a5e:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016a63:	e8 48 97 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016a68:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80016a6f:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff80016a76:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016a7d:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
ffffffff80016a84:	48 8d 8d 64 ff ff ff 	lea    rcx,[rbp-0x9c]
ffffffff80016a8b:	48 01 c1             	add    rcx,rax
ffffffff80016a8e:	48 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rcx
ffffffff80016a95:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016a99:	77 02                	ja     ffffffff80016a9d <fmt.formatInt__anon_3505+0x16d>
ffffffff80016a9b:	eb 11                	jmp    ffffffff80016aae <fmt.formatInt__anon_3505+0x17e>
ffffffff80016a9d:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
ffffffff80016aa4:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016aa9:	e8 62 98 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80016aae:	48 8b 8d 28 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xd8]
ffffffff80016ab5:	b8 03 00 00 00       	mov    eax,0x3
ffffffff80016aba:	48 29 c8             	sub    rax,rcx
ffffffff80016abd:	48 89 85 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rax
ffffffff80016ac4:	b0 01                	mov    al,0x1
ffffffff80016ac6:	a8 01                	test   al,0x1
ffffffff80016ac8:	75 02                	jne    ffffffff80016acc <fmt.formatInt__anon_3505+0x19c>
ffffffff80016aca:	eb 02                	jmp    ffffffff80016ace <fmt.formatInt__anon_3505+0x19e>
ffffffff80016acc:	eb 0d                	jmp    ffffffff80016adb <fmt.formatInt__anon_3505+0x1ab>
ffffffff80016ace:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016ad3:	48 89 f7             	mov    rdi,rsi
ffffffff80016ad6:	e8 f5 96 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016adb:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff80016ae2:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016ae6:	77 02                	ja     ffffffff80016aea <fmt.formatInt__anon_3505+0x1ba>
ffffffff80016ae8:	eb 11                	jmp    ffffffff80016afb <fmt.formatInt__anon_3505+0x1cb>
ffffffff80016aea:	48 8b bd 28 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xd8]
ffffffff80016af1:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016af6:	e8 d5 96 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016afb:	48 8b 85 30 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd0]
ffffffff80016b02:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff80016b09:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff80016b0d:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff80016b11:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80016b15:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff80016b1c:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80016b20:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff80016b27:	b0 01                	mov    al,0x1
ffffffff80016b29:	a8 01                	test   al,0x1
ffffffff80016b2b:	75 02                	jne    ffffffff80016b2f <fmt.formatInt__anon_3505+0x1ff>
ffffffff80016b2d:	eb 02                	jmp    ffffffff80016b31 <fmt.formatInt__anon_3505+0x201>
ffffffff80016b2f:	eb 10                	jmp    ffffffff80016b41 <fmt.formatInt__anon_3505+0x211>
ffffffff80016b31:	31 c0                	xor    eax,eax
ffffffff80016b33:	31 c0                	xor    eax,eax
ffffffff80016b35:	89 c7                	mov    edi,eax
ffffffff80016b37:	be 02 00 00 00       	mov    esi,0x2
ffffffff80016b3c:	e8 cf 97 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80016b41:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff80016b48:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80016b4d:	48 39 c8             	cmp    rax,rcx
ffffffff80016b50:	77 02                	ja     ffffffff80016b54 <fmt.formatInt__anon_3505+0x224>
ffffffff80016b52:	eb 11                	jmp    ffffffff80016b65 <fmt.formatInt__anon_3505+0x235>
ffffffff80016b54:	48 8b b5 18 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xe8]
ffffffff80016b5b:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80016b60:	e8 6b 96 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016b65:	b1 64                	mov    cl,0x64
ffffffff80016b67:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80016b6e:	ff 
ffffffff80016b6f:	f6 f1                	div    cl
ffffffff80016b71:	66 c1 e8 08          	shr    ax,0x8
ffffffff80016b75:	0f b6 c0             	movzx  eax,al
ffffffff80016b78:	89 c6                	mov    esi,eax
ffffffff80016b7a:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff80016b7e:	e8 2d 06 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80016b83:	48 8b 85 10 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf0]
ffffffff80016b8a:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff80016b8e:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80016b91:	b1 64                	mov    cl,0x64
ffffffff80016b93:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80016b9a:	ff 
ffffffff80016b9b:	f6 f1                	div    cl
ffffffff80016b9d:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
ffffffff80016ba3:	e9 6f fe ff ff       	jmp    ffffffff80016a17 <fmt.formatInt__anon_3505+0xe7>
        if (a < 10) {
ffffffff80016ba8:	80 bd 67 ff ff ff 0a 	cmp    BYTE PTR [rbp-0x99],0xa
ffffffff80016baf:	73 1c                	jae    ffffffff80016bcd <fmt.formatInt__anon_3505+0x29d>
            index -= 1;
ffffffff80016bb1:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016bb8:	48 83 e8 01          	sub    rax,0x1
ffffffff80016bbc:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80016bc0:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff80016bc4:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff80016bc7:	84 c0                	test   al,al
ffffffff80016bc9:	74 25                	je     ffffffff80016bf0 <fmt.formatInt__anon_3505+0x2c0>
ffffffff80016bcb:	eb 25                	jmp    ffffffff80016bf2 <fmt.formatInt__anon_3505+0x2c2>
            index -= 2;
ffffffff80016bcd:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016bd4:	48 83 e8 02          	sub    rax,0x2
ffffffff80016bd8:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80016bdc:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff80016be0:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff80016be3:	84 c0                	test   al,al
ffffffff80016be5:	0f 84 b2 00 00 00    	je     ffffffff80016c9d <fmt.formatInt__anon_3505+0x36d>
ffffffff80016beb:	e9 af 00 00 00       	jmp    ffffffff80016c9f <fmt.formatInt__anon_3505+0x36f>
            index -= 1;
ffffffff80016bf0:	eb 1c                	jmp    ffffffff80016c0e <fmt.formatInt__anon_3505+0x2de>
ffffffff80016bf2:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80016bf9:	48 c7 c1 68 c7 01 80 	mov    rcx,0xffffffff8001c768
ffffffff80016c00:	31 c0                	xor    eax,eax
ffffffff80016c02:	89 c2                	mov    edx,eax
ffffffff80016c04:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016c09:	e8 a2 95 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016c0e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80016c12:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff80016c19:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016c20:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff80016c27:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016c2b:	73 02                	jae    ffffffff80016c2f <fmt.formatInt__anon_3505+0x2ff>
ffffffff80016c2d:	eb 11                	jmp    ffffffff80016c40 <fmt.formatInt__anon_3505+0x310>
ffffffff80016c2f:	48 8b bd 08 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xf8]
ffffffff80016c36:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016c3b:	e8 90 95 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016c40:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
ffffffff80016c47:	48 8d 84 05 64 ff ff 	lea    rax,[rbp+rax*1-0x9c]
ffffffff80016c4e:	ff 
ffffffff80016c4f:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff80016c56:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
ffffffff80016c5c:	04 30                	add    al,0x30
ffffffff80016c5e:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff80016c61:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff80016c65:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff80016c68:	84 c0                	test   al,al
ffffffff80016c6a:	75 04                	jne    ffffffff80016c70 <fmt.formatInt__anon_3505+0x340>
ffffffff80016c6c:	eb 00                	jmp    ffffffff80016c6e <fmt.formatInt__anon_3505+0x33e>
ffffffff80016c6e:	eb 1c                	jmp    ffffffff80016c8c <fmt.formatInt__anon_3505+0x35c>
ffffffff80016c70:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80016c77:	48 c7 c1 78 c7 01 80 	mov    rcx,0xffffffff8001c778
ffffffff80016c7e:	31 c0                	xor    eax,eax
ffffffff80016c80:	89 c2                	mov    edx,eax
ffffffff80016c82:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016c87:	e8 24 95 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016c8c:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff80016c93:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff80016c96:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80016c98:	e9 38 01 00 00       	jmp    ffffffff80016dd5 <fmt.formatInt__anon_3505+0x4a5>
            index -= 2;
ffffffff80016c9d:	eb 1c                	jmp    ffffffff80016cbb <fmt.formatInt__anon_3505+0x38b>
ffffffff80016c9f:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80016ca6:	48 c7 c1 88 c7 01 80 	mov    rcx,0xffffffff8001c788
ffffffff80016cad:	31 c0                	xor    eax,eax
ffffffff80016caf:	89 c2                	mov    edx,eax
ffffffff80016cb1:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016cb6:	e8 f5 94 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016cbb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80016cbf:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff80016cc6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016ccd:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff80016cd4:	48 8d 8d 64 ff ff ff 	lea    rcx,[rbp-0x9c]
ffffffff80016cdb:	48 01 c1             	add    rcx,rax
ffffffff80016cde:	48 89 8d f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rcx
ffffffff80016ce5:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016ce9:	77 02                	ja     ffffffff80016ced <fmt.formatInt__anon_3505+0x3bd>
ffffffff80016ceb:	eb 11                	jmp    ffffffff80016cfe <fmt.formatInt__anon_3505+0x3ce>
ffffffff80016ced:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
ffffffff80016cf4:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016cf9:	e8 12 96 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80016cfe:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
ffffffff80016d05:	b8 03 00 00 00       	mov    eax,0x3
ffffffff80016d0a:	48 29 c8             	sub    rax,rcx
ffffffff80016d0d:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
ffffffff80016d14:	b0 01                	mov    al,0x1
ffffffff80016d16:	a8 01                	test   al,0x1
ffffffff80016d18:	75 02                	jne    ffffffff80016d1c <fmt.formatInt__anon_3505+0x3ec>
ffffffff80016d1a:	eb 02                	jmp    ffffffff80016d1e <fmt.formatInt__anon_3505+0x3ee>
ffffffff80016d1c:	eb 0d                	jmp    ffffffff80016d2b <fmt.formatInt__anon_3505+0x3fb>
ffffffff80016d1e:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016d23:	48 89 f7             	mov    rdi,rsi
ffffffff80016d26:	e8 a5 94 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016d2b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80016d32:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016d36:	77 02                	ja     ffffffff80016d3a <fmt.formatInt__anon_3505+0x40a>
ffffffff80016d38:	eb 11                	jmp    ffffffff80016d4b <fmt.formatInt__anon_3505+0x41b>
ffffffff80016d3a:	48 8b bd f0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x110]
ffffffff80016d41:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016d46:	e8 85 94 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016d4b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff80016d52:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
ffffffff80016d59:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80016d5d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80016d61:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80016d65:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff80016d6c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80016d70:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff80016d77:	b0 01                	mov    al,0x1
ffffffff80016d79:	a8 01                	test   al,0x1
ffffffff80016d7b:	75 02                	jne    ffffffff80016d7f <fmt.formatInt__anon_3505+0x44f>
ffffffff80016d7d:	eb 02                	jmp    ffffffff80016d81 <fmt.formatInt__anon_3505+0x451>
ffffffff80016d7f:	eb 10                	jmp    ffffffff80016d91 <fmt.formatInt__anon_3505+0x461>
ffffffff80016d81:	31 c0                	xor    eax,eax
ffffffff80016d83:	31 c0                	xor    eax,eax
ffffffff80016d85:	89 c7                	mov    edi,eax
ffffffff80016d87:	be 02 00 00 00       	mov    esi,0x2
ffffffff80016d8c:	e8 7f 95 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80016d91:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff80016d98:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80016d9d:	48 39 c8             	cmp    rax,rcx
ffffffff80016da0:	77 02                	ja     ffffffff80016da4 <fmt.formatInt__anon_3505+0x474>
ffffffff80016da2:	eb 11                	jmp    ffffffff80016db5 <fmt.formatInt__anon_3505+0x485>
ffffffff80016da4:	48 8b b5 e0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x120]
ffffffff80016dab:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80016db0:	e8 1b 94 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016db5:	0f b6 85 67 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x99]
ffffffff80016dbc:	89 c6                	mov    esi,eax
ffffffff80016dbe:	48 8d 7d d5          	lea    rdi,[rbp-0x2b]
ffffffff80016dc2:	e8 e9 03 ff ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80016dc7:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
ffffffff80016dce:	66 8b 4d d5          	mov    cx,WORD PTR [rbp-0x2b]
ffffffff80016dd2:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff80016dd5:	e9 45 01 00 00       	jmp    ffffffff80016f1f <fmt.formatInt__anon_3505+0x5ef>
ffffffff80016dda:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
            const digit = a % base;
ffffffff80016de0:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80016de6:	88 8d d7 fe ff ff    	mov    BYTE PTR [rbp-0x129],cl
ffffffff80016dec:	3c 00                	cmp    al,0x0
ffffffff80016dee:	74 02                	je     ffffffff80016df2 <fmt.formatInt__anon_3505+0x4c2>
ffffffff80016df0:	eb 1c                	jmp    ffffffff80016e0e <fmt.formatInt__anon_3505+0x4de>
ffffffff80016df2:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80016df9:	48 c7 c1 98 c7 01 80 	mov    rcx,0xffffffff8001c798
ffffffff80016e00:	31 c0                	xor    eax,eax
ffffffff80016e02:	89 c2                	mov    edx,eax
ffffffff80016e04:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016e09:	e8 a2 93 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016e0e:	8a 8d 5b ff ff ff    	mov    cl,BYTE PTR [rbp-0xa5]
ffffffff80016e14:	8a 85 d7 fe ff ff    	mov    al,BYTE PTR [rbp-0x129]
ffffffff80016e1a:	66 0f b6 c0          	movzx  ax,al
ffffffff80016e1e:	f6 f1                	div    cl
ffffffff80016e20:	0f b6 c4             	movzx  eax,ah
ffffffff80016e23:	88 85 d6 fe ff ff    	mov    BYTE PTR [rbp-0x12a],al
ffffffff80016e29:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            index -= 1;
ffffffff80016e2c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016e33:	48 83 e8 01          	sub    rax,0x1
ffffffff80016e37:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80016e3b:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff80016e3f:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff80016e42:	84 c0                	test   al,al
ffffffff80016e44:	75 04                	jne    ffffffff80016e4a <fmt.formatInt__anon_3505+0x51a>
ffffffff80016e46:	eb 00                	jmp    ffffffff80016e48 <fmt.formatInt__anon_3505+0x518>
ffffffff80016e48:	eb 1c                	jmp    ffffffff80016e66 <fmt.formatInt__anon_3505+0x536>
ffffffff80016e4a:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff80016e51:	48 c7 c1 a8 c7 01 80 	mov    rcx,0xffffffff8001c7a8
ffffffff80016e58:	31 c0                	xor    eax,eax
ffffffff80016e5a:	89 c2                	mov    edx,eax
ffffffff80016e5c:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016e61:	e8 4a 93 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016e66:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80016e6a:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80016e71:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016e78:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
ffffffff80016e7f:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016e83:	73 02                	jae    ffffffff80016e87 <fmt.formatInt__anon_3505+0x557>
ffffffff80016e85:	eb 11                	jmp    ffffffff80016e98 <fmt.formatInt__anon_3505+0x568>
ffffffff80016e87:	48 8b bd c8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x138]
ffffffff80016e8e:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016e93:	e8 38 93 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016e98:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [rbp-0xa8]
ffffffff80016e9e:	8a 8d d6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x12a]
ffffffff80016ea4:	0f b6 f9             	movzx  edi,cl
ffffffff80016ea7:	0f b6 f0             	movzx  esi,al
ffffffff80016eaa:	e8 71 04 ff ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80016eaf:	48 8b 8d c8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x138]
ffffffff80016eb6:	88 c2                	mov    dl,al
ffffffff80016eb8:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [rbp-0xa5]
ffffffff80016ebe:	88 94 0d 64 ff ff ff 	mov    BYTE PTR [rbp+rcx*1-0x9c],dl
            a /= base;
ffffffff80016ec5:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80016ecb:	88 8d c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],cl
ffffffff80016ed1:	3c 00                	cmp    al,0x0
ffffffff80016ed3:	74 02                	je     ffffffff80016ed7 <fmt.formatInt__anon_3505+0x5a7>
ffffffff80016ed5:	eb 1c                	jmp    ffffffff80016ef3 <fmt.formatInt__anon_3505+0x5c3>
ffffffff80016ed7:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80016ede:	48 c7 c1 b8 c7 01 80 	mov    rcx,0xffffffff8001c7b8
ffffffff80016ee5:	31 c0                	xor    eax,eax
ffffffff80016ee7:	89 c2                	mov    edx,eax
ffffffff80016ee9:	be 10 00 00 00       	mov    esi,0x10
ffffffff80016eee:	e8 bd 92 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80016ef3:	8a 8d 5b ff ff ff    	mov    cl,BYTE PTR [rbp-0xa5]
ffffffff80016ef9:	8a 85 c7 fe ff ff    	mov    al,BYTE PTR [rbp-0x139]
ffffffff80016eff:	66 0f b6 c0          	movzx  ax,al
ffffffff80016f03:	f6 f1                	div    cl
ffffffff80016f05:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
            if (a == 0) break;
ffffffff80016f0b:	80 bd 67 ff ff ff 00 	cmp    BYTE PTR [rbp-0x99],0x0
ffffffff80016f12:	75 02                	jne    ffffffff80016f16 <fmt.formatInt__anon_3505+0x5e6>
ffffffff80016f14:	eb 07                	jmp    ffffffff80016f1d <fmt.formatInt__anon_3505+0x5ed>
ffffffff80016f16:	eb 00                	jmp    ffffffff80016f18 <fmt.formatInt__anon_3505+0x5e8>
ffffffff80016f18:	e9 bd fe ff ff       	jmp    ffffffff80016dda <fmt.formatInt__anon_3505+0x4aa>
ffffffff80016f1d:	eb 00                	jmp    ffffffff80016f1f <fmt.formatInt__anon_3505+0x5ef>
    return formatBuf(buf[index..], options, writer);
ffffffff80016f1f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80016f26:	48 89 85 b0 fe ff ff 	mov    QWORD PTR [rbp-0x150],rax
ffffffff80016f2d:	48 8d 8d 64 ff ff ff 	lea    rcx,[rbp-0x9c]
ffffffff80016f34:	48 01 c1             	add    rcx,rax
ffffffff80016f37:	48 89 8d b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rcx
ffffffff80016f3e:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016f42:	77 02                	ja     ffffffff80016f46 <fmt.formatInt__anon_3505+0x616>
ffffffff80016f44:	eb 11                	jmp    ffffffff80016f57 <fmt.formatInt__anon_3505+0x627>
ffffffff80016f46:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff80016f4d:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016f52:	e8 b9 93 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80016f57:	48 8b 8d b0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x150]
ffffffff80016f5e:	b8 03 00 00 00       	mov    eax,0x3
ffffffff80016f63:	48 29 c8             	sub    rax,rcx
ffffffff80016f66:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
ffffffff80016f6d:	b0 01                	mov    al,0x1
ffffffff80016f6f:	a8 01                	test   al,0x1
ffffffff80016f71:	75 02                	jne    ffffffff80016f75 <fmt.formatInt__anon_3505+0x645>
ffffffff80016f73:	eb 02                	jmp    ffffffff80016f77 <fmt.formatInt__anon_3505+0x647>
ffffffff80016f75:	eb 0d                	jmp    ffffffff80016f84 <fmt.formatInt__anon_3505+0x654>
ffffffff80016f77:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016f7c:	48 89 f7             	mov    rdi,rsi
ffffffff80016f7f:	e8 4c 92 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016f84:	48 8b 85 b0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x150]
ffffffff80016f8b:	48 83 f8 03          	cmp    rax,0x3
ffffffff80016f8f:	77 02                	ja     ffffffff80016f93 <fmt.formatInt__anon_3505+0x663>
ffffffff80016f91:	eb 11                	jmp    ffffffff80016fa4 <fmt.formatInt__anon_3505+0x674>
ffffffff80016f93:	48 8b bd b0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x150]
ffffffff80016f9a:	be 03 00 00 00       	mov    esi,0x3
ffffffff80016f9f:	e8 2c 92 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80016fa4:	4c 8b 85 40 ff ff ff 	mov    r8,QWORD PTR [rbp-0xc0]
ffffffff80016fab:	48 8b 8d 48 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xb8]
ffffffff80016fb2:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
ffffffff80016fb9:	48 8b 85 b8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x148]
ffffffff80016fc0:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
ffffffff80016fc7:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80016fcb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80016fcf:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80016fd3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80016fd7:	e8 84 04 ff ff       	call   ffffffff80007460 <fmt.formatBuf__anon_2788>
ffffffff80016fdc:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80016fe0:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80016fe5:	75 0d                	jne    ffffffff80016ff4 <fmt.formatInt__anon_3505+0x6c4>
ffffffff80016fe7:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80016feb:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff80016ff2:	5d                   	pop    rbp
ffffffff80016ff3:	c3                   	ret
ffffffff80016ff4:	48 8b bd 50 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xb0]
ffffffff80016ffb:	e8 10 c4 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80017000:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80017004:	48 81 c4 60 01 00 00 	add    rsp,0x160
ffffffff8001700b:	5d                   	pop    rbp
ffffffff8001700c:	c3                   	ret
ffffffff8001700d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80017010 <math.absCast__anon_3507>:
} {
ffffffff80017010:	55                   	push   rbp
ffffffff80017011:	48 89 e5             	mov    rbp,rsp
ffffffff80017014:	48 83 ec 01          	sub    rsp,0x1
ffffffff80017018:	40 88 f8             	mov    al,dil
ffffffff8001701b:	88 c1                	mov    cl,al
ffffffff8001701d:	80 e1 03             	and    cl,0x3
ffffffff80017020:	88 4d ff             	mov    BYTE PTR [rbp-0x1],cl
            if (int_info.signedness == .unsigned) return x;
ffffffff80017023:	48 83 c4 01          	add    rsp,0x1
ffffffff80017027:	5d                   	pop    rbp
ffffffff80017028:	c3                   	ret
ffffffff80017029:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80017030 <fmt.bufPrint__anon_3509>:
pub fn bufPrint(buf: []u8, comptime fmt: []const u8, args: anytype) BufPrintError![]u8 {
ffffffff80017030:	55                   	push   rbp
ffffffff80017031:	48 89 e5             	mov    rbp,rsp
ffffffff80017034:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffffffff8001703b:	4c 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r8
ffffffff80017042:	48 89 d0             	mov    rax,rdx
ffffffff80017045:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffffffff8001704c:	48 89 bd 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdi
ffffffff80017053:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
ffffffff8001705a:	48 89 ca             	mov    rdx,rcx
ffffffff8001705d:	48 89 c6             	mov    rsi,rax
ffffffff80017060:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffffffff80017064:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80017068:	48 8d 7d b0          	lea    rdi,[rbp-0x50]
    var fbs = std.io.fixedBufferStream(buf);
ffffffff8001706c:	e8 af a9 ff ff       	call   ffffffff80011a20 <io.fixed_buffer_stream.fixedBufferStream__anon_3211>
ffffffff80017071:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80017075:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80017079:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8001707d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80017081:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80017085:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80017089:	48 8d 7d c8          	lea    rdi,[rbp-0x38]
ffffffff8001708d:	48 8d 75 98          	lea    rsi,[rbp-0x68]
    try format(fbs.writer(), fmt, args);
ffffffff80017091:	e8 ba a9 ff ff       	call   ffffffff80011a50 <io.fixed_buffer_stream.FixedBufferStream([]u8).writer>
ffffffff80017096:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8001709d:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff800170a4:	48 8d 75 c8          	lea    rsi,[rbp-0x38]
ffffffff800170a8:	e8 c3 00 00 00       	call   ffffffff80017170 <fmt.format__anon_3510>
ffffffff800170ad:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
ffffffff800170b1:	66 83 f8 00          	cmp    ax,0x0
ffffffff800170b5:	74 42                	je     ffffffff800170f9 <fmt.bufPrint__anon_3509+0xc9>
ffffffff800170b7:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff800170be:	66 8b 45 86          	mov    ax,WORD PTR [rbp-0x7a]
ffffffff800170c2:	66 89 45 e0          	mov    WORD PTR [rbp-0x20],ax
ffffffff800170c6:	e8 45 c3 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800170cb:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
ffffffff800170d2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800170d9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800170dd:	48 89 11             	mov    QWORD PTR [rcx],rdx
ffffffff800170e0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff800170e4:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff800170e8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff800170ec:	48 89 51 10          	mov    QWORD PTR [rcx+0x10],rdx
ffffffff800170f0:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff800170f7:	5d                   	pop    rbp
ffffffff800170f8:	c3                   	ret
ffffffff800170f9:	48 8d 7d 98          	lea    rdi,[rbp-0x68]
    return fbs.getWritten();
ffffffff800170fd:	e8 6e a9 ff ff       	call   ffffffff80011a70 <io.fixed_buffer_stream.FixedBufferStream([]u8).getWritten>
ffffffff80017102:	48 89 c1             	mov    rcx,rax
ffffffff80017105:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
ffffffff8001710c:	66 c7 45 f8 00 00    	mov    WORD PTR [rbp-0x8],0x0
ffffffff80017112:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff80017116:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff8001711a:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff8001711e:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80017121:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff80017125:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
ffffffff80017129:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffffffff8001712d:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffffffff80017131:	66 83 78 10 00       	cmp    WORD PTR [rax+0x10],0x0
ffffffff80017136:	75 10                	jne    ffffffff80017148 <fmt.bufPrint__anon_3509+0x118>
ffffffff80017138:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001713f:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff80017146:	5d                   	pop    rbp
ffffffff80017147:	c3                   	ret
ffffffff80017148:	48 8b bd 70 ff ff ff 	mov    rdi,QWORD PTR [rbp-0x90]
ffffffff8001714f:	e8 bc c2 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80017154:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001715b:	48 81 c4 a0 00 00 00 	add    rsp,0xa0
ffffffff80017162:	5d                   	pop    rbp
ffffffff80017163:	c3                   	ret
ffffffff80017164:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8001716b:	00 00 00 
ffffffff8001716e:	66 90                	xchg   ax,ax

ffffffff80017170 <fmt.format__anon_3510>:
) !void {
ffffffff80017170:	55                   	push   rbp
ffffffff80017171:	48 89 e5             	mov    rbp,rsp
ffffffff80017174:	48 83 ec 40          	sub    rsp,0x40
ffffffff80017178:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff8001717c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80017180:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80017184:	48 8b 06             	mov    rax,QWORD PTR [rsi]
ffffffff80017187:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8001718b:	b0 01                	mov    al,0x1
ffffffff8001718d:	a8 01                	test   al,0x1
ffffffff8001718f:	75 02                	jne    ffffffff80017193 <fmt.format__anon_3510+0x23>
ffffffff80017191:	eb 02                	jmp    ffffffff80017195 <fmt.format__anon_3510+0x25>
ffffffff80017193:	eb 10                	jmp    ffffffff800171a5 <fmt.format__anon_3510+0x35>
ffffffff80017195:	31 c0                	xor    eax,eax
ffffffff80017197:	31 c0                	xor    eax,eax
ffffffff80017199:	89 c7                	mov    edi,eax
ffffffff8001719b:	be 1c 00 00 00       	mov    esi,0x1c
ffffffff800171a0:	e8 6b 91 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800171a5:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800171a9:	48 c7 c2 f9 b7 01 80 	mov    rdx,0xffffffff8001b7f9
ffffffff800171b0:	48 8d 75 e0          	lea    rsi,[rbp-0x20]
ffffffff800171b4:	b9 1c 00 00 00       	mov    ecx,0x1c
ffffffff800171b9:	e8 52 a6 ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff800171be:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
ffffffff800171c2:	66 83 f8 00          	cmp    ax,0x0
ffffffff800171c6:	74 13                	je     ffffffff800171db <fmt.format__anon_3510+0x6b>
ffffffff800171c8:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800171cc:	e8 3f c2 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800171d1:	66 8b 45 c6          	mov    ax,WORD PTR [rbp-0x3a]
ffffffff800171d5:	48 83 c4 40          	add    rsp,0x40
ffffffff800171d9:	5d                   	pop    rbp
ffffffff800171da:	c3                   	ret
ffffffff800171db:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff800171df:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff800171e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff800171e7:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800171ee:	00 
        try formatType(
ffffffff800171ef:	8a 00                	mov    al,BYTE PTR [rax]
            std.options.fmt_max_depth,
ffffffff800171f1:	0f b6 f0             	movzx  esi,al
ffffffff800171f4:	48 c7 c2 b8 b0 01 80 	mov    rdx,0xffffffff8001b0b8
ffffffff800171fb:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80017201:	e8 ca 00 00 00       	call   ffffffff800172d0 <fmt.formatType__anon_3546>
ffffffff80017206:	66 89 45 c4          	mov    WORD PTR [rbp-0x3c],ax
ffffffff8001720a:	66 83 f8 00          	cmp    ax,0x0
ffffffff8001720e:	74 13                	je     ffffffff80017223 <fmt.format__anon_3510+0xb3>
ffffffff80017210:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
        try formatType(
ffffffff80017214:	e8 f7 c1 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80017219:	66 8b 45 c4          	mov    ax,WORD PTR [rbp-0x3c]
ffffffff8001721d:	48 83 c4 40          	add    rsp,0x40
ffffffff80017221:	5d                   	pop    rbp
ffffffff80017222:	c3                   	ret
ffffffff80017223:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
            try writer.writeAll(fmt[start_index..end_index]);
ffffffff80017227:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8001722a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8001722e:	b0 01                	mov    al,0x1
ffffffff80017230:	a8 01                	test   al,0x1
ffffffff80017232:	75 02                	jne    ffffffff80017236 <fmt.format__anon_3510+0xc6>
ffffffff80017234:	eb 02                	jmp    ffffffff80017238 <fmt.format__anon_3510+0xc8>
ffffffff80017236:	eb 0f                	jmp    ffffffff80017247 <fmt.format__anon_3510+0xd7>
ffffffff80017238:	bf 21 00 00 00       	mov    edi,0x21
ffffffff8001723d:	be 29 00 00 00       	mov    esi,0x29
ffffffff80017242:	e8 c9 90 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80017247:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff8001724b:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff8001724f:	48 c7 c2 1a b8 01 80 	mov    rdx,0xffffffff8001b81a
ffffffff80017256:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff8001725b:	e8 b0 a5 ff ff       	call   ffffffff80011810 <io.writer.Writer(*io.fixed_buffer_stream.FixedBufferStream([]u8),error{NoSpaceLeft},(function 'write')).writeAll>
ffffffff80017260:	66 89 45 c2          	mov    WORD PTR [rbp-0x3e],ax
ffffffff80017264:	66 83 f8 00          	cmp    ax,0x0
ffffffff80017268:	74 13                	je     ffffffff8001727d <fmt.format__anon_3510+0x10d>
ffffffff8001726a:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff8001726e:	e8 9d c1 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80017273:	66 8b 45 c2          	mov    ax,WORD PTR [rbp-0x3e]
ffffffff80017277:	48 83 c4 40          	add    rsp,0x40
ffffffff8001727b:	5d                   	pop    rbp
ffffffff8001727c:	c3                   	ret
ffffffff8001727d:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff80017281:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
ffffffff80017285:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
        const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse
ffffffff80017289:	48 c7 45 f8 01 00 00 	mov    QWORD PTR [rbp-0x8],0x1
ffffffff80017290:	00 
        try formatType(
ffffffff80017291:	8a 40 01             	mov    al,BYTE PTR [rax+0x1]
            std.options.fmt_max_depth,
ffffffff80017294:	0f b6 f0             	movzx  esi,al
ffffffff80017297:	48 c7 c2 48 b1 01 80 	mov    rdx,0xffffffff8001b148
ffffffff8001729e:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff800172a4:	e8 27 00 00 00       	call   ffffffff800172d0 <fmt.formatType__anon_3546>
ffffffff800172a9:	66 89 45 c0          	mov    WORD PTR [rbp-0x40],ax
ffffffff800172ad:	66 83 f8 00          	cmp    ax,0x0
ffffffff800172b1:	74 13                	je     ffffffff800172c6 <fmt.format__anon_3510+0x156>
ffffffff800172b3:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
        try formatType(
ffffffff800172b7:	e8 54 c1 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800172bc:	66 8b 45 c0          	mov    ax,WORD PTR [rbp-0x40]
ffffffff800172c0:	48 83 c4 40          	add    rsp,0x40
ffffffff800172c4:	5d                   	pop    rbp
ffffffff800172c5:	c3                   	ret
    if (comptime arg_state.hasUnusedArgs()) {
ffffffff800172c6:	31 c0                	xor    eax,eax
ffffffff800172c8:	48 83 c4 40          	add    rsp,0x40
ffffffff800172cc:	5d                   	pop    rbp
ffffffff800172cd:	c3                   	ret
ffffffff800172ce:	66 90                	xchg   ax,ax

ffffffff800172d0 <fmt.formatType__anon_3546>:
) @TypeOf(writer).Error!void {
ffffffff800172d0:	55                   	push   rbp
ffffffff800172d1:	48 89 e5             	mov    rbp,rsp
ffffffff800172d4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800172d8:	48 89 7d d0          	mov    QWORD PTR [rbp-0x30],rdi
ffffffff800172dc:	40 88 f0             	mov    al,sil
ffffffff800172df:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff800172e2:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
        defaultSpec(@TypeOf(value))
ffffffff800172e6:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff800172ed:	00 
ffffffff800172ee:	48 c7 45 e8 5d b6 01 	mov    QWORD PTR [rbp-0x18],0xffffffff8001b65d
ffffffff800172f5:	80 
            return formatValue(value, actual_fmt, options, writer);
ffffffff800172f6:	0f b6 f0             	movzx  esi,al
ffffffff800172f9:	e8 32 00 00 00       	call   ffffffff80017330 <fmt.formatValue__anon_3554>
ffffffff800172fe:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80017302:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80017307:	75 0a                	jne    ffffffff80017313 <fmt.formatType__anon_3546+0x43>
ffffffff80017309:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001730d:	48 83 c4 30          	add    rsp,0x30
ffffffff80017311:	5d                   	pop    rbp
ffffffff80017312:	c3                   	ret
ffffffff80017313:	48 8b 7d d0          	mov    rdi,QWORD PTR [rbp-0x30]
ffffffff80017317:	e8 f4 c0 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff8001731c:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80017320:	48 83 c4 30          	add    rsp,0x30
ffffffff80017324:	5d                   	pop    rbp
ffffffff80017325:	c3                   	ret
ffffffff80017326:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8001732d:	00 00 00 

ffffffff80017330 <fmt.formatValue__anon_3554>:
) !void {
ffffffff80017330:	55                   	push   rbp
ffffffff80017331:	48 89 e5             	mov    rbp,rsp
ffffffff80017334:	48 83 ec 10          	sub    rsp,0x10
ffffffff80017338:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff8001733c:	40 88 f0             	mov    al,sil
ffffffff8001733f:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
        .Int, .ComptimeInt => return formatIntValue(value, fmt, options, writer),
ffffffff80017342:	0f b6 f0             	movzx  esi,al
ffffffff80017345:	e8 36 00 00 00       	call   ffffffff80017380 <fmt.formatIntValue__anon_3555>
ffffffff8001734a:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8001734e:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff80017353:	75 0a                	jne    ffffffff8001735f <fmt.formatValue__anon_3554+0x2f>
ffffffff80017355:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff80017359:	48 83 c4 10          	add    rsp,0x10
ffffffff8001735d:	5d                   	pop    rbp
ffffffff8001735e:	c3                   	ret
ffffffff8001735f:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff80017363:	e8 a8 c0 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80017368:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff8001736c:	48 83 c4 10          	add    rsp,0x10
ffffffff80017370:	5d                   	pop    rbp
ffffffff80017371:	c3                   	ret
ffffffff80017372:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80017379:	00 00 00 
ffffffff8001737c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80017380 <fmt.formatIntValue__anon_3555>:
) !void {
ffffffff80017380:	55                   	push   rbp
ffffffff80017381:	48 89 e5             	mov    rbp,rsp
ffffffff80017384:	48 83 ec 10          	sub    rsp,0x10
ffffffff80017388:	49 89 c9             	mov    r9,rcx
ffffffff8001738b:	49 89 d0             	mov    r8,rdx
ffffffff8001738e:	48 89 7d f0          	mov    QWORD PTR [rbp-0x10],rdi
ffffffff80017392:	40 88 f0             	mov    al,sil
ffffffff80017395:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff80017398:	88 45 fd             	mov    BYTE PTR [rbp-0x3],al
    return formatInt(int_value, radix, case, options, writer);
ffffffff8001739b:	31 c9                	xor    ecx,ecx
ffffffff8001739d:	0f b6 f0             	movzx  esi,al
ffffffff800173a0:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff800173a5:	31 c9                	xor    ecx,ecx
ffffffff800173a7:	e8 34 00 00 00       	call   ffffffff800173e0 <fmt.formatInt__anon_3558>
ffffffff800173ac:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff800173b0:	66 83 7d fe 00       	cmp    WORD PTR [rbp-0x2],0x0
ffffffff800173b5:	75 0a                	jne    ffffffff800173c1 <fmt.formatIntValue__anon_3555+0x41>
ffffffff800173b7:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800173bb:	48 83 c4 10          	add    rsp,0x10
ffffffff800173bf:	5d                   	pop    rbp
ffffffff800173c0:	c3                   	ret
ffffffff800173c1:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
ffffffff800173c5:	e8 46 c0 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff800173ca:	66 8b 45 fe          	mov    ax,WORD PTR [rbp-0x2]
ffffffff800173ce:	48 83 c4 10          	add    rsp,0x10
ffffffff800173d2:	5d                   	pop    rbp
ffffffff800173d3:	c3                   	ret
ffffffff800173d4:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800173db:	00 00 00 
ffffffff800173de:	66 90                	xchg   ax,ax

ffffffff800173e0 <fmt.formatInt__anon_3558>:
) !void {
ffffffff800173e0:	55                   	push   rbp
ffffffff800173e1:	48 89 e5             	mov    rbp,rsp
ffffffff800173e4:	48 81 ec 70 01 00 00 	sub    rsp,0x170
ffffffff800173eb:	4c 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],r9
ffffffff800173f2:	4c 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],r8
ffffffff800173f9:	48 89 bd 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rdi
ffffffff80017400:	88 8d 4d ff ff ff    	mov    BYTE PTR [rbp-0xb3],cl
ffffffff80017406:	88 d0                	mov    al,dl
ffffffff80017408:	88 85 4f ff ff ff    	mov    BYTE PTR [rbp-0xb1],al
ffffffff8001740e:	40 88 f2             	mov    dl,sil
ffffffff80017411:	88 95 4e ff ff ff    	mov    BYTE PTR [rbp-0xb2],dl
ffffffff80017417:	88 95 50 ff ff ff    	mov    BYTE PTR [rbp-0xb0],dl
ffffffff8001741d:	88 85 51 ff ff ff    	mov    BYTE PTR [rbp-0xaf],al
ffffffff80017423:	80 e1 01             	and    cl,0x1
ffffffff80017426:	88 8d 52 ff ff ff    	mov    BYTE PTR [rbp-0xae],cl
    assert(base >= 2);
ffffffff8001742c:	3c 02                	cmp    al,0x2
ffffffff8001742e:	0f 93 c0             	setae  al
ffffffff80017431:	0f b6 f8             	movzx  edi,al
ffffffff80017434:	e8 f7 e7 fe ff       	call   ffffffff80005c30 <debug.assert>
ffffffff80017439:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [rbp-0xb2]
    const int_value = if (@TypeOf(value) == comptime_int) blk: {
ffffffff8001743f:	88 85 53 ff ff ff    	mov    BYTE PTR [rbp-0xad],al
    const min_int_bits = comptime math.max(value_info.bits, 8);
ffffffff80017445:	66 c7 85 54 ff ff ff 	mov    WORD PTR [rbp-0xac],0x8
ffffffff8001744c:	08 00 
    const abs_value = math.absCast(int_value);
ffffffff8001744e:	0f b6 f8             	movzx  edi,al
ffffffff80017451:	e8 6a 76 ff ff       	call   ffffffff8000eac0 <math.absCast__anon_3054>
ffffffff80017456:	88 c1                	mov    cl,al
ffffffff80017458:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
ffffffff8001745e:	88 8d 57 ff ff ff    	mov    BYTE PTR [rbp-0xa9],cl
ffffffff80017464:	48 ba aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaaa
ffffffff8001746b:	aa aa aa 
    var buf: [1 + math.max(value_info.bits, 1)]u8 = undefined;
ffffffff8001746e:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
ffffffff80017475:	c6 85 60 ff ff ff aa 	mov    BYTE PTR [rbp-0xa0],0xaa
    var a: MinInt = abs_value;
ffffffff8001747c:	88 8d 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],cl
    var index: usize = buf.len;
ffffffff80017482:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x9
ffffffff80017489:	09 00 00 00 
    if (base == 10 and !isComptime()) {
ffffffff8001748d:	3c 0a                	cmp    al,0xa
ffffffff8001748f:	75 0f                	jne    ffffffff800174a0 <fmt.formatInt__anon_3558+0xc0>
ffffffff80017491:	e8 fa fc fe ff       	call   ffffffff80007190 <fmt.isComptime>
ffffffff80017496:	34 ff                	xor    al,0xff
ffffffff80017498:	88 85 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],al
ffffffff8001749e:	eb 0a                	jmp    ffffffff800174aa <fmt.formatInt__anon_3558+0xca>
ffffffff800174a0:	31 c0                	xor    eax,eax
ffffffff800174a2:	88 85 2f ff ff ff    	mov    BYTE PTR [rbp-0xd1],al
ffffffff800174a8:	eb 00                	jmp    ffffffff800174aa <fmt.formatInt__anon_3558+0xca>
ffffffff800174aa:	8a 85 2f ff ff ff    	mov    al,BYTE PTR [rbp-0xd1]
ffffffff800174b0:	a8 01                	test   al,0x1
ffffffff800174b2:	75 02                	jne    ffffffff800174b6 <fmt.formatInt__anon_3558+0xd6>
ffffffff800174b4:	eb 02                	jmp    ffffffff800174b8 <fmt.formatInt__anon_3558+0xd8>
ffffffff800174b6:	eb 05                	jmp    ffffffff800174bd <fmt.formatInt__anon_3558+0xdd>
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff800174b8:	e9 c3 03 00 00       	jmp    ffffffff80017880 <fmt.formatInt__anon_3558+0x4a0>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff800174bd:	80 bd 67 ff ff ff 64 	cmp    BYTE PTR [rbp-0x99],0x64
ffffffff800174c4:	72 25                	jb     ffffffff800174eb <fmt.formatInt__anon_3558+0x10b>
            index -= 2;
ffffffff800174c6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800174cd:	48 83 e8 02          	sub    rax,0x2
ffffffff800174d1:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
ffffffff800174d8:	0f 92 85 78 ff ff ff 	setb   BYTE PTR [rbp-0x88]
ffffffff800174df:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [rbp-0x88]
ffffffff800174e5:	84 c0                	test   al,al
ffffffff800174e7:	74 07                	je     ffffffff800174f0 <fmt.formatInt__anon_3558+0x110>
ffffffff800174e9:	eb 07                	jmp    ffffffff800174f2 <fmt.formatInt__anon_3558+0x112>
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff800174eb:	e9 5e 01 00 00       	jmp    ffffffff8001764e <fmt.formatInt__anon_3558+0x26e>
            index -= 2;
ffffffff800174f0:	eb 1c                	jmp    ffffffff8001750e <fmt.formatInt__anon_3558+0x12e>
ffffffff800174f2:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800174f9:	48 c7 c1 18 c8 01 80 	mov    rcx,0xffffffff8001c818
ffffffff80017500:	31 c0                	xor    eax,eax
ffffffff80017502:	89 c2                	mov    edx,eax
ffffffff80017504:	be 10 00 00 00       	mov    esi,0x10
ffffffff80017509:	e8 a2 8c fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001750e:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
ffffffff80017515:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a % 100));
ffffffff8001751c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80017523:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
ffffffff8001752a:	48 8d 8d 58 ff ff ff 	lea    rcx,[rbp-0xa8]
ffffffff80017531:	48 01 c1             	add    rcx,rax
ffffffff80017534:	48 89 8d 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rcx
ffffffff8001753b:	48 83 f8 09          	cmp    rax,0x9
ffffffff8001753f:	77 02                	ja     ffffffff80017543 <fmt.formatInt__anon_3558+0x163>
ffffffff80017541:	eb 11                	jmp    ffffffff80017554 <fmt.formatInt__anon_3558+0x174>
ffffffff80017543:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff8001754a:	be 09 00 00 00       	mov    esi,0x9
ffffffff8001754f:	e8 bc 8d fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80017554:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
ffffffff8001755b:	b8 09 00 00 00       	mov    eax,0x9
ffffffff80017560:	48 29 c8             	sub    rax,rcx
ffffffff80017563:	48 89 85 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rax
ffffffff8001756a:	b0 01                	mov    al,0x1
ffffffff8001756c:	a8 01                	test   al,0x1
ffffffff8001756e:	75 02                	jne    ffffffff80017572 <fmt.formatInt__anon_3558+0x192>
ffffffff80017570:	eb 02                	jmp    ffffffff80017574 <fmt.formatInt__anon_3558+0x194>
ffffffff80017572:	eb 0d                	jmp    ffffffff80017581 <fmt.formatInt__anon_3558+0x1a1>
ffffffff80017574:	be 09 00 00 00       	mov    esi,0x9
ffffffff80017579:	48 89 f7             	mov    rdi,rsi
ffffffff8001757c:	e8 4f 8c fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80017581:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
ffffffff80017588:	48 83 f8 09          	cmp    rax,0x9
ffffffff8001758c:	77 02                	ja     ffffffff80017590 <fmt.formatInt__anon_3558+0x1b0>
ffffffff8001758e:	eb 11                	jmp    ffffffff800175a1 <fmt.formatInt__anon_3558+0x1c1>
ffffffff80017590:	48 8b bd 18 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xe8]
ffffffff80017597:	be 09 00 00 00       	mov    esi,0x9
ffffffff8001759c:	e8 2f 8c fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800175a1:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff800175a8:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
ffffffff800175af:	48 89 4d 88          	mov    QWORD PTR [rbp-0x78],rcx
ffffffff800175b3:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
ffffffff800175b7:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff800175bb:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
ffffffff800175c2:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff800175c6:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
ffffffff800175cd:	b0 01                	mov    al,0x1
ffffffff800175cf:	a8 01                	test   al,0x1
ffffffff800175d1:	75 02                	jne    ffffffff800175d5 <fmt.formatInt__anon_3558+0x1f5>
ffffffff800175d3:	eb 02                	jmp    ffffffff800175d7 <fmt.formatInt__anon_3558+0x1f7>
ffffffff800175d5:	eb 10                	jmp    ffffffff800175e7 <fmt.formatInt__anon_3558+0x207>
ffffffff800175d7:	31 c0                	xor    eax,eax
ffffffff800175d9:	31 c0                	xor    eax,eax
ffffffff800175db:	89 c7                	mov    edi,eax
ffffffff800175dd:	be 02 00 00 00       	mov    esi,0x2
ffffffff800175e2:	e8 29 8d fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800175e7:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
ffffffff800175ee:	b8 02 00 00 00       	mov    eax,0x2
ffffffff800175f3:	48 39 c8             	cmp    rax,rcx
ffffffff800175f6:	77 02                	ja     ffffffff800175fa <fmt.formatInt__anon_3558+0x21a>
ffffffff800175f8:	eb 11                	jmp    ffffffff8001760b <fmt.formatInt__anon_3558+0x22b>
ffffffff800175fa:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
ffffffff80017601:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80017606:	e8 c5 8b fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001760b:	b1 64                	mov    cl,0x64
ffffffff8001760d:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80017614:	ff 
ffffffff80017615:	f6 f1                	div    cl
ffffffff80017617:	66 c1 e8 08          	shr    ax,0x8
ffffffff8001761b:	0f b6 c0             	movzx  eax,al
ffffffff8001761e:	89 c6                	mov    esi,eax
ffffffff80017620:	48 8d 7d 96          	lea    rdi,[rbp-0x6a]
ffffffff80017624:	e8 87 fb fe ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff80017629:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
ffffffff80017630:	66 8b 4d 96          	mov    cx,WORD PTR [rbp-0x6a]
ffffffff80017634:	66 89 08             	mov    WORD PTR [rax],cx
        while (a >= 100) : (a = @divTrunc(a, 100)) {
ffffffff80017637:	b1 64                	mov    cl,0x64
ffffffff80017639:	66 0f b6 85 67 ff ff 	movzx  ax,BYTE PTR [rbp-0x99]
ffffffff80017640:	ff 
ffffffff80017641:	f6 f1                	div    cl
ffffffff80017643:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
ffffffff80017649:	e9 6f fe ff ff       	jmp    ffffffff800174bd <fmt.formatInt__anon_3558+0xdd>
        if (a < 10) {
ffffffff8001764e:	80 bd 67 ff ff ff 0a 	cmp    BYTE PTR [rbp-0x99],0xa
ffffffff80017655:	73 1c                	jae    ffffffff80017673 <fmt.formatInt__anon_3558+0x293>
            index -= 1;
ffffffff80017657:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001765e:	48 83 e8 01          	sub    rax,0x1
ffffffff80017662:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
ffffffff80017666:	0f 92 45 a0          	setb   BYTE PTR [rbp-0x60]
ffffffff8001766a:	8a 45 a0             	mov    al,BYTE PTR [rbp-0x60]
ffffffff8001766d:	84 c0                	test   al,al
ffffffff8001766f:	74 25                	je     ffffffff80017696 <fmt.formatInt__anon_3558+0x2b6>
ffffffff80017671:	eb 25                	jmp    ffffffff80017698 <fmt.formatInt__anon_3558+0x2b8>
            index -= 2;
ffffffff80017673:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001767a:	48 83 e8 02          	sub    rax,0x2
ffffffff8001767e:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80017682:	0f 92 45 b8          	setb   BYTE PTR [rbp-0x48]
ffffffff80017686:	8a 45 b8             	mov    al,BYTE PTR [rbp-0x48]
ffffffff80017689:	84 c0                	test   al,al
ffffffff8001768b:	0f 84 b2 00 00 00    	je     ffffffff80017743 <fmt.formatInt__anon_3558+0x363>
ffffffff80017691:	e9 af 00 00 00       	jmp    ffffffff80017745 <fmt.formatInt__anon_3558+0x365>
            index -= 1;
ffffffff80017696:	eb 1c                	jmp    ffffffff800176b4 <fmt.formatInt__anon_3558+0x2d4>
ffffffff80017698:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001769f:	48 c7 c1 28 c8 01 80 	mov    rcx,0xffffffff8001c828
ffffffff800176a6:	31 c0                	xor    eax,eax
ffffffff800176a8:	89 c2                	mov    edx,eax
ffffffff800176aa:	be 10 00 00 00       	mov    esi,0x10
ffffffff800176af:	e8 fc 8a fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800176b4:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff800176b8:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = '0' + @intCast(u8, a);
ffffffff800176bf:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800176c6:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
ffffffff800176cd:	48 83 f8 09          	cmp    rax,0x9
ffffffff800176d1:	73 02                	jae    ffffffff800176d5 <fmt.formatInt__anon_3558+0x2f5>
ffffffff800176d3:	eb 11                	jmp    ffffffff800176e6 <fmt.formatInt__anon_3558+0x306>
ffffffff800176d5:	48 8b bd f8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x108]
ffffffff800176dc:	be 09 00 00 00       	mov    esi,0x9
ffffffff800176e1:	e8 ea 8a fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800176e6:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
ffffffff800176ed:	48 8d 84 05 58 ff ff 	lea    rax,[rbp+rax*1-0xa8]
ffffffff800176f4:	ff 
ffffffff800176f5:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
ffffffff800176fc:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [rbp-0x99]
ffffffff80017702:	04 30                	add    al,0x30
ffffffff80017704:	88 45 a8             	mov    BYTE PTR [rbp-0x58],al
ffffffff80017707:	0f 92 45 a9          	setb   BYTE PTR [rbp-0x57]
ffffffff8001770b:	8a 45 a9             	mov    al,BYTE PTR [rbp-0x57]
ffffffff8001770e:	84 c0                	test   al,al
ffffffff80017710:	75 04                	jne    ffffffff80017716 <fmt.formatInt__anon_3558+0x336>
ffffffff80017712:	eb 00                	jmp    ffffffff80017714 <fmt.formatInt__anon_3558+0x334>
ffffffff80017714:	eb 1c                	jmp    ffffffff80017732 <fmt.formatInt__anon_3558+0x352>
ffffffff80017716:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001771d:	48 c7 c1 38 c8 01 80 	mov    rcx,0xffffffff8001c838
ffffffff80017724:	31 c0                	xor    eax,eax
ffffffff80017726:	89 c2                	mov    edx,eax
ffffffff80017728:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001772d:	e8 7e 8a fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80017732:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
ffffffff80017739:	8a 4d a8             	mov    cl,BYTE PTR [rbp-0x58]
ffffffff8001773c:	88 08                	mov    BYTE PTR [rax],cl
ffffffff8001773e:	e9 38 01 00 00       	jmp    ffffffff8001787b <fmt.formatInt__anon_3558+0x49b>
            index -= 2;
ffffffff80017743:	eb 1c                	jmp    ffffffff80017761 <fmt.formatInt__anon_3558+0x381>
ffffffff80017745:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff8001774c:	48 c7 c1 48 c8 01 80 	mov    rcx,0xffffffff8001c848
ffffffff80017753:	31 c0                	xor    eax,eax
ffffffff80017755:	89 c2                	mov    edx,eax
ffffffff80017757:	be 10 00 00 00       	mov    esi,0x10
ffffffff8001775c:	e8 4f 8a fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80017761:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80017765:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index..][0..2].* = digits2(@intCast(usize, a));
ffffffff8001776c:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff80017773:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
ffffffff8001777a:	48 8d 8d 58 ff ff ff 	lea    rcx,[rbp-0xa8]
ffffffff80017781:	48 01 c1             	add    rcx,rax
ffffffff80017784:	48 89 8d e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rcx
ffffffff8001778b:	48 83 f8 09          	cmp    rax,0x9
ffffffff8001778f:	77 02                	ja     ffffffff80017793 <fmt.formatInt__anon_3558+0x3b3>
ffffffff80017791:	eb 11                	jmp    ffffffff800177a4 <fmt.formatInt__anon_3558+0x3c4>
ffffffff80017793:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
ffffffff8001779a:	be 09 00 00 00       	mov    esi,0x9
ffffffff8001779f:	e8 6c 8b fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800177a4:	48 8b 8d e0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x120]
ffffffff800177ab:	b8 09 00 00 00       	mov    eax,0x9
ffffffff800177b0:	48 29 c8             	sub    rax,rcx
ffffffff800177b3:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
ffffffff800177ba:	b0 01                	mov    al,0x1
ffffffff800177bc:	a8 01                	test   al,0x1
ffffffff800177be:	75 02                	jne    ffffffff800177c2 <fmt.formatInt__anon_3558+0x3e2>
ffffffff800177c0:	eb 02                	jmp    ffffffff800177c4 <fmt.formatInt__anon_3558+0x3e4>
ffffffff800177c2:	eb 0d                	jmp    ffffffff800177d1 <fmt.formatInt__anon_3558+0x3f1>
ffffffff800177c4:	be 09 00 00 00       	mov    esi,0x9
ffffffff800177c9:	48 89 f7             	mov    rdi,rsi
ffffffff800177cc:	e8 ff 89 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800177d1:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
ffffffff800177d8:	48 83 f8 09          	cmp    rax,0x9
ffffffff800177dc:	77 02                	ja     ffffffff800177e0 <fmt.formatInt__anon_3558+0x400>
ffffffff800177de:	eb 11                	jmp    ffffffff800177f1 <fmt.formatInt__anon_3558+0x411>
ffffffff800177e0:	48 8b bd e0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x120]
ffffffff800177e7:	be 09 00 00 00       	mov    esi,0x9
ffffffff800177ec:	e8 df 89 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff800177f1:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
ffffffff800177f8:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
ffffffff800177ff:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80017803:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80017807:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8001780b:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
ffffffff80017812:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80017816:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
ffffffff8001781d:	b0 01                	mov    al,0x1
ffffffff8001781f:	a8 01                	test   al,0x1
ffffffff80017821:	75 02                	jne    ffffffff80017825 <fmt.formatInt__anon_3558+0x445>
ffffffff80017823:	eb 02                	jmp    ffffffff80017827 <fmt.formatInt__anon_3558+0x447>
ffffffff80017825:	eb 10                	jmp    ffffffff80017837 <fmt.formatInt__anon_3558+0x457>
ffffffff80017827:	31 c0                	xor    eax,eax
ffffffff80017829:	31 c0                	xor    eax,eax
ffffffff8001782b:	89 c7                	mov    edi,eax
ffffffff8001782d:	be 02 00 00 00       	mov    esi,0x2
ffffffff80017832:	e8 d9 8a fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff80017837:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
ffffffff8001783e:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80017843:	48 39 c8             	cmp    rax,rcx
ffffffff80017846:	77 02                	ja     ffffffff8001784a <fmt.formatInt__anon_3558+0x46a>
ffffffff80017848:	eb 11                	jmp    ffffffff8001785b <fmt.formatInt__anon_3558+0x47b>
ffffffff8001784a:	48 8b b5 d0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x130]
ffffffff80017851:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80017856:	e8 75 89 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001785b:	0f b6 85 67 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x99]
ffffffff80017862:	89 c6                	mov    esi,eax
ffffffff80017864:	48 8d 7d d5          	lea    rdi,[rbp-0x2b]
ffffffff80017868:	e8 43 f9 fe ff       	call   ffffffff800071b0 <fmt.digits2>
ffffffff8001786d:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
ffffffff80017874:	66 8b 4d d5          	mov    cx,WORD PTR [rbp-0x2b]
ffffffff80017878:	66 89 08             	mov    WORD PTR [rax],cx
ffffffff8001787b:	e9 45 01 00 00       	jmp    ffffffff800179c5 <fmt.formatInt__anon_3558+0x5e5>
ffffffff80017880:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
            const digit = a % base;
ffffffff80017886:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff8001788c:	88 8d c7 fe ff ff    	mov    BYTE PTR [rbp-0x139],cl
ffffffff80017892:	3c 00                	cmp    al,0x0
ffffffff80017894:	74 02                	je     ffffffff80017898 <fmt.formatInt__anon_3558+0x4b8>
ffffffff80017896:	eb 1c                	jmp    ffffffff800178b4 <fmt.formatInt__anon_3558+0x4d4>
ffffffff80017898:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff8001789f:	48 c7 c1 58 c8 01 80 	mov    rcx,0xffffffff8001c858
ffffffff800178a6:	31 c0                	xor    eax,eax
ffffffff800178a8:	89 c2                	mov    edx,eax
ffffffff800178aa:	be 10 00 00 00       	mov    esi,0x10
ffffffff800178af:	e8 fc 88 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff800178b4:	8a 8d 4f ff ff ff    	mov    cl,BYTE PTR [rbp-0xb1]
ffffffff800178ba:	8a 85 c7 fe ff ff    	mov    al,BYTE PTR [rbp-0x139]
ffffffff800178c0:	66 0f b6 c0          	movzx  ax,al
ffffffff800178c4:	f6 f1                	div    cl
ffffffff800178c6:	0f b6 c4             	movzx  eax,ah
ffffffff800178c9:	88 85 c6 fe ff ff    	mov    BYTE PTR [rbp-0x13a],al
ffffffff800178cf:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
            index -= 1;
ffffffff800178d2:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800178d9:	48 83 e8 01          	sub    rax,0x1
ffffffff800178dd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800178e1:	0f 92 45 e0          	setb   BYTE PTR [rbp-0x20]
ffffffff800178e5:	8a 45 e0             	mov    al,BYTE PTR [rbp-0x20]
ffffffff800178e8:	84 c0                	test   al,al
ffffffff800178ea:	75 04                	jne    ffffffff800178f0 <fmt.formatInt__anon_3558+0x510>
ffffffff800178ec:	eb 00                	jmp    ffffffff800178ee <fmt.formatInt__anon_3558+0x50e>
ffffffff800178ee:	eb 1c                	jmp    ffffffff8001790c <fmt.formatInt__anon_3558+0x52c>
ffffffff800178f0:	48 c7 c7 09 b3 01 80 	mov    rdi,0xffffffff8001b309
ffffffff800178f7:	48 c7 c1 68 c8 01 80 	mov    rcx,0xffffffff8001c868
ffffffff800178fe:	31 c0                	xor    eax,eax
ffffffff80017900:	89 c2                	mov    edx,eax
ffffffff80017902:	be 10 00 00 00       	mov    esi,0x10
ffffffff80017907:	e8 a4 88 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff8001790c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80017910:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
            buf[index] = digitToChar(@intCast(u8, digit), case);
ffffffff80017917:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff8001791e:	48 89 85 b8 fe ff ff 	mov    QWORD PTR [rbp-0x148],rax
ffffffff80017925:	48 83 f8 09          	cmp    rax,0x9
ffffffff80017929:	73 02                	jae    ffffffff8001792d <fmt.formatInt__anon_3558+0x54d>
ffffffff8001792b:	eb 11                	jmp    ffffffff8001793e <fmt.formatInt__anon_3558+0x55e>
ffffffff8001792d:	48 8b bd b8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x148]
ffffffff80017934:	be 09 00 00 00       	mov    esi,0x9
ffffffff80017939:	e8 92 88 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff8001793e:	8a 85 4d ff ff ff    	mov    al,BYTE PTR [rbp-0xb3]
ffffffff80017944:	8a 8d c6 fe ff ff    	mov    cl,BYTE PTR [rbp-0x13a]
ffffffff8001794a:	0f b6 f9             	movzx  edi,cl
ffffffff8001794d:	0f b6 f0             	movzx  esi,al
ffffffff80017950:	e8 cb f9 fe ff       	call   ffffffff80007320 <fmt.digitToChar>
ffffffff80017955:	48 8b 8d b8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x148]
ffffffff8001795c:	88 c2                	mov    dl,al
ffffffff8001795e:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [rbp-0xb1]
ffffffff80017964:	88 94 0d 58 ff ff ff 	mov    BYTE PTR [rbp+rcx*1-0xa8],dl
            a /= base;
ffffffff8001796b:	8a 8d 67 ff ff ff    	mov    cl,BYTE PTR [rbp-0x99]
ffffffff80017971:	88 8d b7 fe ff ff    	mov    BYTE PTR [rbp-0x149],cl
ffffffff80017977:	3c 00                	cmp    al,0x0
ffffffff80017979:	74 02                	je     ffffffff8001797d <fmt.formatInt__anon_3558+0x59d>
ffffffff8001797b:	eb 1c                	jmp    ffffffff80017999 <fmt.formatInt__anon_3558+0x5b9>
ffffffff8001797d:	48 c7 c7 9e b3 01 80 	mov    rdi,0xffffffff8001b39e
ffffffff80017984:	48 c7 c1 78 c8 01 80 	mov    rcx,0xffffffff8001c878
ffffffff8001798b:	31 c0                	xor    eax,eax
ffffffff8001798d:	89 c2                	mov    edx,eax
ffffffff8001798f:	be 10 00 00 00       	mov    esi,0x10
ffffffff80017994:	e8 17 88 fe ff       	call   ffffffff800001b0 <builtin.default_panic>
ffffffff80017999:	8a 8d 4f ff ff ff    	mov    cl,BYTE PTR [rbp-0xb1]
ffffffff8001799f:	8a 85 b7 fe ff ff    	mov    al,BYTE PTR [rbp-0x149]
ffffffff800179a5:	66 0f b6 c0          	movzx  ax,al
ffffffff800179a9:	f6 f1                	div    cl
ffffffff800179ab:	88 85 67 ff ff ff    	mov    BYTE PTR [rbp-0x99],al
            if (a == 0) break;
ffffffff800179b1:	80 bd 67 ff ff ff 00 	cmp    BYTE PTR [rbp-0x99],0x0
ffffffff800179b8:	75 02                	jne    ffffffff800179bc <fmt.formatInt__anon_3558+0x5dc>
ffffffff800179ba:	eb 07                	jmp    ffffffff800179c3 <fmt.formatInt__anon_3558+0x5e3>
ffffffff800179bc:	eb 00                	jmp    ffffffff800179be <fmt.formatInt__anon_3558+0x5de>
ffffffff800179be:	e9 bd fe ff ff       	jmp    ffffffff80017880 <fmt.formatInt__anon_3558+0x4a0>
ffffffff800179c3:	eb 00                	jmp    ffffffff800179c5 <fmt.formatInt__anon_3558+0x5e5>
    return formatBuf(buf[index..], options, writer);
ffffffff800179c5:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
ffffffff800179cc:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
ffffffff800179d3:	48 8d 8d 58 ff ff ff 	lea    rcx,[rbp-0xa8]
ffffffff800179da:	48 01 c1             	add    rcx,rax
ffffffff800179dd:	48 89 8d a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rcx
ffffffff800179e4:	48 83 f8 09          	cmp    rax,0x9
ffffffff800179e8:	77 02                	ja     ffffffff800179ec <fmt.formatInt__anon_3558+0x60c>
ffffffff800179ea:	eb 11                	jmp    ffffffff800179fd <fmt.formatInt__anon_3558+0x61d>
ffffffff800179ec:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff800179f3:	be 09 00 00 00       	mov    esi,0x9
ffffffff800179f8:	e8 13 89 fe ff       	call   ffffffff80000310 <builtin.panicStartGreaterThanEnd>
ffffffff800179fd:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
ffffffff80017a04:	b8 09 00 00 00       	mov    eax,0x9
ffffffff80017a09:	48 29 c8             	sub    rax,rcx
ffffffff80017a0c:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
ffffffff80017a13:	b0 01                	mov    al,0x1
ffffffff80017a15:	a8 01                	test   al,0x1
ffffffff80017a17:	75 02                	jne    ffffffff80017a1b <fmt.formatInt__anon_3558+0x63b>
ffffffff80017a19:	eb 02                	jmp    ffffffff80017a1d <fmt.formatInt__anon_3558+0x63d>
ffffffff80017a1b:	eb 0d                	jmp    ffffffff80017a2a <fmt.formatInt__anon_3558+0x64a>
ffffffff80017a1d:	be 09 00 00 00       	mov    esi,0x9
ffffffff80017a22:	48 89 f7             	mov    rdi,rsi
ffffffff80017a25:	e8 a6 87 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80017a2a:	48 8b 85 a0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x160]
ffffffff80017a31:	48 83 f8 09          	cmp    rax,0x9
ffffffff80017a35:	77 02                	ja     ffffffff80017a39 <fmt.formatInt__anon_3558+0x659>
ffffffff80017a37:	eb 11                	jmp    ffffffff80017a4a <fmt.formatInt__anon_3558+0x66a>
ffffffff80017a39:	48 8b bd a0 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x160]
ffffffff80017a40:	be 09 00 00 00       	mov    esi,0x9
ffffffff80017a45:	e8 86 87 fe ff       	call   ffffffff800001d0 <builtin.panicOutOfBounds>
ffffffff80017a4a:	4c 8b 85 30 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd0]
ffffffff80017a51:	48 8b 8d 38 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xc8]
ffffffff80017a58:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
ffffffff80017a5f:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
ffffffff80017a66:	48 8b 95 98 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x168]
ffffffff80017a6d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80017a71:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80017a75:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
ffffffff80017a79:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80017a7d:	e8 1e c7 ff ff       	call   ffffffff800141a0 <fmt.formatBuf__anon_3450>
ffffffff80017a82:	66 89 45 ee          	mov    WORD PTR [rbp-0x12],ax
ffffffff80017a86:	66 83 7d ee 00       	cmp    WORD PTR [rbp-0x12],0x0
ffffffff80017a8b:	75 0d                	jne    ffffffff80017a9a <fmt.formatInt__anon_3558+0x6ba>
ffffffff80017a8d:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80017a91:	48 81 c4 70 01 00 00 	add    rsp,0x170
ffffffff80017a98:	5d                   	pop    rbp
ffffffff80017a99:	c3                   	ret
ffffffff80017a9a:	48 8b bd 40 ff ff ff 	mov    rdi,QWORD PTR [rbp-0xc0]
ffffffff80017aa1:	e8 6a b9 fe ff       	call   ffffffff80003410 <builtin.returnError>
ffffffff80017aa6:	66 8b 45 ee          	mov    ax,WORD PTR [rbp-0x12]
ffffffff80017aaa:	48 81 c4 70 01 00 00 	add    rsp,0x170
ffffffff80017ab1:	5d                   	pop    rbp
ffffffff80017ab2:	c3                   	ret
ffffffff80017ab3:	cc                   	int3
ffffffff80017ab4:	cc                   	int3
ffffffff80017ab5:	cc                   	int3
ffffffff80017ab6:	cc                   	int3
ffffffff80017ab7:	cc                   	int3
ffffffff80017ab8:	cc                   	int3
ffffffff80017ab9:	cc                   	int3
ffffffff80017aba:	cc                   	int3
ffffffff80017abb:	cc                   	int3
ffffffff80017abc:	cc                   	int3
ffffffff80017abd:	cc                   	int3
ffffffff80017abe:	cc                   	int3
ffffffff80017abf:	cc                   	int3

ffffffff80017ac0 <compiler_rt.udivmod.udivmod__anon_3414>:
ffffffff80017ac0:	55                   	push   rbp
ffffffff80017ac1:	48 89 e5             	mov    rbp,rsp
ffffffff80017ac4:	41 57                	push   r15
ffffffff80017ac6:	41 56                	push   r14
ffffffff80017ac8:	53                   	push   rbx
ffffffff80017ac9:	49 89 ca             	mov    r10,rcx
ffffffff80017acc:	49 89 d1             	mov    r9,rdx
ffffffff80017acf:	48 89 f8             	mov    rax,rdi
ffffffff80017ad2:	48 85 f6             	test   rsi,rsi
ffffffff80017ad5:	74 38                	je     ffffffff80017b0f <compiler_rt.udivmod.udivmod__anon_3414+0x4f>
ffffffff80017ad7:	48 89 f2             	mov    rdx,rsi
ffffffff80017ada:	4d 85 c9             	test   r9,r9
ffffffff80017add:	74 54                	je     ffffffff80017b33 <compiler_rt.udivmod.udivmod__anon_3414+0x73>
ffffffff80017adf:	4d 85 d2             	test   r10,r10
ffffffff80017ae2:	0f 84 85 00 00 00    	je     ffffffff80017b6d <compiler_rt.udivmod.udivmod__anon_3414+0xad>
ffffffff80017ae8:	49 0f bd f2          	bsr    rsi,r10
ffffffff80017aec:	83 f6 3f             	xor    esi,0x3f
ffffffff80017aef:	48 0f bd ca          	bsr    rcx,rdx
ffffffff80017af3:	83 f1 3f             	xor    ecx,0x3f
ffffffff80017af6:	29 ce                	sub    esi,ecx
ffffffff80017af8:	83 fe 3f             	cmp    esi,0x3f
ffffffff80017afb:	0f 86 d6 00 00 00    	jbe    ffffffff80017bd7 <compiler_rt.udivmod.udivmod__anon_3414+0x117>
ffffffff80017b01:	4d 85 c0             	test   r8,r8
ffffffff80017b04:	74 22                	je     ffffffff80017b28 <compiler_rt.udivmod.udivmod__anon_3414+0x68>
ffffffff80017b06:	49 89 00             	mov    QWORD PTR [r8],rax
ffffffff80017b09:	49 89 50 08          	mov    QWORD PTR [r8+0x8],rdx
ffffffff80017b0d:	eb 19                	jmp    ffffffff80017b28 <compiler_rt.udivmod.udivmod__anon_3414+0x68>
ffffffff80017b0f:	4d 85 d2             	test   r10,r10
ffffffff80017b12:	0f 84 9c 00 00 00    	je     ffffffff80017bb4 <compiler_rt.udivmod.udivmod__anon_3414+0xf4>
ffffffff80017b18:	4d 85 c0             	test   r8,r8
ffffffff80017b1b:	74 0b                	je     ffffffff80017b28 <compiler_rt.udivmod.udivmod__anon_3414+0x68>
ffffffff80017b1d:	49 89 00             	mov    QWORD PTR [r8],rax
ffffffff80017b20:	49 c7 40 08 00 00 00 	mov    QWORD PTR [r8+0x8],0x0
ffffffff80017b27:	00 
ffffffff80017b28:	31 c0                	xor    eax,eax
ffffffff80017b2a:	31 d2                	xor    edx,edx
ffffffff80017b2c:	5b                   	pop    rbx
ffffffff80017b2d:	41 5e                	pop    r14
ffffffff80017b2f:	41 5f                	pop    r15
ffffffff80017b31:	5d                   	pop    rbp
ffffffff80017b32:	c3                   	ret
ffffffff80017b33:	4d 85 d2             	test   r10,r10
ffffffff80017b36:	0f 84 ce 00 00 00    	je     ffffffff80017c0a <compiler_rt.udivmod.udivmod__anon_3414+0x14a>
ffffffff80017b3c:	48 85 c0             	test   rax,rax
ffffffff80017b3f:	0f 84 70 01 00 00    	je     ffffffff80017cb5 <compiler_rt.udivmod.udivmod__anon_3414+0x1f5>
ffffffff80017b45:	49 8d 4a ff          	lea    rcx,[r10-0x1]
ffffffff80017b49:	49 85 ca             	test   r10,rcx
ffffffff80017b4c:	0f 85 a7 01 00 00    	jne    ffffffff80017cf9 <compiler_rt.udivmod.udivmod__anon_3414+0x239>
ffffffff80017b52:	4d 85 c0             	test   r8,r8
ffffffff80017b55:	74 0a                	je     ffffffff80017b61 <compiler_rt.udivmod.udivmod__anon_3414+0xa1>
ffffffff80017b57:	48 21 d1             	and    rcx,rdx
ffffffff80017b5a:	49 89 00             	mov    QWORD PTR [r8],rax
ffffffff80017b5d:	49 89 48 08          	mov    QWORD PTR [r8+0x8],rcx
ffffffff80017b61:	49 0f bc ca          	bsf    rcx,r10
ffffffff80017b65:	48 d3 ea             	shr    rdx,cl
ffffffff80017b68:	48 89 d0             	mov    rax,rdx
ffffffff80017b6b:	eb bd                	jmp    ffffffff80017b2a <compiler_rt.udivmod.udivmod__anon_3414+0x6a>
ffffffff80017b6d:	49 8d 49 ff          	lea    rcx,[r9-0x1]
ffffffff80017b71:	49 85 c9             	test   r9,rcx
ffffffff80017b74:	0f 85 95 00 00 00    	jne    ffffffff80017c0f <compiler_rt.udivmod.udivmod__anon_3414+0x14f>
ffffffff80017b7a:	4d 85 c0             	test   r8,r8
ffffffff80017b7d:	74 0e                	je     ffffffff80017b8d <compiler_rt.udivmod.udivmod__anon_3414+0xcd>
ffffffff80017b7f:	48 21 c1             	and    rcx,rax
ffffffff80017b82:	49 89 08             	mov    QWORD PTR [r8],rcx
ffffffff80017b85:	49 c7 40 08 00 00 00 	mov    QWORD PTR [r8+0x8],0x0
ffffffff80017b8c:	00 
ffffffff80017b8d:	49 83 f9 01          	cmp    r9,0x1
ffffffff80017b91:	74 99                	je     ffffffff80017b2c <compiler_rt.udivmod.udivmod__anon_3414+0x6c>
ffffffff80017b93:	49 0f bc f1          	bsf    rsi,r9
ffffffff80017b97:	48 89 d7             	mov    rdi,rdx
ffffffff80017b9a:	89 f1                	mov    ecx,esi
ffffffff80017b9c:	48 d3 ef             	shr    rdi,cl
ffffffff80017b9f:	f6 d9                	neg    cl
ffffffff80017ba1:	48 d3 e2             	shl    rdx,cl
ffffffff80017ba4:	89 f1                	mov    ecx,esi
ffffffff80017ba6:	48 d3 e8             	shr    rax,cl
ffffffff80017ba9:	48 09 d0             	or     rax,rdx
ffffffff80017bac:	48 89 fa             	mov    rdx,rdi
ffffffff80017baf:	e9 78 ff ff ff       	jmp    ffffffff80017b2c <compiler_rt.udivmod.udivmod__anon_3414+0x6c>
ffffffff80017bb4:	48 89 c1             	mov    rcx,rax
ffffffff80017bb7:	4c 09 c9             	or     rcx,r9
ffffffff80017bba:	48 c1 e9 20          	shr    rcx,0x20
ffffffff80017bbe:	0f 84 17 01 00 00    	je     ffffffff80017cdb <compiler_rt.udivmod.udivmod__anon_3414+0x21b>
ffffffff80017bc4:	31 d2                	xor    edx,edx
ffffffff80017bc6:	49 f7 f1             	div    r9
ffffffff80017bc9:	4d 85 c0             	test   r8,r8
ffffffff80017bcc:	0f 85 17 01 00 00    	jne    ffffffff80017ce9 <compiler_rt.udivmod.udivmod__anon_3414+0x229>
ffffffff80017bd2:	e9 53 ff ff ff       	jmp    ffffffff80017b2a <compiler_rt.udivmod.udivmod__anon_3414+0x6a>
ffffffff80017bd7:	44 8d 76 01          	lea    r14d,[rsi+0x1]
ffffffff80017bdb:	41 83 fe 40          	cmp    r14d,0x40
ffffffff80017bdf:	74 4e                	je     ffffffff80017c2f <compiler_rt.udivmod.udivmod__anon_3414+0x16f>
ffffffff80017be1:	49 89 d7             	mov    r15,rdx
ffffffff80017be4:	44 89 f1             	mov    ecx,r14d
ffffffff80017be7:	49 d3 ef             	shr    r15,cl
ffffffff80017bea:	41 b3 3f             	mov    r11b,0x3f
ffffffff80017bed:	41 28 f3             	sub    r11b,sil
ffffffff80017bf0:	44 89 d9             	mov    ecx,r11d
ffffffff80017bf3:	48 d3 e2             	shl    rdx,cl
ffffffff80017bf6:	48 89 c6             	mov    rsi,rax
ffffffff80017bf9:	44 89 f1             	mov    ecx,r14d
ffffffff80017bfc:	48 d3 ee             	shr    rsi,cl
ffffffff80017bff:	48 09 f2             	or     rdx,rsi
ffffffff80017c02:	44 89 d9             	mov    ecx,r11d
ffffffff80017c05:	48 d3 e0             	shl    rax,cl
ffffffff80017c08:	eb 2e                	jmp    ffffffff80017c38 <compiler_rt.udivmod.udivmod__anon_3414+0x178>
ffffffff80017c0a:	e9 1d ff ff ff       	jmp    ffffffff80017b2c <compiler_rt.udivmod.udivmod__anon_3414+0x6c>
ffffffff80017c0f:	4d 0f bd f1          	bsr    r14,r9
ffffffff80017c13:	41 83 f6 3f          	xor    r14d,0x3f
ffffffff80017c17:	48 0f bd ca          	bsr    rcx,rdx
ffffffff80017c1b:	83 f1 3f             	xor    ecx,0x3f
ffffffff80017c1e:	41 29 ce             	sub    r14d,ecx
ffffffff80017c21:	41 83 c6 41          	add    r14d,0x41
ffffffff80017c25:	41 83 fe 40          	cmp    r14d,0x40
ffffffff80017c29:	0f 85 0f 01 00 00    	jne    ffffffff80017d3e <compiler_rt.udivmod.udivmod__anon_3414+0x27e>
ffffffff80017c2f:	41 be 40 00 00 00    	mov    r14d,0x40
ffffffff80017c35:	45 31 ff             	xor    r15d,r15d
ffffffff80017c38:	31 c9                	xor    ecx,ecx
ffffffff80017c3a:	48 89 d7             	mov    rdi,rdx
ffffffff80017c3d:	31 db                	xor    ebx,ebx
ffffffff80017c3f:	48 89 c2             	mov    rdx,rax
ffffffff80017c42:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80017c49:	00 00 00 
ffffffff80017c4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80017c50:	49 0f a4 ff 01       	shld   r15,rdi,0x1
ffffffff80017c55:	48 0f a4 d7 01       	shld   rdi,rdx,0x1
ffffffff80017c5a:	48 0f a4 ca 01       	shld   rdx,rcx,0x1
ffffffff80017c5f:	48 01 c9             	add    rcx,rcx
ffffffff80017c62:	48 09 d9             	or     rcx,rbx
ffffffff80017c65:	4c 89 f8             	mov    rax,r15
ffffffff80017c68:	48 f7 d0             	not    rax
ffffffff80017c6b:	48 89 fe             	mov    rsi,rdi
ffffffff80017c6e:	48 f7 d6             	not    rsi
ffffffff80017c71:	4c 01 ce             	add    rsi,r9
ffffffff80017c74:	4c 11 d0             	adc    rax,r10
ffffffff80017c77:	48 89 c3             	mov    rbx,rax
ffffffff80017c7a:	48 c1 eb 3f          	shr    rbx,0x3f
ffffffff80017c7e:	48 c1 f8 3f          	sar    rax,0x3f
ffffffff80017c82:	48 89 c6             	mov    rsi,rax
ffffffff80017c85:	4c 21 d6             	and    rsi,r10
ffffffff80017c88:	4c 21 c8             	and    rax,r9
ffffffff80017c8b:	48 29 c7             	sub    rdi,rax
ffffffff80017c8e:	49 19 f7             	sbb    r15,rsi
ffffffff80017c91:	41 83 c6 ff          	add    r14d,0xffffffff
ffffffff80017c95:	75 b9                	jne    ffffffff80017c50 <compiler_rt.udivmod.udivmod__anon_3414+0x190>
ffffffff80017c97:	48 0f a4 ca 01       	shld   rdx,rcx,0x1
ffffffff80017c9c:	48 8d 04 4b          	lea    rax,[rbx+rcx*2]
ffffffff80017ca0:	4d 85 c0             	test   r8,r8
ffffffff80017ca3:	0f 84 83 fe ff ff    	je     ffffffff80017b2c <compiler_rt.udivmod.udivmod__anon_3414+0x6c>
ffffffff80017ca9:	49 89 38             	mov    QWORD PTR [r8],rdi
ffffffff80017cac:	4d 89 78 08          	mov    QWORD PTR [r8+0x8],r15
ffffffff80017cb0:	e9 77 fe ff ff       	jmp    ffffffff80017b2c <compiler_rt.udivmod.udivmod__anon_3414+0x6c>
ffffffff80017cb5:	48 89 d0             	mov    rax,rdx
ffffffff80017cb8:	4c 09 d0             	or     rax,r10
ffffffff80017cbb:	48 c1 e8 20          	shr    rax,0x20
ffffffff80017cbf:	0f 84 b4 00 00 00    	je     ffffffff80017d79 <compiler_rt.udivmod.udivmod__anon_3414+0x2b9>
ffffffff80017cc5:	48 89 d0             	mov    rax,rdx
ffffffff80017cc8:	31 d2                	xor    edx,edx
ffffffff80017cca:	49 f7 f2             	div    r10
ffffffff80017ccd:	4d 85 c0             	test   r8,r8
ffffffff80017cd0:	0f 85 b3 00 00 00    	jne    ffffffff80017d89 <compiler_rt.udivmod.udivmod__anon_3414+0x2c9>
ffffffff80017cd6:	e9 4f fe ff ff       	jmp    ffffffff80017b2a <compiler_rt.udivmod.udivmod__anon_3414+0x6a>
ffffffff80017cdb:	31 d2                	xor    edx,edx
ffffffff80017cdd:	41 f7 f1             	div    r9d
ffffffff80017ce0:	4d 85 c0             	test   r8,r8
ffffffff80017ce3:	0f 84 41 fe ff ff    	je     ffffffff80017b2a <compiler_rt.udivmod.udivmod__anon_3414+0x6a>
ffffffff80017ce9:	49 89 10             	mov    QWORD PTR [r8],rdx
ffffffff80017cec:	49 c7 40 08 00 00 00 	mov    QWORD PTR [r8+0x8],0x0
ffffffff80017cf3:	00 
ffffffff80017cf4:	e9 31 fe ff ff       	jmp    ffffffff80017b2a <compiler_rt.udivmod.udivmod__anon_3414+0x6a>
ffffffff80017cf9:	49 0f bd f2          	bsr    rsi,r10
ffffffff80017cfd:	83 f6 3f             	xor    esi,0x3f
ffffffff80017d00:	48 0f bd ca          	bsr    rcx,rdx
ffffffff80017d04:	83 f1 3f             	xor    ecx,0x3f
ffffffff80017d07:	29 ce                	sub    esi,ecx
ffffffff80017d09:	83 fe 3f             	cmp    esi,0x3f
ffffffff80017d0c:	0f 83 ef fd ff ff    	jae    ffffffff80017b01 <compiler_rt.udivmod.udivmod__anon_3414+0x41>
ffffffff80017d12:	b1 3f                	mov    cl,0x3f
ffffffff80017d14:	40 28 f1             	sub    cl,sil
ffffffff80017d17:	49 89 c3             	mov    r11,rax
ffffffff80017d1a:	49 d3 e3             	shl    r11,cl
ffffffff80017d1d:	48 89 c3             	mov    rbx,rax
ffffffff80017d20:	44 8d 76 01          	lea    r14d,[rsi+0x1]
ffffffff80017d24:	49 89 d7             	mov    r15,rdx
ffffffff80017d27:	44 89 f1             	mov    ecx,r14d
ffffffff80017d2a:	49 d3 ef             	shr    r15,cl
ffffffff80017d2d:	48 0f ad d3          	shrd   rbx,rdx,cl
ffffffff80017d31:	31 c9                	xor    ecx,ecx
ffffffff80017d33:	4c 89 d8             	mov    rax,r11
ffffffff80017d36:	48 89 da             	mov    rdx,rbx
ffffffff80017d39:	e9 fc fe ff ff       	jmp    ffffffff80017c3a <compiler_rt.udivmod.udivmod__anon_3414+0x17a>
ffffffff80017d3e:	45 89 f3             	mov    r11d,r14d
ffffffff80017d41:	41 f7 db             	neg    r11d
ffffffff80017d44:	41 83 e3 3f          	and    r11d,0x3f
ffffffff80017d48:	48 89 c6             	mov    rsi,rax
ffffffff80017d4b:	44 89 d9             	mov    ecx,r11d
ffffffff80017d4e:	48 d3 e6             	shl    rsi,cl
ffffffff80017d51:	41 83 fe 3f          	cmp    r14d,0x3f
ffffffff80017d55:	77 42                	ja     ffffffff80017d99 <compiler_rt.udivmod.udivmod__anon_3414+0x2d9>
ffffffff80017d57:	49 89 d7             	mov    r15,rdx
ffffffff80017d5a:	44 89 f1             	mov    ecx,r14d
ffffffff80017d5d:	49 d3 ef             	shr    r15,cl
ffffffff80017d60:	44 89 d9             	mov    ecx,r11d
ffffffff80017d63:	48 d3 e2             	shl    rdx,cl
ffffffff80017d66:	44 89 f1             	mov    ecx,r14d
ffffffff80017d69:	48 d3 e8             	shr    rax,cl
ffffffff80017d6c:	48 09 c2             	or     rdx,rax
ffffffff80017d6f:	31 c9                	xor    ecx,ecx
ffffffff80017d71:	48 89 f0             	mov    rax,rsi
ffffffff80017d74:	e9 c1 fe ff ff       	jmp    ffffffff80017c3a <compiler_rt.udivmod.udivmod__anon_3414+0x17a>
ffffffff80017d79:	89 d0                	mov    eax,edx
ffffffff80017d7b:	31 d2                	xor    edx,edx
ffffffff80017d7d:	41 f7 f2             	div    r10d
ffffffff80017d80:	4d 85 c0             	test   r8,r8
ffffffff80017d83:	0f 84 a1 fd ff ff    	je     ffffffff80017b2a <compiler_rt.udivmod.udivmod__anon_3414+0x6a>
ffffffff80017d89:	49 89 50 08          	mov    QWORD PTR [r8+0x8],rdx
ffffffff80017d8d:	49 c7 00 00 00 00 00 	mov    QWORD PTR [r8],0x0
ffffffff80017d94:	e9 91 fd ff ff       	jmp    ffffffff80017b2a <compiler_rt.udivmod.udivmod__anon_3414+0x6a>
ffffffff80017d99:	48 89 d7             	mov    rdi,rdx
ffffffff80017d9c:	44 89 d9             	mov    ecx,r11d
ffffffff80017d9f:	48 d3 e7             	shl    rdi,cl
ffffffff80017da2:	44 89 f1             	mov    ecx,r14d
ffffffff80017da5:	48 d3 e8             	shr    rax,cl
ffffffff80017da8:	48 d3 ea             	shr    rdx,cl
ffffffff80017dab:	48 09 f8             	or     rax,rdi
ffffffff80017dae:	45 31 ff             	xor    r15d,r15d
ffffffff80017db1:	48 89 f1             	mov    rcx,rsi
ffffffff80017db4:	e9 81 fe ff ff       	jmp    ffffffff80017c3a <compiler_rt.udivmod.udivmod__anon_3414+0x17a>
ffffffff80017db9:	cc                   	int3
ffffffff80017dba:	cc                   	int3
ffffffff80017dbb:	cc                   	int3
ffffffff80017dbc:	cc                   	int3
ffffffff80017dbd:	cc                   	int3
ffffffff80017dbe:	cc                   	int3
ffffffff80017dbf:	cc                   	int3

ffffffff80017dc0 <__udivti3>:
ffffffff80017dc0:	55                   	push   rbp
ffffffff80017dc1:	48 89 e5             	mov    rbp,rsp
ffffffff80017dc4:	45 31 c0             	xor    r8d,r8d
ffffffff80017dc7:	5d                   	pop    rbp
ffffffff80017dc8:	e9 f3 fc ff ff       	jmp    ffffffff80017ac0 <compiler_rt.udivmod.udivmod__anon_3414>
ffffffff80017dcd:	cc                   	int3
ffffffff80017dce:	cc                   	int3
ffffffff80017dcf:	cc                   	int3

ffffffff80017dd0 <__umodti3>:
ffffffff80017dd0:	55                   	push   rbp
ffffffff80017dd1:	48 89 e5             	mov    rbp,rsp
ffffffff80017dd4:	48 83 ec 10          	sub    rsp,0x10
ffffffff80017dd8:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
ffffffff80017ddc:	e8 df fc ff ff       	call   ffffffff80017ac0 <compiler_rt.udivmod.udivmod__anon_3414>
ffffffff80017de1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80017de5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80017de9:	48 83 c4 10          	add    rsp,0x10
ffffffff80017ded:	5d                   	pop    rbp
ffffffff80017dee:	c3                   	ret
ffffffff80017def:	cc                   	int3

ffffffff80017df0 <__zig_probe_stack>:
ffffffff80017df0:	51                   	push   rcx
ffffffff80017df1:	48 89 c1             	mov    rcx,rax
ffffffff80017df4:	48 81 f9 00 10 00 00 	cmp    rcx,0x1000
ffffffff80017dfb:	72 1c                	jb     ffffffff80017e19 <__zig_probe_stack+0x29>
ffffffff80017dfd:	48 81 ec 00 10 00 00 	sub    rsp,0x1000
ffffffff80017e04:	83 4c 24 10 00       	or     DWORD PTR [rsp+0x10],0x0
ffffffff80017e09:	48 81 e9 00 10 00 00 	sub    rcx,0x1000
ffffffff80017e10:	48 81 f9 00 10 00 00 	cmp    rcx,0x1000
ffffffff80017e17:	77 e4                	ja     ffffffff80017dfd <__zig_probe_stack+0xd>
ffffffff80017e19:	48 29 cc             	sub    rsp,rcx
ffffffff80017e1c:	83 4c 24 10 00       	or     DWORD PTR [rsp+0x10],0x0
ffffffff80017e21:	48 01 c4             	add    rsp,rax
ffffffff80017e24:	59                   	pop    rcx
ffffffff80017e25:	c3                   	ret
ffffffff80017e26:	cc                   	int3
ffffffff80017e27:	cc                   	int3
ffffffff80017e28:	cc                   	int3
ffffffff80017e29:	cc                   	int3
ffffffff80017e2a:	cc                   	int3
ffffffff80017e2b:	cc                   	int3
ffffffff80017e2c:	cc                   	int3
ffffffff80017e2d:	cc                   	int3
ffffffff80017e2e:	cc                   	int3
ffffffff80017e2f:	cc                   	int3

ffffffff80017e30 <memcpy>:
ffffffff80017e30:	55                   	push   rbp
ffffffff80017e31:	48 89 e5             	mov    rbp,rsp
ffffffff80017e34:	48 89 f8             	mov    rax,rdi
ffffffff80017e37:	48 85 d2             	test   rdx,rdx
ffffffff80017e3a:	0f 84 b9 00 00 00    	je     ffffffff80017ef9 <memcpy+0xc9>
ffffffff80017e40:	0f b6 0e             	movzx  ecx,BYTE PTR [rsi]
ffffffff80017e43:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80017e45:	49 89 d0             	mov    r8,rdx
ffffffff80017e48:	49 83 c0 ff          	add    r8,0xffffffffffffffff
ffffffff80017e4c:	0f 84 a7 00 00 00    	je     ffffffff80017ef9 <memcpy+0xc9>
ffffffff80017e52:	48 83 c2 fe          	add    rdx,0xfffffffffffffffe
ffffffff80017e56:	4d 89 c1             	mov    r9,r8
ffffffff80017e59:	49 83 e1 07          	and    r9,0x7
ffffffff80017e5d:	74 35                	je     ffffffff80017e94 <memcpy+0x64>
ffffffff80017e5f:	31 ff                	xor    edi,edi
ffffffff80017e61:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80017e68:	00 00 00 
ffffffff80017e6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80017e70:	0f b6 4c 3e 01       	movzx  ecx,BYTE PTR [rsi+rdi*1+0x1]
ffffffff80017e75:	88 4c 38 01          	mov    BYTE PTR [rax+rdi*1+0x1],cl
ffffffff80017e79:	48 83 c7 01          	add    rdi,0x1
ffffffff80017e7d:	49 39 f9             	cmp    r9,rdi
ffffffff80017e80:	75 ee                	jne    ffffffff80017e70 <memcpy+0x40>
ffffffff80017e82:	49 29 f8             	sub    r8,rdi
ffffffff80017e85:	4c 8d 0c 38          	lea    r9,[rax+rdi*1]
ffffffff80017e89:	48 01 fe             	add    rsi,rdi
ffffffff80017e8c:	48 83 fa 07          	cmp    rdx,0x7
ffffffff80017e90:	73 0b                	jae    ffffffff80017e9d <memcpy+0x6d>
ffffffff80017e92:	eb 65                	jmp    ffffffff80017ef9 <memcpy+0xc9>
ffffffff80017e94:	49 89 c1             	mov    r9,rax
ffffffff80017e97:	48 83 fa 07          	cmp    rdx,0x7
ffffffff80017e9b:	72 5c                	jb     ffffffff80017ef9 <memcpy+0xc9>
ffffffff80017e9d:	31 d2                	xor    edx,edx
ffffffff80017e9f:	90                   	nop
ffffffff80017ea0:	0f b6 4c 16 01       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x1]
ffffffff80017ea5:	41 88 4c 11 01       	mov    BYTE PTR [r9+rdx*1+0x1],cl
ffffffff80017eaa:	0f b6 4c 16 02       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x2]
ffffffff80017eaf:	41 88 4c 11 02       	mov    BYTE PTR [r9+rdx*1+0x2],cl
ffffffff80017eb4:	0f b6 4c 16 03       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x3]
ffffffff80017eb9:	41 88 4c 11 03       	mov    BYTE PTR [r9+rdx*1+0x3],cl
ffffffff80017ebe:	0f b6 4c 16 04       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x4]
ffffffff80017ec3:	41 88 4c 11 04       	mov    BYTE PTR [r9+rdx*1+0x4],cl
ffffffff80017ec8:	0f b6 4c 16 05       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x5]
ffffffff80017ecd:	41 88 4c 11 05       	mov    BYTE PTR [r9+rdx*1+0x5],cl
ffffffff80017ed2:	0f b6 4c 16 06       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x6]
ffffffff80017ed7:	41 88 4c 11 06       	mov    BYTE PTR [r9+rdx*1+0x6],cl
ffffffff80017edc:	0f b6 4c 16 07       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x7]
ffffffff80017ee1:	41 88 4c 11 07       	mov    BYTE PTR [r9+rdx*1+0x7],cl
ffffffff80017ee6:	0f b6 4c 16 08       	movzx  ecx,BYTE PTR [rsi+rdx*1+0x8]
ffffffff80017eeb:	41 88 4c 11 08       	mov    BYTE PTR [r9+rdx*1+0x8],cl
ffffffff80017ef0:	48 83 c2 08          	add    rdx,0x8
ffffffff80017ef4:	49 39 d0             	cmp    r8,rdx
ffffffff80017ef7:	75 a7                	jne    ffffffff80017ea0 <memcpy+0x70>
ffffffff80017ef9:	5d                   	pop    rbp
ffffffff80017efa:	c3                   	ret
ffffffff80017efb:	cc                   	int3
ffffffff80017efc:	cc                   	int3
ffffffff80017efd:	cc                   	int3
ffffffff80017efe:	cc                   	int3
ffffffff80017eff:	cc                   	int3

ffffffff80017f00 <memset>:
ffffffff80017f00:	55                   	push   rbp
ffffffff80017f01:	48 89 e5             	mov    rbp,rsp
ffffffff80017f04:	48 89 f8             	mov    rax,rdi
ffffffff80017f07:	48 85 d2             	test   rdx,rdx
ffffffff80017f0a:	74 74                	je     ffffffff80017f80 <memset+0x80>
ffffffff80017f0c:	4c 8d 42 ff          	lea    r8,[rdx-0x1]
ffffffff80017f10:	48 89 d7             	mov    rdi,rdx
ffffffff80017f13:	48 83 e7 07          	and    rdi,0x7
ffffffff80017f17:	74 22                	je     ffffffff80017f3b <memset+0x3b>
ffffffff80017f19:	31 c9                	xor    ecx,ecx
ffffffff80017f1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80017f20:	40 88 34 08          	mov    BYTE PTR [rax+rcx*1],sil
ffffffff80017f24:	48 83 c1 01          	add    rcx,0x1
ffffffff80017f28:	48 39 cf             	cmp    rdi,rcx
ffffffff80017f2b:	75 f3                	jne    ffffffff80017f20 <memset+0x20>
ffffffff80017f2d:	48 29 ca             	sub    rdx,rcx
ffffffff80017f30:	48 01 c1             	add    rcx,rax
ffffffff80017f33:	49 83 f8 07          	cmp    r8,0x7
ffffffff80017f37:	73 0b                	jae    ffffffff80017f44 <memset+0x44>
ffffffff80017f39:	eb 45                	jmp    ffffffff80017f80 <memset+0x80>
ffffffff80017f3b:	48 89 c1             	mov    rcx,rax
ffffffff80017f3e:	49 83 f8 07          	cmp    r8,0x7
ffffffff80017f42:	72 3c                	jb     ffffffff80017f80 <memset+0x80>
ffffffff80017f44:	31 ff                	xor    edi,edi
ffffffff80017f46:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80017f4d:	00 00 00 
ffffffff80017f50:	40 88 34 39          	mov    BYTE PTR [rcx+rdi*1],sil
ffffffff80017f54:	40 88 74 39 01       	mov    BYTE PTR [rcx+rdi*1+0x1],sil
ffffffff80017f59:	40 88 74 39 02       	mov    BYTE PTR [rcx+rdi*1+0x2],sil
ffffffff80017f5e:	40 88 74 39 03       	mov    BYTE PTR [rcx+rdi*1+0x3],sil
ffffffff80017f63:	40 88 74 39 04       	mov    BYTE PTR [rcx+rdi*1+0x4],sil
ffffffff80017f68:	40 88 74 39 05       	mov    BYTE PTR [rcx+rdi*1+0x5],sil
ffffffff80017f6d:	40 88 74 39 06       	mov    BYTE PTR [rcx+rdi*1+0x6],sil
ffffffff80017f72:	40 88 74 39 07       	mov    BYTE PTR [rcx+rdi*1+0x7],sil
ffffffff80017f77:	48 83 c7 08          	add    rdi,0x8
ffffffff80017f7b:	48 39 fa             	cmp    rdx,rdi
ffffffff80017f7e:	75 d0                	jne    ffffffff80017f50 <memset+0x50>
ffffffff80017f80:	5d                   	pop    rbp
ffffffff80017f81:	c3                   	ret
